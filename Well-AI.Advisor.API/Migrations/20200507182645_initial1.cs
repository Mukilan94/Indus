using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace WellAI.Advisor.API.Migrations
{
    public partial class initial1 : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AttachmentObjectReferences",
                columns: table => new
                {
                    uidRef = table.Column<string>(nullable: false),
                    Objects = table.Column<string>(nullable: true),
                    text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AttachmentObjectReferences", x => x.uidRef);
                });

            migrationBuilder.CreateTable(
                name: "AttchmentCommonDatas",
                columns: table => new
                {
                    CommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    dTimCreation = table.Column<DateTime>(nullable: false),
                    dTimLastChange = table.Column<DateTime>(nullable: false),
                    itemState = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AttchmentCommonDatas", x => x.CommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "BharunActDoglegMxs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunActDoglegMxs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunActDoglegs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunActDoglegs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunAziBottoms",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunAziBottoms", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunAziTops",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunAziTops", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunCommonDatas",
                columns: table => new
                {
                    CommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunCommonDatas", x => x.CommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "BharunCTimCircs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunCTimCircs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunCTimDrillRots",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunCTimDrillRots", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunCTimDrillSlids",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunCTimDrillSlids", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunCTimHolds",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunCTimHolds", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunCTimReams",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunCTimReams", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunCTimSteerings",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunCTimSteerings", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunDistDrillRots",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunDistDrillRots", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunDistDrillSlids",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunDistDrillSlids", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunDistHolds",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunDistHolds", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunDistReams",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunDistReams", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunDistSteerings",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunDistSteerings", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunETimOpBits",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunETimOpBits", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunFlowrateBits",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunFlowrateBits", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunFlowratePumps",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunFlowratePumps", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunHkldDns",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunHkldDns", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunHkldRots",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunHkldRots", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunHkldUps",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunHkldUps", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunInclMns",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunInclMns", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunInclMxs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunInclMxs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunInclStarts",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunInclStarts", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunInclStops",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunInclStops", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunMdHoleStarts",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunMdHoleStarts", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunMdHoleStops",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunMdHoleStops", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunOverPulls",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunOverPulls", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunPlanDoglegs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunPlanDoglegs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunPowBits",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunPowBits", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunPresDropBits",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunPresDropBits", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunPresPumpAvs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunPresPumpAvs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunRopAvs",
                columns: table => new
                {
                    BharunRopAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunRopAvs", x => x.BharunRopAvId);
                });

            migrationBuilder.CreateTable(
                name: "BharunRopMns",
                columns: table => new
                {
                    BharunRopMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunRopMns", x => x.BharunRopMnId);
                });

            migrationBuilder.CreateTable(
                name: "BharunRopMxs",
                columns: table => new
                {
                    BharunRopMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunRopMxs", x => x.BharunRopMxId);
                });

            migrationBuilder.CreateTable(
                name: "BharunRpmAvDhs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunRpmAvDhs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunRpmAvs",
                columns: table => new
                {
                    BharunRpmAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunRpmAvs", x => x.BharunRpmAvId);
                });

            migrationBuilder.CreateTable(
                name: "BharunRpmMns",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunRpmMns", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunRpmMxs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunRpmMxs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunSlackOff",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunSlackOff", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunTempMudDhMxs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunTempMudDhMxs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunTqDhAvs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunTqDhAvs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunTqOffBotAvs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunTqOffBotAvs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunTqOnBotAvs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunTqOnBotAvs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunTqOnBotMns",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunTqOnBotMns", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunTqOnBotMxs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunTqOnBotMxs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunTubulars",
                columns: table => new
                {
                    UidRef = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunTubulars", x => x.UidRef);
                });

            migrationBuilder.CreateTable(
                name: "BharunVelNozzleAvs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunVelNozzleAvs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunWobAvDhs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunWobAvDhs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunWobAvs",
                columns: table => new
                {
                    BharunWobAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunWobAvs", x => x.BharunWobAvId);
                });

            migrationBuilder.CreateTable(
                name: "BharunWobMns",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunWobMns", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunWobMxs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunWobMxs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunWtAboveJars",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunWtAboveJars", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunWtBelowJars",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunWtBelowJars", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "BharunWtMuds",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunWtMuds", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "CementJobAdditives",
                columns: table => new
                {
                    AdditiveId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobAdditives", x => x.AdditiveId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobCblPress",
                columns: table => new
                {
                    CblPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobCblPress", x => x.CblPresId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobCommonDatas",
                columns: table => new
                {
                    CommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobCommonDatas", x => x.CommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobConcentrations",
                columns: table => new
                {
                    ConcentrationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobConcentrations", x => x.ConcentrationId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobConsTestThickenings",
                columns: table => new
                {
                    ConsTestThickeningId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobConsTestThickenings", x => x.ConsTestThickeningId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobDensAdds",
                columns: table => new
                {
                    DensAddId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobDensAdds", x => x.DensAddId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobDensAtPress",
                columns: table => new
                {
                    DensAtPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobDensAtPress", x => x.DensAtPresId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobDensBaseFluids",
                columns: table => new
                {
                    DensBaseFluidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobDensBaseFluids", x => x.DensBaseFluidId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobDensConstGasFoams",
                columns: table => new
                {
                    DensConstGasFoamId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobDensConstGasFoams", x => x.DensConstGasFoamId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobDensConstGasMethods",
                columns: table => new
                {
                    DensConstGasMethodId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobDensConstGasMethods", x => x.DensConstGasMethodId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobDensDisplaceFluids",
                columns: table => new
                {
                    DensDisplaceFluidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobDensDisplaceFluids", x => x.DensDisplaceFluidId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobDensDryBlends",
                columns: table => new
                {
                    DensDryBlendId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobDensDryBlends", x => x.DensDryBlendId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobDensitys",
                columns: table => new
                {
                    DensityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobDensitys", x => x.DensityId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobDiaTailPipes",
                columns: table => new
                {
                    DiaTailPipeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobDiaTailPipes", x => x.DiaTailPipeId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobETimBeforeTests",
                columns: table => new
                {
                    ETimBeforeTestId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobETimBeforeTests", x => x.ETimBeforeTestId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobETimCementLogs",
                columns: table => new
                {
                    ETimCementLogId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobETimCementLogs", x => x.ETimCementLogId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobETimComprStren1s",
                columns: table => new
                {
                    ETimComprStren1Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobETimComprStren1s", x => x.ETimComprStren1Id);
                });

            migrationBuilder.CreateTable(
                name: "CementJobETimComprStren2s",
                columns: table => new
                {
                    ETimComprStren2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobETimComprStren2s", x => x.ETimComprStren2Id);
                });

            migrationBuilder.CreateTable(
                name: "CementJobETimMudCirculations",
                columns: table => new
                {
                    ETimMudCirculationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobETimMudCirculations", x => x.ETimMudCirculationId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobETimPitStarts",
                columns: table => new
                {
                    ETimPitStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobETimPitStarts", x => x.ETimPitStartId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobETimPresHelds",
                columns: table => new
                {
                    ETimPresHeldId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobETimPresHelds", x => x.ETimPresHeldId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobETimPumps",
                columns: table => new
                {
                    ETimPumpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobETimPumps", x => x.ETimPumpId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobETimShutdowns",
                columns: table => new
                {
                    ETimShutdownId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobETimShutdowns", x => x.ETimShutdownId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobETimTests",
                columns: table => new
                {
                    ETimTestId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobETimTests", x => x.ETimTestId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobETimThickenings",
                columns: table => new
                {
                    ETimThickeningId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobETimThickenings", x => x.ETimThickeningId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobExcessPcs",
                columns: table => new
                {
                    ExcessPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobExcessPcs", x => x.ExcessPcId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobFlowrateBreakDowns",
                columns: table => new
                {
                    FlowrateBreakDownId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobFlowrateBreakDowns", x => x.FlowrateBreakDownId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobFlowrateDisplaceAvs",
                columns: table => new
                {
                    FlowrateDisplaceAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobFlowrateDisplaceAvs", x => x.FlowrateDisplaceAvId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobFlowrateDisplaceMxs",
                columns: table => new
                {
                    FlowrateDisplaceMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobFlowrateDisplaceMxs", x => x.FlowrateDisplaceMxId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobFlowrateEnds",
                columns: table => new
                {
                    FlowrateEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobFlowrateEnds", x => x.FlowrateEndId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobFlowrateMudCircs",
                columns: table => new
                {
                    CementJobFlowrateMudCircId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobFlowrateMudCircs", x => x.CementJobFlowrateMudCircId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobFlowratePumpEnds",
                columns: table => new
                {
                    FlowratePumpEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobFlowratePumpEnds", x => x.FlowratePumpEndId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobFlowratePumpStarts",
                columns: table => new
                {
                    FlowratePumpStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobFlowratePumpStarts", x => x.FlowratePumpStartId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobFlowrateSqueezeAvs",
                columns: table => new
                {
                    FlowrateSqueezeAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobFlowrateSqueezeAvs", x => x.FlowrateSqueezeAvId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobFlowrateSqueezeMxs",
                columns: table => new
                {
                    FlowrateSqueezeMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobFlowrateSqueezeMxs", x => x.FlowrateSqueezeMxId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobFormPits",
                columns: table => new
                {
                    FormPitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobFormPits", x => x.FormPitId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobGel10MinReadings",
                columns: table => new
                {
                    Gel10MinReadingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobGel10MinReadings", x => x.Gel10MinReadingId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobGel10Mins",
                columns: table => new
                {
                    Gel10MinId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobGel10Mins", x => x.Gel10MinId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobGel10MinStrengths",
                columns: table => new
                {
                    Gel10MinStrengthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobGel10MinStrengths", x => x.Gel10MinStrengthId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobGel10SecReadings",
                columns: table => new
                {
                    Gel10SecReadingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobGel10SecReadings", x => x.Gel10SecReadingId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobGel10Secs",
                columns: table => new
                {
                    Gel10SecId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobGel10Secs", x => x.Gel10SecId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobGel10SecStrengths",
                columns: table => new
                {
                    Gel10SecStrengthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobGel10SecStrengths", x => x.Gel10SecStrengthId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobGel1MinReadings",
                columns: table => new
                {
                    Gel1MinReadingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobGel1MinReadings", x => x.Gel1MinReadingId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobGel1MinStrengths",
                columns: table => new
                {
                    Gel1MinStrengthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobGel1MinStrengths", x => x.Gel1MinStrengthId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobKs",
                columns: table => new
                {
                    KId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobKs", x => x.KId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobLenPipeRecipStrokes",
                columns: table => new
                {
                    LenPipeRecipStrokeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobLenPipeRecipStrokes", x => x.LenPipeRecipStrokeId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobLinerLaps",
                columns: table => new
                {
                    LinerLapId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobLinerLaps", x => x.LinerLapId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobLinerTops",
                columns: table => new
                {
                    LinerTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobLinerTops", x => x.LinerTopId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMassDryBlends",
                columns: table => new
                {
                    MassDryBlendId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMassDryBlends", x => x.MassDryBlendId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMassSackDryBlends",
                columns: table => new
                {
                    MassSackDryBlendId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMassSackDryBlends", x => x.MassSackDryBlendId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdBottoms",
                columns: table => new
                {
                    MdBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdBottoms", x => x.MdBottomId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdCementTops",
                columns: table => new
                {
                    MdCementTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdCementTops", x => x.MdCementTopId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdCircOuts",
                columns: table => new
                {
                    MdCircOutId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdCircOuts", x => x.MdCircOutId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdCoilTbgs",
                columns: table => new
                {
                    MdCoilTbgId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdCoilTbgs", x => x.MdCoilTbgId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdDVTools",
                columns: table => new
                {
                    JobMdDVToolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdDVTools", x => x.JobMdDVToolId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdFluidBottoms",
                columns: table => new
                {
                    MdFluidBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdFluidBottoms", x => x.MdFluidBottomId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdFluidTops",
                columns: table => new
                {
                    MdFluidTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdFluidTops", x => x.MdFluidTopId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdHoles",
                columns: table => new
                {
                    MdHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdHoles", x => x.MdHoleId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdPlugBots",
                columns: table => new
                {
                    MdPlugBotId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdPlugBots", x => x.MdPlugBotId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdPlugTops",
                columns: table => new
                {
                    MdPlugTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdPlugTops", x => x.MdPlugTopId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdShoes",
                columns: table => new
                {
                    MdShoeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdShoes", x => x.MdShoeId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdSqueezes",
                columns: table => new
                {
                    MdSqueezeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdSqueezes", x => x.MdSqueezeId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdStrings",
                columns: table => new
                {
                    MdStringId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdStrings", x => x.MdStringId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdStringSets",
                columns: table => new
                {
                    MdStringSetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdStringSets", x => x.MdStringSetId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdTools",
                columns: table => new
                {
                    MdToolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdTools", x => x.MdToolId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdTops",
                columns: table => new
                {
                    MdTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdTops", x => x.MdTopId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobMdWaters",
                columns: table => new
                {
                    MdWaterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobMdWaters", x => x.MdWaterId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobNs",
                columns: table => new
                {
                    NId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobNs", x => x.NId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobOverPulls",
                columns: table => new
                {
                    OverPullId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobOverPulls", x => x.OverPullId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPcFreeWaters",
                columns: table => new
                {
                    PcFreeWaterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPcFreeWaters", x => x.PcFreeWaterId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresBackPressures",
                columns: table => new
                {
                    PresBackPressureId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresBackPressures", x => x.PresBackPressureId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresBacks",
                columns: table => new
                {
                    PresBackId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresBacks", x => x.PresBackId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresBreakDowns",
                columns: table => new
                {
                    PresBreakDownId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresBreakDowns", x => x.PresBreakDownId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresBumps",
                columns: table => new
                {
                    PresBumpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresBumps", x => x.PresBumpId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresCoilTbgEnds",
                columns: table => new
                {
                    PresCoilTbgEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresCoilTbgEnds", x => x.PresCoilTbgEndId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresCoilTbgStarts",
                columns: table => new
                {
                    PresCoilTbgStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresCoilTbgStarts", x => x.PresCoilTbgStartId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresComprStren1s",
                columns: table => new
                {
                    PresComprStren1Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresComprStren1s", x => x.PresComprStren1Id);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresComprStren2s",
                columns: table => new
                {
                    PresComprStren2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresComprStren2s", x => x.PresComprStren2Id);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresCsgEnds",
                columns: table => new
                {
                    PresCsgEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresCsgEnds", x => x.PresCsgEndId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresCsgStarts",
                columns: table => new
                {
                    PresCsgStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresCsgStarts", x => x.PresCsgStartId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresDisplaces",
                columns: table => new
                {
                    PresDisplaceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresDisplaces", x => x.PresDisplaceId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresHelds",
                columns: table => new
                {
                    PresHeldId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresHelds", x => x.PresHeldId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresMudCircs",
                columns: table => new
                {
                    PresMudCircId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresMudCircs", x => x.PresMudCircId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresPriorBumps",
                columns: table => new
                {
                    PresPriorBumpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresPriorBumps", x => x.PresPriorBumpId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresSqueezeAvs",
                columns: table => new
                {
                    PresSqueezeAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresSqueezeAvs", x => x.PresSqueezeAvId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresSqueezeEnds",
                columns: table => new
                {
                    PresSqueezeEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresSqueezeEnds", x => x.PresSqueezeEndId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresSqueezes",
                columns: table => new
                {
                    PresSqueezeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresSqueezes", x => x.PresSqueezeId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresTbgEnds",
                columns: table => new
                {
                    PresTbgEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresTbgEnds", x => x.PresTbgEndId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresTbgStarts",
                columns: table => new
                {
                    PresTbgStId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresTbgStarts", x => x.PresTbgStId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresTestFluidLosss",
                columns: table => new
                {
                    PresTestFluidLossId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresTestFluidLosss", x => x.PresTestFluidLossId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresTests",
                columns: table => new
                {
                    PresTestId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresTests", x => x.PresTestId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPresTestThickenings",
                columns: table => new
                {
                    PresTestThickeningId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPresTestThickenings", x => x.PresTestThickeningId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobPvMuds",
                columns: table => new
                {
                    PvMudId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobPvMuds", x => x.PvMudId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobRatePumps",
                columns: table => new
                {
                    RatePumpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobRatePumps", x => x.RatePumpId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobRatioConstGasMethodAvs",
                columns: table => new
                {
                    RatioConstGasMethodAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobRatioConstGasMethodAvs", x => x.RatioConstGasMethodAvId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobRatioConstGasMethodEnds",
                columns: table => new
                {
                    RatioConstGasMethodEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobRatioConstGasMethodEnds", x => x.RatioConstGasMethodEndId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobRatioConstGasMethodStarts",
                columns: table => new
                {
                    RatioConstGasMethodStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobRatioConstGasMethodStarts", x => x.RatioConstGasMethodStartId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobRatioMixWaters",
                columns: table => new
                {
                    RatioMixWaterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobRatioMixWaters", x => x.RatioMixWaterId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobRpmPipeRecips",
                columns: table => new
                {
                    RpmPipeRecipId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobRpmPipeRecips", x => x.RpmPipeRecipId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobRpmPipes",
                columns: table => new
                {
                    RpmPipeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobRpmPipes", x => x.RpmPipeId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobSlackOffs",
                columns: table => new
                {
                    SlackOffId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobSlackOffs", x => x.SlackOffId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobSolidVolumeFractions",
                columns: table => new
                {
                    SolidVolumeFractionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobSolidVolumeFractions", x => x.SolidVolumeFractionId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTempBHCTs",
                columns: table => new
                {
                    TempBHCTId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTempBHCTs", x => x.TempBHCTId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTempBHSTs",
                columns: table => new
                {
                    TempBHSTId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTempBHSTs", x => x.TempBHSTId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTempComprStren1s",
                columns: table => new
                {
                    TempComprStren1Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTempComprStren1s", x => x.TempComprStren1Id);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTempComprStren2s",
                columns: table => new
                {
                    TempComprStren2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTempComprStren2s", x => x.TempComprStren2Id);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTempFluidLosss",
                columns: table => new
                {
                    TempFluidLossId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTempFluidLosss", x => x.TempFluidLossId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTempFreeWaters",
                columns: table => new
                {
                    TempFreeWaterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTempFreeWaters", x => x.TempFreeWaterId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTempThickenings",
                columns: table => new
                {
                    TempThickeningId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTempThickenings", x => x.TempThickeningId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTestNegativeEmws",
                columns: table => new
                {
                    TestNegativeEmwId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTestNegativeEmws", x => x.TestNegativeEmwId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTestPositiveEmws",
                columns: table => new
                {
                    TestPositiveEmwId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTestPositiveEmws", x => x.TestPositiveEmwId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTimeFluidLosss",
                columns: table => new
                {
                    TimeFluidLossId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTimeFluidLosss", x => x.TimeFluidLossId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTqInitPipeRots",
                columns: table => new
                {
                    TqInitPipeRotId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTqInitPipeRots", x => x.TqInitPipeRotId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTqPipeAvs",
                columns: table => new
                {
                    TqPipeAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTqPipeAvs", x => x.TqPipeAvId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTqPipeMxs",
                columns: table => new
                {
                    TqPipeMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTqPipeMxs", x => x.TqPipeMxId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTvdShoes",
                columns: table => new
                {
                    TvdShoeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTvdShoes", x => x.TvdShoeId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobTvdStringSets",
                columns: table => new
                {
                    TvdStringSetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobTvdStringSets", x => x.TvdStringSetId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVisFunnelMuds",
                columns: table => new
                {
                    VisFunnelMudId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVisFunnelMuds", x => x.VisFunnelMudId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobViss",
                columns: table => new
                {
                    VisId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobViss", x => x.VisId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolAPIFluidLosss",
                columns: table => new
                {
                    VolAPIFluidLossId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolAPIFluidLosss", x => x.VolAPIFluidLossId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolCements",
                columns: table => new
                {
                    VolCementId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolCements", x => x.VolCementId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolCircPriors",
                columns: table => new
                {
                    VolCircPriorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolCircPriors", x => x.VolCircPriorId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolCsgIns",
                columns: table => new
                {
                    VolCsgInId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolCsgIns", x => x.VolCsgInId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolCsgOuts",
                columns: table => new
                {
                    VolCsgOutId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolCsgOuts", x => x.VolCsgOutId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolDisplaceFluids",
                columns: table => new
                {
                    VolDisplaceFluidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolDisplaceFluids", x => x.VolDisplaceFluidId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolExcesss",
                columns: table => new
                {
                    VolExcessId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolExcesss", x => x.VolExcessId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolFluids",
                columns: table => new
                {
                    VolFluidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolFluids", x => x.VolFluidId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolGasFoams",
                columns: table => new
                {
                    VolGasFoamId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolGasFoams", x => x.VolGasFoamId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolMudLosts",
                columns: table => new
                {
                    VolMudLostId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolMudLosts", x => x.VolMudLostId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolOthers",
                columns: table => new
                {
                    VolOtherId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolOthers", x => x.VolOtherId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolPumpeds",
                columns: table => new
                {
                    VolPumpedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolPumpeds", x => x.VolPumpedId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolPumps",
                columns: table => new
                {
                    VolPumpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolPumps", x => x.VolPumpId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolReserveds",
                columns: table => new
                {
                    VolReservedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolReserveds", x => x.VolReservedId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolReturnss",
                columns: table => new
                {
                    VolReturnsId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolReturnss", x => x.VolReturnsId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolTestFluidLosss",
                columns: table => new
                {
                    VolTestFluidLossId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolTestFluidLosss", x => x.VolTestFluidLossId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolTotSlurrys",
                columns: table => new
                {
                    VolTotSlurryId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolTotSlurrys", x => x.VolTotSlurryId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolWaters",
                columns: table => new
                {
                    VolWaterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolWaters", x => x.VolWaterId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobVolYields",
                columns: table => new
                {
                    VolYieldId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobVolYields", x => x.VolYieldId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobWocs",
                columns: table => new
                {
                    WocId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobWocs", x => x.WocId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobWtMuds",
                columns: table => new
                {
                    WtMudId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobWtMuds", x => x.WtMudId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobYpMuds",
                columns: table => new
                {
                    YpMudId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobYpMuds", x => x.YpMudId);
                });

            migrationBuilder.CreateTable(
                name: "CementJobYps",
                columns: table => new
                {
                    JobYpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobYps", x => x.JobYpId);
                });

            migrationBuilder.CreateTable(
                name: "ChangeLogCommonData",
                columns: table => new
                {
                    CommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTimCreation = table.Column<DateTime>(nullable: false),
                    DTimLastChange = table.Column<DateTime>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ChangeLogCommonData", x => x.CommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "ChangeLogEndIndexs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ChangeLogEndIndexs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "ChangeLogStartIndexs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ChangeLogStartIndexs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "Configuration",
                columns: table => new
                {
                    Index = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FriendlyName = table.Column<string>(nullable: false),
                    ConstantName = table.Column<string>(nullable: false),
                    Value = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Configuration", x => x.Index);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreAcetylenes",
                columns: table => new
                {
                    AcetyleneId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreAcetylenes", x => x.AcetyleneId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreCalcites",
                columns: table => new
                {
                    CalciteId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreCalcites", x => x.CalciteId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreCalcStabs",
                columns: table => new
                {
                    CalcStabId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreCalcStabs", x => x.CalcStabId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreCecs",
                columns: table => new
                {
                    CecId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreCecs", x => x.CecId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreCo2Avs",
                columns: table => new
                {
                    Co2AvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreCo2Avs", x => x.Co2AvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreCo2Mns",
                columns: table => new
                {
                    Co2MnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreCo2Mns", x => x.Co2MnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreCo2Mxs",
                columns: table => new
                {
                    Co2MxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreCo2Mxs", x => x.Co2MxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreCommonDatas",
                columns: table => new
                {
                    CommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreCommonDatas", x => x.CommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreDensBulks",
                columns: table => new
                {
                    DensBulkId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreDensBulks", x => x.DensBulkId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreDensShales",
                columns: table => new
                {
                    DensShaleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreDensShales", x => x.DensShaleId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreDiaBits",
                columns: table => new
                {
                    DiaBitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreDiaBits", x => x.DiaBitId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreDiaCores",
                columns: table => new
                {
                    DiaCoreId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreDiaCores", x => x.DiaCoreId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreDolomites",
                columns: table => new
                {
                    DolomiteId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreDolomites", x => x.DolomiteId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreEcdTdAvs",
                columns: table => new
                {
                    EcdTdAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreEcdTdAvs", x => x.EcdTdAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreEpentAvs",
                columns: table => new
                {
                    EpentAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreEpentAvs", x => x.EpentAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreEpentMns",
                columns: table => new
                {
                    EpentMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreEpentMns", x => x.EpentMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreEpentMxs",
                columns: table => new
                {
                    EpentMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreEpentMxs", x => x.EpentMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreEthAvs",
                columns: table => new
                {
                    EthAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreEthAvs", x => x.EthAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreEthMns",
                columns: table => new
                {
                    EthMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreEthMns", x => x.EthMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreEthMxs",
                columns: table => new
                {
                    EthMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreEthMxs", x => x.EthMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreETimChromCycles",
                columns: table => new
                {
                    ETimChromCycleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreETimChromCycles", x => x.ETimChromCycleId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreGasAvs",
                columns: table => new
                {
                    GasAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreGasAvs", x => x.GasAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreGasBackgnds",
                columns: table => new
                {
                    GasBackgndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreGasBackgnds", x => x.GasBackgndId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreGasConAvs",
                columns: table => new
                {
                    GasConAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreGasConAvs", x => x.GasConAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreGasConMxs",
                columns: table => new
                {
                    GasConMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreGasConMxs", x => x.GasConMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreGasPeaks",
                columns: table => new
                {
                    GasPeakId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreGasPeaks", x => x.GasPeakId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreGasTrips",
                columns: table => new
                {
                    GasConTripId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreGasTrips", x => x.GasConTripId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreH2sAvs",
                columns: table => new
                {
                    H2sAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreH2sAvs", x => x.H2sAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreH2sMns",
                columns: table => new
                {
                    H2sMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreH2sMns", x => x.H2sMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreH2sMxs",
                columns: table => new
                {
                    H2sMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreH2sMxs", x => x.H2sMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreIbutAvs",
                columns: table => new
                {
                    IbutAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreIbutAvs", x => x.IbutAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreIbutMns",
                columns: table => new
                {
                    IbutMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreIbutMns", x => x.IbutMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreIbutMxs",
                columns: table => new
                {
                    IbutMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreIbutMxs", x => x.IbutMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreIhexAvs",
                columns: table => new
                {
                    IhexAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreIhexAvs", x => x.IhexAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreIhexMns",
                columns: table => new
                {
                    IhexMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreIhexMns", x => x.IhexMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreIhexMxs",
                columns: table => new
                {
                    IhexMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreIhexMxs", x => x.IhexMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreInclHoles",
                columns: table => new
                {
                    InclHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreInclHoles", x => x.InclHoleId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreIpentAvs",
                columns: table => new
                {
                    IpentAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreIpentAvs", x => x.IpentAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreIpentMns",
                columns: table => new
                {
                    IpentMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreIpentMns", x => x.IpentMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreIpentMxs",
                columns: table => new
                {
                    IpentMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreIpentMxs", x => x.IpentMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreLenBarrels",
                columns: table => new
                {
                    LenBarrelId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreLenBarrels", x => x.LenBarrelId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreLenCoreds",
                columns: table => new
                {
                    LenCoredId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreLenCoreds", x => x.LenCoredId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreLenPlugs",
                columns: table => new
                {
                    LenPlugId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreLenPlugs", x => x.LenPlugId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreLenRecovereds",
                columns: table => new
                {
                    LenRecoveredId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreLenRecovereds", x => x.LenRecoveredId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreLithPcs",
                columns: table => new
                {
                    LithPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreLithPcs", x => x.LithPcId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreMdBottoms",
                columns: table => new
                {
                    MdBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreMdBottoms", x => x.MdBottomId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreMdCoreBottoms",
                columns: table => new
                {
                    MdCoreBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreMdCoreBottoms", x => x.MdCoreBottomId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreMdCoreTops",
                columns: table => new
                {
                    MdCoreTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreMdCoreTops", x => x.MdCoreTopId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreMdTops",
                columns: table => new
                {
                    MdTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreMdTops", x => x.MdTopId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreMethAvs",
                columns: table => new
                {
                    MethAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreMethAvs", x => x.MethAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreMethMns",
                columns: table => new
                {
                    MethMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreMethMns", x => x.MethMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreMethMxs",
                columns: table => new
                {
                    MethMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreMethMxs", x => x.MethMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreNatFlorPcs",
                columns: table => new
                {
                    NatFlorPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreNatFlorPcs", x => x.NatFlorPcId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreNbutAvs",
                columns: table => new
                {
                    NbutAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreNbutAvs", x => x.NbutAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreNbutMns",
                columns: table => new
                {
                    NbutMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreNbutMns", x => x.NbutMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreNbutMxs",
                columns: table => new
                {
                    NbutMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreNbutMxs", x => x.NbutMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreNhexAvs",
                columns: table => new
                {
                    NhexAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreNhexAvs", x => x.NhexAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreNhexMns",
                columns: table => new
                {
                    NhexMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreNhexMns", x => x.NhexMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreNhexMxs",
                columns: table => new
                {
                    NhexMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreNhexMxs", x => x.NhexMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreNpentAvs",
                columns: table => new
                {
                    NpentAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreNpentAvs", x => x.NpentAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreNpentMns",
                columns: table => new
                {
                    NpentMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreNpentMns", x => x.NpentMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreNpentMxs",
                columns: table => new
                {
                    NpentMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreNpentMxs", x => x.NpentMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCorePropAvs",
                columns: table => new
                {
                    PropAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCorePropAvs", x => x.PropAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCorePropMns",
                columns: table => new
                {
                    PropMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCorePropMns", x => x.PropMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCorePropMxs",
                columns: table => new
                {
                    PropMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCorePropMxs", x => x.PropMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreRecoverPcs",
                columns: table => new
                {
                    LenRecoveredId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreRecoverPcs", x => x.LenRecoveredId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreRopAvs",
                columns: table => new
                {
                    RopAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreRopAvs", x => x.RopAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreRopMns",
                columns: table => new
                {
                    RopMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreRopMns", x => x.RopMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreRopMxs",
                columns: table => new
                {
                    RopMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreRopMxs", x => x.RopMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreRpmAvs",
                columns: table => new
                {
                    RpmAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreRpmAvs", x => x.RpmAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreSizeMns",
                columns: table => new
                {
                    SizeMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreSizeMns", x => x.SizeMnId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreSizeMxs",
                columns: table => new
                {
                    SizeMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreSizeMxs", x => x.SizeMxId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreStainPcs",
                columns: table => new
                {
                    StainPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreStainPcs", x => x.StainPcId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreTqAvs",
                columns: table => new
                {
                    TqAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreTqAvs", x => x.TqAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreTvdBases",
                columns: table => new
                {
                    TvdBaseId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreTvdBases", x => x.TvdBaseId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreTvdTops",
                columns: table => new
                {
                    TvdTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreTvdTops", x => x.TvdTopId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreWobAvs",
                columns: table => new
                {
                    WobAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreWobAvs", x => x.WobAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreWtMudAvs",
                columns: table => new
                {
                    WtMudAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreWtMudAvs", x => x.WtMudAvId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreWtMudIns",
                columns: table => new
                {
                    WtMudInId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreWtMudIns", x => x.WtMudInId);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreWtMudOuts",
                columns: table => new
                {
                    WtMudOutId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreWtMudOuts", x => x.WtMudOutId);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemAxisDirection",
                columns: table => new
                {
                    CodeSpace = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemAxisDirection", x => x.CodeSpace);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemGreenwichLongitude",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemGreenwichLongitude", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemIdentifier",
                columns: table => new
                {
                    CodeSpace = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemIdentifier", x => x.CodeSpace);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemInverseFlattening",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemInverseFlattening", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemNameCRS",
                columns: table => new
                {
                    Code = table.Column<string>(nullable: false),
                    NamingSystem = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemNameCRS", x => x.Code);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemSemiMajorAxis",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemSemiMajorAxis", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemValueOfParameter",
                columns: table => new
                {
                    ValueOfParameterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(nullable: true),
                    Href = table.Column<string>(nullable: true),
                    Xlink = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemValueOfParameter", x => x.ValueOfParameterId);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemValues",
                columns: table => new
                {
                    ValueId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemValues", x => x.ValueId);
                });

            migrationBuilder.CreateTable(
                name: "DiaPlug",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DiaPlug", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportAzi",
                columns: table => new
                {
                    AziId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportAzi", x => x.AziId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportCarbonDioxide",
                columns: table => new
                {
                    CarbonDioxideId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportCarbonDioxide", x => x.CarbonDioxideId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportChloride",
                columns: table => new
                {
                    ChlorideId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportChloride", x => x.ChlorideId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportChokeOrificeSize",
                columns: table => new
                {
                    ChokeOrificeSizeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportChokeOrificeSize", x => x.ChokeOrificeSizeId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportDefaultDatum",
                columns: table => new
                {
                    DefaultDatumId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportDefaultDatum", x => x.DefaultDatumId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportDensity",
                columns: table => new
                {
                    DensityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportDensity", x => x.DensityId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportDensityGas",
                columns: table => new
                {
                    DensityGasId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportDensityGas", x => x.DensityGasId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportDensityHC",
                columns: table => new
                {
                    DensityHCId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportDensityHC", x => x.DensityHCId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportDensityOil",
                columns: table => new
                {
                    DensityOilId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportDensityOil", x => x.DensityOilId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportDensityWater",
                columns: table => new
                {
                    DensityWaterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportDensityWater", x => x.DensityWaterId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportDiaBit",
                columns: table => new
                {
                    DiaBitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportDiaBit", x => x.DiaBitId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportDiaCsgLast",
                columns: table => new
                {
                    DiaCsgLastId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportDiaCsgLast", x => x.DiaCsgLastId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportDiaHole",
                columns: table => new
                {
                    DiaHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportDiaHole", x => x.DiaHoleId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportDiaPilot",
                columns: table => new
                {
                    DiaPilotId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportDiaPilot", x => x.DiaPilotId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportDistDrill",
                columns: table => new
                {
                    DistDrillId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportDistDrill", x => x.DistDrillId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportElevation",
                columns: table => new
                {
                    ElevationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Datum = table.Column<string>(nullable: true),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportElevation", x => x.ElevationId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportEquivalentMudWeight",
                columns: table => new
                {
                    EquivalentMudWeightId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportEquivalentMudWeight", x => x.EquivalentMudWeightId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportEth",
                columns: table => new
                {
                    EthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportEth", x => x.EthId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportETimLost",
                columns: table => new
                {
                    ETimLostId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportETimLost", x => x.ETimLostId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportETimMissProduction",
                columns: table => new
                {
                    ETimMissProductionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportETimMissProduction", x => x.ETimMissProductionId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportETimStatic",
                columns: table => new
                {
                    ETimStaticId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportETimStatic", x => x.ETimStaticId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportExtendedReport",
                columns: table => new
                {
                    ExtendedReportId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportExtendedReport", x => x.ExtendedReportId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportFlowRateGas",
                columns: table => new
                {
                    FlowRateGasId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportFlowRateGas", x => x.FlowRateGasId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportFlowRateOil",
                columns: table => new
                {
                    FlowRateOilId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportFlowRateOil", x => x.FlowRateOilId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportFlowRateWater",
                columns: table => new
                {
                    FlowRateWaterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportFlowRateWater", x => x.FlowRateWaterId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportGasHigh",
                columns: table => new
                {
                    GasHighId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportGasHigh", x => x.GasHighId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportGasLow",
                columns: table => new
                {
                    GasLowId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportGasLow", x => x.GasLowId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportGasOilRatio",
                columns: table => new
                {
                    GasOilRatioId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportGasOilRatio", x => x.GasOilRatioId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportGeodeticCRS",
                columns: table => new
                {
                    GeodeticCRSId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportGeodeticCRS", x => x.GeodeticCRSId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportHydrogenSulfide",
                columns: table => new
                {
                    HydrogenSulfideId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportHydrogenSulfide", x => x.HydrogenSulfideId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportIbut",
                columns: table => new
                {
                    IbutId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportIbut", x => x.IbutId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportIncl",
                columns: table => new
                {
                    InclId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportIncl", x => x.InclId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportIpent",
                columns: table => new
                {
                    IpentId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportIpent", x => x.IpentId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportLenBarrel",
                columns: table => new
                {
                    LenBarrelId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportLenBarrel", x => x.LenBarrelId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportLenRecovered",
                columns: table => new
                {
                    LenRecoveredId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportLenRecovered", x => x.LenRecoveredId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMd",
                columns: table => new
                {
                    MdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMd", x => x.MdId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMdBit",
                columns: table => new
                {
                    MdBitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMdBit", x => x.MdBitId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMdBottom",
                columns: table => new
                {
                    DrillReportMdBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMdBottom", x => x.DrillReportMdBottomId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMdCsgLast",
                columns: table => new
                {
                    MdCsgLastId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMdCsgLast", x => x.MdCsgLastId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMdDiaHoleStart",
                columns: table => new
                {
                    MdDiaHoleStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMdDiaHoleStart", x => x.MdDiaHoleStartId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMdDiaPilotPlan",
                columns: table => new
                {
                    MdDiaPilotPlanId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMdDiaPilotPlan", x => x.MdDiaPilotPlanId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMdInflow",
                columns: table => new
                {
                    MdInflowId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMdInflow", x => x.MdInflowId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMdKickoff",
                columns: table => new
                {
                    MdKickoffId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMdKickoff", x => x.MdKickoffId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMdPlugTop",
                columns: table => new
                {
                    MdPlugTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMdPlugTop", x => x.MdPlugTopId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMdSample",
                columns: table => new
                {
                    MdSampleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMdSample", x => x.MdSampleId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMdStrengthForm",
                columns: table => new
                {
                    MdStrengthFormId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMdStrengthForm", x => x.MdStrengthFormId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMdTempTool",
                columns: table => new
                {
                    MdTempToolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMdTempTool", x => x.MdTempToolId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMdTop",
                columns: table => new
                {
                    MdTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMdTop", x => x.MdTopId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportMeth",
                columns: table => new
                {
                    MethId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportMeth", x => x.MethId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportNbut",
                columns: table => new
                {
                    NbutId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportNbut", x => x.NbutId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportPresBopRating",
                columns: table => new
                {
                    PresBopRatingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportPresBopRating", x => x.PresBopRatingId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportPresBottom",
                columns: table => new
                {
                    PresBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportPresBottom", x => x.PresBottomId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportPresFlowing",
                columns: table => new
                {
                    PresFlowingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportPresFlowing", x => x.PresFlowingId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportPresMaxChoke",
                columns: table => new
                {
                    PresMaxChokeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportPresMaxChoke", x => x.PresMaxChokeId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportPresPore",
                columns: table => new
                {
                    PresPoreId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportPresPore", x => x.PresPoreId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportPresShutIn",
                columns: table => new
                {
                    PresShutInId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportPresShutIn", x => x.PresShutInId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportPresShutInCasing",
                columns: table => new
                {
                    PresShutInCasingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportPresShutInCasing", x => x.PresShutInCasingId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportPresShutInDrill",
                columns: table => new
                {
                    PresShutInDrillId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportPresShutInDrill", x => x.PresShutInDrillId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportProp",
                columns: table => new
                {
                    PropId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportProp", x => x.PropId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportPv",
                columns: table => new
                {
                    PvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportPv", x => x.PvId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportRecoverPc",
                columns: table => new
                {
                    RecoverPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportRecoverPc", x => x.RecoverPcId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportRopCurrent",
                columns: table => new
                {
                    RopCurrentId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportRopCurrent", x => x.RopCurrentId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportStrengthForm",
                columns: table => new
                {
                    StrengthFormId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportStrengthForm", x => x.StrengthFormId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportTempBHCT",
                columns: table => new
                {
                    TempBHCTId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportTempBHCT", x => x.TempBHCTId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportTempBHST",
                columns: table => new
                {
                    TempBHSTId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportTempBHST", x => x.TempBHSTId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportTempBottom",
                columns: table => new
                {
                    TempBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportTempBottom", x => x.TempBottomId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportTempVis",
                columns: table => new
                {
                    TempVisId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportTempVis", x => x.TempVisId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportTvd",
                columns: table => new
                {
                    TvdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportTvd", x => x.TvdId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportTvdBottom",
                columns: table => new
                {
                    TvdBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportTvdBottom", x => x.TvdBottomId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportTvdInflow",
                columns: table => new
                {
                    TvdInflowId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportTvdInflow", x => x.TvdInflowId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportTvdTempTool",
                columns: table => new
                {
                    TvdTempToolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportTvdTempTool", x => x.TvdTempToolId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportTvdTop",
                columns: table => new
                {
                    DrillReportTvdTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportTvdTop", x => x.DrillReportTvdTopId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportVolGasTotal",
                columns: table => new
                {
                    VolGasTotalId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportVolGasTotal", x => x.VolGasTotalId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportVolMudGained",
                columns: table => new
                {
                    VolMudGainedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportVolMudGained", x => x.VolMudGainedId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportVolOilStored",
                columns: table => new
                {
                    VolOilStoredId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportVolOilStored", x => x.VolOilStoredId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportVolOilTotal",
                columns: table => new
                {
                    VolOilTotalId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportVolOilTotal", x => x.VolOilTotalId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportVolumeSample",
                columns: table => new
                {
                    VolumeSampleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportVolumeSample", x => x.VolumeSampleId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportVolWaterTotal",
                columns: table => new
                {
                    VolWaterTotalId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportVolWaterTotal", x => x.VolWaterTotalId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportWaterOilRatio",
                columns: table => new
                {
                    WaterOilRatioId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportWaterOilRatio", x => x.WaterOilRatioId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportWellAlias",
                columns: table => new
                {
                    WellAliasId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    NamingSystem = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportWellAlias", x => x.WellAliasId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportWellboreInfo",
                columns: table => new
                {
                    WellboreInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTimSpud = table.Column<string>(nullable: true),
                    DTimPreSpud = table.Column<string>(nullable: true),
                    Operator = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportWellboreInfo", x => x.WellboreInfoId);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportWtMuds",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportWtMuds", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "erdos_DrillingConnections",
                columns: table => new
                {
                    DrillingConnectionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WID = table.Column<string>(nullable: true),
                    SKNO = table.Column<string>(nullable: true),
                    RID = table.Column<long>(nullable: false),
                    SQID = table.Column<long>(nullable: false),
                    DATE = table.Column<long>(nullable: false),
                    TIME = table.Column<string>(nullable: true),
                    ACTC = table.Column<float>(nullable: false),
                    DCNM = table.Column<float>(nullable: false),
                    DCNV = table.Column<float>(nullable: false),
                    DMEA = table.Column<float>(nullable: false),
                    DVER = table.Column<string>(nullable: true),
                    ETBS = table.Column<string>(nullable: true),
                    ETSL = table.Column<string>(nullable: true),
                    ETSB = table.Column<string>(nullable: true),
                    ETPO = table.Column<float>(nullable: false),
                    RSUX = table.Column<float>(nullable: false),
                    RSDX = table.Column<float>(nullable: false),
                    HKLX = table.Column<float>(nullable: false),
                    STWT = table.Column<float>(nullable: false),
                    TQMX = table.Column<float>(nullable: false),
                    TQBX = table.Column<float>(nullable: false),
                    SPR1 = table.Column<float>(nullable: false),
                    SPR2 = table.Column<float>(nullable: false),
                    SPR3 = table.Column<float>(nullable: false),
                    SPR4 = table.Column<float>(nullable: false),
                    SPR5 = table.Column<float>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_erdos_DrillingConnections", x => x.DrillingConnectionId);
                });

            migrationBuilder.CreateTable(
                name: "erdos_DrillingDepthBased",
                columns: table => new
                {
                    DRILLINGDEPTHBASEDId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WID = table.Column<string>(nullable: true),
                    SKNO = table.Column<string>(nullable: true),
                    RID = table.Column<string>(nullable: true),
                    SQID = table.Column<long>(nullable: false),
                    DATE = table.Column<long>(nullable: false),
                    TIME = table.Column<long>(nullable: false),
                    ACTC = table.Column<string>(nullable: true),
                    DMEA = table.Column<float>(nullable: false),
                    DVER = table.Column<float>(nullable: false),
                    ROPA = table.Column<float>(nullable: false),
                    WOBA = table.Column<float>(nullable: false),
                    HKLA = table.Column<float>(nullable: false),
                    SPPA = table.Column<float>(nullable: false),
                    TQA = table.Column<float>(nullable: false),
                    RPMA = table.Column<string>(nullable: true),
                    BRVC = table.Column<long>(nullable: false),
                    MDIA = table.Column<float>(nullable: false),
                    ECDT = table.Column<float>(nullable: false),
                    MFIA = table.Column<float>(nullable: false),
                    MFOA = table.Column<float>(nullable: false),
                    MFOP = table.Column<string>(nullable: true),
                    TVA = table.Column<float>(nullable: false),
                    CPDI = table.Column<float>(nullable: false),
                    CPDC = table.Column<float>(nullable: false),
                    BDTI = table.Column<float>(nullable: false),
                    BDDI = table.Column<float>(nullable: false),
                    DXC = table.Column<float>(nullable: false),
                    SPR1 = table.Column<float>(nullable: false),
                    SPR2 = table.Column<float>(nullable: false),
                    SPR3 = table.Column<float>(nullable: false),
                    SPR4 = table.Column<float>(nullable: false),
                    SPR5 = table.Column<float>(nullable: false),
                    SPR6 = table.Column<float>(nullable: false),
                    SPR7 = table.Column<float>(nullable: false),
                    SPR8 = table.Column<float>(nullable: false),
                    SPR9 = table.Column<float>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_erdos_DrillingDepthBased", x => x.DRILLINGDEPTHBASEDId);
                });

            migrationBuilder.CreateTable(
                name: "erdos_GeneralTimeBased",
                columns: table => new
                {
                    GeneralTimeBasedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WID = table.Column<string>(nullable: true),
                    SKNO = table.Column<string>(nullable: true),
                    RID = table.Column<string>(nullable: true),
                    SQID = table.Column<long>(nullable: false),
                    DATE = table.Column<long>(nullable: false),
                    TIME = table.Column<long>(nullable: false),
                    ACTC = table.Column<string>(nullable: true),
                    DBTM = table.Column<float>(nullable: false),
                    DBTV = table.Column<float>(nullable: false),
                    DMEA = table.Column<float>(nullable: false),
                    DVER = table.Column<float>(nullable: false),
                    BPOS = table.Column<float>(nullable: false),
                    ROPA = table.Column<float>(nullable: false),
                    HKLA = table.Column<float>(nullable: false),
                    HKLX = table.Column<float>(nullable: false),
                    WOBA = table.Column<float>(nullable: false),
                    WOBX = table.Column<float>(nullable: false),
                    TQA = table.Column<float>(nullable: false),
                    TQX = table.Column<float>(nullable: false),
                    RPMA = table.Column<string>(nullable: true),
                    SPPA = table.Column<float>(nullable: false),
                    CHKP = table.Column<float>(nullable: false),
                    SPM1 = table.Column<string>(nullable: true),
                    SPM2 = table.Column<string>(nullable: true),
                    SPM3 = table.Column<string>(nullable: true),
                    TVA = table.Column<float>(nullable: false),
                    TVCA = table.Column<float>(nullable: false),
                    MFOP = table.Column<string>(nullable: true),
                    MFOA = table.Column<float>(nullable: false),
                    MFIA = table.Column<float>(nullable: false),
                    MDOA = table.Column<float>(nullable: false),
                    MDIA = table.Column<float>(nullable: false),
                    MTOA = table.Column<float>(nullable: false),
                    MTIA = table.Column<float>(nullable: false),
                    MCOA = table.Column<float>(nullable: false),
                    MCIA = table.Column<float>(nullable: false),
                    STKC = table.Column<long>(nullable: false),
                    LSTK = table.Column<string>(nullable: true),
                    DRTM = table.Column<float>(nullable: false),
                    GASA = table.Column<float>(nullable: false),
                    SPR1 = table.Column<float>(nullable: false),
                    SPR2 = table.Column<float>(nullable: false),
                    SPR3 = table.Column<float>(nullable: false),
                    SPR4 = table.Column<float>(nullable: false),
                    SPR5 = table.Column<float>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_erdos_GeneralTimeBased", x => x.GeneralTimeBasedId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportAlkalinityP1",
                columns: table => new
                {
                    AlkalinityP1Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportAlkalinityP1", x => x.AlkalinityP1Id);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportAlkalinityP2",
                columns: table => new
                {
                    AlkalinityP2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportAlkalinityP2", x => x.AlkalinityP2Id);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportBaritePc",
                columns: table => new
                {
                    BaritePcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportBaritePc", x => x.BaritePcId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportBrinePc",
                columns: table => new
                {
                    BrinePcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportBrinePc", x => x.BrinePcId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportCalcium",
                columns: table => new
                {
                    CalciumId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportCalcium", x => x.CalciumId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportCalciumChloride",
                columns: table => new
                {
                    CalciumChlorideId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportCalciumChloride", x => x.CalciumChlorideId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportChloride",
                columns: table => new
                {
                    ChlorideId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportChloride", x => x.ChlorideId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportCommonDatas",
                columns: table => new
                {
                    CommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportCommonDatas", x => x.CommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportDensity",
                columns: table => new
                {
                    DensityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportDensity", x => x.DensityId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportElectStab",
                columns: table => new
                {
                    ElectStabId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportElectStab", x => x.ElectStabId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportFilterCakeHthp",
                columns: table => new
                {
                    FilterCakeHthpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportFilterCakeHthp", x => x.FilterCakeHthpId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportFilterCakeLtlp",
                columns: table => new
                {
                    FilterCakeLtlpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportFilterCakeLtlp", x => x.FilterCakeLtlpId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportFiltrateHthp",
                columns: table => new
                {
                    FiltrateHthpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportFiltrateHthp", x => x.FiltrateHthpId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportFiltrateLtlp",
                columns: table => new
                {
                    FiltrateLtlpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportFiltrateLtlp", x => x.FiltrateLtlpId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportGel10Min",
                columns: table => new
                {
                    Gel10MinId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportGel10Min", x => x.Gel10MinId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportGel10Sec",
                columns: table => new
                {
                    Gel10SecId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportGel10Sec", x => x.Gel10SecId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportGel30Min",
                columns: table => new
                {
                    Gel30MinId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportGel30Min", x => x.Gel30MinId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportHardnessCa",
                columns: table => new
                {
                    HardnessCaId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportHardnessCa", x => x.HardnessCaId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportLcm",
                columns: table => new
                {
                    LcmId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportLcm", x => x.LcmId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportLime",
                columns: table => new
                {
                    LimeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportLime", x => x.LimeId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportMagnesium",
                columns: table => new
                {
                    MagnesiumId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportMagnesium", x => x.MagnesiumId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportMbt",
                columns: table => new
                {
                    MbtId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportMbt", x => x.MbtId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportMd",
                columns: table => new
                {
                    MdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportMd", x => x.MdId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportMf",
                columns: table => new
                {
                    MfId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportMf", x => x.MfId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportOilCtg",
                columns: table => new
                {
                    OilCtgId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportOilCtg", x => x.OilCtgId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportOilPc",
                columns: table => new
                {
                    OilPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportOilPc", x => x.OilPcId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportPm",
                columns: table => new
                {
                    PmId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportPm", x => x.PmId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportPmFiltrate",
                columns: table => new
                {
                    PmFiltrateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportPmFiltrate", x => x.PmFiltrateId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportPolymer",
                columns: table => new
                {
                    PolymerId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportPolymer", x => x.PolymerId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportPotassium",
                columns: table => new
                {
                    PotassiumId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportPotassium", x => x.PotassiumId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportPresHthp",
                columns: table => new
                {
                    PresHthpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportPresHthp", x => x.PresHthpId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportPresRheom",
                columns: table => new
                {
                    PresRheomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportPresRheom", x => x.PresRheomId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportPv",
                columns: table => new
                {
                    ReportPvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportPv", x => x.ReportPvId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportSandPc",
                columns: table => new
                {
                    SandPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportSandPc", x => x.SandPcId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportSolCorPc",
                columns: table => new
                {
                    SolCorPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportSolCorPc", x => x.SolCorPcId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportSolidsCalcPc",
                columns: table => new
                {
                    SolidsCalcPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportSolidsCalcPc", x => x.SolidsCalcPcId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportSolidsHiGravPc",
                columns: table => new
                {
                    SolidsHiGravPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportSolidsHiGravPc", x => x.SolidsHiGravPcId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportSolidsLowGravPc",
                columns: table => new
                {
                    SolidsLowGravPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportSolidsLowGravPc", x => x.SolidsLowGravPcId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportSolidsPc",
                columns: table => new
                {
                    SolidsPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportSolidsPc", x => x.SolidsPcId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportSulfide",
                columns: table => new
                {
                    SulfideId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportSulfide", x => x.SulfideId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportTempHthp",
                columns: table => new
                {
                    TempHthpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportTempHthp", x => x.TempHthpId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportTempPh",
                columns: table => new
                {
                    TempPhId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportTempPh", x => x.TempPhId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportTempRheom",
                columns: table => new
                {
                    TempRheomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportTempRheom", x => x.TempRheomId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportTempVis",
                columns: table => new
                {
                    TempVisId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportTempVis", x => x.TempVisId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportTvd",
                columns: table => new
                {
                    TvdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportTvd", x => x.TvdId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportVisFunnel",
                columns: table => new
                {
                    VisFunnelId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportVisFunnel", x => x.VisFunnelId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportWaterPc",
                columns: table => new
                {
                    WaterPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportWaterPc", x => x.WaterPcId);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportYp",
                columns: table => new
                {
                    ReportYpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportYp", x => x.ReportYpId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerChronostratigraphics",
                columns: table => new
                {
                    ChronostratigraphicId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Kind = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerChronostratigraphics", x => x.ChronostratigraphicId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerCommonDatas",
                columns: table => new
                {
                    FormationMarkerCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerCommonDatas", x => x.FormationMarkerCommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerDipDirections",
                columns: table => new
                {
                    DipDirectionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerDipDirections", x => x.DipDirectionId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerDips",
                columns: table => new
                {
                    DipId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerDips", x => x.DipId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerLithostratigraphics",
                columns: table => new
                {
                    LithostratigraphicId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Kind = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerLithostratigraphics", x => x.LithostratigraphicId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerMdLogSamples",
                columns: table => new
                {
                    MdLogSampleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerMdLogSamples", x => x.MdLogSampleId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerMdPrognoseds",
                columns: table => new
                {
                    MdPrognosedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerMdPrognoseds", x => x.MdPrognosedId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerMdTopSamples",
                columns: table => new
                {
                    MdTopSampleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerMdTopSamples", x => x.MdTopSampleId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerThicknessApparents",
                columns: table => new
                {
                    ThicknessApparentId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerThicknessApparents", x => x.ThicknessApparentId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerThicknessBeds",
                columns: table => new
                {
                    ThicknessBedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerThicknessBeds", x => x.ThicknessBedId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerThicknessPerpens",
                columns: table => new
                {
                    ThicknessPerpenId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerThicknessPerpens", x => x.ThicknessPerpenId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerTvdLogSamples",
                columns: table => new
                {
                    TvdLogSampleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerTvdLogSamples", x => x.TvdLogSampleId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerTvdPrognoseds",
                columns: table => new
                {
                    TvdPrognosedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerTvdPrognoseds", x => x.TvdPrognosedId);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkerTvdTopSamples",
                columns: table => new
                {
                    TvdTopSampleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkerTvdTopSamples", x => x.TvdTopSampleId);
                });

            migrationBuilder.CreateTable(
                name: "LogCommonDatas",
                columns: table => new
                {
                    LogCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogCommonDatas", x => x.LogCommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "LogDatas",
                columns: table => new
                {
                    LogDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MnemonicList = table.Column<string>(nullable: true),
                    UnitList = table.Column<string>(nullable: true),
                    Data = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogDatas", x => x.LogDataId);
                });

            migrationBuilder.CreateTable(
                name: "LogEndIndex",
                columns: table => new
                {
                    LogEndIndexId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogEndIndex", x => x.LogEndIndexId);
                });

            migrationBuilder.CreateTable(
                name: "LogMaxIndexs",
                columns: table => new
                {
                    MaxIndexId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogMaxIndexs", x => x.MaxIndexId);
                });

            migrationBuilder.CreateTable(
                name: "LogMinIndexs",
                columns: table => new
                {
                    MinIndexId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogMinIndexs", x => x.MinIndexId);
                });

            migrationBuilder.CreateTable(
                name: "LogSensorOffsets",
                columns: table => new
                {
                    SensorOffsetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogSensorOffsets", x => x.SensorOffsetId);
                });

            migrationBuilder.CreateTable(
                name: "LogStartIndex",
                columns: table => new
                {
                    LogStartIndexId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogStartIndex", x => x.LogStartIndexId);
                });

            migrationBuilder.CreateTable(
                name: "LogStepIncrements",
                columns: table => new
                {
                    StepIncrementId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogStepIncrements", x => x.StepIncrementId);
                });

            migrationBuilder.CreateTable(
                name: "MessageCommonDatas",
                columns: table => new
                {
                    MessageCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageCommonDatas", x => x.MessageCommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "MessageMd",
                columns: table => new
                {
                    MdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageMd", x => x.MdId);
                });

            migrationBuilder.CreateTable(
                name: "MessageMdBit",
                columns: table => new
                {
                    MdBitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageMdBit", x => x.MdBitId);
                });

            migrationBuilder.CreateTable(
                name: "MessageParam",
                columns: table => new
                {
                    Index = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageParam", x => x.Index);
                });

            migrationBuilder.CreateTable(
                name: "MudLogAbundance",
                columns: table => new
                {
                    AbundanceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogAbundance", x => x.AbundanceId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogAcetylene",
                columns: table => new
                {
                    AcetyleneId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogAcetylene", x => x.AcetyleneId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogCalcite",
                columns: table => new
                {
                    CalciteId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogCalcite", x => x.CalciteId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogCalcStab",
                columns: table => new
                {
                    CalcStabId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogCalcStab", x => x.CalcStabId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogCec",
                columns: table => new
                {
                    CecId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogCec", x => x.CecId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogCo2Av",
                columns: table => new
                {
                    Co2AvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogCo2Av", x => x.Co2AvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogCo2Mn",
                columns: table => new
                {
                    Co2MnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogCo2Mn", x => x.Co2MnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogCo2Mx",
                columns: table => new
                {
                    Co2MxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogCo2Mx", x => x.Co2MxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogCommonDatas",
                columns: table => new
                {
                    MudLogCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogCommonDatas", x => x.MudLogCommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogCommonTime",
                columns: table => new
                {
                    CommonTimeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTimCreation = table.Column<string>(nullable: true),
                    DTimLastChange = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogCommonTime", x => x.CommonTimeId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogDensBulk",
                columns: table => new
                {
                    DensBulkId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogDensBulk", x => x.DensBulkId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogDensShale",
                columns: table => new
                {
                    DensShaleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogDensShale", x => x.DensShaleId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogDolomite",
                columns: table => new
                {
                    DolomiteId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogDolomite", x => x.DolomiteId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogEcdTdAv",
                columns: table => new
                {
                    EcdTdAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogEcdTdAv", x => x.EcdTdAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogEndMd",
                columns: table => new
                {
                    EndMdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogEndMd", x => x.EndMdId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogEpentAv",
                columns: table => new
                {
                    EpentAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogEpentAv", x => x.EpentAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogEpentMn",
                columns: table => new
                {
                    EpentMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogEpentMn", x => x.EpentMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogEpentMx",
                columns: table => new
                {
                    EpentMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogEpentMx", x => x.EpentMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogEthAv",
                columns: table => new
                {
                    EthAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogEthAv", x => x.EthAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogEthMn",
                columns: table => new
                {
                    EthMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogEthMn", x => x.EthMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogEthMx",
                columns: table => new
                {
                    EthMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogEthMx", x => x.EthMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogETimChromCycle",
                columns: table => new
                {
                    ETimChromCycleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogETimChromCycle", x => x.ETimChromCycleId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogForce",
                columns: table => new
                {
                    ForceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogForce", x => x.ForceId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogGasAv",
                columns: table => new
                {
                    GasAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogGasAv", x => x.GasAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogGasBackgnd",
                columns: table => new
                {
                    GasBackgndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogGasBackgnd", x => x.GasBackgndId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogGasConAv",
                columns: table => new
                {
                    GasConAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogGasConAv", x => x.GasConAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogGasConMx",
                columns: table => new
                {
                    GasConMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogGasConMx", x => x.GasConMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogGasPeak",
                columns: table => new
                {
                    GasPeakId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogGasPeak", x => x.GasPeakId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogGasTrip",
                columns: table => new
                {
                    GasTripId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogGasTrip", x => x.GasTripId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogH2sAv",
                columns: table => new
                {
                    H2sAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogH2sAv", x => x.H2sAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogH2sMn",
                columns: table => new
                {
                    H2sMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogH2sMn", x => x.H2sMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogH2sMx",
                columns: table => new
                {
                    H2sMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogH2sMx", x => x.H2sMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogIbutAv",
                columns: table => new
                {
                    IbutAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogIbutAv", x => x.IbutAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogIbutMn",
                columns: table => new
                {
                    IbutMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogIbutMn", x => x.IbutMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogIbutMx",
                columns: table => new
                {
                    IbutMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogIbutMx", x => x.IbutMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogIhexAv",
                columns: table => new
                {
                    IhexAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogIhexAv", x => x.IhexAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogIhexMn",
                columns: table => new
                {
                    IhexMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogIhexMn", x => x.IhexMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogIhexMx",
                columns: table => new
                {
                    IhexMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogIhexMx", x => x.IhexMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogIpentAv",
                columns: table => new
                {
                    IpentAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogIpentAv", x => x.IpentAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogIpentMn",
                columns: table => new
                {
                    IpentMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogIpentMn", x => x.IpentMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogIpentMx",
                columns: table => new
                {
                    IpentMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogIpentMx", x => x.IpentMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogLenPlug",
                columns: table => new
                {
                    LenPlugId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogLenPlug", x => x.LenPlugId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogLithostratigraphic",
                columns: table => new
                {
                    LithostratigraphicId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Kind = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogLithostratigraphic", x => x.LithostratigraphicId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogMdBottom",
                columns: table => new
                {
                    MdBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogMdBottom", x => x.MdBottomId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogMdTop",
                columns: table => new
                {
                    MdTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogMdTop", x => x.MdTopId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogMethAv",
                columns: table => new
                {
                    MethAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogMethAv", x => x.MethAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogMethMn",
                columns: table => new
                {
                    MethMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogMethMn", x => x.MethMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogMethMx",
                columns: table => new
                {
                    MethMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogMethMx", x => x.MethMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogNatFlorPc",
                columns: table => new
                {
                    NatFlorPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogNatFlorPc", x => x.NatFlorPcId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogNbutAv",
                columns: table => new
                {
                    NbutAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogNbutAv", x => x.NbutAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogNbutMn",
                columns: table => new
                {
                    NbutMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogNbutMn", x => x.NbutMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogNbutMx",
                columns: table => new
                {
                    NbutMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogNbutMx", x => x.NbutMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogNhexAv",
                columns: table => new
                {
                    NhexAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogNhexAv", x => x.NhexAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogNhexMn",
                columns: table => new
                {
                    NhexMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogNhexMn", x => x.NhexMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogNhexMx",
                columns: table => new
                {
                    NhexMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogNhexMx", x => x.NhexMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogNpentAv",
                columns: table => new
                {
                    NpentAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogNpentAv", x => x.NpentAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogNpentMn",
                columns: table => new
                {
                    NpentMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogNpentMn", x => x.NpentMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogNpentMx",
                columns: table => new
                {
                    NpentMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogNpentMx", x => x.NpentMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogPropAv",
                columns: table => new
                {
                    PropAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogPropAv", x => x.PropAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogPropMn",
                columns: table => new
                {
                    PropMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogPropMn", x => x.PropMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogPropMx",
                columns: table => new
                {
                    PropMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogPropMx", x => x.PropMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogRopAv",
                columns: table => new
                {
                    RopAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogRopAv", x => x.RopAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogRopMn",
                columns: table => new
                {
                    RopMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogRopMn", x => x.RopMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogRopMx",
                columns: table => new
                {
                    RopMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogRopMx", x => x.RopMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogRpmAv",
                columns: table => new
                {
                    RpmAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogRpmAv", x => x.RpmAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogSizeMn",
                columns: table => new
                {
                    SizeMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogSizeMn", x => x.SizeMnId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogSizeMx",
                columns: table => new
                {
                    SizeMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogSizeMx", x => x.SizeMxId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogStainPc",
                columns: table => new
                {
                    StainPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogStainPc", x => x.StainPcId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogStartMd",
                columns: table => new
                {
                    StartMdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogStartMd", x => x.StartMdId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogTqAv",
                columns: table => new
                {
                    TqAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogTqAv", x => x.TqAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogTvdBase",
                columns: table => new
                {
                    TvdBaseId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogTvdBase", x => x.TvdBaseId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogTvdTop",
                columns: table => new
                {
                    TvdTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogTvdTop", x => x.TvdTopId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogWobAv",
                columns: table => new
                {
                    WobAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogWobAv", x => x.WobAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogWtMudAv",
                columns: table => new
                {
                    WtMudAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogWtMudAv", x => x.WtMudAvId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogWtMudIn",
                columns: table => new
                {
                    WtMudInId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogWtMudIn", x => x.WtMudInId);
                });

            migrationBuilder.CreateTable(
                name: "MudLogWtMudOut",
                columns: table => new
                {
                    WtMudOutId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogWtMudOut", x => x.WtMudOutId);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupAcquisitionTimeZones",
                columns: table => new
                {
                    AcquisitionTimeZoneId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupAcquisitionTimeZones", x => x.AcquisitionTimeZoneId);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupDefaultDatum",
                columns: table => new
                {
                    DefaultDatumId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupDefaultDatum", x => x.DefaultDatumId);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupMd",
                columns: table => new
                {
                    MdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Datum = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupMd", x => x.MdId);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupObjectReference",
                columns: table => new
                {
                    ObjectReferenceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Object = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupObjectReference", x => x.ObjectReferenceId);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupParam",
                columns: table => new
                {
                    ParamId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uid = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Uom = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    Index = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupParam", x => x.ParamId);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupRangeMaxs",
                columns: table => new
                {
                    RangeMaxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupRangeMaxs", x => x.RangeMaxId);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupRangeMins",
                columns: table => new
                {
                    RangeMinId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupRangeMins", x => x.RangeMinId);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupReferenceDepths",
                columns: table => new
                {
                    ReferenceDepthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Datum = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupReferenceDepths", x => x.ReferenceDepthId);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupSequence1s",
                columns: table => new
                {
                    Sequence1Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Description = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupSequence1s", x => x.Sequence1Id);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupSequence2s",
                columns: table => new
                {
                    Sequence2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Description = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupSequence2s", x => x.Sequence2Id);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupSequence3s",
                columns: table => new
                {
                    Sequence3Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Description = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupSequence3s", x => x.Sequence3Id);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupValue",
                columns: table => new
                {
                    ValueId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupValue", x => x.ValueId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportAlkalinityP1s",
                columns: table => new
                {
                    AlkalinityP1Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportAlkalinityP1s", x => x.AlkalinityP1Id);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportAlkalinityP2s",
                columns: table => new
                {
                    AlkalinityP2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportAlkalinityP2s", x => x.AlkalinityP2Id);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportAmtPrecips",
                columns: table => new
                {
                    AmtPrecipId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportAmtPrecips", x => x.AmtPrecipId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportAziBottoms",
                columns: table => new
                {
                    AziBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportAziBottoms", x => x.AziBottomId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportAziCurrentSeas",
                columns: table => new
                {
                    AziCurrentSeaId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportAziCurrentSeas", x => x.AziCurrentSeaId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportAzis",
                columns: table => new
                {
                    AziId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportAzis", x => x.AziId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportAziTops",
                columns: table => new
                {
                    AziTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportAziTops", x => x.AziTopId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportAziWaves",
                columns: table => new
                {
                    AziWaveId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportAziWaves", x => x.AziWaveId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportAziWinds",
                columns: table => new
                {
                    AziWindId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportAziWinds", x => x.AziWindId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportBallJointAngles",
                columns: table => new
                {
                    BallJointAngleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportBallJointAngles", x => x.BallJointAngleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportBallJointDirections",
                columns: table => new
                {
                    BallJointDirectionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportBallJointDirections", x => x.BallJointDirectionId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportBaritePcs",
                columns: table => new
                {
                    BaritePcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportBaritePcs", x => x.BaritePcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportBarometricPressures",
                columns: table => new
                {
                    BarometricPressureId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportBarometricPressures", x => x.BarometricPressureId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportBiasEs",
                columns: table => new
                {
                    BiasEId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportBiasEs", x => x.BiasEId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportBiasNs",
                columns: table => new
                {
                    BiasNId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportBiasNs", x => x.BiasNId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportBiasVerts",
                columns: table => new
                {
                    BiasVertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportBiasVerts", x => x.BiasVertId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportBrinePcs",
                columns: table => new
                {
                    BrinePcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportBrinePcs", x => x.BrinePcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCalciumChlorides",
                columns: table => new
                {
                    CalciumChlorideId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCalciumChlorides", x => x.CalciumChlorideId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCalciums",
                columns: table => new
                {
                    MagnesiumId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCalciums", x => x.MagnesiumId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCeilingClouds",
                columns: table => new
                {
                    CeilingCloudId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCeilingClouds", x => x.CeilingCloudId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportChlorides",
                columns: table => new
                {
                    ChlorideId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportChlorides", x => x.ChlorideId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCostAmounts",
                columns: table => new
                {
                    CostAmountId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Currency = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCostAmounts", x => x.CostAmountId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCostDayMuds",
                columns: table => new
                {
                    CostDayMudId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Currency = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCostDayMuds", x => x.CostDayMudId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCostDays",
                columns: table => new
                {
                    CostDayId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Currency = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCostDays", x => x.CostDayId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCostItems",
                columns: table => new
                {
                    CostItemId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Currency = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCostItems", x => x.CostItemId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCostLostGrosss",
                columns: table => new
                {
                    CostLostGrossId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Currency = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCostLostGrosss", x => x.CostLostGrossId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCostPerItems",
                columns: table => new
                {
                    CostPerItemId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Currency = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCostPerItems", x => x.CostPerItemId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCTimCircs",
                columns: table => new
                {
                    CTimCircId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCTimCircs", x => x.CTimCircId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCTimDrillRots",
                columns: table => new
                {
                    CTimDrillRotId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCTimDrillRots", x => x.CTimDrillRotId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCTimDrillSlids",
                columns: table => new
                {
                    CTimDrillSlidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCTimDrillSlids", x => x.CTimDrillSlidId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCTimHolds",
                columns: table => new
                {
                    CTimHoldId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCTimHolds", x => x.CTimHoldId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCTimReams",
                columns: table => new
                {
                    CTimReamId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCTimReams", x => x.CTimReamId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCTimSteerings",
                columns: table => new
                {
                    CTimSteeringId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCTimSteerings", x => x.CTimSteeringId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCurrentSeas",
                columns: table => new
                {
                    CurrentSeaId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCurrentSeas", x => x.CurrentSeaId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCutPoints",
                columns: table => new
                {
                    CutPointId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCutPoints", x => x.CutPointId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDaysIncFrees",
                columns: table => new
                {
                    DaysIncFreeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDaysIncFrees", x => x.DaysIncFreeId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDensFluids",
                columns: table => new
                {
                    DensFluidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDensFluids", x => x.DensFluidId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDensitys",
                columns: table => new
                {
                    DensityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDensitys", x => x.DensityId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDiaCsgLasts",
                columns: table => new
                {
                    DiaCsgLastId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDiaCsgLasts", x => x.DiaCsgLastId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDiaHoles",
                columns: table => new
                {
                    DiaHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDiaHoles", x => x.DiaHoleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDipAngleUncerts",
                columns: table => new
                {
                    DipAngleUncertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDipAngleUncerts", x => x.DipAngleUncertId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDirSensorOffsets",
                columns: table => new
                {
                    DirSensorOffsetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDirSensorOffsets", x => x.DirSensorOffsetId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDispEws",
                columns: table => new
                {
                    DispEwId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDispEws", x => x.DispEwId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDispNss",
                columns: table => new
                {
                    DispNsId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDispNss", x => x.DispNsId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDispRigs",
                columns: table => new
                {
                    DispRigId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDispRigs", x => x.DispRigId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDistDrillRots",
                columns: table => new
                {
                    DistDrillRotId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDistDrillRots", x => x.DistDrillRotId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDistDrills",
                columns: table => new
                {
                    DistDrillId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDistDrills", x => x.DistDrillId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDistDrillSlids",
                columns: table => new
                {
                    DistDrillSlidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDistDrillSlids", x => x.DistDrillSlidId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDistHolds",
                columns: table => new
                {
                    DistHoldId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDistHolds", x => x.DistHoldId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDistReams",
                columns: table => new
                {
                    DistReamId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDistReams", x => x.DistReamId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDistSteerings",
                columns: table => new
                {
                    DistSteeringId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDistSteerings", x => x.DistSteeringId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDlss",
                columns: table => new
                {
                    DlsId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDlss", x => x.DlsId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDurations",
                columns: table => new
                {
                    DurationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDurations", x => x.DurationId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportElectStabs",
                columns: table => new
                {
                    ElectStabId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportElectStabs", x => x.ElectStabId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportETimCircs",
                columns: table => new
                {
                    ETimCircId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportETimCircs", x => x.ETimCircId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportETimDrillRots",
                columns: table => new
                {
                    ETimDrillRotId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportETimDrillRots", x => x.ETimDrillRotId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportETimDrills",
                columns: table => new
                {
                    ETimDrillId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportETimDrills", x => x.ETimDrillId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportETimDrillSlids",
                columns: table => new
                {
                    ETimDrillSlidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportETimDrillSlids", x => x.ETimDrillSlidId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportETimHolds",
                columns: table => new
                {
                    ETimHoldId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportETimHolds", x => x.ETimHoldId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportETimLocs",
                columns: table => new
                {
                    ETimLocId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportETimLocs", x => x.ETimLocId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportETimLostGrosss",
                columns: table => new
                {
                    ETimLostGrossId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportETimLostGrosss", x => x.ETimLostGrossId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportETimOpBits",
                columns: table => new
                {
                    ETimOpBitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportETimOpBits", x => x.ETimOpBitId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportETimReams",
                columns: table => new
                {
                    ETimReamId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportETimReams", x => x.ETimReamId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportETimSpuds",
                columns: table => new
                {
                    ETimSpudId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportETimSpuds", x => x.ETimSpudId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportETimStarts",
                columns: table => new
                {
                    ETimStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportETimStarts", x => x.ETimStartId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportETimSteerings",
                columns: table => new
                {
                    ETimSteeringId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportETimSteerings", x => x.ETimSteeringId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportFilterCakeHthps",
                columns: table => new
                {
                    FilterCakeHthpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportFilterCakeHthps", x => x.FilterCakeHthpId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportFilterCakeLtlps",
                columns: table => new
                {
                    FilterCakeLtlpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportFilterCakeLtlps", x => x.FilterCakeLtlpId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportFiltrateHthps",
                columns: table => new
                {
                    FiltrateHthpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportFiltrateHthps", x => x.FiltrateHthpId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportFiltrateLtlps",
                columns: table => new
                {
                    FiltrateLtlpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportFiltrateLtlps", x => x.FiltrateLtlpId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportFlowrateBits",
                columns: table => new
                {
                    FlowrateBitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportFlowrateBits", x => x.FlowrateBitId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportFlowratePumps",
                columns: table => new
                {
                    FlowratePumpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportFlowratePumps", x => x.FlowratePumpId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportFluidDischargeds",
                columns: table => new
                {
                    FluidDischargedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportFluidDischargeds", x => x.FluidDischargedId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGel10Mins",
                columns: table => new
                {
                    Gel10MinId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGel10Mins", x => x.Gel10MinId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGel10Secs",
                columns: table => new
                {
                    Gel10SecId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGel10Secs", x => x.Gel10SecId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGel30Mins",
                columns: table => new
                {
                    Gel30MinId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGel30Mins", x => x.Gel30MinId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGravAxialAccelCors",
                columns: table => new
                {
                    GravAxialAccelCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGravAxialAccelCors", x => x.GravAxialAccelCorId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGravAxialRaws",
                columns: table => new
                {
                    GravAxialRawId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGravAxialRaws", x => x.GravAxialRawId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGravTotalFieldCalcs",
                columns: table => new
                {
                    GravTotalFieldCalcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGravTotalFieldCalcs", x => x.GravTotalFieldCalcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGravTotalUncerts",
                columns: table => new
                {
                    GravTotalUncertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGravTotalUncerts", x => x.GravTotalUncertId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGravTran1AccelCors",
                columns: table => new
                {
                    GravTran1AccelCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGravTran1AccelCors", x => x.GravTran1AccelCorId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGravTran1Raws",
                columns: table => new
                {
                    GravTran1RawId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGravTran1Raws", x => x.GravTran1RawId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGravTran2AccelCors",
                columns: table => new
                {
                    GravTran2AccelCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGravTran2AccelCors", x => x.GravTran2AccelCorId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGravTran2Raws",
                columns: table => new
                {
                    GravTran2RawId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGravTran2Raws", x => x.GravTran2RawId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGtfs",
                columns: table => new
                {
                    GtfId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGtfs", x => x.GtfId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportGuideBaseAngles",
                columns: table => new
                {
                    GuideBaseAngleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportGuideBaseAngles", x => x.GuideBaseAngleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportHardnessCas",
                columns: table => new
                {
                    HardnessCaId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportHardnessCas", x => x.HardnessCaId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportHkldDns",
                columns: table => new
                {
                    HkldDnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportHkldDns", x => x.HkldDnId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportHkldRots",
                columns: table => new
                {
                    HkldRotId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportHkldRots", x => x.HkldRotId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportHkldUps",
                columns: table => new
                {
                    HkldUpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportHkldUps", x => x.HkldUpId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportHoursRuns",
                columns: table => new
                {
                    HoursRunId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportHoursRuns", x => x.HoursRunId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportHtWaves",
                columns: table => new
                {
                    HtWaveId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportHtWaves", x => x.HtWaveId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportIdLiners",
                columns: table => new
                {
                    IdLinerId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportIdLiners", x => x.IdLinerId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportInclMns",
                columns: table => new
                {
                    InclMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportInclMns", x => x.InclMnId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportInclMxs",
                columns: table => new
                {
                    InclMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportInclMxs", x => x.InclMxId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportIncls",
                columns: table => new
                {
                    InclId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportIncls", x => x.InclId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportInclStarts",
                columns: table => new
                {
                    InclStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportInclStarts", x => x.InclStartId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportInclStops",
                columns: table => new
                {
                    InclStopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportInclStops", x => x.InclStopId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportItemVolPerUnits",
                columns: table => new
                {
                    ItemVolPerUnitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportItemVolPerUnits", x => x.ItemVolPerUnitId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportItemWtPerUnits",
                columns: table => new
                {
                    ItemWtPerUnitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportItemWtPerUnits", x => x.ItemWtPerUnitId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportLatitudes",
                columns: table => new
                {
                    LatitudeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportLatitudes", x => x.LatitudeId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportLcms",
                columns: table => new
                {
                    LcmId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportLcms", x => x.LcmId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportLenStrokes",
                columns: table => new
                {
                    LenStrokeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportLenStrokes", x => x.LenStrokeId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportLimes",
                columns: table => new
                {
                    LimeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportLimes", x => x.LimeId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportLoadLeg1s",
                columns: table => new
                {
                    LoadLeg1Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportLoadLeg1s", x => x.LoadLeg1Id);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportLoadLeg2s",
                columns: table => new
                {
                    LoadLeg2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportLoadLeg2s", x => x.LoadLeg2Id);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportLoadLeg3s",
                columns: table => new
                {
                    LoadLeg3Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportLoadLeg3s", x => x.LoadLeg3Id);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportLoadLeg4s",
                columns: table => new
                {
                    LoadLeg4Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportLoadLeg4s", x => x.LoadLeg4Id);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportLongitudes",
                columns: table => new
                {
                    LongitudeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportLongitudes", x => x.LongitudeId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMaasps",
                columns: table => new
                {
                    MaaspId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMaasps", x => x.MaaspId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMagAxialDrlstrCors",
                columns: table => new
                {
                    MagAxialDrlstrCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMagAxialDrlstrCors", x => x.MagAxialDrlstrCorId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMagAxialRaws",
                columns: table => new
                {
                    MagAxialRawId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMagAxialRaws", x => x.MagAxialRawId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMagDipAngleCalcs",
                columns: table => new
                {
                    MagDipAngleCalcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMagDipAngleCalcs", x => x.MagDipAngleCalcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMagnesiums",
                columns: table => new
                {
                    MagnesiumId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMagnesiums", x => x.MagnesiumId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMagTotalFieldCalcs",
                columns: table => new
                {
                    MagTotalFieldCalcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMagTotalFieldCalcs", x => x.MagTotalFieldCalcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMagTotalUncerts",
                columns: table => new
                {
                    MagTotalUncertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMagTotalUncerts", x => x.MagTotalUncertId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMagTran1DrlstrCors",
                columns: table => new
                {
                    MagTran1DrlstrCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMagTran1DrlstrCors", x => x.MagTran1DrlstrCorId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMagTran1Raws",
                columns: table => new
                {
                    MagTran1RawId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMagTran1Raws", x => x.MagTran1RawId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMagTran2DrlstrCors",
                columns: table => new
                {
                    MagTran2DrlstrCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMagTran2DrlstrCors", x => x.MagTran2DrlstrCorId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMagTran2Raws",
                columns: table => new
                {
                    MagTran2RawId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMagTran2Raws", x => x.MagTran2RawId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMbts",
                columns: table => new
                {
                    MbtId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMbts", x => x.MbtId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMdBitEnds",
                columns: table => new
                {
                    MdBitEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMdBitEnds", x => x.MdBitEndId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMdBits",
                columns: table => new
                {
                    MdBitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMdBits", x => x.MdBitId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMdBitStarts",
                columns: table => new
                {
                    MdBitStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMdBitStarts", x => x.MdBitStartId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMdCsgLasts",
                columns: table => new
                {
                    MdCsgLastId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMdCsgLasts", x => x.MdCsgLastId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMdDeltas",
                columns: table => new
                {
                    MdDeltaId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMdDeltas", x => x.MdDeltaId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMdHoleEnds",
                columns: table => new
                {
                    MdHoleEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMdHoleEnds", x => x.MdHoleEndId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMdHoles",
                columns: table => new
                {
                    MdHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMdHoles", x => x.MdHoleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMdHoleStarts",
                columns: table => new
                {
                    MdHoleStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMdHoleStarts", x => x.MdHoleStartId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMdHoleStops",
                columns: table => new
                {
                    MdHoleStopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMdHoleStops", x => x.MdHoleStopId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMdPlanneds",
                columns: table => new
                {
                    MdPlannedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMdPlanneds", x => x.MdPlannedId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMdReports",
                columns: table => new
                {
                    MdReportId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMdReports", x => x.MdReportId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMds",
                columns: table => new
                {
                    MdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMds", x => x.MdId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMeanDrafts",
                columns: table => new
                {
                    MeanDraftId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMeanDrafts", x => x.MeanDraftId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMeshXs",
                columns: table => new
                {
                    MeshXId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMeshXs", x => x.MeshXId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMeshYs",
                columns: table => new
                {
                    MeshYId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMeshYs", x => x.MeshYId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMfs",
                columns: table => new
                {
                    MfId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMfs", x => x.MfId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMtfs",
                columns: table => new
                {
                    MtfId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMtfs", x => x.MtfId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportOffsetRigs",
                columns: table => new
                {
                    OffsetRigId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportOffsetRigs", x => x.OffsetRigId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportOilCtgs",
                columns: table => new
                {
                    OilCtgId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportOilCtgs", x => x.OilCtgId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportOilPcs",
                columns: table => new
                {
                    OilPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportOilPcs", x => x.OilPcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportOverPulls",
                columns: table => new
                {
                    OverPullId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportOverPulls", x => x.OverPullId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPcEfficiencys",
                columns: table => new
                {
                    PcEfficiencyId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPcEfficiencys", x => x.PcEfficiencyId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPcScreenCovereds",
                columns: table => new
                {
                    PcScreenCoveredId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPcScreenCovereds", x => x.PcScreenCoveredId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPenetrationLeg1s",
                columns: table => new
                {
                    PenetrationLeg1Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPenetrationLeg1s", x => x.PenetrationLeg1Id);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPenetrationLeg2s",
                columns: table => new
                {
                    PenetrationLeg2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPenetrationLeg2s", x => x.PenetrationLeg2Id);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPenetrationLeg3s",
                columns: table => new
                {
                    PenetrationLeg3Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPenetrationLeg3s", x => x.PenetrationLeg3Id);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPenetrationLeg4s",
                columns: table => new
                {
                    PenetrationLeg4Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPenetrationLeg4s", x => x.PenetrationLeg4Id);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPeriodWaves",
                columns: table => new
                {
                    PeriodWaveId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPeriodWaves", x => x.PeriodWaveId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPits",
                columns: table => new
                {
                    PitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPits", x => x.PitId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPmFiltrates",
                columns: table => new
                {
                    PmFiltrateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPmFiltrates", x => x.PmFiltrateId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPms",
                columns: table => new
                {
                    PmId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPms", x => x.PmId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPolymers",
                columns: table => new
                {
                    PolymerId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPolymers", x => x.PolymerId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPowBits",
                columns: table => new
                {
                    PowBitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPowBits", x => x.PowBitId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresAnnulars",
                columns: table => new
                {
                    PresAnnularId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresAnnulars", x => x.PresAnnularId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresChokeLines",
                columns: table => new
                {
                    PresChokeLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresChokeLines", x => x.PresChokeLineId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresChokeMans",
                columns: table => new
                {
                    PresChokeManId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresChokeMans", x => x.PresChokeManId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresDiverters",
                columns: table => new
                {
                    PresDiverterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresDiverters", x => x.PresDiverterId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresDropBits",
                columns: table => new
                {
                    PresDropBitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresDropBits", x => x.PresDropBitId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresHthps",
                columns: table => new
                {
                    PresHthpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresHthps", x => x.PresHthpId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresKellyHoses",
                columns: table => new
                {
                    PresKellyHoseId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresKellyHoses", x => x.PresKellyHoseId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresKickTols",
                columns: table => new
                {
                    PresKickTolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresKickTols", x => x.PresKickTolId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresLastCsgs",
                columns: table => new
                {
                    PresLastCsgId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresLastCsgs", x => x.PresLastCsgId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresLotEmws",
                columns: table => new
                {
                    PresLotEmwId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresLotEmws", x => x.PresLotEmwId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresPumpAvs",
                columns: table => new
                {
                    PresPumpAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresPumpAvs", x => x.PresPumpAvId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresRamss",
                columns: table => new
                {
                    PresRamsId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresRamss", x => x.PresRamsId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresRecordeds",
                columns: table => new
                {
                    PresRecordedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresRecordeds", x => x.PresRecordedId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresRheoms",
                columns: table => new
                {
                    PresRheomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresRheoms", x => x.PresRheomId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPresStdPipes",
                columns: table => new
                {
                    PresStdPipeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPresStdPipes", x => x.PresStdPipeId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPressures",
                columns: table => new
                {
                    PressureId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPressures", x => x.PressureId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPricePerUnits",
                columns: table => new
                {
                    PricePerUnitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Currency = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPricePerUnits", x => x.PricePerUnitId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportProjectedXs",
                columns: table => new
                {
                    ProjectedXId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportProjectedXs", x => x.ProjectedXId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportProjectedYs",
                columns: table => new
                {
                    ProjectedYId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportProjectedYs", x => x.ProjectedYId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPumpOutputs",
                columns: table => new
                {
                    PumpOutputId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPumpOutputs", x => x.PumpOutputId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPumps",
                columns: table => new
                {
                    PumpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPumps", x => x.PumpId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPvs",
                columns: table => new
                {
                    ReportPvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPvs", x => x.ReportPvId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRateBuilds",
                columns: table => new
                {
                    RateBuildId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRateBuilds", x => x.RateBuildId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRateStrokes",
                columns: table => new
                {
                    RateStrokeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRateStrokes", x => x.RateStrokeId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRateTurns",
                columns: table => new
                {
                    RateTurnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRateTurns", x => x.RateTurnId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRigHeadings",
                columns: table => new
                {
                    RigHeadingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRigHeadings", x => x.RigHeadingId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRigHeaves",
                columns: table => new
                {
                    RigHeaveId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRigHeaves", x => x.RigHeaveId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRigPitchAngles",
                columns: table => new
                {
                    RigPitchAngleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRigPitchAngles", x => x.RigPitchAngleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRigRollAngles",
                columns: table => new
                {
                    RigRollAngleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRigRollAngles", x => x.RigRollAngleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRigs",
                columns: table => new
                {
                    OpsReportRigId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRigs", x => x.OpsReportRigId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRiserAngles",
                columns: table => new
                {
                    RiserAngleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRiserAngles", x => x.RiserAngleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRiserDirections",
                columns: table => new
                {
                    RiserDirectionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRiserDirections", x => x.RiserDirectionId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRiserTensions",
                columns: table => new
                {
                    RiserTensionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRiserTensions", x => x.RiserTensionId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRopAvs",
                columns: table => new
                {
                    RopAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRopAvs", x => x.RopAvId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRopCurrents",
                columns: table => new
                {
                    RopCurrentId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRopCurrents", x => x.RopCurrentId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRopMns",
                columns: table => new
                {
                    RopMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRopMns", x => x.RopMnId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRopMxs",
                columns: table => new
                {
                    RopMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRopMxs", x => x.RopMxId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRpmAvDhs",
                columns: table => new
                {
                    RpmAvDhId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRpmAvDhs", x => x.RpmAvDhId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRpmAvs",
                columns: table => new
                {
                    RpmAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRpmAvs", x => x.RpmAvId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRpmMns",
                columns: table => new
                {
                    RpmMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRpmMns", x => x.RpmMnId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRpmMxs",
                columns: table => new
                {
                    RpmMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRpmMxs", x => x.RpmMxId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportSagAziCors",
                columns: table => new
                {
                    SagAziCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportSagAziCors", x => x.SagAziCorId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportSagIncCors",
                columns: table => new
                {
                    SagIncCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportSagIncCors", x => x.SagIncCorId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportSandPcs",
                columns: table => new
                {
                    SandPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportSandPcs", x => x.SandPcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportsCommonDatas",
                columns: table => new
                {
                    OpsReportsCommonDataid = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportsCommonDatas", x => x.OpsReportsCommonDataid);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportShakers",
                columns: table => new
                {
                    ShakerId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportShakers", x => x.ShakerId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportSlackOffs",
                columns: table => new
                {
                    SlackOffId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportSlackOffs", x => x.SlackOffId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportSolCorPcs",
                columns: table => new
                {
                    SolCorPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportSolCorPcs", x => x.SolCorPcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportSolidsCalcPcs",
                columns: table => new
                {
                    SolidsCalcPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportSolidsCalcPcs", x => x.SolidsCalcPcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportSolidsHiGravPcs",
                columns: table => new
                {
                    SolidsHiGravPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportSolidsHiGravPcs", x => x.SolidsHiGravPcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportSolidsLowGravPcs",
                columns: table => new
                {
                    SolidsLowGravPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportSolidsLowGravPcs", x => x.SolidsLowGravPcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportSolidsPcs",
                columns: table => new
                {
                    SolidsPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportSolidsPcs", x => x.SolidsPcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportStnGridCorUseds",
                columns: table => new
                {
                    StnGridCorUsedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportStnGridCorUseds", x => x.StnGridCorUsedId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportStnMagDeclUseds",
                columns: table => new
                {
                    StnMagDeclUsedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportStnMagDeclUseds", x => x.StnMagDeclUsedId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportSulfides",
                columns: table => new
                {
                    SulfideId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportSulfides", x => x.SulfideId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportSupportCrafts",
                columns: table => new
                {
                    SupportCraftId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    TypeSuppCraft = table.Column<string>(nullable: true),
                    DTimArrived = table.Column<string>(nullable: true),
                    DTimDeparted = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportSupportCrafts", x => x.SupportCraftId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTempHthps",
                columns: table => new
                {
                    TempHthpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTempHthps", x => x.TempHthpId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTempMudDhMxs",
                columns: table => new
                {
                    TempMudDhMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTempMudDhMxs", x => x.TempMudDhMxId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTempPhs",
                columns: table => new
                {
                    TempPhId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTempPhs", x => x.TempPhId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTempRheoms",
                columns: table => new
                {
                    TempRheomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTempRheoms", x => x.TempRheomId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTempseas",
                columns: table => new
                {
                    TempseaId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTempseas", x => x.TempseaId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTempSurfaceMns",
                columns: table => new
                {
                    TempSurfaceMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTempSurfaceMns", x => x.TempSurfaceMnId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTempSurfaceMxs",
                columns: table => new
                {
                    TempSurfaceMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTempSurfaceMxs", x => x.TempSurfaceMxId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTempViss",
                columns: table => new
                {
                    TempVisId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTempViss", x => x.TempVisId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTempWindChills",
                columns: table => new
                {
                    TempWindChillId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTempWindChills", x => x.TempWindChillId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTotalDeckLoads",
                columns: table => new
                {
                    TotalDeckLoadId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTotalDeckLoads", x => x.TotalDeckLoadId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTotalTimes",
                columns: table => new
                {
                    TotalTimeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTotalTimes", x => x.TotalTimeId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTqDhAvs",
                columns: table => new
                {
                    TqDhAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTqDhAvs", x => x.TqDhAvId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTqOffBotAvs",
                columns: table => new
                {
                    TqOffBotAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTqOffBotAvs", x => x.TqOffBotAvId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTqOnBotAvs",
                columns: table => new
                {
                    TqOnBotAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTqOnBotAvs", x => x.TqOnBotAvId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTqOnBotMns",
                columns: table => new
                {
                    TqOnBotMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTqOnBotMns", x => x.TqOnBotMnId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTqOnBotMxs",
                columns: table => new
                {
                    TqOnBotMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTqOnBotMxs", x => x.TqOnBotMxId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTubulars",
                columns: table => new
                {
                    UidRef = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTubulars", x => x.UidRef);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTvdCsgLasts",
                columns: table => new
                {
                    TvdCsgLastId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTvdCsgLasts", x => x.TvdCsgLastId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTvdDeltas",
                columns: table => new
                {
                    TvdDeltaId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTvdDeltas", x => x.TvdDeltaId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTvdHoleEnds",
                columns: table => new
                {
                    TvdHoleEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTvdHoleEnds", x => x.TvdHoleEndId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTvdHoleStarts",
                columns: table => new
                {
                    TvdHoleStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTvdHoleStarts", x => x.TvdHoleStartId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTvdLots",
                columns: table => new
                {
                    TvdLotId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTvdLots", x => x.TvdLotId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTvdReports",
                columns: table => new
                {
                    TvdReportId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTvdReports", x => x.TvdReportId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTvds",
                columns: table => new
                {
                    TvdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTvds", x => x.TvdId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVariableDeckLoads",
                columns: table => new
                {
                    VariableDeckLoadId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVariableDeckLoads", x => x.VariableDeckLoadId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVarianceEEs",
                columns: table => new
                {
                    VarianceEEId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVarianceEEs", x => x.VarianceEEId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVarianceEVerts",
                columns: table => new
                {
                    VarianceEVertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVarianceEVerts", x => x.VarianceEVertId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVarianceNEs",
                columns: table => new
                {
                    OpsReportsId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVarianceNEs", x => x.OpsReportsId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVarianceNNs",
                columns: table => new
                {
                    VarianceNNId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVarianceNNs", x => x.VarianceNNId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVarianceNVerts",
                columns: table => new
                {
                    VarianceNVertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVarianceNVerts", x => x.VarianceNVertId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVarianceVertVerts",
                columns: table => new
                {
                    VarianceVertVertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVarianceVertVerts", x => x.VarianceVertVertId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVelNozzleAvs",
                columns: table => new
                {
                    VelNozzleAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVelNozzleAvs", x => x.VelNozzleAvId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVelWinds",
                columns: table => new
                {
                    VelWindId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVelWinds", x => x.VelWindId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVertSects",
                columns: table => new
                {
                    VertSectId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVertSects", x => x.VertSectId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVisFunnels",
                columns: table => new
                {
                    VisFunnelId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVisFunnels", x => x.VisFunnelId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVisibilitys",
                columns: table => new
                {
                    VisibilityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVisibilitys", x => x.VisibilityId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolCtgDischargeds",
                columns: table => new
                {
                    VolCtgDischargedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolCtgDischargeds", x => x.VolCtgDischargedId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolKickTols",
                columns: table => new
                {
                    VolKickTolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolKickTols", x => x.VolKickTolId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolLostAbandonHoles",
                columns: table => new
                {
                    VolLostAbandonHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolLostAbandonHoles", x => x.VolLostAbandonHoleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolLostBhdCsgHoles",
                columns: table => new
                {
                    VolLostBhdCsgHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolLostBhdCsgHoles", x => x.VolLostBhdCsgHoleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolLostCircHoles",
                columns: table => new
                {
                    VolLostCircHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolLostCircHoles", x => x.VolLostCircHoleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolLostCmtHoles",
                columns: table => new
                {
                    VolLostCmtHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolLostCmtHoles", x => x.VolLostCmtHoleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolLostCsgHoles",
                columns: table => new
                {
                    VolLostCsgHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolLostCsgHoles", x => x.VolLostCsgHoleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolLostMudCleanerSurfs",
                columns: table => new
                {
                    VolLostMudCleanerSurfId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolLostMudCleanerSurfs", x => x.VolLostMudCleanerSurfId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolLostOtherHoles",
                columns: table => new
                {
                    VolLostOtherHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolLostOtherHoles", x => x.VolLostOtherHoleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolLostOtherSurfs",
                columns: table => new
                {
                    VolLostOtherSurfId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolLostOtherSurfs", x => x.VolLostOtherSurfId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolLostPitsSurfs",
                columns: table => new
                {
                    VolLostPitsSurfId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolLostPitsSurfs", x => x.VolLostPitsSurfId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolLostShakerSurfs",
                columns: table => new
                {
                    VolLostShakerSurfId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolLostShakerSurfs", x => x.VolLostShakerSurfId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolLostTrippingSurfs",
                columns: table => new
                {
                    VolLostTrippingSurfId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolLostTrippingSurfs", x => x.VolLostTrippingSurfId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolMudBuilts",
                columns: table => new
                {
                    VolMudBuiltId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolMudBuilts", x => x.VolMudBuiltId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolMudCasings",
                columns: table => new
                {
                    VolMudCasingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolMudCasings", x => x.VolMudCasingId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolMudDumpeds",
                columns: table => new
                {
                    VolMudDumpedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolMudDumpeds", x => x.VolMudDumpedId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolMudHoles",
                columns: table => new
                {
                    VolMudHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolMudHoles", x => x.VolMudHoleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolMudReceiveds",
                columns: table => new
                {
                    VolMudReceivedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolMudReceiveds", x => x.VolMudReceivedId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolMudReturneds",
                columns: table => new
                {
                    VolMudReturnedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolMudReturneds", x => x.VolMudReturnedId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolMudRisers",
                columns: table => new
                {
                    VolMudRiserId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolMudRisers", x => x.VolMudRiserId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolMudStrings",
                columns: table => new
                {
                    VolMudStringId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolMudStrings", x => x.VolMudStringId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolOilCtgDischarges",
                columns: table => new
                {
                    VolOilCtgDischargeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolOilCtgDischarges", x => x.VolOilCtgDischargeId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolPits",
                columns: table => new
                {
                    VolPitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolPits", x => x.VolPitId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolTotMudEnds",
                columns: table => new
                {
                    VolTotMudEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolTotMudEnds", x => x.VolTotMudEndId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolTotMudLostHoles",
                columns: table => new
                {
                    VolTotMudLostHoleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolTotMudLostHoles", x => x.VolTotMudLostHoleId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolTotMudLostSurfs",
                columns: table => new
                {
                    VolTotMudLostSurfId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolTotMudLostSurfs", x => x.VolTotMudLostSurfId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportVolTotMudStarts",
                columns: table => new
                {
                    VolTotMudStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportVolTotMudStarts", x => x.VolTotMudStartId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportWasteDischargeds",
                columns: table => new
                {
                    WasteDischargedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportWasteDischargeds", x => x.WasteDischargedId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportWaterPcs",
                columns: table => new
                {
                    WaterPcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportWaterPcs", x => x.WaterPcId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportWellCRSs",
                columns: table => new
                {
                    WellCRSId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportWellCRSs", x => x.WellCRSId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportWobAvDhs",
                columns: table => new
                {
                    WobAvDhId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportWobAvDhs", x => x.WobAvDhId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportWobAvs",
                columns: table => new
                {
                    WobAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportWobAvs", x => x.WobAvId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportWobMns",
                columns: table => new
                {
                    WobMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportWobMns", x => x.WobMnId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportWobMxs",
                columns: table => new
                {
                    WobMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportWobMxs", x => x.WobMxId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportWtAboveJars",
                columns: table => new
                {
                    WtAboveJarId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportWtAboveJars", x => x.WtAboveJarId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportWtBelowJars",
                columns: table => new
                {
                    WtBelowJarId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportWtBelowJars", x => x.WtBelowJarId);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportWtMuds",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportWtMuds", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportYps",
                columns: table => new
                {
                    YpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportYps", x => x.YpId);
                });

            migrationBuilder.CreateTable(
                name: "RigAirGaps",
                columns: table => new
                {
                    AirGapId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigAirGaps", x => x.AirGapId);
                });

            migrationBuilder.CreateTable(
                name: "RigAreaSeparatorFlows",
                columns: table => new
                {
                    AreaSeparatorFlowId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigAreaSeparatorFlows", x => x.AreaSeparatorFlowId);
                });

            migrationBuilder.CreateTable(
                name: "RigCapAccFluids",
                columns: table => new
                {
                    CapAccFluidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCapAccFluids", x => x.CapAccFluidId);
                });

            migrationBuilder.CreateTable(
                name: "RigCapBlowdowns",
                columns: table => new
                {
                    CapBlowdownId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCapBlowdowns", x => x.CapBlowdownId);
                });

            migrationBuilder.CreateTable(
                name: "RigCapBulkCements",
                columns: table => new
                {
                    CapBulkCementId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCapBulkCements", x => x.CapBulkCementId);
                });

            migrationBuilder.CreateTable(
                name: "RigCapBulkMuds",
                columns: table => new
                {
                    CapBulkMudId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCapBulkMuds", x => x.CapBulkMudId);
                });

            migrationBuilder.CreateTable(
                name: "RigCapDrillWaters",
                columns: table => new
                {
                    CapDrillWaterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCapDrillWaters", x => x.CapDrillWaterId);
                });

            migrationBuilder.CreateTable(
                name: "RigCapFlows",
                columns: table => new
                {
                    CapFlowId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCapFlows", x => x.CapFlowId);
                });

            migrationBuilder.CreateTable(
                name: "RigCapFuels",
                columns: table => new
                {
                    CapFuelId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCapFuels", x => x.CapFuelId);
                });

            migrationBuilder.CreateTable(
                name: "RigCapGasSeps",
                columns: table => new
                {
                    CapGasSepId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCapGasSeps", x => x.CapGasSepId);
                });

            migrationBuilder.CreateTable(
                name: "RigCapLiquidMuds",
                columns: table => new
                {
                    CapLiquidMudId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCapLiquidMuds", x => x.CapLiquidMudId);
                });

            migrationBuilder.CreateTable(
                name: "RigCapMxs",
                columns: table => new
                {
                    CapMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCapMxs", x => x.CapMxId);
                });

            migrationBuilder.CreateTable(
                name: "RigCapPotableWaters",
                columns: table => new
                {
                    CapPotableWaterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCapPotableWaters", x => x.CapPotableWaterId);
                });

            migrationBuilder.CreateTable(
                name: "RigCapWindDerricks",
                columns: table => new
                {
                    CapWindDerrickId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCapWindDerricks", x => x.CapWindDerrickId);
                });

            migrationBuilder.CreateTable(
                name: "RigCommonDatas",
                columns: table => new
                {
                    RigCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCommonDatas", x => x.RigCommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "RigDiaCloseMns",
                columns: table => new
                {
                    DiaCloseMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigDiaCloseMns", x => x.DiaCloseMnId);
                });

            migrationBuilder.CreateTable(
                name: "RigDiaCloseMxs",
                columns: table => new
                {
                    DiaCloseMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigDiaCloseMxs", x => x.DiaCloseMxId);
                });

            migrationBuilder.CreateTable(
                name: "RigDiaDiverters",
                columns: table => new
                {
                    DiaDiverterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigDiaDiverters", x => x.DiaDiverterId);
                });

            migrationBuilder.CreateTable(
                name: "RigDisplacements",
                columns: table => new
                {
                    DisplacementId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigDisplacements", x => x.DisplacementId);
                });

            migrationBuilder.CreateTable(
                name: "RigEffs",
                columns: table => new
                {
                    EffId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigEffs", x => x.EffId);
                });

            migrationBuilder.CreateTable(
                name: "RigHeaveMxs",
                columns: table => new
                {
                    HeaveMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigHeaveMxs", x => x.HeaveMxId);
                });

            migrationBuilder.CreateTable(
                name: "RigHeights",
                columns: table => new
                {
                    HeightId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigHeights", x => x.HeightId);
                });

            migrationBuilder.CreateTable(
                name: "RigHtDerricks",
                columns: table => new
                {
                    HtDerrickId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigHtDerricks", x => x.HtDerrickId);
                });

            migrationBuilder.CreateTable(
                name: "RigHtFlanges",
                columns: table => new
                {
                    HtFlangeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigHtFlanges", x => x.HtFlangeId);
                });

            migrationBuilder.CreateTable(
                name: "RigHtInjStks",
                columns: table => new
                {
                    HtInjStkId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigHtInjStks", x => x.HtInjStkId);
                });

            migrationBuilder.CreateTable(
                name: "RigHtMudSeals",
                columns: table => new
                {
                    HtMudSealId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigHtMudSeals", x => x.HtMudSealId);
                });

            migrationBuilder.CreateTable(
                name: "RigHtTopStks",
                columns: table => new
                {
                    HtTopStkId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigHtTopStks", x => x.HtTopStkId);
                });

            migrationBuilder.CreateTable(
                name: "RigHydrocyclones",
                columns: table => new
                {
                    HydrocycloneId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Manufacturer = table.Column<string>(nullable: true),
                    Model = table.Column<string>(nullable: true),
                    DTimInstall = table.Column<string>(nullable: true),
                    DTimRemove = table.Column<string>(nullable: true),
                    Type = table.Column<string>(nullable: true),
                    DescCone = table.Column<string>(nullable: true),
                    Owner = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigHydrocyclones", x => x.HydrocycloneId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdBoosterLines",
                columns: table => new
                {
                    IdBoosterLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdBoosterLines", x => x.IdBoosterLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdChkLines",
                columns: table => new
                {
                    IdChkLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdChkLines", x => x.IdChkLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdDischargeLines",
                columns: table => new
                {
                    IdDischargeLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdDischargeLines", x => x.IdDischargeLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdHoses",
                columns: table => new
                {
                    IdHoseId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdHoses", x => x.IdHoseId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdInlets",
                columns: table => new
                {
                    IdInletId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdInlets", x => x.IdInletId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdKellys",
                columns: table => new
                {
                    IdKellyId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdKellys", x => x.IdKellyId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdKillLines",
                columns: table => new
                {
                    IdKillLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdKillLines", x => x.IdKillLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdLiners",
                columns: table => new
                {
                    IdLinerId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdLiners", x => x.IdLinerId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdPassThrus",
                columns: table => new
                {
                    IdPassThruId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdPassThrus", x => x.IdPassThruId);
                });

            migrationBuilder.CreateTable(
                name: "RigIds",
                columns: table => new
                {
                    UniqueId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIds", x => x.UniqueId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdStandpipes",
                columns: table => new
                {
                    IdStandpipeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdStandpipes", x => x.IdStandpipeId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdSurfLines",
                columns: table => new
                {
                    IdSurfLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdSurfLines", x => x.IdSurfLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdSwivels",
                columns: table => new
                {
                    IdSwivelId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdSwivels", x => x.IdSwivelId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdTopStks",
                columns: table => new
                {
                    IdTopStkId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdTopStks", x => x.IdTopStkId);
                });

            migrationBuilder.CreateTable(
                name: "RigIdVentLines",
                columns: table => new
                {
                    IdVentLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigIdVentLines", x => x.IdVentLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenBoosterLines",
                columns: table => new
                {
                    LenBoosterLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenBoosterLines", x => x.LenBoosterLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenChkLines",
                columns: table => new
                {
                    LenChkLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenChkLines", x => x.LenChkLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenDischargeLines",
                columns: table => new
                {
                    LenDischargeLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenDischargeLines", x => x.LenDischargeLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenHoses",
                columns: table => new
                {
                    LenHoseId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenHoses", x => x.LenHoseId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenKellys",
                columns: table => new
                {
                    LenKellyId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenKellys", x => x.LenKellyId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenKillLines",
                columns: table => new
                {
                    LenKillLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenKillLines", x => x.LenKillLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenReels",
                columns: table => new
                {
                    LenReelId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenReels", x => x.LenReelId);
                });

            migrationBuilder.CreateTable(
                name: "RigLens",
                columns: table => new
                {
                    LenId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLens", x => x.LenId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenStandpipes",
                columns: table => new
                {
                    LenStandpipeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenStandpipes", x => x.LenStandpipeId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenStrokes",
                columns: table => new
                {
                    LenStrokeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenStrokes", x => x.LenStrokeId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenSurfLines",
                columns: table => new
                {
                    LenSurfLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenSurfLines", x => x.LenSurfLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenSwivels",
                columns: table => new
                {
                    LenSwivelId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenSwivels", x => x.LenSwivelId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenUmbilicals",
                columns: table => new
                {
                    LenUmbilicalId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenUmbilicals", x => x.LenUmbilicalId);
                });

            migrationBuilder.CreateTable(
                name: "RigLenVentLines",
                columns: table => new
                {
                    LenVentLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigLenVentLines", x => x.LenVentLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigMotionCompensationMns",
                columns: table => new
                {
                    MotionCompensationMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigMotionCompensationMns", x => x.MotionCompensationMnId);
                });

            migrationBuilder.CreateTable(
                name: "RigMotionCompensationMxs",
                columns: table => new
                {
                    MotionCompensationMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigMotionCompensationMxs", x => x.MotionCompensationMxId);
                });

            migrationBuilder.CreateTable(
                name: "RigOdBoosterLines",
                columns: table => new
                {
                    OdBoosterLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigOdBoosterLines", x => x.OdBoosterLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigOdChkLines",
                columns: table => new
                {
                    OdChkLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigOdChkLines", x => x.OdChkLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigOdCores",
                columns: table => new
                {
                    OdCoreId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigOdCores", x => x.OdCoreId);
                });

            migrationBuilder.CreateTable(
                name: "RigOdKillLines",
                columns: table => new
                {
                    OdKillLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigOdKillLines", x => x.OdKillLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigOdReels",
                columns: table => new
                {
                    OdReelId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigOdReels", x => x.OdReelId);
                });

            migrationBuilder.CreateTable(
                name: "RigOdRods",
                columns: table => new
                {
                    OdRodId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigOdRods", x => x.OdRodId);
                });

            migrationBuilder.CreateTable(
                name: "RigOdSurfLines",
                columns: table => new
                {
                    OdSurfLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigOdSurfLines", x => x.OdSurfLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigOdUmbilicals",
                columns: table => new
                {
                    OdUmbilicalId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigOdUmbilicals", x => x.OdUmbilicalId);
                });

            migrationBuilder.CreateTable(
                name: "RigPowerDrawWork",
                columns: table => new
                {
                    PowerDrawWorksId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPowerDrawWork", x => x.PowerDrawWorksId);
                });

            migrationBuilder.CreateTable(
                name: "RigPowHydMxs",
                columns: table => new
                {
                    PowHydMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPowHydMxs", x => x.PowHydMxId);
                });

            migrationBuilder.CreateTable(
                name: "RigPowMechMxs",
                columns: table => new
                {
                    PowMechMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPowMechMxs", x => x.PowMechMxId);
                });

            migrationBuilder.CreateTable(
                name: "RigPresAccOpRatings",
                columns: table => new
                {
                    PresAccOpRatingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPresAccOpRatings", x => x.PresAccOpRatingId);
                });

            migrationBuilder.CreateTable(
                name: "RigPresAccPreCharges",
                columns: table => new
                {
                    PresAccPreChargeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPresAccPreCharges", x => x.PresAccPreChargeId);
                });

            migrationBuilder.CreateTable(
                name: "RigPresBopRatings",
                columns: table => new
                {
                    PresBopRatingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPresBopRatings", x => x.PresBopRatingId);
                });

            migrationBuilder.CreateTable(
                name: "RigPresChokeManifolds",
                columns: table => new
                {
                    PresChokeManifoldId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPresChokeManifolds", x => x.PresChokeManifoldId);
                });

            migrationBuilder.CreateTable(
                name: "RigPresDamps",
                columns: table => new
                {
                    PresDampId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPresDamps", x => x.PresDampId);
                });

            migrationBuilder.CreateTable(
                name: "RigPresMxs",
                columns: table => new
                {
                    PresMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPresMxs", x => x.PresMxId);
                });

            migrationBuilder.CreateTable(
                name: "RigPresRatings",
                columns: table => new
                {
                    PresRatingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPresRatings", x => x.PresRatingId);
                });

            migrationBuilder.CreateTable(
                name: "RigPresWorkDiverters",
                columns: table => new
                {
                    PresWorkDiverterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPresWorkDiverters", x => x.PresWorkDiverterId);
                });

            migrationBuilder.CreateTable(
                name: "RigPresWorks",
                columns: table => new
                {
                    PresWorkId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPresWorks", x => x.PresWorkId);
                });

            migrationBuilder.CreateTable(
                name: "RigRatingBlocks",
                columns: table => new
                {
                    RatingBlockId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigRatingBlocks", x => x.RatingBlockId);
                });

            migrationBuilder.CreateTable(
                name: "RigRatingDerricks",
                columns: table => new
                {
                    RatingDerrickId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigRatingDerricks", x => x.RatingDerrickId);
                });

            migrationBuilder.CreateTable(
                name: "RigRatingDrawWork",
                columns: table => new
                {
                    RatingDrawWorksId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigRatingDrawWork", x => x.RatingDrawWorksId);
                });

            migrationBuilder.CreateTable(
                name: "RigRatingDrillDepths",
                columns: table => new
                {
                    RatingDrillDepthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigRatingDrillDepths", x => x.RatingDrillDepthId);
                });

            migrationBuilder.CreateTable(
                name: "RigRatingHklds",
                columns: table => new
                {
                    RatingHkldId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigRatingHklds", x => x.RatingHkldId);
                });

            migrationBuilder.CreateTable(
                name: "RigRatingHooks",
                columns: table => new
                {
                    RatingHookId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigRatingHooks", x => x.RatingHookId);
                });

            migrationBuilder.CreateTable(
                name: "RigRatingRotSystems",
                columns: table => new
                {
                    RatingRotSystemId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigRatingRotSystems", x => x.RatingRotSystemId);
                });

            migrationBuilder.CreateTable(
                name: "RigRatingSwivels",
                columns: table => new
                {
                    RatingSwivelId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigRatingSwivels", x => x.RatingSwivelId);
                });

            migrationBuilder.CreateTable(
                name: "RigRatingTqRotSy",
                columns: table => new
                {
                    RatingTqRotSysId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigRatingTqRotSy", x => x.RatingTqRotSysId);
                });

            migrationBuilder.CreateTable(
                name: "RigRatingWaterDepths",
                columns: table => new
                {
                    RatingWaterDepthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigRatingWaterDepths", x => x.RatingWaterDepthId);
                });

            migrationBuilder.CreateTable(
                name: "RigRiserAngleLimits",
                columns: table => new
                {
                    RiserAngleLimitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigRiserAngleLimits", x => x.RiserAngleLimitId);
                });

            migrationBuilder.CreateTable(
                name: "RigRotSizeOpenings",
                columns: table => new
                {
                    RotSizeOpeningId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigRotSizeOpenings", x => x.RotSizeOpeningId);
                });

            migrationBuilder.CreateTable(
                name: "RigSizeBopSyss",
                columns: table => new
                {
                    SizeBopSysId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigSizeBopSyss", x => x.SizeBopSysId);
                });

            migrationBuilder.CreateTable(
                name: "RigSizeConnectionBops",
                columns: table => new
                {
                    SizeConnectionBopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigSizeConnectionBops", x => x.SizeConnectionBopId);
                });

            migrationBuilder.CreateTable(
                name: "RigSizeDrillLines",
                columns: table => new
                {
                    SizeDrillLineId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigSizeDrillLines", x => x.SizeDrillLineId);
                });

            migrationBuilder.CreateTable(
                name: "RigSizeMeshMns",
                columns: table => new
                {
                    SizeMeshMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigSizeMeshMns", x => x.SizeMeshMnId);
                });

            migrationBuilder.CreateTable(
                name: "RigSpmMxs",
                columns: table => new
                {
                    SpmMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigSpmMxs", x => x.SpmMxId);
                });

            migrationBuilder.CreateTable(
                name: "RigStrokeMotionCompensations",
                columns: table => new
                {
                    StrokeMotionCompensationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigStrokeMotionCompensations", x => x.StrokeMotionCompensationId);
                });

            migrationBuilder.CreateTable(
                name: "RigTempRatings",
                columns: table => new
                {
                    TempRatingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigTempRatings", x => x.TempRatingId);
                });

            migrationBuilder.CreateTable(
                name: "RigVarDeckLdMxs",
                columns: table => new
                {
                    VarDeckLdMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigVarDeckLdMxs", x => x.VarDeckLdMxId);
                });

            migrationBuilder.CreateTable(
                name: "RigVdlStorms",
                columns: table => new
                {
                    VdlStormId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigVdlStorms", x => x.VdlStormId);
                });

            migrationBuilder.CreateTable(
                name: "RigVolAccPreCharges",
                columns: table => new
                {
                    VolAccPreChargeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigVolAccPreCharges", x => x.VolAccPreChargeId);
                });

            migrationBuilder.CreateTable(
                name: "RigVolDamps",
                columns: table => new
                {
                    VolDampId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigVolDamps", x => x.VolDampId);
                });

            migrationBuilder.CreateTable(
                name: "RigWidReelWraps",
                columns: table => new
                {
                    WidReelWrapId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigWidReelWraps", x => x.WidReelWrapId);
                });

            migrationBuilder.CreateTable(
                name: "RigWorkstationRegister",
                columns: table => new
                {
                    RegisterationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerAccountIdentifier = table.Column<string>(nullable: true),
                    WorkstationIdentifier = table.Column<string>(nullable: true),
                    WorkstationToken = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigWorkstationRegister", x => x.RegisterationId);
                });

            migrationBuilder.CreateTable(
                name: "RigWtBlocks",
                columns: table => new
                {
                    WtBlockId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigWtBlocks", x => x.WtBlockId);
                });

            migrationBuilder.CreateTable(
                name: "RiskDiaHole",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskDiaHole", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "RiskMdHoleEnds",
                columns: table => new
                {
                    MdHoleEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskMdHoleEnds", x => x.MdHoleEndId);
                });

            migrationBuilder.CreateTable(
                name: "RiskMdHoleStarts",
                columns: table => new
                {
                    MdHoleStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskMdHoleStarts", x => x.MdHoleStartId);
                });

            migrationBuilder.CreateTable(
                name: "RiskObjectReferences",
                columns: table => new
                {
                    ObjectReferenceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Object = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskObjectReferences", x => x.ObjectReferenceId);
                });

            migrationBuilder.CreateTable(
                name: "RiskTvdHoleEnds",
                columns: table => new
                {
                    TvdHoleEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskTvdHoleEnds", x => x.TvdHoleEndId);
                });

            migrationBuilder.CreateTable(
                name: "RiskTvdHoleStarts",
                columns: table => new
                {
                    TvdHoleStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskTvdHoleStarts", x => x.TvdHoleStartId);
                });

            migrationBuilder.CreateTable(
                name: "SideWallCoreAbundance",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallCoreAbundance", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "SideWallCoreCommonData",
                columns: table => new
                {
                    SidewallCoresCommonDataid = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallCoreCommonData", x => x.SidewallCoresCommonDataid);
                });

            migrationBuilder.CreateTable(
                name: "SideWallCoreDensShale",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallCoreDensShale", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "SideWallCoreDiaHole",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallCoreDiaHole", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "SideWallCoreNatFlorPc",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallCoreNatFlorPc", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "SideWallCoreStainPc",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallCoreStainPc", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "SideWallLithPcs",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallLithPcs", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "SideWallMd",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallMd", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "SideWallMdCore",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallMdCore", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "SideWallMdToolReference",
                columns: table => new
                {
                    Uom = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallMdToolReference", x => x.Uom);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAcidVols",
                columns: table => new
                {
                    AcidVolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAcidVols", x => x.AcidVolId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAcidVolumes",
                columns: table => new
                {
                    AcidVolumeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAcidVolumes", x => x.AcidVolumeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAveragePresBottomholes",
                columns: table => new
                {
                    AveragePresBottomholeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAveragePresBottomholes", x => x.AveragePresBottomholeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAveragePress",
                columns: table => new
                {
                    AveragePresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAveragePress", x => x.AveragePresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAveragePresSurfaces",
                columns: table => new
                {
                    AveragePresSurfaceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAveragePresSurfaces", x => x.AveragePresSurfaceId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgAcidRates",
                columns: table => new
                {
                    AvgAcidRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgAcidRates", x => x.AvgAcidRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgBaseFluidQualitys",
                columns: table => new
                {
                    AvgBaseFluidQualityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgBaseFluidQualitys", x => x.AvgBaseFluidQualityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgBaseFluidRates",
                columns: table => new
                {
                    AvgBaseFluidRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgBaseFluidRates", x => x.AvgBaseFluidRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgBaseFluidReturnRates",
                columns: table => new
                {
                    AvgBaseFluidReturnRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgBaseFluidReturnRates", x => x.AvgBaseFluidReturnRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgBottomholeRates",
                columns: table => new
                {
                    AvgBottomholeRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgBottomholeRates", x => x.AvgBottomholeRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgBottomholeTreatmentPress",
                columns: table => new
                {
                    AvgBottomholeTreatmentPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgBottomholeTreatmentPress", x => x.AvgBottomholeTreatmentPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgBottomholeTreatmentRates",
                columns: table => new
                {
                    AvgBottomholeTreatmentRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgBottomholeTreatmentRates", x => x.AvgBottomholeTreatmentRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgCO2BaseFluidQualitys",
                columns: table => new
                {
                    AvgCO2BaseFluidQualityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgCO2BaseFluidQualitys", x => x.AvgCO2BaseFluidQualityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgCO2LiquidRates",
                columns: table => new
                {
                    AvgCO2LiquidRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgCO2LiquidRates", x => x.AvgCO2LiquidRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgCO2Rates",
                columns: table => new
                {
                    AvgCO2RateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgCO2Rates", x => x.AvgCO2RateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgConductivitys",
                columns: table => new
                {
                    AvgConductivityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgConductivitys", x => x.AvgConductivityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgFractureWidths",
                columns: table => new
                {
                    AvgFractureWidthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgFractureWidths", x => x.AvgFractureWidthId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgGelRates",
                columns: table => new
                {
                    AvgGelRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgGelRates", x => x.AvgGelRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgHydraulicPowers",
                columns: table => new
                {
                    AvgHydraulicPowerId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgHydraulicPowers", x => x.AvgHydraulicPowerId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgInternalPhaseFractions",
                columns: table => new
                {
                    AvgInternalPhaseFractionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgInternalPhaseFractions", x => x.AvgInternalPhaseFractionId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgJobPress",
                columns: table => new
                {
                    AvgJobPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgJobPress", x => x.AvgJobPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgN2BaseFluidQualitys",
                columns: table => new
                {
                    AvgN2BaseFluidQualityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgN2BaseFluidQualitys", x => x.AvgN2BaseFluidQualityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgN2StdRates",
                columns: table => new
                {
                    AvgN2StdRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgN2StdRates", x => x.AvgN2StdRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgOilRates",
                columns: table => new
                {
                    AvgOilRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgOilRates", x => x.AvgOilRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgPmaxPacPress",
                columns: table => new
                {
                    AvgPmaxPacPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgPmaxPacPress", x => x.AvgPmaxPacPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgPmaxWeaklinkPress",
                columns: table => new
                {
                    AvgPmaxWeaklinkPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgPmaxWeaklinkPress", x => x.AvgPmaxWeaklinkPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgPresCasings",
                columns: table => new
                {
                    AvgPresCasingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgPresCasings", x => x.AvgPresCasingId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgPresTubings",
                columns: table => new
                {
                    AvgPresTubingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgPresTubings", x => x.AvgPresTubingId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgPropConcs",
                columns: table => new
                {
                    AvgPropConcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgPropConcs", x => x.AvgPropConcId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgProppantConcBottomholes",
                columns: table => new
                {
                    AvgProppantConcBottomholeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgProppantConcBottomholes", x => x.AvgProppantConcBottomholeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgProppantConcSurfaces",
                columns: table => new
                {
                    AvgProppantConcSurfaceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgProppantConcSurfaces", x => x.AvgProppantConcSurfaceId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgPumpRateBottomholes",
                columns: table => new
                {
                    AvgPumpRateBottomholeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgPumpRateBottomholes", x => x.AvgPumpRateBottomholeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgRateSurfaceCO2s",
                columns: table => new
                {
                    AvgRateSurfaceCO2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgRateSurfaceCO2s", x => x.AvgRateSurfaceCO2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgRateSurfaceLiquids",
                columns: table => new
                {
                    AvgRateSurfaceLiquidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgRateSurfaceLiquids", x => x.AvgRateSurfaceLiquidId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgSlurryPropConcs",
                columns: table => new
                {
                    AvgSlurryPropConcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgSlurryPropConcs", x => x.AvgSlurryPropConcId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgSlurryRates",
                columns: table => new
                {
                    AvgSlurryRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgSlurryRates", x => x.AvgSlurryRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgSlurryReturnRates",
                columns: table => new
                {
                    AvgSlurryReturnRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgSlurryReturnRates", x => x.AvgSlurryReturnRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgStdRateSurfaceN2s",
                columns: table => new
                {
                    AvgStdRateSurfaceN2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgStdRateSurfaceN2s", x => x.AvgStdRateSurfaceN2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgTemperatures",
                columns: table => new
                {
                    AvgTemperatureId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgTemperatures", x => x.AvgTemperatureId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgTreatPress",
                columns: table => new
                {
                    AvgTreatPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgTreatPress", x => x.AvgTreatPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAvgWellheadRates",
                columns: table => new
                {
                    AvgWellheadRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAvgWellheadRates", x => x.AvgWellheadRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobBaseFluidBypassVols",
                columns: table => new
                {
                    BaseFluidBypassVolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobBaseFluidBypassVols", x => x.BaseFluidBypassVolId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobBaseFluidVols",
                columns: table => new
                {
                    BaseFluidVolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobBaseFluidVols", x => x.BaseFluidVolId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobBottomholeFluidDensitys",
                columns: table => new
                {
                    BottomholeFluidDensityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobBottomholeFluidDensitys", x => x.BottomholeFluidDensityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobBottomholeHydrostaticPress",
                columns: table => new
                {
                    BottomholeHydrostaticPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobBottomholeHydrostaticPress", x => x.BottomholeHydrostaticPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobBottomholeRates",
                columns: table => new
                {
                    BottomholeRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobBottomholeRates", x => x.BottomholeRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobBottomholeStaticTemperatures",
                columns: table => new
                {
                    BottomholeStaticTemperatureId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobBottomholeStaticTemperatures", x => x.BottomholeStaticTemperatureId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobBottomholeTemperatures",
                columns: table => new
                {
                    BottomholeTemperatureId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobBottomholeTemperatures", x => x.BottomholeTemperatureId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobBreakDownPress",
                columns: table => new
                {
                    BreakDownPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobBreakDownPress", x => x.BreakDownPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobBubblePointPress",
                columns: table => new
                {
                    BubblePointPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobBubblePointPress", x => x.BubblePointPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobClosureDurations",
                columns: table => new
                {
                    ClosureDurationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobClosureDurations", x => x.ClosureDurationId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobClosurePress",
                columns: table => new
                {
                    ClosurePresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobClosurePress", x => x.ClosurePresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobDensityPerforations",
                columns: table => new
                {
                    DensityPerforationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobDensityPerforations", x => x.DensityPerforationId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobDiameterEntryHoles",
                columns: table => new
                {
                    PipeFrictionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobDiameterEntryHoles", x => x.PipeFrictionId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobEndFoamRateCO2s",
                columns: table => new
                {
                    EndFoamRateCO2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobEndFoamRateCO2s", x => x.EndFoamRateCO2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobEndFoamRateN2s",
                columns: table => new
                {
                    EndFoamRateN2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobEndFoamRateN2s", x => x.EndFoamRateN2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobEndPdlDurations",
                columns: table => new
                {
                    EndPdlDurationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobEndPdlDurations", x => x.EndPdlDurationId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobEndPresBottomholes",
                columns: table => new
                {
                    EndPresBottomholeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobEndPresBottomholes", x => x.EndPresBottomholeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobEndPresSurfaces",
                columns: table => new
                {
                    EndPresSurfaceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobEndPresSurfaces", x => x.EndPresSurfaceId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobEndProppantConcBottomholes",
                columns: table => new
                {
                    EndProppantConcBottomholeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobEndProppantConcBottomholes", x => x.EndProppantConcBottomholeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobEndProppantConcSurfaces",
                columns: table => new
                {
                    EndProppantConcSurfaceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobEndProppantConcSurfaces", x => x.EndProppantConcSurfaceId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobEndPumpRateBottomholes",
                columns: table => new
                {
                    EndPumpRateBottomholeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobEndPumpRateBottomholes", x => x.EndPumpRateBottomholeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobEndRateSurfaceCO2s",
                columns: table => new
                {
                    EndRateSurfaceCO2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobEndRateSurfaceCO2s", x => x.EndRateSurfaceCO2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobEndRateSurfaceLiquids",
                columns: table => new
                {
                    EndRateSurfaceLiquidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobEndRateSurfaceLiquids", x => x.EndRateSurfaceLiquidId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobEndStdRateSurfaceN2s",
                columns: table => new
                {
                    EndStdRateSurfaceN2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobEndStdRateSurfaceN2s", x => x.EndStdRateSurfaceN2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobEntryFrictions",
                columns: table => new
                {
                    EntryFrictionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobEntryFrictions", x => x.EntryFrictionId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFinalFractureGradients",
                columns: table => new
                {
                    FinalFractureGradientId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFinalFractureGradients", x => x.FinalFractureGradientId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFlowBackPress",
                columns: table => new
                {
                    FlowBackPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFlowBackPress", x => x.FlowBackPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFlowBackRates",
                columns: table => new
                {
                    FlowBackRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFlowBackRates", x => x.FlowBackRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFlowBackVolumes",
                columns: table => new
                {
                    FlowBackVolumeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFlowBackVolumes", x => x.FlowBackVolumeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFluidCompressibilitys",
                columns: table => new
                {
                    FluidCompressibilityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFluidCompressibilitys", x => x.FluidCompressibilityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFluidDensitys",
                columns: table => new
                {
                    FluidDensityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFluidDensitys", x => x.FluidDensityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFluidEfficiencys",
                columns: table => new
                {
                    FluidEfficiencyId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFluidEfficiencys", x => x.FluidEfficiencyId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFluidSpecificHeats",
                columns: table => new
                {
                    FluidSpecificHeatId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFluidSpecificHeats", x => x.FluidSpecificHeatId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFluidThermalConductivitys",
                columns: table => new
                {
                    FluidThermalConductivityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFluidThermalConductivitys", x => x.FluidThermalConductivityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFluidThermalExpansionCoefficients",
                columns: table => new
                {
                    FluidThermalExpansionCoefficientId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFluidThermalExpansionCoefficients", x => x.FluidThermalExpansionCoefficientId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFluidVolBases",
                columns: table => new
                {
                    FluidVolBaseId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFluidVolBases", x => x.FluidVolBaseId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFluidVols",
                columns: table => new
                {
                    FluidVolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFluidVols", x => x.FluidVolId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFluidVolSlurrys",
                columns: table => new
                {
                    FluidVolSlurryId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFluidVolSlurrys", x => x.FluidVolSlurryId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFoamQualitys",
                columns: table => new
                {
                    FoamQualityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFoamQualitys", x => x.FoamQualityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFormationPermeabilitys",
                columns: table => new
                {
                    FormationPermeabilityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFormationPermeabilitys", x => x.FormationPermeabilityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFormationPorositys",
                columns: table => new
                {
                    FormationPorosityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFormationPorositys", x => x.FormationPorosityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFormationProppantMasss",
                columns: table => new
                {
                    FormationProppantMassId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFormationProppantMasss", x => x.FormationProppantMassId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFractureCloseDurations",
                columns: table => new
                {
                    FractureCloseDurationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFractureCloseDurations", x => x.FractureCloseDurationId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFractureClosePress",
                columns: table => new
                {
                    FractureClosePresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFractureClosePress", x => x.FractureClosePresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFractureExtensionPress",
                columns: table => new
                {
                    FractureExtensionPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFractureExtensionPress", x => x.FractureExtensionPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFractureGradients",
                columns: table => new
                {
                    FractureGradientId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFractureGradients", x => x.FractureGradientId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFractureLengths",
                columns: table => new
                {
                    FractureLengthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFractureLengths", x => x.FractureLengthId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFractureWidths",
                columns: table => new
                {
                    FractureWidthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFractureWidths", x => x.FractureWidthId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFrictionPress",
                columns: table => new
                {
                    FrictionPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFrictionPress", x => x.FrictionPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobGelVols",
                columns: table => new
                {
                    GelVolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobGelVols", x => x.GelVolId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobGelVolumes",
                columns: table => new
                {
                    GelVolumeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobGelVolumes", x => x.GelVolumeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobGrossPayThicknesss",
                columns: table => new
                {
                    GrossPayThicknessId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobGrossPayThicknesss", x => x.GrossPayThicknessId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobHhpOrderedCO2s",
                columns: table => new
                {
                    HhpOrderedCO2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobHhpOrderedCO2s", x => x.HhpOrderedCO2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobHhpOrderedFluids",
                columns: table => new
                {
                    HhpOrderedFluidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobHhpOrderedFluids", x => x.HhpOrderedFluidId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobHhpOrdereds",
                columns: table => new
                {
                    HhpOrderedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobHhpOrdereds", x => x.HhpOrderedId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobHhpUsedCO2s",
                columns: table => new
                {
                    HhpUsedCO2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobHhpUsedCO2s", x => x.HhpUsedCO2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobHhpUsedFluids",
                columns: table => new
                {
                    HhpUsedFluidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobHhpUsedFluids", x => x.HhpUsedFluidId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobHhpUseds",
                columns: table => new
                {
                    HhpUsedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobHhpUseds", x => x.HhpUsedId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobIds",
                columns: table => new
                {
                    IdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobIds", x => x.IdId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobInitialShutinPress",
                columns: table => new
                {
                    InitialShutinPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobInitialShutinPress", x => x.InitialShutinPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobLithFormationPermeabilitys",
                columns: table => new
                {
                    LithFormationPermeabilityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobLithFormationPermeabilitys", x => x.LithFormationPermeabilityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobLithNetPayThicknesss",
                columns: table => new
                {
                    LithNetPayThicknessId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobLithNetPayThicknesss", x => x.LithNetPayThicknessId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobLithPoissonsRatios",
                columns: table => new
                {
                    LithPoissonsRatioId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobLithPoissonsRatios", x => x.LithPoissonsRatioId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobLithPorePress",
                columns: table => new
                {
                    LithPorePresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobLithPorePress", x => x.LithPorePresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobLithYoungsModuluss",
                columns: table => new
                {
                    LithYoungsModulusId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobLithYoungsModuluss", x => x.LithYoungsModulusId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMassCO2s",
                columns: table => new
                {
                    MassCO2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMassCO2s", x => x.MassCO2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMasss",
                columns: table => new
                {
                    MassId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMasss", x => x.MassId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxAcidRates",
                columns: table => new
                {
                    MaxAcidRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxAcidRates", x => x.MaxAcidRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxCO2LiquidRates",
                columns: table => new
                {
                    MaxCO2LiquidRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxCO2LiquidRates", x => x.MaxCO2LiquidRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxFluidRateAnnuluss",
                columns: table => new
                {
                    MaxFluidRateAnnulusId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxFluidRateAnnuluss", x => x.MaxFluidRateAnnulusId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxFluidRates",
                columns: table => new
                {
                    MaxFluidRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxFluidRates", x => x.MaxFluidRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxFluidRateTubings",
                columns: table => new
                {
                    MaxFluidRateTubingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxFluidRateTubings", x => x.MaxFluidRateTubingId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxGelRates",
                columns: table => new
                {
                    MaxGelRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxGelRates", x => x.MaxGelRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxJobPress",
                columns: table => new
                {
                    MaxJobPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxJobPress", x => x.MaxJobPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxN2StdRates",
                columns: table => new
                {
                    MaxN2StdRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxN2StdRates", x => x.MaxN2StdRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxOilRates",
                columns: table => new
                {
                    MaxOilRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxOilRates", x => x.MaxOilRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxPmaxPacPress",
                columns: table => new
                {
                    MaxPmaxPacPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxPmaxPacPress", x => x.MaxPmaxPacPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxPmaxWeaklinkPress",
                columns: table => new
                {
                    MaxPmaxWeaklinkPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxPmaxWeaklinkPress", x => x.MaxPmaxWeaklinkPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxPresAnnuluss",
                columns: table => new
                {
                    MaxPresAnnulusId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxPresAnnuluss", x => x.MaxPresAnnulusId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxPress",
                columns: table => new
                {
                    MaxPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxPress", x => x.MaxPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxPresTubings",
                columns: table => new
                {
                    MaxPresTubingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxPresTubings", x => x.MaxPresTubingId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxPropConcs",
                columns: table => new
                {
                    MaxPropConcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxPropConcs", x => x.MaxPropConcId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxProppantConcBottomholes",
                columns: table => new
                {
                    MaxProppantConcBottomholeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxProppantConcBottomholes", x => x.MaxProppantConcBottomholeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxProppantConcSurfaces",
                columns: table => new
                {
                    MaxProppantConcSurfaceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxProppantConcSurfaces", x => x.MaxProppantConcSurfaceId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxSlurryPropConcs",
                columns: table => new
                {
                    MaxSlurryPropConcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxSlurryPropConcs", x => x.MaxSlurryPropConcId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxSlurryRates",
                columns: table => new
                {
                    MaxSlurryRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxSlurryRates", x => x.MaxSlurryRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxTreatmentPress",
                columns: table => new
                {
                    MaxTreatmentPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxTreatmentPress", x => x.MaxTreatmentPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMaxWellheadRates",
                columns: table => new
                {
                    MaxWellheadRateId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMaxWellheadRates", x => x.MaxWellheadRateId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdBottomholes",
                columns: table => new
                {
                    MdBottomholeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdBottomholes", x => x.MdBottomholeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdBottoms",
                columns: table => new
                {
                    MdBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdBottoms", x => x.MdBottomId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdFormationBottoms",
                columns: table => new
                {
                    MdFormationBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdFormationBottoms", x => x.MdFormationBottomId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdFormationTops",
                columns: table => new
                {
                    MdFormationTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdFormationTops", x => x.MdFormationTopId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdGrossPayBottoms",
                columns: table => new
                {
                    MdGrossPayBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdGrossPayBottoms", x => x.MdGrossPayBottomId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdGrossPayTops",
                columns: table => new
                {
                    MdGrossPayTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdGrossPayTops", x => x.MdGrossPayTopId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdLithBottoms",
                columns: table => new
                {
                    MdLithBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdLithBottoms", x => x.MdLithBottomId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdLithTops",
                columns: table => new
                {
                    MdLithTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdLithTops", x => x.MdLithTopId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdMidPerforations",
                columns: table => new
                {
                    MdMidPerforationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdMidPerforations", x => x.MdMidPerforationId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdOpenHoleBottoms",
                columns: table => new
                {
                    MdOpenHoleBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdOpenHoleBottoms", x => x.MdOpenHoleBottomId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdOpenHoleTops",
                columns: table => new
                {
                    MdOpenHoleTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdOpenHoleTops", x => x.MdOpenHoleTopId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdPerforationsBottoms",
                columns: table => new
                {
                    MdPerforationsBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdPerforationsBottoms", x => x.MdPerforationsBottomId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdPerforationsTops",
                columns: table => new
                {
                    MdPerforationsTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdPerforationsTops", x => x.MdPerforationsTopId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdSurfaces",
                columns: table => new
                {
                    MdSurfaceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdSurfaces", x => x.MdSurfaceId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobMdTops",
                columns: table => new
                {
                    MdTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobMdTops", x => x.MdTopId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobNearWellboreFrictions",
                columns: table => new
                {
                    NearWellboreFrictionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobNearWellboreFrictions", x => x.NearWellboreFrictionId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobNetPayFluidCompressibilitys",
                columns: table => new
                {
                    NetPayFluidCompressibilityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobNetPayFluidCompressibilitys", x => x.NetPayFluidCompressibilityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobNetPayFluidViscositys",
                columns: table => new
                {
                    NetPayFluidViscosityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobNetPayFluidViscositys", x => x.NetPayFluidViscosityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobNetPayFormationPermeabilitys",
                columns: table => new
                {
                    NetPayFormationPermeabilityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobNetPayFormationPermeabilitys", x => x.NetPayFormationPermeabilityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobNetPayFormationPorositys",
                columns: table => new
                {
                    NetPayFormationPorosityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobNetPayFormationPorositys", x => x.NetPayFormationPorosityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobNetPayPorePress",
                columns: table => new
                {
                    NetPayPorePresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobNetPayPorePress", x => x.NetPayPorePresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobNetPayThicknesss",
                columns: table => new
                {
                    NetPayThicknessId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobNetPayThicknesss", x => x.NetPayThicknessId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobNetPress",
                columns: table => new
                {
                    NetPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobNetPress", x => x.NetPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobOds",
                columns: table => new
                {
                    OdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobOds", x => x.OdId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobOilVols",
                columns: table => new
                {
                    OilVolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobOilVols", x => x.OilVolId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobOilVolumes",
                columns: table => new
                {
                    OilVolumeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobOilVolumes", x => x.OilVolumeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobOpenHoleDiameters",
                columns: table => new
                {
                    OpenHoleDiameterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobOpenHoleDiameters", x => x.OpenHoleDiameterId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPercentPads",
                columns: table => new
                {
                    PercentPadId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPercentPads", x => x.PercentPadId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPercentProppantPumpeds",
                columns: table => new
                {
                    PercentProppantPumpedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPercentProppantPumpeds", x => x.PercentProppantPumpedId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPerfBallSizes",
                columns: table => new
                {
                    PerfBallSizeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPerfBallSizes", x => x.PerfBallSizeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPerfFrictions",
                columns: table => new
                {
                    PerfFrictionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPerfFrictions", x => x.PerfFrictionId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPerfproppantConcs",
                columns: table => new
                {
                    PerfproppantConcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPerfproppantConcs", x => x.PerfproppantConcId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPhasingPerforations",
                columns: table => new
                {
                    PhasingPerforationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPhasingPerforations", x => x.PhasingPerforationId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPipeFrictions",
                columns: table => new
                {
                    PipeFrictionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPipeFrictions", x => x.PipeFrictionId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPorePress",
                columns: table => new
                {
                    PorePresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPorePress", x => x.PorePresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPress",
                columns: table => new
                {
                    PresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPress", x => x.PresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPropMasss",
                columns: table => new
                {
                    PropMassId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPropMasss", x => x.PropMassId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobProppantMasss",
                columns: table => new
                {
                    ProppantMassId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobProppantMasss", x => x.ProppantMassId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobProppantMassWellHeads",
                columns: table => new
                {
                    ProppantMassWellHeadId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobProppantMassWellHeads", x => x.ProppantMassWellHeadId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPseudoRadialPress",
                columns: table => new
                {
                    PseudoRadialPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPseudoRadialPress", x => x.PseudoRadialPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPumpDurations",
                columns: table => new
                {
                    PumpDurationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPumpDurations", x => x.PumpDurationId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPumpTimes",
                columns: table => new
                {
                    PumpTimeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPumpTimes", x => x.PumpTimeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobReservoirTotalCompressibilitys",
                columns: table => new
                {
                    ReservoirTotalCompressibilityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobReservoirTotalCompressibilitys", x => x.ReservoirTotalCompressibilityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobResidualPermeabilitys",
                columns: table => new
                {
                    ResidualPermeabilityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobResidualPermeabilitys", x => x.ResidualPermeabilityId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobScreenOutPress",
                columns: table => new
                {
                    ScreenOutPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobScreenOutPress", x => x.ScreenOutPresId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobShutinPres10Mins",
                columns: table => new
                {
                    ShutinPres10MinId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobShutinPres10Mins", x => x.ShutinPres10MinId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobShutinPres15Mins",
                columns: table => new
                {
                    ShutinPres15MinId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobShutinPres15Mins", x => x.ShutinPres15MinId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobShutinPres5Mins",
                columns: table => new
                {
                    ShutinPres5MinId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobShutinPres5Mins", x => x.ShutinPres5MinId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobSizes",
                columns: table => new
                {
                    SizeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobSizes", x => x.SizeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobSlurryRateBegins",
                columns: table => new
                {
                    SlurryRateBeginId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobSlurryRateBegins", x => x.SlurryRateBeginId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobSlurryRateEnds",
                columns: table => new
                {
                    SlurryRateEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobSlurryRateEnds", x => x.SlurryRateEndId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobSlurryVols",
                columns: table => new
                {
                    SlurryVolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobSlurryVols", x => x.SlurryVolId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStartFoamRateCO2s",
                columns: table => new
                {
                    StartFoamRateCO2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStartFoamRateCO2s", x => x.StartFoamRateCO2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStartFoamRateN2s",
                columns: table => new
                {
                    StartFoamRateN2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStartFoamRateN2s", x => x.StartFoamRateN2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStartPresBottomholes",
                columns: table => new
                {
                    StartPresBottomholeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStartPresBottomholes", x => x.StartPresBottomholeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStartPresSurfaces",
                columns: table => new
                {
                    StartPresSurfaceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStartPresSurfaces", x => x.StartPresSurfaceId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStartProppantConcBottomholes",
                columns: table => new
                {
                    StartProppantConcBottomholeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStartProppantConcBottomholes", x => x.StartProppantConcBottomholeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStartProppantConcSurfaces",
                columns: table => new
                {
                    StartProppantConcSurfaceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStartProppantConcSurfaces", x => x.StartProppantConcSurfaceId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStartPumpRateBottomholes",
                columns: table => new
                {
                    StartPumpRateBottomholeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStartPumpRateBottomholes", x => x.StartPumpRateBottomholeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStartRateSurfaceCO2s",
                columns: table => new
                {
                    StartRateSurfaceCO2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStartRateSurfaceCO2s", x => x.StartRateSurfaceCO2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStartRateSurfaceLiquids",
                columns: table => new
                {
                    StartRateSurfaceLiquidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStartRateSurfaceLiquids", x => x.StartRateSurfaceLiquidId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStartStdRateSurfaceN2s",
                columns: table => new
                {
                    StartStdRateSurfaceN2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStartStdRateSurfaceN2s", x => x.StartStdRateSurfaceN2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStdVolN2s",
                columns: table => new
                {
                    StdVolN2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStdVolN2s", x => x.StdVolN2Id);
                });

            migrationBuilder.CreateTable(
                name: "StimJobSurfaceFluidTemperatures",
                columns: table => new
                {
                    SurfaceFluidTemperatureId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobSurfaceFluidTemperatures", x => x.SurfaceFluidTemperatureId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobSurfaceTemperatures",
                columns: table => new
                {
                    SurfaceTemperatureId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobSurfaceTemperatures", x => x.SurfaceTemperatureId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTimeAfterShutins",
                columns: table => new
                {
                    TimeAfterShutinId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTimeAfterShutins", x => x.TimeAfterShutinId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTotalCO2Masss",
                columns: table => new
                {
                    TotalCO2MassId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTotalCO2Masss", x => x.TotalCO2MassId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTotalFrictionPresLosss",
                columns: table => new
                {
                    TotalFrictionPresLossId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTotalFrictionPresLosss", x => x.TotalFrictionPresLossId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTotalJobVolumes",
                columns: table => new
                {
                    TotalJobVolumeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTotalJobVolumes", x => x.TotalJobVolumeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTotalN2StdVolumes",
                columns: table => new
                {
                    TotalN2StdVolumeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTotalN2StdVolumes", x => x.TotalN2StdVolumeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTotalProppantMasss",
                columns: table => new
                {
                    TotalProppantMassId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTotalProppantMasss", x => x.TotalProppantMassId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTotalProppantWts",
                columns: table => new
                {
                    TotalProppantWtId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTotalProppantWts", x => x.TotalProppantWtId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTotalPumpTimes",
                columns: table => new
                {
                    TotalPumpTimeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTotalPumpTimes", x => x.TotalPumpTimeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTotalVolumes",
                columns: table => new
                {
                    TotalVolumeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTotalVolumes", x => x.TotalVolumeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTreatingBottomholeTemperatures",
                columns: table => new
                {
                    TreatingBottomholeTemperatureId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTreatingBottomholeTemperatures", x => x.TreatingBottomholeTemperatureId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTvdFormationBottoms",
                columns: table => new
                {
                    TvdFormationBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTvdFormationBottoms", x => x.TvdFormationBottomId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTvdFormationTops",
                columns: table => new
                {
                    TvdFormationTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTvdFormationTops", x => x.TvdFormationTopId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTvdMidPerforations",
                columns: table => new
                {
                    TvdMidPerforationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTvdMidPerforations", x => x.TvdMidPerforationId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTvdOpenHoleBottoms",
                columns: table => new
                {
                    TvdOpenHoleBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTvdOpenHoleBottoms", x => x.TvdOpenHoleBottomId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTvdOpenHoleTops",
                columns: table => new
                {
                    TvdOpenHoleTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTvdOpenHoleTops", x => x.TvdOpenHoleTopId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTvdPerforationsBottoms",
                columns: table => new
                {
                    TvdPerforationsBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTvdPerforationsBottoms", x => x.TvdPerforationsBottomId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTvdPerforationsTops",
                columns: table => new
                {
                    TvdPerforationsTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTvdPerforationsTops", x => x.TvdPerforationsTopId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobVolumeFactors",
                columns: table => new
                {
                    VolumeFactorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobVolumeFactors", x => x.VolumeFactorId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobVolumes",
                columns: table => new
                {
                    VolumeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobVolumes", x => x.VolumeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobWeights",
                columns: table => new
                {
                    WeightId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobWeights", x => x.WeightId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobWellboreProppantMasss",
                columns: table => new
                {
                    WellboreProppantMassId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobWellboreProppantMasss", x => x.WellboreProppantMassId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobWellboreVolumes",
                columns: table => new
                {
                    WellboreVolumeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobWellboreVolumes", x => x.WellboreVolumeId);
                });

            migrationBuilder.CreateTable(
                name: "StimJobWellheadVols",
                columns: table => new
                {
                    StdVolN2Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobWellheadVols", x => x.StdVolN2Id);
                });

            migrationBuilder.CreateTable(
                name: "SurveyProgramCommonData",
                columns: table => new
                {
                    SurveyProgramCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyProgramCommonData", x => x.SurveyProgramCommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "SurveyProgramFrequencyMx",
                columns: table => new
                {
                    FrequencyMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyProgramFrequencyMx", x => x.FrequencyMxId);
                });

            migrationBuilder.CreateTable(
                name: "SurveyProgramMdEnd",
                columns: table => new
                {
                    MdEndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyProgramMdEnd", x => x.MdEndId);
                });

            migrationBuilder.CreateTable(
                name: "SurveyProgramMdStart",
                columns: table => new
                {
                    MdStartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyProgramMdStart", x => x.MdStartId);
                });

            migrationBuilder.CreateTable(
                name: "TargetAngleArcs",
                columns: table => new
                {
                    AngleArcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetAngleArcs", x => x.AngleArcId);
                });

            migrationBuilder.CreateTable(
                name: "TargetCommonDatas",
                columns: table => new
                {
                    TargetCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetCommonDatas", x => x.TargetCommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "TargetDips",
                columns: table => new
                {
                    DipId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetDips", x => x.DipId);
                });

            migrationBuilder.CreateTable(
                name: "TargetDispEwCenters",
                columns: table => new
                {
                    DispEwCenterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetDispEwCenters", x => x.DispEwCenterId);
                });

            migrationBuilder.CreateTable(
                name: "TargetDispEwOffsets",
                columns: table => new
                {
                    DispEwOffsetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetDispEwOffsets", x => x.DispEwOffsetId);
                });

            migrationBuilder.CreateTable(
                name: "TargetDispEwSectOrigs",
                columns: table => new
                {
                    DispEwSectOrigId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetDispEwSectOrigs", x => x.DispEwSectOrigId);
                });

            migrationBuilder.CreateTable(
                name: "TargetDispNsCenters",
                columns: table => new
                {
                    DispNsCenterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetDispNsCenters", x => x.DispNsCenterId);
                });

            migrationBuilder.CreateTable(
                name: "TargetDispNsOffsets",
                columns: table => new
                {
                    DispNsOffsetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetDispNsOffsets", x => x.DispNsOffsetId);
                });

            migrationBuilder.CreateTable(
                name: "TargetDispNsSectOrigs",
                columns: table => new
                {
                    DispNsSectOrigId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetDispNsSectOrigs", x => x.DispNsSectOrigId);
                });

            migrationBuilder.CreateTable(
                name: "TargetLatitudes",
                columns: table => new
                {
                    LatitudeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetLatitudes", x => x.LatitudeId);
                });

            migrationBuilder.CreateTable(
                name: "TargetLenMajorAxiss",
                columns: table => new
                {
                    LenMajorAxisId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetLenMajorAxiss", x => x.LenMajorAxisId);
                });

            migrationBuilder.CreateTable(
                name: "TargetLenRadiuss",
                columns: table => new
                {
                    LenRadiusId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetLenRadiuss", x => x.LenRadiusId);
                });

            migrationBuilder.CreateTable(
                name: "TargetLongitudes",
                columns: table => new
                {
                    LongitudeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetLongitudes", x => x.LongitudeId);
                });

            migrationBuilder.CreateTable(
                name: "TargetProjectedXs",
                columns: table => new
                {
                    ProjectedXId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetProjectedXs", x => x.ProjectedXId);
                });

            migrationBuilder.CreateTable(
                name: "TargetProjectedYs",
                columns: table => new
                {
                    ProjectedYId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetProjectedYs", x => x.ProjectedYId);
                });

            migrationBuilder.CreateTable(
                name: "TargetRotations",
                columns: table => new
                {
                    RotationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetRotations", x => x.RotationId);
                });

            migrationBuilder.CreateTable(
                name: "TargetStrikes",
                columns: table => new
                {
                    StrikeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetStrikes", x => x.StrikeId);
                });

            migrationBuilder.CreateTable(
                name: "TargetThickAboves",
                columns: table => new
                {
                    ThickAboveId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetThickAboves", x => x.ThickAboveId);
                });

            migrationBuilder.CreateTable(
                name: "TargetThickBelows",
                columns: table => new
                {
                    ThickBelowId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetThickBelows", x => x.ThickBelowId);
                });

            migrationBuilder.CreateTable(
                name: "TargetTvds",
                columns: table => new
                {
                    TvdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetTvds", x => x.TvdId);
                });

            migrationBuilder.CreateTable(
                name: "TargetWellCRSs",
                columns: table => new
                {
                    WellCRSId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetWellCRSs", x => x.WellCRSId);
                });

            migrationBuilder.CreateTable(
                name: "TargetWidMinorAxiss",
                columns: table => new
                {
                    WidMinorAxisId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetWidMinorAxiss", x => x.WidMinorAxisId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelAuthorizations",
                columns: table => new
                {
                    AuthorizationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Author = table.Column<string>(nullable: true),
                    Source = table.Column<string>(nullable: true),
                    Authority = table.Column<string>(nullable: true),
                    Status = table.Column<string>(nullable: true),
                    Version = table.Column<string>(nullable: true),
                    Comment = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelAuthorizations", x => x.AuthorizationId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelCommonDatas",
                columns: table => new
                {
                    ToolErrorModelCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTimLastChange = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelCommonDatas", x => x.ToolErrorModelCommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelEnds",
                columns: table => new
                {
                    EndId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelEnds", x => x.EndId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelGyroInitializations",
                columns: table => new
                {
                    GyroInitializationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelGyroInitializations", x => x.GyroInitializationId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelGyroReinitializationDistances",
                columns: table => new
                {
                    GyroReinitializationDistanceId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelGyroReinitializationDistances", x => x.GyroReinitializationDistanceId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelMaxs",
                columns: table => new
                {
                    MaxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelMaxs", x => x.MaxId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelMins",
                columns: table => new
                {
                    MinId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelMins", x => x.MinId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelSpeeds",
                columns: table => new
                {
                    SpeedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelSpeeds", x => x.SpeedId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelStarts",
                columns: table => new
                {
                    StartId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelStarts", x => x.StartId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelTerms",
                columns: table => new
                {
                    TermId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelTerms", x => x.TermId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelUseErrorTermSets",
                columns: table => new
                {
                    UseErrorTermSetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelUseErrorTermSets", x => x.UseErrorTermSetId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelValues",
                columns: table => new
                {
                    ValueId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelValues", x => x.ValueId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorTermSetAuthorizations",
                columns: table => new
                {
                    AuthorizationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Author = table.Column<string>(nullable: true),
                    Source = table.Column<string>(nullable: true),
                    Authority = table.Column<string>(nullable: true),
                    Status = table.Column<string>(nullable: true),
                    Version = table.Column<string>(nullable: true),
                    Comment = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorTermSetAuthorizations", x => x.AuthorizationId);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorTermSetConstants",
                columns: table => new
                {
                    ConstantId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    Value = table.Column<string>(nullable: true),
                    Unit = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorTermSetConstants", x => x.ConstantId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryAzis",
                columns: table => new
                {
                    AziId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryAzis", x => x.AziId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryAziVertSects",
                columns: table => new
                {
                    AziVertSectId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryAziVertSects", x => x.AziVertSectId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryBiasEs",
                columns: table => new
                {
                    BiasEId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryBiasEs", x => x.BiasEId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryBiasNs",
                columns: table => new
                {
                    BiasNDtId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryBiasNs", x => x.BiasNDtId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryBiasVerts",
                columns: table => new
                {
                    BiasVertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryBiasVerts", x => x.BiasVertId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryCommonDatas",
                columns: table => new
                {
                    TrajectoryCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryCommonDatas", x => x.TrajectoryCommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryDipAngleUncerts",
                columns: table => new
                {
                    DipAngleUncertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryDipAngleUncerts", x => x.DipAngleUncertId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryDirSensorOffsets",
                columns: table => new
                {
                    DirSensorOffsetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryDirSensorOffsets", x => x.DirSensorOffsetId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryDispEws",
                columns: table => new
                {
                    DispEwId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryDispEws", x => x.DispEwId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryDispEwVertSectOrigs",
                columns: table => new
                {
                    DispEwVertSectOrigId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryDispEwVertSectOrigs", x => x.DispEwVertSectOrigId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryDispNss",
                columns: table => new
                {
                    DispNsId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryDispNss", x => x.DispNsId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryDispNsVertSectOrigs",
                columns: table => new
                {
                    DispNsVertSectOrigId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryDispNsVertSectOrigs", x => x.DispNsVertSectOrigId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryDlss",
                columns: table => new
                {
                    DlsId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryDlss", x => x.DlsId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryEastings",
                columns: table => new
                {
                    EastingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryEastings", x => x.EastingId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryGravAxialAccelCors",
                columns: table => new
                {
                    GravAxialAccelCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryGravAxialAccelCors", x => x.GravAxialAccelCorId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryGravAxialRaws",
                columns: table => new
                {
                    GravAxialRawId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryGravAxialRaws", x => x.GravAxialRawId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryGravTotalFieldCalcs",
                columns: table => new
                {
                    GravTotalFieldCalcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryGravTotalFieldCalcs", x => x.GravTotalFieldCalcId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryGravTotalUncerts",
                columns: table => new
                {
                    GravTotalUncertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryGravTotalUncerts", x => x.GravTotalUncertId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryGravTran1AccelCors",
                columns: table => new
                {
                    GravTran1AccelCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryGravTran1AccelCors", x => x.GravTran1AccelCorId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryGravTran1Raws",
                columns: table => new
                {
                    GravTran1RawId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryGravTran1Raws", x => x.GravTran1RawId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryGravTran2AccelCors",
                columns: table => new
                {
                    GravTran2AccelCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryGravTran2AccelCors", x => x.GravTran2AccelCorId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryGravTran2Raws",
                columns: table => new
                {
                    GravTran2RawId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryGravTran2Raws", x => x.GravTran2RawId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryGridCorUseds",
                columns: table => new
                {
                    GridCorUsedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryGridCorUseds", x => x.GridCorUsedId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryGtfs",
                columns: table => new
                {
                    GtfId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryGtfs", x => x.GtfId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryIncls",
                columns: table => new
                {
                    InclId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryIncls", x => x.InclId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryLatitudes",
                columns: table => new
                {
                    LatitudeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryLatitudes", x => x.LatitudeId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryLongitudes",
                columns: table => new
                {
                    LongitudeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryLongitudes", x => x.LongitudeId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMagAxialDrlstrCors",
                columns: table => new
                {
                    MagAxialDrlstrCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMagAxialDrlstrCors", x => x.MagAxialDrlstrCorId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMagAxialRaws",
                columns: table => new
                {
                    MagAxialRawId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMagAxialRaws", x => x.MagAxialRawId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMagDeclUseds",
                columns: table => new
                {
                    MagDeclUsedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMagDeclUseds", x => x.MagDeclUsedId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMagDipAngleCalcs",
                columns: table => new
                {
                    MagDipAngleCalcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMagDipAngleCalcs", x => x.MagDipAngleCalcId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMagTotalFieldCalcs",
                columns: table => new
                {
                    MagTotalFieldCalcId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMagTotalFieldCalcs", x => x.MagTotalFieldCalcId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMagTotalUncerts",
                columns: table => new
                {
                    MagTotalUncertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMagTotalUncerts", x => x.MagTotalUncertId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMagTran1DrlstrCors",
                columns: table => new
                {
                    MagTran1DrlstrCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMagTran1DrlstrCors", x => x.MagTran1DrlstrCorId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMagTran1Raws",
                columns: table => new
                {
                    MagTran1RawId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMagTran1Raws", x => x.MagTran1RawId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMagTran2DrlstrCors",
                columns: table => new
                {
                    MagTran2DrlstrCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMagTran2DrlstrCors", x => x.MagTran2DrlstrCorId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMagTran2Raws",
                columns: table => new
                {
                    MagTran2RawId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMagTran2Raws", x => x.MagTran2RawId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMdDeltas",
                columns: table => new
                {
                    MdDeltaId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMdDeltas", x => x.MdDeltaId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMdMns",
                columns: table => new
                {
                    MdMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMdMns", x => x.MdMnId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMdMxs",
                columns: table => new
                {
                    MdMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMdMxs", x => x.MdMxId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMds",
                columns: table => new
                {
                    MdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMds", x => x.MdId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMtfs",
                columns: table => new
                {
                    MtfId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMtfs", x => x.MtfId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryNorthings",
                columns: table => new
                {
                    NorthingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryNorthings", x => x.NorthingId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryRateBuilds",
                columns: table => new
                {
                    RateBuildId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryRateBuilds", x => x.RateBuildId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryRateTurns",
                columns: table => new
                {
                    RateTurnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryRateTurns", x => x.RateTurnId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectorySagAziCors",
                columns: table => new
                {
                    SagAziCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectorySagAziCors", x => x.SagAziCorId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectorySagIncCors",
                columns: table => new
                {
                    SagIncCorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectorySagIncCors", x => x.SagIncCorId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryStnGridCorUseds",
                columns: table => new
                {
                    StnGridCorUsedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryStnGridCorUseds", x => x.StnGridCorUsedId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryStnMagDeclUseds",
                columns: table => new
                {
                    StnMagDeclUsedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryStnMagDeclUseds", x => x.StnMagDeclUsedId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryTvdDeltas",
                columns: table => new
                {
                    TvdDeltaId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryTvdDeltas", x => x.TvdDeltaId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryTvds",
                columns: table => new
                {
                    TvdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryTvds", x => x.TvdId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryVarianceEEs",
                columns: table => new
                {
                    VarianceEEId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryVarianceEEs", x => x.VarianceEEId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryVarianceEVerts",
                columns: table => new
                {
                    VarianceEVertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryVarianceEVerts", x => x.VarianceEVertId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryVarianceNEs",
                columns: table => new
                {
                    VarianceNEId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryVarianceNEs", x => x.VarianceNEId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryVarianceNNs",
                columns: table => new
                {
                    VarianceNNId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryVarianceNNs", x => x.VarianceNNId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryVarianceNVerts",
                columns: table => new
                {
                    VarianceNVertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryVarianceNVerts", x => x.VarianceNVertId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryVarianceVertVerts",
                columns: table => new
                {
                    VarianceVertVertId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryVarianceVertVerts", x => x.VarianceVertVertId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryVertSects",
                columns: table => new
                {
                    VertSectId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryVertSects", x => x.VertSectId);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryWellCRSs",
                columns: table => new
                {
                    UidRef = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryWellCRSs", x => x.UidRef);
                });

            migrationBuilder.CreateTable(
                name: "TubularAngle",
                columns: table => new
                {
                    AngleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularAngle", x => x.AngleId);
                });

            migrationBuilder.CreateTable(
                name: "TubularAreaNozzleFlow",
                columns: table => new
                {
                    AreaNozzleFlowId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularAreaNozzleFlow", x => x.AreaNozzleFlowId);
                });

            migrationBuilder.CreateTable(
                name: "TubularAxialStiffness",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularAxialStiffness", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TubularBendSettingsMn",
                columns: table => new
                {
                    BendSettingsMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularBendSettingsMn", x => x.BendSettingsMnId);
                });

            migrationBuilder.CreateTable(
                name: "TubularBendSettingsMx",
                columns: table => new
                {
                    BendSettingsMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularBendSettingsMx", x => x.BendSettingsMxId);
                });

            migrationBuilder.CreateTable(
                name: "TubularBendStiffness",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularBendStiffness", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TubularClearanceBearBox",
                columns: table => new
                {
                    ClearanceBearBoxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularClearanceBearBox", x => x.ClearanceBearBoxId);
                });

            migrationBuilder.CreateTable(
                name: "TubularCommonDatas",
                columns: table => new
                {
                    TubularyCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularCommonDatas", x => x.TubularyCommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "TubularCosts",
                columns: table => new
                {
                    CostId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Currency = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularCosts", x => x.CostId);
                });

            migrationBuilder.CreateTable(
                name: "TubularCriticalCrossSection",
                columns: table => new
                {
                    CriticalCrossSectionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularCriticalCrossSection", x => x.CriticalCrossSectionId);
                });

            migrationBuilder.CreateTable(
                name: "TubularDiaBits",
                columns: table => new
                {
                    DiaBitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularDiaBits", x => x.DiaBitId);
                });

            migrationBuilder.CreateTable(
                name: "TubularDiaHoleAssy",
                columns: table => new
                {
                    DiaHoleAssyId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularDiaHoleAssy", x => x.DiaHoleAssyId);
                });

            migrationBuilder.CreateTable(
                name: "TubularDiaHoleOpener",
                columns: table => new
                {
                    DiaHoleOpenerId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularDiaHoleOpener", x => x.DiaHoleOpenerId);
                });

            migrationBuilder.CreateTable(
                name: "TubularDiaNozzle",
                columns: table => new
                {
                    DiaNozzleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularDiaNozzle", x => x.DiaNozzleId);
                });

            migrationBuilder.CreateTable(
                name: "TubularDiaPassThrus",
                columns: table => new
                {
                    DiaPassThruId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularDiaPassThrus", x => x.DiaPassThruId);
                });

            migrationBuilder.CreateTable(
                name: "TubularDiaPilot",
                columns: table => new
                {
                    DiaPilotId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularDiaPilot", x => x.DiaPilotId);
                });

            migrationBuilder.CreateTable(
                name: "TubularDiaRotorNozzle",
                columns: table => new
                {
                    DiaRotorNozzleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularDiaRotorNozzle", x => x.DiaRotorNozzleId);
                });

            migrationBuilder.CreateTable(
                name: "TubularDisp",
                columns: table => new
                {
                    DispId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularDisp", x => x.DispId);
                });

            migrationBuilder.CreateTable(
                name: "TubularDistBendBot",
                columns: table => new
                {
                    DistBendBotId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularDistBendBot", x => x.DistBendBotId);
                });

            migrationBuilder.CreateTable(
                name: "TubularDistBladeBot",
                columns: table => new
                {
                    DistBladeBotId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularDistBladeBot", x => x.DistBladeBotId);
                });

            migrationBuilder.CreateTable(
                name: "TubularDoglegMx",
                columns: table => new
                {
                    DoglegMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularDoglegMx", x => x.DoglegMxId);
                });

            migrationBuilder.CreateTable(
                name: "TubularFlowrateMn",
                columns: table => new
                {
                    FlowrateMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularFlowrateMn", x => x.FlowrateMnId);
                });

            migrationBuilder.CreateTable(
                name: "TubularFlowrateMx",
                columns: table => new
                {
                    FlowrateMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularFlowrateMx", x => x.FlowrateMxId);
                });

            migrationBuilder.CreateTable(
                name: "TubularForDownSet",
                columns: table => new
                {
                    ForDownSetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularForDownSet", x => x.ForDownSetId);
                });

            migrationBuilder.CreateTable(
                name: "TubularForDownTrip",
                columns: table => new
                {
                    ForDownTripId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularForDownTrip", x => x.ForDownTripId);
                });

            migrationBuilder.CreateTable(
                name: "TubularForPmpOpen",
                columns: table => new
                {
                    ForPmpOpenId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularForPmpOpen", x => x.ForPmpOpenId);
                });

            migrationBuilder.CreateTable(
                name: "TubularForSealFric",
                columns: table => new
                {
                    ForSealFricId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularForSealFric", x => x.ForSealFricId);
                });

            migrationBuilder.CreateTable(
                name: "TubularForUpSet",
                columns: table => new
                {
                    ForUpSetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularForUpSet", x => x.ForUpSetId);
                });

            migrationBuilder.CreateTable(
                name: "TubularForUpTrip",
                columns: table => new
                {
                    ForUpTripId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularForUpTrip", x => x.ForUpTripId);
                });

            migrationBuilder.CreateTable(
                name: "TubularId",
                columns: table => new
                {
                    TubularIdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularId", x => x.TubularIdId);
                });

            migrationBuilder.CreateTable(
                name: "TubularIdEquv",
                columns: table => new
                {
                    IdEquvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularIdEquv", x => x.IdEquvId);
                });

            migrationBuilder.CreateTable(
                name: "TubularIdFishneck",
                columns: table => new
                {
                    IdFishneckId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularIdFishneck", x => x.IdFishneckId);
                });

            migrationBuilder.CreateTable(
                name: "TubularLen",
                columns: table => new
                {
                    LenId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularLen", x => x.LenId);
                });

            migrationBuilder.CreateTable(
                name: "TubularLenBlade",
                columns: table => new
                {
                    LenBladeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularLenBlade", x => x.LenBladeId);
                });

            migrationBuilder.CreateTable(
                name: "TubularLenFishneck",
                columns: table => new
                {
                    LenFishneckId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularLenFishneck", x => x.LenFishneckId);
                });

            migrationBuilder.CreateTable(
                name: "TubularLenJointAv",
                columns: table => new
                {
                    LenJointAvId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularLenJointAv", x => x.LenJointAvId);
                });

            migrationBuilder.CreateTable(
                name: "TubularNameTag",
                columns: table => new
                {
                    NameTagId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    NumberingScheme = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularNameTag", x => x.NameTagId);
                });

            migrationBuilder.CreateTable(
                name: "TubularOd",
                columns: table => new
                {
                    OdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularOd", x => x.OdId);
                });

            migrationBuilder.CreateTable(
                name: "TubularOdBladeMn",
                columns: table => new
                {
                    OdBladeMnId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularOdBladeMn", x => x.OdBladeMnId);
                });

            migrationBuilder.CreateTable(
                name: "TubularOdBladeMx",
                columns: table => new
                {
                    OdBladeMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularOdBladeMx", x => x.OdBladeMxId);
                });

            migrationBuilder.CreateTable(
                name: "TubularOdDrifts",
                columns: table => new
                {
                    OdDriftId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularOdDrifts", x => x.OdDriftId);
                });

            migrationBuilder.CreateTable(
                name: "TubularOdFishneck",
                columns: table => new
                {
                    OdFishneckId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularOdFishneck", x => x.OdFishneckId);
                });

            migrationBuilder.CreateTable(
                name: "TubularOffsetBot",
                columns: table => new
                {
                    OffsetBotId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularOffsetBot", x => x.OffsetBotId);
                });

            migrationBuilder.CreateTable(
                name: "TubularOffsetTool",
                columns: table => new
                {
                    OffsetToolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularOffsetTool", x => x.OffsetToolId);
                });

            migrationBuilder.CreateTable(
                name: "TubularPresBurst",
                columns: table => new
                {
                    PresBurstId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularPresBurst", x => x.PresBurstId);
                });

            migrationBuilder.CreateTable(
                name: "TubularPresCollapse",
                columns: table => new
                {
                    PresCollapseId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularPresCollapse", x => x.PresCollapseId);
                });

            migrationBuilder.CreateTable(
                name: "TubularPresLeak",
                columns: table => new
                {
                    PresLeakId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularPresLeak", x => x.PresLeakId);
                });

            migrationBuilder.CreateTable(
                name: "TubularSizeThread",
                columns: table => new
                {
                    SizeThreadId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularSizeThread", x => x.SizeThreadId);
                });

            migrationBuilder.CreateTable(
                name: "TubularStressFatig",
                columns: table => new
                {
                    StressFatigId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularStressFatig", x => x.StressFatigId);
                });

            migrationBuilder.CreateTable(
                name: "TubularTempMx",
                columns: table => new
                {
                    TempMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularTempMx", x => x.TempMxId);
                });

            migrationBuilder.CreateTable(
                name: "TubularTempOpMx",
                columns: table => new
                {
                    TempOpMxId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularTempOpMx", x => x.TempOpMxId);
                });

            migrationBuilder.CreateTable(
                name: "TubularTensYield",
                columns: table => new
                {
                    TensYieldId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularTensYield", x => x.TensYieldId);
                });

            migrationBuilder.CreateTable(
                name: "TubularThickWall",
                columns: table => new
                {
                    ThickWallId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularThickWall", x => x.ThickWallId);
                });

            migrationBuilder.CreateTable(
                name: "TubularTorsionalStiffness",
                columns: table => new
                {
                    TorsionalStiffnessId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularTorsionalStiffness", x => x.TorsionalStiffnessId);
                });

            migrationBuilder.CreateTable(
                name: "TubularTqMakeup",
                columns: table => new
                {
                    TqMakeupId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularTqMakeup", x => x.TqMakeupId);
                });

            migrationBuilder.CreateTable(
                name: "TubularTqYield",
                columns: table => new
                {
                    TqYieldId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularTqYield", x => x.TqYieldId);
                });

            migrationBuilder.CreateTable(
                name: "TubularWearWall",
                columns: table => new
                {
                    WearWallId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularWearWall", x => x.WearWallId);
                });

            migrationBuilder.CreateTable(
                name: "TubularWtPerLen",
                columns: table => new
                {
                    WtPerLenId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularWtPerLen", x => x.WtPerLenId);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometryCommonData",
                columns: table => new
                {
                    WbGeometryCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometryCommonData", x => x.WbGeometryCommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometryDepthWaterMean",
                columns: table => new
                {
                    DepthWaterMeanId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometryDepthWaterMean", x => x.DepthWaterMeanId);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometryDiaDrift",
                columns: table => new
                {
                    DiaDriftId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometryDiaDrift", x => x.DiaDriftId);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometryGapAir",
                columns: table => new
                {
                    GapAirId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometryGapAir", x => x.GapAirId);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometryIdSection",
                columns: table => new
                {
                    IdSectionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometryIdSection", x => x.IdSectionId);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometryMdBottom",
                columns: table => new
                {
                    DiaDriftId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MdBottomId = table.Column<int>(nullable: false),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometryMdBottom", x => x.DiaDriftId);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometryMdTop",
                columns: table => new
                {
                    MdTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometryMdTop", x => x.MdTopId);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometryOdSection",
                columns: table => new
                {
                    OdSectionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometryOdSection", x => x.OdSectionId);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometryTvdBottom",
                columns: table => new
                {
                    TvdBottomId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometryTvdBottom", x => x.TvdBottomId);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometryTvdTop",
                columns: table => new
                {
                    TvdTopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometryTvdTop", x => x.TvdTopId);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometryWtPerLen",
                columns: table => new
                {
                    WtPerLenId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometryWtPerLen", x => x.WtPerLenId);
                });

            migrationBuilder.CreateTable(
                name: "WellBoreCommonData",
                columns: table => new
                {
                    WellBoreCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTimCreation = table.Column<DateTime>(nullable: false),
                    DTimLastChange = table.Column<DateTime>(nullable: false),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellBoreCommonData", x => x.WellBoreCommonDataId);
                });

            migrationBuilder.CreateTable(
                name: "WellboreDayTarget",
                columns: table => new
                {
                    DayTargetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellboreDayTarget", x => x.DayTargetId);
                });

            migrationBuilder.CreateTable(
                name: "WellboreMd",
                columns: table => new
                {
                    MdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellboreMd", x => x.MdId);
                });

            migrationBuilder.CreateTable(
                name: "WellboreMdKickoff",
                columns: table => new
                {
                    MdKickoffId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellboreMdKickoff", x => x.MdKickoffId);
                });

            migrationBuilder.CreateTable(
                name: "WellboreMdPlanned",
                columns: table => new
                {
                    MdPlannedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellboreMdPlanned", x => x.MdPlannedId);
                });

            migrationBuilder.CreateTable(
                name: "WellboreMdSubSeaPlanned",
                columns: table => new
                {
                    MdSubSeaPlannedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellboreMdSubSeaPlanned", x => x.MdSubSeaPlannedId);
                });

            migrationBuilder.CreateTable(
                name: "WellboreParentWellbore",
                columns: table => new
                {
                    ParentWellboreId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellboreParentWellbore", x => x.ParentWellboreId);
                });

            migrationBuilder.CreateTable(
                name: "WellboreTvd",
                columns: table => new
                {
                    TvdId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellboreTvd", x => x.TvdId);
                });

            migrationBuilder.CreateTable(
                name: "WellboreTvdKickoff",
                columns: table => new
                {
                    TvdKickoffId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellboreTvdKickoff", x => x.TvdKickoffId);
                });

            migrationBuilder.CreateTable(
                name: "WellboreTvdPlanned",
                columns: table => new
                {
                    TvdPlannedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellboreTvdPlanned", x => x.TvdPlannedId);
                });

            migrationBuilder.CreateTable(
                name: "WellboreTvdSubSeaPlanned",
                columns: table => new
                {
                    TvdSubSeaPlannedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellboreTvdSubSeaPlanned", x => x.TvdSubSeaPlannedId);
                });

            migrationBuilder.CreateTable(
                name: "WellDatumNames",
                columns: table => new
                {
                    DatumNameId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(nullable: true),
                    NamingSystem = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellDatumNames", x => x.DatumNameId);
                });

            migrationBuilder.CreateTable(
                name: "WellDefaultDatums",
                columns: table => new
                {
                    DefaultDatumId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellDefaultDatums", x => x.DefaultDatumId);
                });

            migrationBuilder.CreateTable(
                name: "WellEastings",
                columns: table => new
                {
                    EastingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellEastings", x => x.EastingId);
                });

            migrationBuilder.CreateTable(
                name: "WellElevations",
                columns: table => new
                {
                    ElevationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Datum = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellElevations", x => x.ElevationId);
                });

            migrationBuilder.CreateTable(
                name: "WellGeodeticCRSs",
                columns: table => new
                {
                    GeodeticCRSId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellGeodeticCRSs", x => x.GeodeticCRSId);
                });

            migrationBuilder.CreateTable(
                name: "WellGroundElevations",
                columns: table => new
                {
                    GroundElevationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellGroundElevations", x => x.GroundElevationId);
                });

            migrationBuilder.CreateTable(
                name: "WellheadElevations",
                columns: table => new
                {
                    ElevationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellheadElevations", x => x.ElevationId);
                });

            migrationBuilder.CreateTable(
                name: "WellLatitudes",
                columns: table => new
                {
                    LatitudeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellLatitudes", x => x.LatitudeId);
                });

            migrationBuilder.CreateTable(
                name: "WellLocalXs",
                columns: table => new
                {
                    LocalXId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellLocalXs", x => x.LocalXId);
                });

            migrationBuilder.CreateTable(
                name: "WellLocalYs",
                columns: table => new
                {
                    LocalYId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellLocalYs", x => x.LocalYId);
                });

            migrationBuilder.CreateTable(
                name: "WellLongitudes",
                columns: table => new
                {
                    LongitudeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellLongitudes", x => x.LongitudeId);
                });

            migrationBuilder.CreateTable(
                name: "WellMapProjectionCRSs",
                columns: table => new
                {
                    MapProjectionCRSId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidRef = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellMapProjectionCRSs", x => x.MapProjectionCRSId);
                });

            migrationBuilder.CreateTable(
                name: "WellMeasuredDepths",
                columns: table => new
                {
                    MeasuredDepthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Datum = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellMeasuredDepths", x => x.MeasuredDepthId);
                });

            migrationBuilder.CreateTable(
                name: "WellNorthings",
                columns: table => new
                {
                    NorthingId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellNorthings", x => x.NorthingId);
                });

            migrationBuilder.CreateTable(
                name: "WellPcInterests",
                columns: table => new
                {
                    PcInterestId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellPcInterests", x => x.PcInterestId);
                });

            migrationBuilder.CreateTable(
                name: "WellWaterDepths",
                columns: table => new
                {
                    WaterDepthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellWaterDepths", x => x.WaterDepthId);
                });

            migrationBuilder.CreateTable(
                name: "WellYAxisAzimuths",
                columns: table => new
                {
                    YAxisAzimuthId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    NorthDirection = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellYAxisAzimuths", x => x.YAxisAzimuthId);
                });

            migrationBuilder.CreateTable(
                name: "Attachments",
                columns: table => new
                {
                    uid = table.Column<string>(nullable: false),
                    uidWell = table.Column<string>(nullable: true),
                    uidWellbore = table.Column<string>(nullable: true),
                    nameWell = table.Column<string>(nullable: true),
                    nameWellbore = table.Column<string>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    objectReferenceuidRef = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    fileType = table.Column<string>(nullable: true),
                    content = table.Column<string>(nullable: true),
                    CommonDataId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Attachments", x => x.uid);
                    table.ForeignKey(
                        name: "FK_Attachments_AttchmentCommonDatas_CommonDataId",
                        column: x => x.CommonDataId,
                        principalTable: "AttchmentCommonDatas",
                        principalColumn: "CommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Attachments_AttachmentObjectReferences_objectReferenceuidRef",
                        column: x => x.objectReferenceuidRef,
                        principalTable: "AttachmentObjectReferences",
                        principalColumn: "uidRef",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BharunDrillingParamss",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    ETimOpBitUom = table.Column<string>(nullable: true),
                    MdHoleStartUom = table.Column<string>(nullable: true),
                    MdHoleStopUom = table.Column<string>(nullable: true),
                    TubularUidRef = table.Column<string>(nullable: true),
                    HkldRotUom = table.Column<string>(nullable: true),
                    OverPullUom = table.Column<string>(nullable: true),
                    SlackOffUom = table.Column<string>(nullable: true),
                    HkldUpUom = table.Column<string>(nullable: true),
                    HkldDnUom = table.Column<string>(nullable: true),
                    TqOnBotAvUom = table.Column<string>(nullable: true),
                    TqOnBotMxUom = table.Column<string>(nullable: true),
                    TqOnBotMnUom = table.Column<string>(nullable: true),
                    TqOffBotAvUom = table.Column<string>(nullable: true),
                    TqDhAvUom = table.Column<string>(nullable: true),
                    WtAboveJarUom = table.Column<string>(nullable: true),
                    WtBelowJarUom = table.Column<string>(nullable: true),
                    WtMudUom = table.Column<string>(nullable: true),
                    FlowratePumpUom = table.Column<string>(nullable: true),
                    PowBitUom = table.Column<string>(nullable: true),
                    VelNozzleAvUom = table.Column<string>(nullable: true),
                    PresDropBitUom = table.Column<string>(nullable: true),
                    CTimHoldUom = table.Column<string>(nullable: true),
                    CTimSteeringUom = table.Column<string>(nullable: true),
                    CTimDrillRotUom = table.Column<string>(nullable: true),
                    CTimDrillSlidUom = table.Column<string>(nullable: true),
                    CTimCircUom = table.Column<string>(nullable: true),
                    CTimReamUom = table.Column<string>(nullable: true),
                    DistDrillRotUom = table.Column<string>(nullable: true),
                    DistDrillSlidUom = table.Column<string>(nullable: true),
                    DistReamUom = table.Column<string>(nullable: true),
                    DistHoldUom = table.Column<string>(nullable: true),
                    DistSteeringUom = table.Column<string>(nullable: true),
                    RpmAvBharunRpmAvId = table.Column<int>(nullable: true),
                    RpmMxUom = table.Column<string>(nullable: true),
                    RpmMnUom = table.Column<string>(nullable: true),
                    RpmAvDhUom = table.Column<string>(nullable: true),
                    RopAvBharunRopAvId = table.Column<int>(nullable: true),
                    RopMxBharunRopMxId = table.Column<int>(nullable: true),
                    RopMnBharunRopMnId = table.Column<int>(nullable: true),
                    WobAvBharunWobAvId = table.Column<int>(nullable: true),
                    WobMxUom = table.Column<string>(nullable: true),
                    WobMnUom = table.Column<string>(nullable: true),
                    WobAvDhUom = table.Column<string>(nullable: true),
                    ReasonTrip = table.Column<string>(nullable: true),
                    ObjectiveBha = table.Column<string>(nullable: true),
                    AziTopUom = table.Column<string>(nullable: true),
                    AziBottomUom = table.Column<string>(nullable: true),
                    InclStartUom = table.Column<string>(nullable: true),
                    InclMxUom = table.Column<string>(nullable: true),
                    InclMnUom = table.Column<string>(nullable: true),
                    InclStopUom = table.Column<string>(nullable: true),
                    TempMudDhMxUom = table.Column<string>(nullable: true),
                    PresPumpAvUom = table.Column<string>(nullable: true),
                    FlowrateBitUom = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BharunDrillingParamss", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunAziBottoms_AziBottomUom",
                        column: x => x.AziBottomUom,
                        principalTable: "BharunAziBottoms",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunAziTops_AziTopUom",
                        column: x => x.AziTopUom,
                        principalTable: "BharunAziTops",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunCTimCircs_CTimCircUom",
                        column: x => x.CTimCircUom,
                        principalTable: "BharunCTimCircs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunCTimDrillRots_CTimDrillRotUom",
                        column: x => x.CTimDrillRotUom,
                        principalTable: "BharunCTimDrillRots",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunCTimDrillSlids_CTimDrillSlidUom",
                        column: x => x.CTimDrillSlidUom,
                        principalTable: "BharunCTimDrillSlids",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunCTimHolds_CTimHoldUom",
                        column: x => x.CTimHoldUom,
                        principalTable: "BharunCTimHolds",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunCTimReams_CTimReamUom",
                        column: x => x.CTimReamUom,
                        principalTable: "BharunCTimReams",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunCTimSteerings_CTimSteeringUom",
                        column: x => x.CTimSteeringUom,
                        principalTable: "BharunCTimSteerings",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunDistDrillRots_DistDrillRotUom",
                        column: x => x.DistDrillRotUom,
                        principalTable: "BharunDistDrillRots",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunDistDrillSlids_DistDrillSlidUom",
                        column: x => x.DistDrillSlidUom,
                        principalTable: "BharunDistDrillSlids",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunDistHolds_DistHoldUom",
                        column: x => x.DistHoldUom,
                        principalTable: "BharunDistHolds",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunDistReams_DistReamUom",
                        column: x => x.DistReamUom,
                        principalTable: "BharunDistReams",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunDistSteerings_DistSteeringUom",
                        column: x => x.DistSteeringUom,
                        principalTable: "BharunDistSteerings",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunETimOpBits_ETimOpBitUom",
                        column: x => x.ETimOpBitUom,
                        principalTable: "BharunETimOpBits",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunFlowrateBits_FlowrateBitUom",
                        column: x => x.FlowrateBitUom,
                        principalTable: "BharunFlowrateBits",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunFlowratePumps_FlowratePumpUom",
                        column: x => x.FlowratePumpUom,
                        principalTable: "BharunFlowratePumps",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunHkldDns_HkldDnUom",
                        column: x => x.HkldDnUom,
                        principalTable: "BharunHkldDns",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunHkldRots_HkldRotUom",
                        column: x => x.HkldRotUom,
                        principalTable: "BharunHkldRots",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunHkldUps_HkldUpUom",
                        column: x => x.HkldUpUom,
                        principalTable: "BharunHkldUps",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunInclMns_InclMnUom",
                        column: x => x.InclMnUom,
                        principalTable: "BharunInclMns",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunInclMxs_InclMxUom",
                        column: x => x.InclMxUom,
                        principalTable: "BharunInclMxs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunInclStarts_InclStartUom",
                        column: x => x.InclStartUom,
                        principalTable: "BharunInclStarts",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunInclStops_InclStopUom",
                        column: x => x.InclStopUom,
                        principalTable: "BharunInclStops",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunMdHoleStarts_MdHoleStartUom",
                        column: x => x.MdHoleStartUom,
                        principalTable: "BharunMdHoleStarts",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunMdHoleStops_MdHoleStopUom",
                        column: x => x.MdHoleStopUom,
                        principalTable: "BharunMdHoleStops",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunOverPulls_OverPullUom",
                        column: x => x.OverPullUom,
                        principalTable: "BharunOverPulls",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunPowBits_PowBitUom",
                        column: x => x.PowBitUom,
                        principalTable: "BharunPowBits",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunPresDropBits_PresDropBitUom",
                        column: x => x.PresDropBitUom,
                        principalTable: "BharunPresDropBits",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunPresPumpAvs_PresPumpAvUom",
                        column: x => x.PresPumpAvUom,
                        principalTable: "BharunPresPumpAvs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunRopAvs_RopAvBharunRopAvId",
                        column: x => x.RopAvBharunRopAvId,
                        principalTable: "BharunRopAvs",
                        principalColumn: "BharunRopAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunRopMns_RopMnBharunRopMnId",
                        column: x => x.RopMnBharunRopMnId,
                        principalTable: "BharunRopMns",
                        principalColumn: "BharunRopMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunRopMxs_RopMxBharunRopMxId",
                        column: x => x.RopMxBharunRopMxId,
                        principalTable: "BharunRopMxs",
                        principalColumn: "BharunRopMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunRpmAvs_RpmAvBharunRpmAvId",
                        column: x => x.RpmAvBharunRpmAvId,
                        principalTable: "BharunRpmAvs",
                        principalColumn: "BharunRpmAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunRpmAvDhs_RpmAvDhUom",
                        column: x => x.RpmAvDhUom,
                        principalTable: "BharunRpmAvDhs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunRpmMns_RpmMnUom",
                        column: x => x.RpmMnUom,
                        principalTable: "BharunRpmMns",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunRpmMxs_RpmMxUom",
                        column: x => x.RpmMxUom,
                        principalTable: "BharunRpmMxs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunSlackOff_SlackOffUom",
                        column: x => x.SlackOffUom,
                        principalTable: "BharunSlackOff",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunTempMudDhMxs_TempMudDhMxUom",
                        column: x => x.TempMudDhMxUom,
                        principalTable: "BharunTempMudDhMxs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunTqDhAvs_TqDhAvUom",
                        column: x => x.TqDhAvUom,
                        principalTable: "BharunTqDhAvs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunTqOffBotAvs_TqOffBotAvUom",
                        column: x => x.TqOffBotAvUom,
                        principalTable: "BharunTqOffBotAvs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunTqOnBotAvs_TqOnBotAvUom",
                        column: x => x.TqOnBotAvUom,
                        principalTable: "BharunTqOnBotAvs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunTqOnBotMns_TqOnBotMnUom",
                        column: x => x.TqOnBotMnUom,
                        principalTable: "BharunTqOnBotMns",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunTqOnBotMxs_TqOnBotMxUom",
                        column: x => x.TqOnBotMxUom,
                        principalTable: "BharunTqOnBotMxs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunTubulars_TubularUidRef",
                        column: x => x.TubularUidRef,
                        principalTable: "BharunTubulars",
                        principalColumn: "UidRef",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunVelNozzleAvs_VelNozzleAvUom",
                        column: x => x.VelNozzleAvUom,
                        principalTable: "BharunVelNozzleAvs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunWobAvs_WobAvBharunWobAvId",
                        column: x => x.WobAvBharunWobAvId,
                        principalTable: "BharunWobAvs",
                        principalColumn: "BharunWobAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunWobAvDhs_WobAvDhUom",
                        column: x => x.WobAvDhUom,
                        principalTable: "BharunWobAvDhs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunWobMns_WobMnUom",
                        column: x => x.WobMnUom,
                        principalTable: "BharunWobMns",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunWobMxs_WobMxUom",
                        column: x => x.WobMxUom,
                        principalTable: "BharunWobMxs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunWtAboveJars_WtAboveJarUom",
                        column: x => x.WtAboveJarUom,
                        principalTable: "BharunWtAboveJars",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunWtBelowJars_WtBelowJarUom",
                        column: x => x.WtBelowJarUom,
                        principalTable: "BharunWtBelowJars",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BharunDrillingParamss_BharunWtMuds_WtMudUom",
                        column: x => x.WtMudUom,
                        principalTable: "BharunWtMuds",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CementJobCementAdditives",
                columns: table => new
                {
                    CementAdditiveId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameAdd = table.Column<string>(nullable: true),
                    TypeAdd = table.Column<string>(nullable: true),
                    FormAdd = table.Column<string>(nullable: true),
                    DensAddId = table.Column<int>(nullable: true),
                    TypeConc = table.Column<string>(nullable: true),
                    ConcentrationId = table.Column<int>(nullable: true),
                    AdditiveId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobCementAdditives", x => x.CementAdditiveId);
                    table.ForeignKey(
                        name: "FK_CementJobCementAdditives_CementJobAdditives_AdditiveId",
                        column: x => x.AdditiveId,
                        principalTable: "CementJobAdditives",
                        principalColumn: "AdditiveId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementAdditives_CementJobConcentrations_ConcentrationId",
                        column: x => x.ConcentrationId,
                        principalTable: "CementJobConcentrations",
                        principalColumn: "ConcentrationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementAdditives_CementJobDensAdds_DensAddId",
                        column: x => x.DensAddId,
                        principalTable: "CementJobDensAdds",
                        principalColumn: "DensAddId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CementJobCementTests",
                columns: table => new
                {
                    CementTestId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PresTestId = table.Column<int>(nullable: true),
                    ETimTestId = table.Column<int>(nullable: true),
                    CementShoeCollar = table.Column<string>(nullable: true),
                    CetRun = table.Column<string>(nullable: true),
                    CetBondQual = table.Column<string>(nullable: true),
                    CblRun = table.Column<string>(nullable: true),
                    CblBondQual = table.Column<string>(nullable: true),
                    CblPresId = table.Column<int>(nullable: true),
                    TempSurvey = table.Column<string>(nullable: true),
                    ETimCementLogId = table.Column<int>(nullable: true),
                    FormPitId = table.Column<int>(nullable: true),
                    ToolCompanyPit = table.Column<string>(nullable: true),
                    ETimPitStartId = table.Column<int>(nullable: true),
                    MdCementTopId = table.Column<int>(nullable: true),
                    TopCementMethod = table.Column<string>(nullable: true),
                    TocOK = table.Column<string>(nullable: true),
                    JobRating = table.Column<string>(nullable: true),
                    RemedialCement = table.Column<string>(nullable: true),
                    NumRemedial = table.Column<string>(nullable: true),
                    FailureMethod = table.Column<string>(nullable: true),
                    LinerTopId = table.Column<int>(nullable: true),
                    LinerLapId = table.Column<int>(nullable: true),
                    ETimBeforeTestId = table.Column<int>(nullable: true),
                    TestNegativeTool = table.Column<string>(nullable: true),
                    TestNegativeEmwId = table.Column<int>(nullable: true),
                    TestPositiveTool = table.Column<string>(nullable: true),
                    TestPositiveEmwId = table.Column<int>(nullable: true),
                    CementFoundOnTool = table.Column<string>(nullable: true),
                    MdDVToolJobMdDVToolId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobCementTests", x => x.CementTestId);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobCblPress_CblPresId",
                        column: x => x.CblPresId,
                        principalTable: "CementJobCblPress",
                        principalColumn: "CblPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobETimBeforeTests_ETimBeforeTestId",
                        column: x => x.ETimBeforeTestId,
                        principalTable: "CementJobETimBeforeTests",
                        principalColumn: "ETimBeforeTestId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobETimCementLogs_ETimCementLogId",
                        column: x => x.ETimCementLogId,
                        principalTable: "CementJobETimCementLogs",
                        principalColumn: "ETimCementLogId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobETimPitStarts_ETimPitStartId",
                        column: x => x.ETimPitStartId,
                        principalTable: "CementJobETimPitStarts",
                        principalColumn: "ETimPitStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobETimTests_ETimTestId",
                        column: x => x.ETimTestId,
                        principalTable: "CementJobETimTests",
                        principalColumn: "ETimTestId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobFormPits_FormPitId",
                        column: x => x.FormPitId,
                        principalTable: "CementJobFormPits",
                        principalColumn: "FormPitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobLinerLaps_LinerLapId",
                        column: x => x.LinerLapId,
                        principalTable: "CementJobLinerLaps",
                        principalColumn: "LinerLapId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobLinerTops_LinerTopId",
                        column: x => x.LinerTopId,
                        principalTable: "CementJobLinerTops",
                        principalColumn: "LinerTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobMdCementTops_MdCementTopId",
                        column: x => x.MdCementTopId,
                        principalTable: "CementJobMdCementTops",
                        principalColumn: "MdCementTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobMdDVTools_MdDVToolJobMdDVToolId",
                        column: x => x.MdDVToolJobMdDVToolId,
                        principalTable: "CementJobMdDVTools",
                        principalColumn: "JobMdDVToolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobPresTests_PresTestId",
                        column: x => x.PresTestId,
                        principalTable: "CementJobPresTests",
                        principalColumn: "PresTestId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobTestNegativeEmws_TestNegativeEmwId",
                        column: x => x.TestNegativeEmwId,
                        principalTable: "CementJobTestNegativeEmws",
                        principalColumn: "TestNegativeEmwId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementTests_CementJobTestPositiveEmws_TestPositiveEmwId",
                        column: x => x.TestPositiveEmwId,
                        principalTable: "CementJobTestPositiveEmws",
                        principalColumn: "TestPositiveEmwId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CementJobCementPumpSchedules",
                columns: table => new
                {
                    CementPumpScheduleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ETimPumpId = table.Column<int>(nullable: true),
                    RatePumpId = table.Column<int>(nullable: true),
                    VolPumpId = table.Column<int>(nullable: true),
                    StrokePump = table.Column<string>(nullable: true),
                    PresBackId = table.Column<int>(nullable: true),
                    ETimShutdownId = table.Column<int>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobCementPumpSchedules", x => x.CementPumpScheduleId);
                    table.ForeignKey(
                        name: "FK_CementJobCementPumpSchedules_CementJobETimPumps_ETimPumpId",
                        column: x => x.ETimPumpId,
                        principalTable: "CementJobETimPumps",
                        principalColumn: "ETimPumpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementPumpSchedules_CementJobETimShutdowns_ETimShutdownId",
                        column: x => x.ETimShutdownId,
                        principalTable: "CementJobETimShutdowns",
                        principalColumn: "ETimShutdownId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementPumpSchedules_CementJobPresBacks_PresBackId",
                        column: x => x.PresBackId,
                        principalTable: "CementJobPresBacks",
                        principalColumn: "PresBackId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementPumpSchedules_CementJobRatePumps_RatePumpId",
                        column: x => x.RatePumpId,
                        principalTable: "CementJobRatePumps",
                        principalColumn: "RatePumpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementPumpSchedules_CementJobVolPumps_VolPumpId",
                        column: x => x.VolPumpId,
                        principalTable: "CementJobVolPumps",
                        principalColumn: "VolPumpId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ChangeLogs",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    NameObject = table.Column<string>(nullable: true),
                    ObjectType = table.Column<string>(nullable: true),
                    LastChangeType = table.Column<string>(nullable: true),
                    LastChangeInfo = table.Column<string>(nullable: true),
                    CommonDataId = table.Column<int>(nullable: true),
                    UidObject = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ChangeLogs", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_ChangeLogs_ChangeLogCommonData_CommonDataId",
                        column: x => x.CommonDataId,
                        principalTable: "ChangeLogCommonData",
                        principalColumn: "CommonDataId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreMudGass",
                columns: table => new
                {
                    MudGasId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GasAvId = table.Column<int>(nullable: true),
                    GasPeakId = table.Column<int>(nullable: true),
                    GasPeakType = table.Column<string>(nullable: true),
                    GasBackgndId = table.Column<int>(nullable: true),
                    GasConAvId = table.Column<int>(nullable: true),
                    GasConMxId = table.Column<int>(nullable: true),
                    GasTripGasConTripId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreMudGass", x => x.MudGasId);
                    table.ForeignKey(
                        name: "FK_ConvCoreMudGass_ConvCoreGasAvs_GasAvId",
                        column: x => x.GasAvId,
                        principalTable: "ConvCoreGasAvs",
                        principalColumn: "GasAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreMudGass_ConvCoreGasBackgnds_GasBackgndId",
                        column: x => x.GasBackgndId,
                        principalTable: "ConvCoreGasBackgnds",
                        principalColumn: "GasBackgndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreMudGass_ConvCoreGasConAvs_GasConAvId",
                        column: x => x.GasConAvId,
                        principalTable: "ConvCoreGasConAvs",
                        principalColumn: "GasConAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreMudGass_ConvCoreGasConMxs_GasConMxId",
                        column: x => x.GasConMxId,
                        principalTable: "ConvCoreGasConMxs",
                        principalColumn: "GasConMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreMudGass_ConvCoreGasPeaks_GasPeakId",
                        column: x => x.GasPeakId,
                        principalTable: "ConvCoreGasPeaks",
                        principalColumn: "GasPeakId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreMudGass_ConvCoreGasTrips_GasTripGasConTripId",
                        column: x => x.GasTripGasConTripId,
                        principalTable: "ConvCoreGasTrips",
                        principalColumn: "GasConTripId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreLithologys",
                columns: table => new
                {
                    LithologyId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<string>(nullable: true),
                    CodeLith = table.Column<string>(nullable: true),
                    LithPcId = table.Column<int>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    LithClass = table.Column<string>(nullable: true),
                    GrainType = table.Column<string>(nullable: true),
                    DunhamClass = table.Column<string>(nullable: true),
                    Color = table.Column<string>(nullable: true),
                    Texture = table.Column<string>(nullable: true),
                    Hardness = table.Column<string>(nullable: true),
                    SizeGrain = table.Column<string>(nullable: true),
                    Roundness = table.Column<string>(nullable: true),
                    Sorting = table.Column<string>(nullable: true),
                    MatrixCement = table.Column<string>(nullable: true),
                    PorosityVisible = table.Column<string>(nullable: true),
                    Permeability = table.Column<string>(nullable: true),
                    DensShaleId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreLithologys", x => x.LithologyId);
                    table.ForeignKey(
                        name: "FK_ConvCoreLithologys_ConvCoreDensShales_DensShaleId",
                        column: x => x.DensShaleId,
                        principalTable: "ConvCoreDensShales",
                        principalColumn: "DensShaleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreLithologys_ConvCoreLithPcs_LithPcId",
                        column: x => x.LithPcId,
                        principalTable: "ConvCoreLithPcs",
                        principalColumn: "LithPcId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreShows",
                columns: table => new
                {
                    ShowId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShowRat = table.Column<string>(nullable: true),
                    StainColor = table.Column<string>(nullable: true),
                    StainDistr = table.Column<string>(nullable: true),
                    StainPcId = table.Column<int>(nullable: true),
                    NatFlorColor = table.Column<string>(nullable: true),
                    NatFlorPcId = table.Column<int>(nullable: true),
                    NatFlorLevel = table.Column<string>(nullable: true),
                    NatFlorDesc = table.Column<string>(nullable: true),
                    CutColor = table.Column<string>(nullable: true),
                    CutSpeed = table.Column<string>(nullable: true),
                    CutStrength = table.Column<string>(nullable: true),
                    CutForm = table.Column<string>(nullable: true),
                    CutLevel = table.Column<string>(nullable: true),
                    CutFlorColor = table.Column<string>(nullable: true),
                    CutFlorSpeed = table.Column<string>(nullable: true),
                    CutFlorStrength = table.Column<string>(nullable: true),
                    CutFlorForm = table.Column<string>(nullable: true),
                    CutFlorLevel = table.Column<string>(nullable: true),
                    ResidueColor = table.Column<string>(nullable: true),
                    ShowDesc = table.Column<string>(nullable: true),
                    ImpregnatedLitho = table.Column<string>(nullable: true),
                    Odor = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreShows", x => x.ShowId);
                    table.ForeignKey(
                        name: "FK_ConvCoreShows_ConvCoreNatFlorPcs_NatFlorPcId",
                        column: x => x.NatFlorPcId,
                        principalTable: "ConvCoreNatFlorPcs",
                        principalColumn: "NatFlorPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreShows_ConvCoreStainPcs_StainPcId",
                        column: x => x.StainPcId,
                        principalTable: "ConvCoreStainPcs",
                        principalColumn: "StainPcId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreChromatographs",
                columns: table => new
                {
                    ChromatographId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomId = table.Column<int>(nullable: true),
                    WtMudInId = table.Column<int>(nullable: true),
                    WtMudOutId = table.Column<int>(nullable: true),
                    ChromType = table.Column<string>(nullable: true),
                    ETimChromCycleId = table.Column<int>(nullable: true),
                    ChromIntRpt = table.Column<string>(nullable: true),
                    MethAvId = table.Column<int>(nullable: true),
                    MethMnId = table.Column<int>(nullable: true),
                    MethMxId = table.Column<int>(nullable: true),
                    EthAvId = table.Column<int>(nullable: true),
                    EthMnId = table.Column<int>(nullable: true),
                    EthMxId = table.Column<int>(nullable: true),
                    PropAvId = table.Column<int>(nullable: true),
                    PropMnId = table.Column<int>(nullable: true),
                    PropMxId = table.Column<int>(nullable: true),
                    IbutAvId = table.Column<int>(nullable: true),
                    IbutMnId = table.Column<int>(nullable: true),
                    IbutMxId = table.Column<int>(nullable: true),
                    NbutAvId = table.Column<int>(nullable: true),
                    NbutMnId = table.Column<int>(nullable: true),
                    NbutMxId = table.Column<int>(nullable: true),
                    IpentAvId = table.Column<int>(nullable: true),
                    IpentMnId = table.Column<int>(nullable: true),
                    IpentMxId = table.Column<int>(nullable: true),
                    NpentAvId = table.Column<int>(nullable: true),
                    NpentMnId = table.Column<int>(nullable: true),
                    NpentMxId = table.Column<int>(nullable: true),
                    EpentAvId = table.Column<int>(nullable: true),
                    EpentMnId = table.Column<int>(nullable: true),
                    EpentMxId = table.Column<int>(nullable: true),
                    IhexAvId = table.Column<int>(nullable: true),
                    IhexMnId = table.Column<int>(nullable: true),
                    IhexMxId = table.Column<int>(nullable: true),
                    NhexAvId = table.Column<int>(nullable: true),
                    NhexMnId = table.Column<int>(nullable: true),
                    NhexMxId = table.Column<int>(nullable: true),
                    Co2AvId = table.Column<int>(nullable: true),
                    Co2MnId = table.Column<int>(nullable: true),
                    Co2MxId = table.Column<int>(nullable: true),
                    H2sAvId = table.Column<int>(nullable: true),
                    H2sMnId = table.Column<int>(nullable: true),
                    H2sMxId = table.Column<int>(nullable: true),
                    AcetyleneId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreChromatographs", x => x.ChromatographId);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreAcetylenes_AcetyleneId",
                        column: x => x.AcetyleneId,
                        principalTable: "ConvCoreAcetylenes",
                        principalColumn: "AcetyleneId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreCo2Avs_Co2AvId",
                        column: x => x.Co2AvId,
                        principalTable: "ConvCoreCo2Avs",
                        principalColumn: "Co2AvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreCo2Mns_Co2MnId",
                        column: x => x.Co2MnId,
                        principalTable: "ConvCoreCo2Mns",
                        principalColumn: "Co2MnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreCo2Mxs_Co2MxId",
                        column: x => x.Co2MxId,
                        principalTable: "ConvCoreCo2Mxs",
                        principalColumn: "Co2MxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreETimChromCycles_ETimChromCycleId",
                        column: x => x.ETimChromCycleId,
                        principalTable: "ConvCoreETimChromCycles",
                        principalColumn: "ETimChromCycleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreEpentAvs_EpentAvId",
                        column: x => x.EpentAvId,
                        principalTable: "ConvCoreEpentAvs",
                        principalColumn: "EpentAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreEpentMns_EpentMnId",
                        column: x => x.EpentMnId,
                        principalTable: "ConvCoreEpentMns",
                        principalColumn: "EpentMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreEpentMxs_EpentMxId",
                        column: x => x.EpentMxId,
                        principalTable: "ConvCoreEpentMxs",
                        principalColumn: "EpentMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreEthAvs_EthAvId",
                        column: x => x.EthAvId,
                        principalTable: "ConvCoreEthAvs",
                        principalColumn: "EthAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreEthMns_EthMnId",
                        column: x => x.EthMnId,
                        principalTable: "ConvCoreEthMns",
                        principalColumn: "EthMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreEthMxs_EthMxId",
                        column: x => x.EthMxId,
                        principalTable: "ConvCoreEthMxs",
                        principalColumn: "EthMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreH2sAvs_H2sAvId",
                        column: x => x.H2sAvId,
                        principalTable: "ConvCoreH2sAvs",
                        principalColumn: "H2sAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreH2sMns_H2sMnId",
                        column: x => x.H2sMnId,
                        principalTable: "ConvCoreH2sMns",
                        principalColumn: "H2sMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreH2sMxs_H2sMxId",
                        column: x => x.H2sMxId,
                        principalTable: "ConvCoreH2sMxs",
                        principalColumn: "H2sMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreIbutAvs_IbutAvId",
                        column: x => x.IbutAvId,
                        principalTable: "ConvCoreIbutAvs",
                        principalColumn: "IbutAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreIbutMns_IbutMnId",
                        column: x => x.IbutMnId,
                        principalTable: "ConvCoreIbutMns",
                        principalColumn: "IbutMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreIbutMxs_IbutMxId",
                        column: x => x.IbutMxId,
                        principalTable: "ConvCoreIbutMxs",
                        principalColumn: "IbutMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreIhexAvs_IhexAvId",
                        column: x => x.IhexAvId,
                        principalTable: "ConvCoreIhexAvs",
                        principalColumn: "IhexAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreIhexMns_IhexMnId",
                        column: x => x.IhexMnId,
                        principalTable: "ConvCoreIhexMns",
                        principalColumn: "IhexMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreIhexMxs_IhexMxId",
                        column: x => x.IhexMxId,
                        principalTable: "ConvCoreIhexMxs",
                        principalColumn: "IhexMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreIpentAvs_IpentAvId",
                        column: x => x.IpentAvId,
                        principalTable: "ConvCoreIpentAvs",
                        principalColumn: "IpentAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreIpentMns_IpentMnId",
                        column: x => x.IpentMnId,
                        principalTable: "ConvCoreIpentMns",
                        principalColumn: "IpentMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreIpentMxs_IpentMxId",
                        column: x => x.IpentMxId,
                        principalTable: "ConvCoreIpentMxs",
                        principalColumn: "IpentMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreMdBottoms_MdBottomId",
                        column: x => x.MdBottomId,
                        principalTable: "ConvCoreMdBottoms",
                        principalColumn: "MdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreMdTops_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "ConvCoreMdTops",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreMethAvs_MethAvId",
                        column: x => x.MethAvId,
                        principalTable: "ConvCoreMethAvs",
                        principalColumn: "MethAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreMethMns_MethMnId",
                        column: x => x.MethMnId,
                        principalTable: "ConvCoreMethMns",
                        principalColumn: "MethMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreMethMxs_MethMxId",
                        column: x => x.MethMxId,
                        principalTable: "ConvCoreMethMxs",
                        principalColumn: "MethMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreNbutAvs_NbutAvId",
                        column: x => x.NbutAvId,
                        principalTable: "ConvCoreNbutAvs",
                        principalColumn: "NbutAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreNbutMns_NbutMnId",
                        column: x => x.NbutMnId,
                        principalTable: "ConvCoreNbutMns",
                        principalColumn: "NbutMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreNbutMxs_NbutMxId",
                        column: x => x.NbutMxId,
                        principalTable: "ConvCoreNbutMxs",
                        principalColumn: "NbutMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreNhexAvs_NhexAvId",
                        column: x => x.NhexAvId,
                        principalTable: "ConvCoreNhexAvs",
                        principalColumn: "NhexAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreNhexMns_NhexMnId",
                        column: x => x.NhexMnId,
                        principalTable: "ConvCoreNhexMns",
                        principalColumn: "NhexMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreNhexMxs_NhexMxId",
                        column: x => x.NhexMxId,
                        principalTable: "ConvCoreNhexMxs",
                        principalColumn: "NhexMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreNpentAvs_NpentAvId",
                        column: x => x.NpentAvId,
                        principalTable: "ConvCoreNpentAvs",
                        principalColumn: "NpentAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreNpentMns_NpentMnId",
                        column: x => x.NpentMnId,
                        principalTable: "ConvCoreNpentMns",
                        principalColumn: "NpentMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreNpentMxs_NpentMxId",
                        column: x => x.NpentMxId,
                        principalTable: "ConvCoreNpentMxs",
                        principalColumn: "NpentMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCorePropAvs_PropAvId",
                        column: x => x.PropAvId,
                        principalTable: "ConvCorePropAvs",
                        principalColumn: "PropAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCorePropMns_PropMnId",
                        column: x => x.PropMnId,
                        principalTable: "ConvCorePropMns",
                        principalColumn: "PropMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCorePropMxs_PropMxId",
                        column: x => x.PropMxId,
                        principalTable: "ConvCorePropMxs",
                        principalColumn: "PropMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreWtMudIns_WtMudInId",
                        column: x => x.WtMudInId,
                        principalTable: "ConvCoreWtMudIns",
                        principalColumn: "WtMudInId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreChromatographs_ConvCoreWtMudOuts_WtMudOutId",
                        column: x => x.WtMudOutId,
                        principalTable: "ConvCoreWtMudOuts",
                        principalColumn: "WtMudOutId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemCoordinateSystemAxis",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    IdentifierCodeSpace = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    AxisAbbrev = table.Column<string>(nullable: true),
                    AxisDirectionCodeSpace = table.Column<string>(nullable: true),
                    Uom = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemCoordinateSystemAxis", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemCoordinateSystemAxis_CoordinateReferenceSystemAxisDirection_AxisDirectionCodeSpace",
                        column: x => x.AxisDirectionCodeSpace,
                        principalTable: "CoordinateReferenceSystemAxisDirection",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemCoordinateSystemAxis_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                        column: x => x.IdentifierCodeSpace,
                        principalTable: "CoordinateReferenceSystemIdentifier",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemSecondDefiningParameter",
                columns: table => new
                {
                    SecondDefiningParameterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InverseFlatteningUom = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemSecondDefiningParameter", x => x.SecondDefiningParameterId);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemSecondDefiningParameter_CoordinateReferenceSystemInverseFlattening_InverseFlatteningUom",
                        column: x => x.InverseFlatteningUom,
                        principalTable: "CoordinateReferenceSystemInverseFlattening",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemVerticalCRS",
                columns: table => new
                {
                    VerticalCRSId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameCRSCode = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemVerticalCRS", x => x.VerticalCRSId);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemVerticalCRS_CoordinateReferenceSystemNameCRS_NameCRSCode",
                        column: x => x.NameCRSCode,
                        principalTable: "CoordinateReferenceSystemNameCRS",
                        principalColumn: "Code",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemParameterValue",
                columns: table => new
                {
                    ValueOfParameterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ValueId = table.Column<int>(nullable: true),
                    ValueOfParameterId1 = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemParameterValue", x => x.ValueOfParameterId);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemParameterValue_CoordinateReferenceSystemValues_ValueId",
                        column: x => x.ValueId,
                        principalTable: "CoordinateReferenceSystemValues",
                        principalColumn: "ValueId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemParameterValue_CoordinateReferenceSystemValueOfParameter_ValueOfParameterId1",
                        column: x => x.ValueOfParameterId1,
                        principalTable: "CoordinateReferenceSystemValueOfParameter",
                        principalColumn: "ValueOfParameterId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportCommonData",
                columns: table => new
                {
                    CommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DefaultDatumId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportCommonData", x => x.CommonDataId);
                    table.ForeignKey(
                        name: "FK_DrillReportCommonData_DrillReportDefaultDatum_DefaultDatumId",
                        column: x => x.DefaultDatumId,
                        principalTable: "DrillReportDefaultDatum",
                        principalColumn: "DefaultDatumId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportBitRecord",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NumBit = table.Column<string>(nullable: true),
                    DiaBitId = table.Column<int>(nullable: true),
                    Manufacturer = table.Column<string>(nullable: true),
                    CodeMfg = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportBitRecord", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DrillReportBitRecord_DrillReportDiaBit_DiaBitId",
                        column: x => x.DiaBitId,
                        principalTable: "DrillReportDiaBit",
                        principalColumn: "DiaBitId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportWellCR",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    GeodeticCRSId = table.Column<int>(nullable: true),
                    Description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportWellCR", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_DrillReportWellCR_DrillReportGeodeticCRS_GeodeticCRSId",
                        column: x => x.GeodeticCRSId,
                        principalTable: "DrillReportGeodeticCRS",
                        principalColumn: "GeodeticCRSId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportEquipFailureInfo",
                columns: table => new
                {
                    EquipFailureInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    EquipClass = table.Column<string>(nullable: true),
                    ETimMissProductionId = table.Column<int>(nullable: true),
                    DTimRepair = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportEquipFailureInfo", x => x.EquipFailureInfoId);
                    table.ForeignKey(
                        name: "FK_DrillReportEquipFailureInfo_DrillReportETimMissProduction_ETimMissProductionId",
                        column: x => x.ETimMissProductionId,
                        principalTable: "DrillReportETimMissProduction",
                        principalColumn: "ETimMissProductionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportEquipFailureInfo_DrillReportMd_MdId",
                        column: x => x.MdId,
                        principalTable: "DrillReportMd",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportStatusInfo",
                columns: table => new
                {
                    StatusInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    TvdId = table.Column<int>(nullable: true),
                    MdPlugTopId = table.Column<int>(nullable: true),
                    DiaHoleId = table.Column<int>(nullable: true),
                    MdDiaHoleStartId = table.Column<int>(nullable: true),
                    DiaPilotId = table.Column<int>(nullable: true),
                    MdDiaPilotPlanId = table.Column<int>(nullable: true),
                    MdKickoffId = table.Column<int>(nullable: true),
                    StrengthFormId = table.Column<int>(nullable: true),
                    MdStrengthFormId = table.Column<int>(nullable: true),
                    DiaCsgLastId = table.Column<int>(nullable: true),
                    MdCsgLastId = table.Column<int>(nullable: true),
                    PresTestType = table.Column<string>(nullable: true),
                    DistDrillId = table.Column<int>(nullable: true),
                    Sum24Hr = table.Column<string>(nullable: true),
                    Forecast24Hr = table.Column<string>(nullable: true),
                    RopCurrentId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportStatusInfo", x => x.StatusInfoId);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportDiaCsgLast_DiaCsgLastId",
                        column: x => x.DiaCsgLastId,
                        principalTable: "DrillReportDiaCsgLast",
                        principalColumn: "DiaCsgLastId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportDiaHole_DiaHoleId",
                        column: x => x.DiaHoleId,
                        principalTable: "DrillReportDiaHole",
                        principalColumn: "DiaHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportDiaPilot_DiaPilotId",
                        column: x => x.DiaPilotId,
                        principalTable: "DrillReportDiaPilot",
                        principalColumn: "DiaPilotId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportDistDrill_DistDrillId",
                        column: x => x.DistDrillId,
                        principalTable: "DrillReportDistDrill",
                        principalColumn: "DistDrillId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportMdCsgLast_MdCsgLastId",
                        column: x => x.MdCsgLastId,
                        principalTable: "DrillReportMdCsgLast",
                        principalColumn: "MdCsgLastId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportMdDiaHoleStart_MdDiaHoleStartId",
                        column: x => x.MdDiaHoleStartId,
                        principalTable: "DrillReportMdDiaHoleStart",
                        principalColumn: "MdDiaHoleStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportMdDiaPilotPlan_MdDiaPilotPlanId",
                        column: x => x.MdDiaPilotPlanId,
                        principalTable: "DrillReportMdDiaPilotPlan",
                        principalColumn: "MdDiaPilotPlanId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportMd_MdId",
                        column: x => x.MdId,
                        principalTable: "DrillReportMd",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportMdKickoff_MdKickoffId",
                        column: x => x.MdKickoffId,
                        principalTable: "DrillReportMdKickoff",
                        principalColumn: "MdKickoffId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportMdPlugTop_MdPlugTopId",
                        column: x => x.MdPlugTopId,
                        principalTable: "DrillReportMdPlugTop",
                        principalColumn: "MdPlugTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportMdStrengthForm_MdStrengthFormId",
                        column: x => x.MdStrengthFormId,
                        principalTable: "DrillReportMdStrengthForm",
                        principalColumn: "MdStrengthFormId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportRopCurrent_RopCurrentId",
                        column: x => x.RopCurrentId,
                        principalTable: "DrillReportRopCurrent",
                        principalColumn: "RopCurrentId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportStrengthForm_StrengthFormId",
                        column: x => x.StrengthFormId,
                        principalTable: "DrillReportStrengthForm",
                        principalColumn: "StrengthFormId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStatusInfo_DrillReportTvd_TvdId",
                        column: x => x.TvdId,
                        principalTable: "DrillReportTvd",
                        principalColumn: "TvdId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportSurveyStation",
                columns: table => new
                {
                    SurveyStationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    TvdId = table.Column<int>(nullable: true),
                    InclId = table.Column<int>(nullable: true),
                    AziId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportSurveyStation", x => x.SurveyStationId);
                    table.ForeignKey(
                        name: "FK_DrillReportSurveyStation_DrillReportAzi_AziId",
                        column: x => x.AziId,
                        principalTable: "DrillReportAzi",
                        principalColumn: "AziId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportSurveyStation_DrillReportIncl_InclId",
                        column: x => x.InclId,
                        principalTable: "DrillReportIncl",
                        principalColumn: "InclId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportSurveyStation_DrillReportMd_MdId",
                        column: x => x.MdId,
                        principalTable: "DrillReportMd",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportSurveyStation_DrillReportTvd_TvdId",
                        column: x => x.TvdId,
                        principalTable: "DrillReportTvd",
                        principalColumn: "TvdId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportCoreInfo",
                columns: table => new
                {
                    CoreInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    CoreNumber = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomDrillReportMdBottomId = table.Column<int>(nullable: true),
                    TvdTopDrillReportTvdTopId = table.Column<int>(nullable: true),
                    TvdBottomId = table.Column<int>(nullable: true),
                    LenRecoveredId = table.Column<int>(nullable: true),
                    RecoverPcId = table.Column<int>(nullable: true),
                    LenBarrelId = table.Column<int>(nullable: true),
                    InnerBarrelType = table.Column<string>(nullable: true),
                    CoreDescription = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportCoreInfo", x => x.CoreInfoId);
                    table.ForeignKey(
                        name: "FK_DrillReportCoreInfo_DrillReportLenBarrel_LenBarrelId",
                        column: x => x.LenBarrelId,
                        principalTable: "DrillReportLenBarrel",
                        principalColumn: "LenBarrelId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportCoreInfo_DrillReportLenRecovered_LenRecoveredId",
                        column: x => x.LenRecoveredId,
                        principalTable: "DrillReportLenRecovered",
                        principalColumn: "LenRecoveredId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportCoreInfo_DrillReportMdBottom_MdBottomDrillReportMdBottomId",
                        column: x => x.MdBottomDrillReportMdBottomId,
                        principalTable: "DrillReportMdBottom",
                        principalColumn: "DrillReportMdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportCoreInfo_DrillReportMdTop_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "DrillReportMdTop",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportCoreInfo_DrillReportRecoverPc_RecoverPcId",
                        column: x => x.RecoverPcId,
                        principalTable: "DrillReportRecoverPc",
                        principalColumn: "RecoverPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportCoreInfo_DrillReportTvdBottom_TvdBottomId",
                        column: x => x.TvdBottomId,
                        principalTable: "DrillReportTvdBottom",
                        principalColumn: "TvdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportCoreInfo_DrillReportTvdTop_TvdTopDrillReportTvdTopId",
                        column: x => x.TvdTopDrillReportTvdTopId,
                        principalTable: "DrillReportTvdTop",
                        principalColumn: "DrillReportTvdTopId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportGasReadingInfo",
                columns: table => new
                {
                    GasReadingInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    ReadingType = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomDrillReportMdBottomId = table.Column<int>(nullable: true),
                    TvdTopDrillReportTvdTopId = table.Column<int>(nullable: true),
                    TvdBottomId = table.Column<int>(nullable: true),
                    GasHighId = table.Column<int>(nullable: true),
                    GasLowId = table.Column<int>(nullable: true),
                    MethId = table.Column<int>(nullable: true),
                    EthId = table.Column<int>(nullable: true),
                    PropId = table.Column<int>(nullable: true),
                    IbutId = table.Column<int>(nullable: true),
                    NbutId = table.Column<int>(nullable: true),
                    IpentId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportGasReadingInfo", x => x.GasReadingInfoId);
                    table.ForeignKey(
                        name: "FK_DrillReportGasReadingInfo_DrillReportEth_EthId",
                        column: x => x.EthId,
                        principalTable: "DrillReportEth",
                        principalColumn: "EthId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportGasReadingInfo_DrillReportGasHigh_GasHighId",
                        column: x => x.GasHighId,
                        principalTable: "DrillReportGasHigh",
                        principalColumn: "GasHighId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportGasReadingInfo_DrillReportGasLow_GasLowId",
                        column: x => x.GasLowId,
                        principalTable: "DrillReportGasLow",
                        principalColumn: "GasLowId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportGasReadingInfo_DrillReportIbut_IbutId",
                        column: x => x.IbutId,
                        principalTable: "DrillReportIbut",
                        principalColumn: "IbutId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportGasReadingInfo_DrillReportIpent_IpentId",
                        column: x => x.IpentId,
                        principalTable: "DrillReportIpent",
                        principalColumn: "IpentId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportGasReadingInfo_DrillReportMdBottom_MdBottomDrillReportMdBottomId",
                        column: x => x.MdBottomDrillReportMdBottomId,
                        principalTable: "DrillReportMdBottom",
                        principalColumn: "DrillReportMdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportGasReadingInfo_DrillReportMdTop_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "DrillReportMdTop",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportGasReadingInfo_DrillReportMeth_MethId",
                        column: x => x.MethId,
                        principalTable: "DrillReportMeth",
                        principalColumn: "MethId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportGasReadingInfo_DrillReportNbut_NbutId",
                        column: x => x.NbutId,
                        principalTable: "DrillReportNbut",
                        principalColumn: "NbutId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportGasReadingInfo_DrillReportProp_PropId",
                        column: x => x.PropId,
                        principalTable: "DrillReportProp",
                        principalColumn: "PropId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportGasReadingInfo_DrillReportTvdBottom_TvdBottomId",
                        column: x => x.TvdBottomId,
                        principalTable: "DrillReportTvdBottom",
                        principalColumn: "TvdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportGasReadingInfo_DrillReportTvdTop_TvdTopDrillReportTvdTopId",
                        column: x => x.TvdTopDrillReportTvdTopId,
                        principalTable: "DrillReportTvdTop",
                        principalColumn: "DrillReportTvdTopId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportLithShowInfo",
                columns: table => new
                {
                    LithShowInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomDrillReportMdBottomId = table.Column<int>(nullable: true),
                    TvdTopDrillReportTvdTopId = table.Column<int>(nullable: true),
                    TvdBottomId = table.Column<int>(nullable: true),
                    Show = table.Column<string>(nullable: true),
                    Lithology = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportLithShowInfo", x => x.LithShowInfoId);
                    table.ForeignKey(
                        name: "FK_DrillReportLithShowInfo_DrillReportMdBottom_MdBottomDrillReportMdBottomId",
                        column: x => x.MdBottomDrillReportMdBottomId,
                        principalTable: "DrillReportMdBottom",
                        principalColumn: "DrillReportMdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportLithShowInfo_DrillReportMdTop_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "DrillReportMdTop",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportLithShowInfo_DrillReportTvdBottom_TvdBottomId",
                        column: x => x.TvdBottomId,
                        principalTable: "DrillReportTvdBottom",
                        principalColumn: "TvdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportLithShowInfo_DrillReportTvdTop_TvdTopDrillReportTvdTopId",
                        column: x => x.TvdTopDrillReportTvdTopId,
                        principalTable: "DrillReportTvdTop",
                        principalColumn: "DrillReportTvdTopId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportPerfInfo",
                columns: table => new
                {
                    PerfInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTimOpen = table.Column<string>(nullable: true),
                    DTimClose = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomDrillReportMdBottomId = table.Column<int>(nullable: true),
                    TvdTopDrillReportTvdTopId = table.Column<int>(nullable: true),
                    TvdBottomId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportPerfInfo", x => x.PerfInfoId);
                    table.ForeignKey(
                        name: "FK_DrillReportPerfInfo_DrillReportMdBottom_MdBottomDrillReportMdBottomId",
                        column: x => x.MdBottomDrillReportMdBottomId,
                        principalTable: "DrillReportMdBottom",
                        principalColumn: "DrillReportMdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportPerfInfo_DrillReportMdTop_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "DrillReportMdTop",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportPerfInfo_DrillReportTvdBottom_TvdBottomId",
                        column: x => x.TvdBottomId,
                        principalTable: "DrillReportTvdBottom",
                        principalColumn: "TvdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportPerfInfo_DrillReportTvdTop_TvdTopDrillReportTvdTopId",
                        column: x => x.TvdTopDrillReportTvdTopId,
                        principalTable: "DrillReportTvdTop",
                        principalColumn: "DrillReportTvdTopId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportStratInfo",
                columns: table => new
                {
                    StratInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    TvdTopDrillReportTvdTopId = table.Column<int>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportStratInfo", x => x.StratInfoId);
                    table.ForeignKey(
                        name: "FK_DrillReportStratInfo_DrillReportMdTop_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "DrillReportMdTop",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportStratInfo_DrillReportTvdTop_TvdTopDrillReportTvdTopId",
                        column: x => x.TvdTopDrillReportTvdTopId,
                        principalTable: "DrillReportTvdTop",
                        principalColumn: "DrillReportTvdTopId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportFormTestInfo",
                columns: table => new
                {
                    FormTestInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    TvdId = table.Column<int>(nullable: true),
                    PresPoreId = table.Column<int>(nullable: true),
                    GoodSeal = table.Column<string>(nullable: true),
                    MdSampleId = table.Column<int>(nullable: true),
                    DominateComponent = table.Column<string>(nullable: true),
                    DensityHCId = table.Column<int>(nullable: true),
                    VolumeSampleId = table.Column<int>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportFormTestInfo", x => x.FormTestInfoId);
                    table.ForeignKey(
                        name: "FK_DrillReportFormTestInfo_DrillReportDensityHC_DensityHCId",
                        column: x => x.DensityHCId,
                        principalTable: "DrillReportDensityHC",
                        principalColumn: "DensityHCId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportFormTestInfo_DrillReportMd_MdId",
                        column: x => x.MdId,
                        principalTable: "DrillReportMd",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportFormTestInfo_DrillReportMdSample_MdSampleId",
                        column: x => x.MdSampleId,
                        principalTable: "DrillReportMdSample",
                        principalColumn: "MdSampleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportFormTestInfo_DrillReportPresPore_PresPoreId",
                        column: x => x.PresPoreId,
                        principalTable: "DrillReportPresPore",
                        principalColumn: "PresPoreId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportFormTestInfo_DrillReportTvd_TvdId",
                        column: x => x.TvdId,
                        principalTable: "DrillReportTvd",
                        principalColumn: "TvdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportFormTestInfo_DrillReportVolumeSample_VolumeSampleId",
                        column: x => x.VolumeSampleId,
                        principalTable: "DrillReportVolumeSample",
                        principalColumn: "VolumeSampleId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportWellTestInfo",
                columns: table => new
                {
                    WellTestInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    TestType = table.Column<string>(nullable: true),
                    TestNumber = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomDrillReportMdBottomId = table.Column<int>(nullable: true),
                    TvdTopDrillReportTvdTopId = table.Column<int>(nullable: true),
                    TvdBottomId = table.Column<int>(nullable: true),
                    ChokeOrificeSizeId = table.Column<int>(nullable: true),
                    DensityOilId = table.Column<int>(nullable: true),
                    DensityWaterId = table.Column<int>(nullable: true),
                    DensityGasId = table.Column<int>(nullable: true),
                    FlowRateOilId = table.Column<int>(nullable: true),
                    FlowRateWaterId = table.Column<int>(nullable: true),
                    FlowRateGasId = table.Column<int>(nullable: true),
                    PresShutInId = table.Column<int>(nullable: true),
                    PresFlowingId = table.Column<int>(nullable: true),
                    PresBottomId = table.Column<int>(nullable: true),
                    GasOilRatioId = table.Column<int>(nullable: true),
                    WaterOilRatioId = table.Column<int>(nullable: true),
                    ChlorideId = table.Column<int>(nullable: true),
                    CarbonDioxideId = table.Column<int>(nullable: true),
                    HydrogenSulfideId = table.Column<int>(nullable: true),
                    VolOilTotalId = table.Column<int>(nullable: true),
                    VolGasTotalId = table.Column<int>(nullable: true),
                    VolWaterTotalId = table.Column<int>(nullable: true),
                    VolOilStoredId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportWellTestInfo", x => x.WellTestInfoId);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportCarbonDioxide_CarbonDioxideId",
                        column: x => x.CarbonDioxideId,
                        principalTable: "DrillReportCarbonDioxide",
                        principalColumn: "CarbonDioxideId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportChloride_ChlorideId",
                        column: x => x.ChlorideId,
                        principalTable: "DrillReportChloride",
                        principalColumn: "ChlorideId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportChokeOrificeSize_ChokeOrificeSizeId",
                        column: x => x.ChokeOrificeSizeId,
                        principalTable: "DrillReportChokeOrificeSize",
                        principalColumn: "ChokeOrificeSizeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportDensityGas_DensityGasId",
                        column: x => x.DensityGasId,
                        principalTable: "DrillReportDensityGas",
                        principalColumn: "DensityGasId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportDensityOil_DensityOilId",
                        column: x => x.DensityOilId,
                        principalTable: "DrillReportDensityOil",
                        principalColumn: "DensityOilId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportDensityWater_DensityWaterId",
                        column: x => x.DensityWaterId,
                        principalTable: "DrillReportDensityWater",
                        principalColumn: "DensityWaterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportFlowRateGas_FlowRateGasId",
                        column: x => x.FlowRateGasId,
                        principalTable: "DrillReportFlowRateGas",
                        principalColumn: "FlowRateGasId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportFlowRateOil_FlowRateOilId",
                        column: x => x.FlowRateOilId,
                        principalTable: "DrillReportFlowRateOil",
                        principalColumn: "FlowRateOilId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportFlowRateWater_FlowRateWaterId",
                        column: x => x.FlowRateWaterId,
                        principalTable: "DrillReportFlowRateWater",
                        principalColumn: "FlowRateWaterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportGasOilRatio_GasOilRatioId",
                        column: x => x.GasOilRatioId,
                        principalTable: "DrillReportGasOilRatio",
                        principalColumn: "GasOilRatioId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportHydrogenSulfide_HydrogenSulfideId",
                        column: x => x.HydrogenSulfideId,
                        principalTable: "DrillReportHydrogenSulfide",
                        principalColumn: "HydrogenSulfideId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportMdBottom_MdBottomDrillReportMdBottomId",
                        column: x => x.MdBottomDrillReportMdBottomId,
                        principalTable: "DrillReportMdBottom",
                        principalColumn: "DrillReportMdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportMdTop_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "DrillReportMdTop",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportPresBottom_PresBottomId",
                        column: x => x.PresBottomId,
                        principalTable: "DrillReportPresBottom",
                        principalColumn: "PresBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportPresFlowing_PresFlowingId",
                        column: x => x.PresFlowingId,
                        principalTable: "DrillReportPresFlowing",
                        principalColumn: "PresFlowingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportPresShutIn_PresShutInId",
                        column: x => x.PresShutInId,
                        principalTable: "DrillReportPresShutIn",
                        principalColumn: "PresShutInId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportTvdBottom_TvdBottomId",
                        column: x => x.TvdBottomId,
                        principalTable: "DrillReportTvdBottom",
                        principalColumn: "TvdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportTvdTop_TvdTopDrillReportTvdTopId",
                        column: x => x.TvdTopDrillReportTvdTopId,
                        principalTable: "DrillReportTvdTop",
                        principalColumn: "DrillReportTvdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportVolGasTotal_VolGasTotalId",
                        column: x => x.VolGasTotalId,
                        principalTable: "DrillReportVolGasTotal",
                        principalColumn: "VolGasTotalId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportVolOilStored_VolOilStoredId",
                        column: x => x.VolOilStoredId,
                        principalTable: "DrillReportVolOilStored",
                        principalColumn: "VolOilStoredId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportVolOilTotal_VolOilTotalId",
                        column: x => x.VolOilTotalId,
                        principalTable: "DrillReportVolOilTotal",
                        principalColumn: "VolOilTotalId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportVolWaterTotal_VolWaterTotalId",
                        column: x => x.VolWaterTotalId,
                        principalTable: "DrillReportVolWaterTotal",
                        principalColumn: "VolWaterTotalId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellTestInfo_DrillReportWaterOilRatio_WaterOilRatioId",
                        column: x => x.WaterOilRatioId,
                        principalTable: "DrillReportWaterOilRatio",
                        principalColumn: "WaterOilRatioId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportRigAlias",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    RigAliasId = table.Column<int>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    NamingSystem = table.Column<string>(nullable: true),
                    DrillReportWellboreInfoWellboreInfoId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportRigAlias", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_DrillReportRigAlias_DrillReportWellboreInfo_DrillReportWellboreInfoWellboreInfoId",
                        column: x => x.DrillReportWellboreInfoWellboreInfoId,
                        principalTable: "DrillReportWellboreInfo",
                        principalColumn: "WellboreInfoId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportFluid",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    Type = table.Column<string>(nullable: true),
                    LocationSample = table.Column<string>(nullable: true),
                    DensityId = table.Column<int>(nullable: true),
                    VisFunnelId = table.Column<int>(nullable: true),
                    TempVisId = table.Column<int>(nullable: true),
                    PvReportPvId = table.Column<int>(nullable: true),
                    YpReportYpId = table.Column<int>(nullable: true),
                    Gel10SecId = table.Column<int>(nullable: true),
                    Gel10MinId = table.Column<int>(nullable: true),
                    Gel30MinId = table.Column<int>(nullable: true),
                    FilterCakeLtlpId = table.Column<int>(nullable: true),
                    FiltrateLtlpId = table.Column<int>(nullable: true),
                    TempHthpId = table.Column<int>(nullable: true),
                    PresHthpId = table.Column<int>(nullable: true),
                    FiltrateHthpId = table.Column<int>(nullable: true),
                    FilterCakeHthpId = table.Column<int>(nullable: true),
                    SolidsPcId = table.Column<int>(nullable: true),
                    WaterPcId = table.Column<int>(nullable: true),
                    OilPcId = table.Column<int>(nullable: true),
                    SandPcId = table.Column<int>(nullable: true),
                    SolidsLowGravPcId = table.Column<int>(nullable: true),
                    SolidsCalcPcId = table.Column<int>(nullable: true),
                    BaritePcId = table.Column<int>(nullable: true),
                    LcmId = table.Column<int>(nullable: true),
                    MbtId = table.Column<int>(nullable: true),
                    Ph = table.Column<string>(nullable: true),
                    TempPhId = table.Column<int>(nullable: true),
                    PmId = table.Column<int>(nullable: true),
                    PmFiltrateId = table.Column<int>(nullable: true),
                    MfId = table.Column<int>(nullable: true),
                    AlkalinityP1Id = table.Column<int>(nullable: true),
                    AlkalinityP2Id = table.Column<int>(nullable: true),
                    ChlorideId = table.Column<int>(nullable: true),
                    CalciumId = table.Column<int>(nullable: true),
                    MagnesiumId = table.Column<int>(nullable: true),
                    PotassiumId = table.Column<int>(nullable: true),
                    BrinePcId = table.Column<int>(nullable: true),
                    LimeId = table.Column<int>(nullable: true),
                    ElectStabId = table.Column<int>(nullable: true),
                    CalciumChlorideId = table.Column<int>(nullable: true),
                    Company = table.Column<string>(nullable: true),
                    Engineer = table.Column<string>(nullable: true),
                    Asg = table.Column<string>(nullable: true),
                    SolidsHiGravPcId = table.Column<int>(nullable: true),
                    PolymerId = table.Column<int>(nullable: true),
                    PolyType = table.Column<string>(nullable: true),
                    SolCorPcId = table.Column<int>(nullable: true),
                    OilCtgId = table.Column<int>(nullable: true),
                    HardnessCaId = table.Column<int>(nullable: true),
                    SulfideId = table.Column<int>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportFluid", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportAlkalinityP1_AlkalinityP1Id",
                        column: x => x.AlkalinityP1Id,
                        principalTable: "FluidsReportAlkalinityP1",
                        principalColumn: "AlkalinityP1Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportAlkalinityP2_AlkalinityP2Id",
                        column: x => x.AlkalinityP2Id,
                        principalTable: "FluidsReportAlkalinityP2",
                        principalColumn: "AlkalinityP2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportBaritePc_BaritePcId",
                        column: x => x.BaritePcId,
                        principalTable: "FluidsReportBaritePc",
                        principalColumn: "BaritePcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportBrinePc_BrinePcId",
                        column: x => x.BrinePcId,
                        principalTable: "FluidsReportBrinePc",
                        principalColumn: "BrinePcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportCalciumChloride_CalciumChlorideId",
                        column: x => x.CalciumChlorideId,
                        principalTable: "FluidsReportCalciumChloride",
                        principalColumn: "CalciumChlorideId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportCalcium_CalciumId",
                        column: x => x.CalciumId,
                        principalTable: "FluidsReportCalcium",
                        principalColumn: "CalciumId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportChloride_ChlorideId",
                        column: x => x.ChlorideId,
                        principalTable: "FluidsReportChloride",
                        principalColumn: "ChlorideId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportDensity_DensityId",
                        column: x => x.DensityId,
                        principalTable: "FluidsReportDensity",
                        principalColumn: "DensityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportElectStab_ElectStabId",
                        column: x => x.ElectStabId,
                        principalTable: "FluidsReportElectStab",
                        principalColumn: "ElectStabId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportFilterCakeHthp_FilterCakeHthpId",
                        column: x => x.FilterCakeHthpId,
                        principalTable: "FluidsReportFilterCakeHthp",
                        principalColumn: "FilterCakeHthpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportFilterCakeLtlp_FilterCakeLtlpId",
                        column: x => x.FilterCakeLtlpId,
                        principalTable: "FluidsReportFilterCakeLtlp",
                        principalColumn: "FilterCakeLtlpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportFiltrateHthp_FiltrateHthpId",
                        column: x => x.FiltrateHthpId,
                        principalTable: "FluidsReportFiltrateHthp",
                        principalColumn: "FiltrateHthpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportFiltrateLtlp_FiltrateLtlpId",
                        column: x => x.FiltrateLtlpId,
                        principalTable: "FluidsReportFiltrateLtlp",
                        principalColumn: "FiltrateLtlpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportGel10Min_Gel10MinId",
                        column: x => x.Gel10MinId,
                        principalTable: "FluidsReportGel10Min",
                        principalColumn: "Gel10MinId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportGel10Sec_Gel10SecId",
                        column: x => x.Gel10SecId,
                        principalTable: "FluidsReportGel10Sec",
                        principalColumn: "Gel10SecId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportGel30Min_Gel30MinId",
                        column: x => x.Gel30MinId,
                        principalTable: "FluidsReportGel30Min",
                        principalColumn: "Gel30MinId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportHardnessCa_HardnessCaId",
                        column: x => x.HardnessCaId,
                        principalTable: "FluidsReportHardnessCa",
                        principalColumn: "HardnessCaId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportLcm_LcmId",
                        column: x => x.LcmId,
                        principalTable: "FluidsReportLcm",
                        principalColumn: "LcmId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportLime_LimeId",
                        column: x => x.LimeId,
                        principalTable: "FluidsReportLime",
                        principalColumn: "LimeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportMagnesium_MagnesiumId",
                        column: x => x.MagnesiumId,
                        principalTable: "FluidsReportMagnesium",
                        principalColumn: "MagnesiumId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportMbt_MbtId",
                        column: x => x.MbtId,
                        principalTable: "FluidsReportMbt",
                        principalColumn: "MbtId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportMf_MfId",
                        column: x => x.MfId,
                        principalTable: "FluidsReportMf",
                        principalColumn: "MfId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportOilCtg_OilCtgId",
                        column: x => x.OilCtgId,
                        principalTable: "FluidsReportOilCtg",
                        principalColumn: "OilCtgId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportOilPc_OilPcId",
                        column: x => x.OilPcId,
                        principalTable: "FluidsReportOilPc",
                        principalColumn: "OilPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportPmFiltrate_PmFiltrateId",
                        column: x => x.PmFiltrateId,
                        principalTable: "FluidsReportPmFiltrate",
                        principalColumn: "PmFiltrateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportPm_PmId",
                        column: x => x.PmId,
                        principalTable: "FluidsReportPm",
                        principalColumn: "PmId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportPolymer_PolymerId",
                        column: x => x.PolymerId,
                        principalTable: "FluidsReportPolymer",
                        principalColumn: "PolymerId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportPotassium_PotassiumId",
                        column: x => x.PotassiumId,
                        principalTable: "FluidsReportPotassium",
                        principalColumn: "PotassiumId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportPresHthp_PresHthpId",
                        column: x => x.PresHthpId,
                        principalTable: "FluidsReportPresHthp",
                        principalColumn: "PresHthpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportPv_PvReportPvId",
                        column: x => x.PvReportPvId,
                        principalTable: "FluidsReportPv",
                        principalColumn: "ReportPvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportSandPc_SandPcId",
                        column: x => x.SandPcId,
                        principalTable: "FluidsReportSandPc",
                        principalColumn: "SandPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportSolCorPc_SolCorPcId",
                        column: x => x.SolCorPcId,
                        principalTable: "FluidsReportSolCorPc",
                        principalColumn: "SolCorPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportSolidsCalcPc_SolidsCalcPcId",
                        column: x => x.SolidsCalcPcId,
                        principalTable: "FluidsReportSolidsCalcPc",
                        principalColumn: "SolidsCalcPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportSolidsHiGravPc_SolidsHiGravPcId",
                        column: x => x.SolidsHiGravPcId,
                        principalTable: "FluidsReportSolidsHiGravPc",
                        principalColumn: "SolidsHiGravPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportSolidsLowGravPc_SolidsLowGravPcId",
                        column: x => x.SolidsLowGravPcId,
                        principalTable: "FluidsReportSolidsLowGravPc",
                        principalColumn: "SolidsLowGravPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportSolidsPc_SolidsPcId",
                        column: x => x.SolidsPcId,
                        principalTable: "FluidsReportSolidsPc",
                        principalColumn: "SolidsPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportSulfide_SulfideId",
                        column: x => x.SulfideId,
                        principalTable: "FluidsReportSulfide",
                        principalColumn: "SulfideId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportTempHthp_TempHthpId",
                        column: x => x.TempHthpId,
                        principalTable: "FluidsReportTempHthp",
                        principalColumn: "TempHthpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportTempPh_TempPhId",
                        column: x => x.TempPhId,
                        principalTable: "FluidsReportTempPh",
                        principalColumn: "TempPhId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportTempVis_TempVisId",
                        column: x => x.TempVisId,
                        principalTable: "FluidsReportTempVis",
                        principalColumn: "TempVisId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportVisFunnel_VisFunnelId",
                        column: x => x.VisFunnelId,
                        principalTable: "FluidsReportVisFunnel",
                        principalColumn: "VisFunnelId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportWaterPc_WaterPcId",
                        column: x => x.WaterPcId,
                        principalTable: "FluidsReportWaterPc",
                        principalColumn: "WaterPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportFluid_FluidsReportYp_YpReportYpId",
                        column: x => x.YpReportYpId,
                        principalTable: "FluidsReportYp",
                        principalColumn: "ReportYpId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FormationMarkers",
                columns: table => new
                {
                    FormationMarkerId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    MdPrognosedId = table.Column<int>(nullable: true),
                    TvdPrognosedId = table.Column<int>(nullable: true),
                    MdTopSampleId = table.Column<int>(nullable: true),
                    TvdTopSampleId = table.Column<int>(nullable: true),
                    ThicknessBedId = table.Column<int>(nullable: true),
                    ThicknessApparentId = table.Column<int>(nullable: true),
                    ThicknessPerpenId = table.Column<int>(nullable: true),
                    MdLogSampleId = table.Column<int>(nullable: true),
                    TvdLogSampleId = table.Column<int>(nullable: true),
                    DipId = table.Column<int>(nullable: true),
                    DipDirectionId = table.Column<int>(nullable: true),
                    LithostratigraphicId = table.Column<int>(nullable: true),
                    ChronostratigraphicId = table.Column<int>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    CommonDataFormationMarkerCommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormationMarkers", x => x.FormationMarkerId);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerChronostratigraphics_ChronostratigraphicId",
                        column: x => x.ChronostratigraphicId,
                        principalTable: "FormationMarkerChronostratigraphics",
                        principalColumn: "ChronostratigraphicId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerCommonDatas_CommonDataFormationMarkerCommonDataId",
                        column: x => x.CommonDataFormationMarkerCommonDataId,
                        principalTable: "FormationMarkerCommonDatas",
                        principalColumn: "FormationMarkerCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerDipDirections_DipDirectionId",
                        column: x => x.DipDirectionId,
                        principalTable: "FormationMarkerDipDirections",
                        principalColumn: "DipDirectionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerDips_DipId",
                        column: x => x.DipId,
                        principalTable: "FormationMarkerDips",
                        principalColumn: "DipId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerLithostratigraphics_LithostratigraphicId",
                        column: x => x.LithostratigraphicId,
                        principalTable: "FormationMarkerLithostratigraphics",
                        principalColumn: "LithostratigraphicId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerMdLogSamples_MdLogSampleId",
                        column: x => x.MdLogSampleId,
                        principalTable: "FormationMarkerMdLogSamples",
                        principalColumn: "MdLogSampleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerMdPrognoseds_MdPrognosedId",
                        column: x => x.MdPrognosedId,
                        principalTable: "FormationMarkerMdPrognoseds",
                        principalColumn: "MdPrognosedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerMdTopSamples_MdTopSampleId",
                        column: x => x.MdTopSampleId,
                        principalTable: "FormationMarkerMdTopSamples",
                        principalColumn: "MdTopSampleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerThicknessApparents_ThicknessApparentId",
                        column: x => x.ThicknessApparentId,
                        principalTable: "FormationMarkerThicknessApparents",
                        principalColumn: "ThicknessApparentId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerThicknessBeds_ThicknessBedId",
                        column: x => x.ThicknessBedId,
                        principalTable: "FormationMarkerThicknessBeds",
                        principalColumn: "ThicknessBedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerThicknessPerpens_ThicknessPerpenId",
                        column: x => x.ThicknessPerpenId,
                        principalTable: "FormationMarkerThicknessPerpens",
                        principalColumn: "ThicknessPerpenId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerTvdLogSamples_TvdLogSampleId",
                        column: x => x.TvdLogSampleId,
                        principalTable: "FormationMarkerTvdLogSamples",
                        principalColumn: "TvdLogSampleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerTvdPrognoseds_TvdPrognosedId",
                        column: x => x.TvdPrognosedId,
                        principalTable: "FormationMarkerTvdPrognoseds",
                        principalColumn: "TvdPrognosedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FormationMarkers_FormationMarkerTvdTopSamples_TvdTopSampleId",
                        column: x => x.TvdTopSampleId,
                        principalTable: "FormationMarkerTvdTopSamples",
                        principalColumn: "TvdTopSampleId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Logs",
                columns: table => new
                {
                    LogId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    ServiceCompany = table.Column<string>(nullable: true),
                    RunNumber = table.Column<string>(nullable: true),
                    CreationDate = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    IndexType = table.Column<string>(nullable: true),
                    StartIndexLogStartIndexId = table.Column<int>(nullable: true),
                    EndIndexLogEndIndexId = table.Column<int>(nullable: true),
                    StepIncrementId = table.Column<int>(nullable: true),
                    Direction = table.Column<string>(nullable: true),
                    IndexCurve = table.Column<string>(nullable: true),
                    NullValue = table.Column<string>(nullable: true),
                    LogDataId = table.Column<int>(nullable: true),
                    CommonDataLogCommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Logs", x => x.LogId);
                    table.ForeignKey(
                        name: "FK_Logs_LogCommonDatas_CommonDataLogCommonDataId",
                        column: x => x.CommonDataLogCommonDataId,
                        principalTable: "LogCommonDatas",
                        principalColumn: "LogCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Logs_LogEndIndex_EndIndexLogEndIndexId",
                        column: x => x.EndIndexLogEndIndexId,
                        principalTable: "LogEndIndex",
                        principalColumn: "LogEndIndexId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Logs_LogDatas_LogDataId",
                        column: x => x.LogDataId,
                        principalTable: "LogDatas",
                        principalColumn: "LogDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Logs_LogStartIndex_StartIndexLogStartIndexId",
                        column: x => x.StartIndexLogStartIndexId,
                        principalTable: "LogStartIndex",
                        principalColumn: "LogStartIndexId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Logs_LogStepIncrements_StepIncrementId",
                        column: x => x.StepIncrementId,
                        principalTable: "LogStepIncrements",
                        principalColumn: "StepIncrementId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Messages",
                columns: table => new
                {
                    MessageId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    DTim = table.Column<string>(nullable: true),
                    ActivityCode = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    MdBitId = table.Column<int>(nullable: true),
                    TypeMessage = table.Column<string>(nullable: true),
                    MessageText = table.Column<string>(nullable: true),
                    ParamIndex = table.Column<string>(nullable: true),
                    Severity = table.Column<string>(nullable: true),
                    WarnProbability = table.Column<string>(nullable: true),
                    CommonDataMessageCommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Messages", x => x.MessageId);
                    table.ForeignKey(
                        name: "FK_Messages_MessageCommonDatas_CommonDataMessageCommonDataId",
                        column: x => x.CommonDataMessageCommonDataId,
                        principalTable: "MessageCommonDatas",
                        principalColumn: "MessageCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Messages_MessageMdBit_MdBitId",
                        column: x => x.MdBitId,
                        principalTable: "MessageMdBit",
                        principalColumn: "MdBitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Messages_MessageMd_MdId",
                        column: x => x.MdId,
                        principalTable: "MessageMd",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Messages_MessageParam_ParamIndex",
                        column: x => x.ParamIndex,
                        principalTable: "MessageParam",
                        principalColumn: "Index",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MudLogQualifier",
                columns: table => new
                {
                    QualifierId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<string>(nullable: true),
                    AbundanceId = table.Column<int>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogQualifier", x => x.QualifierId);
                    table.ForeignKey(
                        name: "FK_MudLogQualifier_MudLogAbundance_AbundanceId",
                        column: x => x.AbundanceId,
                        principalTable: "MudLogAbundance",
                        principalColumn: "AbundanceId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MudLogMudGas",
                columns: table => new
                {
                    MudGasId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GasAvId = table.Column<int>(nullable: true),
                    GasPeakId = table.Column<int>(nullable: true),
                    GasPeakType = table.Column<string>(nullable: true),
                    GasBackgndId = table.Column<int>(nullable: true),
                    GasConAvId = table.Column<int>(nullable: true),
                    GasConMxId = table.Column<int>(nullable: true),
                    GasTripId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogMudGas", x => x.MudGasId);
                    table.ForeignKey(
                        name: "FK_MudLogMudGas_MudLogGasAv_GasAvId",
                        column: x => x.GasAvId,
                        principalTable: "MudLogGasAv",
                        principalColumn: "GasAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogMudGas_MudLogGasBackgnd_GasBackgndId",
                        column: x => x.GasBackgndId,
                        principalTable: "MudLogGasBackgnd",
                        principalColumn: "GasBackgndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogMudGas_MudLogGasConAv_GasConAvId",
                        column: x => x.GasConAvId,
                        principalTable: "MudLogGasConAv",
                        principalColumn: "GasConAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogMudGas_MudLogGasConMx_GasConMxId",
                        column: x => x.GasConMxId,
                        principalTable: "MudLogGasConMx",
                        principalColumn: "GasConMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogMudGas_MudLogGasPeak_GasPeakId",
                        column: x => x.GasPeakId,
                        principalTable: "MudLogGasPeak",
                        principalColumn: "GasPeakId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogMudGas_MudLogGasTrip_GasTripId",
                        column: x => x.GasTripId,
                        principalTable: "MudLogGasTrip",
                        principalColumn: "GasTripId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MudLogShow",
                columns: table => new
                {
                    ShowId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShowRat = table.Column<string>(nullable: true),
                    StainColor = table.Column<string>(nullable: true),
                    StainDistr = table.Column<string>(nullable: true),
                    StainPcId = table.Column<int>(nullable: true),
                    NatFlorColor = table.Column<string>(nullable: true),
                    NatFlorPcId = table.Column<int>(nullable: true),
                    NatFlorLevel = table.Column<string>(nullable: true),
                    NatFlorDesc = table.Column<string>(nullable: true),
                    CutColor = table.Column<string>(nullable: true),
                    CutSpeed = table.Column<string>(nullable: true),
                    CutStrength = table.Column<string>(nullable: true),
                    CutForm = table.Column<string>(nullable: true),
                    CutLevel = table.Column<string>(nullable: true),
                    CutFlorColor = table.Column<string>(nullable: true),
                    CutFlorSpeed = table.Column<string>(nullable: true),
                    CutFlorStrength = table.Column<string>(nullable: true),
                    CutFlorForm = table.Column<string>(nullable: true),
                    CutFlorLevel = table.Column<string>(nullable: true),
                    ResidueColor = table.Column<string>(nullable: true),
                    ShowDesc = table.Column<string>(nullable: true),
                    ImpregnatedLitho = table.Column<string>(nullable: true),
                    Odor = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogShow", x => x.ShowId);
                    table.ForeignKey(
                        name: "FK_MudLogShow_MudLogNatFlorPc_NatFlorPcId",
                        column: x => x.NatFlorPcId,
                        principalTable: "MudLogNatFlorPc",
                        principalColumn: "NatFlorPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogShow_MudLogStainPc_StainPcId",
                        column: x => x.StainPcId,
                        principalTable: "MudLogStainPc",
                        principalColumn: "StainPcId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MudLogChromatograph",
                columns: table => new
                {
                    ChromatographId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomId = table.Column<int>(nullable: true),
                    WtMudInId = table.Column<int>(nullable: true),
                    WtMudOutId = table.Column<int>(nullable: true),
                    ChromType = table.Column<string>(nullable: true),
                    ETimChromCycleId = table.Column<int>(nullable: true),
                    ChromIntRpt = table.Column<string>(nullable: true),
                    MethAvId = table.Column<int>(nullable: true),
                    MethMnId = table.Column<int>(nullable: true),
                    MethMxId = table.Column<int>(nullable: true),
                    EthAvId = table.Column<int>(nullable: true),
                    EthMnId = table.Column<int>(nullable: true),
                    EthMxId = table.Column<int>(nullable: true),
                    PropAvId = table.Column<int>(nullable: true),
                    PropMnId = table.Column<int>(nullable: true),
                    PropMxId = table.Column<int>(nullable: true),
                    IbutAvId = table.Column<int>(nullable: true),
                    IbutMnId = table.Column<int>(nullable: true),
                    IbutMxId = table.Column<int>(nullable: true),
                    NbutAvId = table.Column<int>(nullable: true),
                    NbutMnId = table.Column<int>(nullable: true),
                    NbutMxId = table.Column<int>(nullable: true),
                    IpentAvId = table.Column<int>(nullable: true),
                    IpentMnId = table.Column<int>(nullable: true),
                    IpentMxId = table.Column<int>(nullable: true),
                    NpentAvId = table.Column<int>(nullable: true),
                    NpentMnId = table.Column<int>(nullable: true),
                    NpentMxId = table.Column<int>(nullable: true),
                    EpentAvId = table.Column<int>(nullable: true),
                    EpentMnId = table.Column<int>(nullable: true),
                    EpentMxId = table.Column<int>(nullable: true),
                    IhexAvId = table.Column<int>(nullable: true),
                    IhexMnId = table.Column<int>(nullable: true),
                    IhexMxId = table.Column<int>(nullable: true),
                    NhexAvId = table.Column<int>(nullable: true),
                    NhexMnId = table.Column<int>(nullable: true),
                    NhexMxId = table.Column<int>(nullable: true),
                    Co2AvId = table.Column<int>(nullable: true),
                    Co2MnId = table.Column<int>(nullable: true),
                    Co2MxId = table.Column<int>(nullable: true),
                    H2sAvId = table.Column<int>(nullable: true),
                    H2sMnId = table.Column<int>(nullable: true),
                    H2sMxId = table.Column<int>(nullable: true),
                    AcetyleneId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogChromatograph", x => x.ChromatographId);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogAcetylene_AcetyleneId",
                        column: x => x.AcetyleneId,
                        principalTable: "MudLogAcetylene",
                        principalColumn: "AcetyleneId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogCo2Av_Co2AvId",
                        column: x => x.Co2AvId,
                        principalTable: "MudLogCo2Av",
                        principalColumn: "Co2AvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogCo2Mn_Co2MnId",
                        column: x => x.Co2MnId,
                        principalTable: "MudLogCo2Mn",
                        principalColumn: "Co2MnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogCo2Mx_Co2MxId",
                        column: x => x.Co2MxId,
                        principalTable: "MudLogCo2Mx",
                        principalColumn: "Co2MxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogETimChromCycle_ETimChromCycleId",
                        column: x => x.ETimChromCycleId,
                        principalTable: "MudLogETimChromCycle",
                        principalColumn: "ETimChromCycleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogEpentAv_EpentAvId",
                        column: x => x.EpentAvId,
                        principalTable: "MudLogEpentAv",
                        principalColumn: "EpentAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogEpentMn_EpentMnId",
                        column: x => x.EpentMnId,
                        principalTable: "MudLogEpentMn",
                        principalColumn: "EpentMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogEpentMx_EpentMxId",
                        column: x => x.EpentMxId,
                        principalTable: "MudLogEpentMx",
                        principalColumn: "EpentMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogEthAv_EthAvId",
                        column: x => x.EthAvId,
                        principalTable: "MudLogEthAv",
                        principalColumn: "EthAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogEthMn_EthMnId",
                        column: x => x.EthMnId,
                        principalTable: "MudLogEthMn",
                        principalColumn: "EthMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogEthMx_EthMxId",
                        column: x => x.EthMxId,
                        principalTable: "MudLogEthMx",
                        principalColumn: "EthMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogH2sAv_H2sAvId",
                        column: x => x.H2sAvId,
                        principalTable: "MudLogH2sAv",
                        principalColumn: "H2sAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogH2sMn_H2sMnId",
                        column: x => x.H2sMnId,
                        principalTable: "MudLogH2sMn",
                        principalColumn: "H2sMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogH2sMx_H2sMxId",
                        column: x => x.H2sMxId,
                        principalTable: "MudLogH2sMx",
                        principalColumn: "H2sMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogIbutAv_IbutAvId",
                        column: x => x.IbutAvId,
                        principalTable: "MudLogIbutAv",
                        principalColumn: "IbutAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogIbutMn_IbutMnId",
                        column: x => x.IbutMnId,
                        principalTable: "MudLogIbutMn",
                        principalColumn: "IbutMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogIbutMx_IbutMxId",
                        column: x => x.IbutMxId,
                        principalTable: "MudLogIbutMx",
                        principalColumn: "IbutMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogIhexAv_IhexAvId",
                        column: x => x.IhexAvId,
                        principalTable: "MudLogIhexAv",
                        principalColumn: "IhexAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogIhexMn_IhexMnId",
                        column: x => x.IhexMnId,
                        principalTable: "MudLogIhexMn",
                        principalColumn: "IhexMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogIhexMx_IhexMxId",
                        column: x => x.IhexMxId,
                        principalTable: "MudLogIhexMx",
                        principalColumn: "IhexMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogIpentAv_IpentAvId",
                        column: x => x.IpentAvId,
                        principalTable: "MudLogIpentAv",
                        principalColumn: "IpentAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogIpentMn_IpentMnId",
                        column: x => x.IpentMnId,
                        principalTable: "MudLogIpentMn",
                        principalColumn: "IpentMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogIpentMx_IpentMxId",
                        column: x => x.IpentMxId,
                        principalTable: "MudLogIpentMx",
                        principalColumn: "IpentMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogMdBottom_MdBottomId",
                        column: x => x.MdBottomId,
                        principalTable: "MudLogMdBottom",
                        principalColumn: "MdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogMdTop_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "MudLogMdTop",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogMethAv_MethAvId",
                        column: x => x.MethAvId,
                        principalTable: "MudLogMethAv",
                        principalColumn: "MethAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogMethMn_MethMnId",
                        column: x => x.MethMnId,
                        principalTable: "MudLogMethMn",
                        principalColumn: "MethMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogMethMx_MethMxId",
                        column: x => x.MethMxId,
                        principalTable: "MudLogMethMx",
                        principalColumn: "MethMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogNbutAv_NbutAvId",
                        column: x => x.NbutAvId,
                        principalTable: "MudLogNbutAv",
                        principalColumn: "NbutAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogNbutMn_NbutMnId",
                        column: x => x.NbutMnId,
                        principalTable: "MudLogNbutMn",
                        principalColumn: "NbutMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogNbutMx_NbutMxId",
                        column: x => x.NbutMxId,
                        principalTable: "MudLogNbutMx",
                        principalColumn: "NbutMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogNhexAv_NhexAvId",
                        column: x => x.NhexAvId,
                        principalTable: "MudLogNhexAv",
                        principalColumn: "NhexAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogNhexMn_NhexMnId",
                        column: x => x.NhexMnId,
                        principalTable: "MudLogNhexMn",
                        principalColumn: "NhexMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogNhexMx_NhexMxId",
                        column: x => x.NhexMxId,
                        principalTable: "MudLogNhexMx",
                        principalColumn: "NhexMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogNpentAv_NpentAvId",
                        column: x => x.NpentAvId,
                        principalTable: "MudLogNpentAv",
                        principalColumn: "NpentAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogNpentMn_NpentMnId",
                        column: x => x.NpentMnId,
                        principalTable: "MudLogNpentMn",
                        principalColumn: "NpentMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogNpentMx_NpentMxId",
                        column: x => x.NpentMxId,
                        principalTable: "MudLogNpentMx",
                        principalColumn: "NpentMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogPropAv_PropAvId",
                        column: x => x.PropAvId,
                        principalTable: "MudLogPropAv",
                        principalColumn: "PropAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogPropMn_PropMnId",
                        column: x => x.PropMnId,
                        principalTable: "MudLogPropMn",
                        principalColumn: "PropMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogPropMx_PropMxId",
                        column: x => x.PropMxId,
                        principalTable: "MudLogPropMx",
                        principalColumn: "PropMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogWtMudIn_WtMudInId",
                        column: x => x.WtMudInId,
                        principalTable: "MudLogWtMudIn",
                        principalColumn: "WtMudInId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogChromatograph_MudLogWtMudOut_WtMudOutId",
                        column: x => x.WtMudOutId,
                        principalTable: "MudLogWtMudOut",
                        principalColumn: "WtMudOutId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupExtensionNameValues",
                columns: table => new
                {
                    ExtensionNameValueId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    ValueId = table.Column<int>(nullable: true),
                    DataType = table.Column<string>(nullable: true),
                    DTim = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    Index = table.Column<string>(nullable: true),
                    MeasureClass = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupExtensionNameValues", x => x.ExtensionNameValueId);
                    table.ForeignKey(
                        name: "FK_ObjectGroupExtensionNameValues_ObjectGroupMd_MdId",
                        column: x => x.MdId,
                        principalTable: "ObjectGroupMd",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroupExtensionNameValues_ObjectGroupValue_ValueId",
                        column: x => x.ValueId,
                        principalTable: "ObjectGroupValue",
                        principalColumn: "ValueId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportIncidents",
                columns: table => new
                {
                    IncidentId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    Reporter = table.Column<string>(nullable: true),
                    NumMinorInjury = table.Column<string>(nullable: true),
                    NumMajorInjury = table.Column<string>(nullable: true),
                    NumFatality = table.Column<string>(nullable: true),
                    IsNearMiss = table.Column<string>(nullable: true),
                    DescLocation = table.Column<string>(nullable: true),
                    DescAccident = table.Column<string>(nullable: true),
                    RemedialActionDesc = table.Column<string>(nullable: true),
                    CauseDesc = table.Column<string>(nullable: true),
                    ETimLostGrossId = table.Column<int>(nullable: true),
                    CostLostGrossId = table.Column<int>(nullable: true),
                    ResponsibleCompany = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportIncidents", x => x.IncidentId);
                    table.ForeignKey(
                        name: "FK_OpsReportIncidents_OpsReportCostLostGrosss_CostLostGrossId",
                        column: x => x.CostLostGrossId,
                        principalTable: "OpsReportCostLostGrosss",
                        principalColumn: "CostLostGrossId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportIncidents_OpsReportETimLostGrosss_ETimLostGrossId",
                        column: x => x.ETimLostGrossId,
                        principalTable: "OpsReportETimLostGrosss",
                        principalColumn: "ETimLostGrossId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportValids",
                columns: table => new
                {
                    ValidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MagTotalFieldCalcId = table.Column<int>(nullable: true),
                    MagDipAngleCalcId = table.Column<int>(nullable: true),
                    GravTotalFieldCalcId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportValids", x => x.ValidId);
                    table.ForeignKey(
                        name: "FK_OpsReportValids_OpsReportGravTotalFieldCalcs_GravTotalFieldCalcId",
                        column: x => x.GravTotalFieldCalcId,
                        principalTable: "OpsReportGravTotalFieldCalcs",
                        principalColumn: "GravTotalFieldCalcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportValids_OpsReportMagDipAngleCalcs_MagDipAngleCalcId",
                        column: x => x.MagDipAngleCalcId,
                        principalTable: "OpsReportMagDipAngleCalcs",
                        principalColumn: "MagDipAngleCalcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportValids_OpsReportMagTotalFieldCalcs_MagTotalFieldCalcId",
                        column: x => x.MagTotalFieldCalcId,
                        principalTable: "OpsReportMagTotalFieldCalcs",
                        principalColumn: "MagTotalFieldCalcId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRawDatas",
                columns: table => new
                {
                    RawDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GravAxialRawId = table.Column<int>(nullable: true),
                    GravTran1RawId = table.Column<int>(nullable: true),
                    GravTran2RawId = table.Column<int>(nullable: true),
                    MagAxialRawId = table.Column<int>(nullable: true),
                    MagTran1RawId = table.Column<int>(nullable: true),
                    MagTran2RawId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRawDatas", x => x.RawDataId);
                    table.ForeignKey(
                        name: "FK_OpsReportRawDatas_OpsReportGravAxialRaws_GravAxialRawId",
                        column: x => x.GravAxialRawId,
                        principalTable: "OpsReportGravAxialRaws",
                        principalColumn: "GravAxialRawId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRawDatas_OpsReportGravTran1Raws_GravTran1RawId",
                        column: x => x.GravTran1RawId,
                        principalTable: "OpsReportGravTran1Raws",
                        principalColumn: "GravTran1RawId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRawDatas_OpsReportGravTran2Raws_GravTran2RawId",
                        column: x => x.GravTran2RawId,
                        principalTable: "OpsReportGravTran2Raws",
                        principalColumn: "GravTran2RawId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRawDatas_OpsReportMagAxialRaws_MagAxialRawId",
                        column: x => x.MagAxialRawId,
                        principalTable: "OpsReportMagAxialRaws",
                        principalColumn: "MagAxialRawId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRawDatas_OpsReportMagTran1Raws_MagTran1RawId",
                        column: x => x.MagTran1RawId,
                        principalTable: "OpsReportMagTran1Raws",
                        principalColumn: "MagTran1RawId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRawDatas_OpsReportMagTran2Raws_MagTran2RawId",
                        column: x => x.MagTran2RawId,
                        principalTable: "OpsReportMagTran2Raws",
                        principalColumn: "MagTran2RawId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportShakerScreens",
                columns: table => new
                {
                    ShakerScreenId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTimStart = table.Column<string>(nullable: true),
                    DTimEnd = table.Column<string>(nullable: true),
                    NumDeck = table.Column<string>(nullable: true),
                    MeshXId = table.Column<int>(nullable: true),
                    MeshYId = table.Column<int>(nullable: true),
                    Manufacturer = table.Column<string>(nullable: true),
                    Model = table.Column<string>(nullable: true),
                    CutPointId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportShakerScreens", x => x.ShakerScreenId);
                    table.ForeignKey(
                        name: "FK_OpsReportShakerScreens_OpsReportCutPoints_CutPointId",
                        column: x => x.CutPointId,
                        principalTable: "OpsReportCutPoints",
                        principalColumn: "CutPointId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportShakerScreens_OpsReportMeshXs_MeshXId",
                        column: x => x.MeshXId,
                        principalTable: "OpsReportMeshXs",
                        principalColumn: "MeshXId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportShakerScreens_OpsReportMeshYs_MeshYId",
                        column: x => x.MeshYId,
                        principalTable: "OpsReportMeshYs",
                        principalColumn: "MeshYId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportBulks",
                columns: table => new
                {
                    BulkId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    ItemVolPerUnitId = table.Column<int>(nullable: true),
                    PricePerUnitId = table.Column<int>(nullable: true),
                    QtyStart = table.Column<string>(nullable: true),
                    QtyAdjustment = table.Column<string>(nullable: true),
                    QtyReceived = table.Column<string>(nullable: true),
                    QtyReturned = table.Column<string>(nullable: true),
                    QtyUsed = table.Column<string>(nullable: true),
                    CostItemId = table.Column<int>(nullable: true),
                    QtyOnLocation = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportBulks", x => x.BulkId);
                    table.ForeignKey(
                        name: "FK_OpsReportBulks_OpsReportCostItems_CostItemId",
                        column: x => x.CostItemId,
                        principalTable: "OpsReportCostItems",
                        principalColumn: "CostItemId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportBulks_OpsReportItemVolPerUnits_ItemVolPerUnitId",
                        column: x => x.ItemVolPerUnitId,
                        principalTable: "OpsReportItemVolPerUnits",
                        principalColumn: "ItemVolPerUnitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportBulks_OpsReportPricePerUnits_PricePerUnitId",
                        column: x => x.PricePerUnitId,
                        principalTable: "OpsReportPricePerUnits",
                        principalColumn: "PricePerUnitId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMudInventorys",
                columns: table => new
                {
                    MudInventoryId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    ItemWtPerUnitId = table.Column<int>(nullable: true),
                    PricePerUnitId = table.Column<int>(nullable: true),
                    QtyStart = table.Column<string>(nullable: true),
                    QtyAdjustment = table.Column<string>(nullable: true),
                    QtyReceived = table.Column<string>(nullable: true),
                    QtyReturned = table.Column<string>(nullable: true),
                    QtyUsed = table.Column<string>(nullable: true),
                    CostItemId = table.Column<int>(nullable: true),
                    QtyOnLocation = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMudInventorys", x => x.MudInventoryId);
                    table.ForeignKey(
                        name: "FK_OpsReportMudInventorys_OpsReportCostItems_CostItemId",
                        column: x => x.CostItemId,
                        principalTable: "OpsReportCostItems",
                        principalColumn: "CostItemId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudInventorys_OpsReportItemWtPerUnits_ItemWtPerUnitId",
                        column: x => x.ItemWtPerUnitId,
                        principalTable: "OpsReportItemWtPerUnits",
                        principalColumn: "ItemWtPerUnitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudInventorys_OpsReportPricePerUnits_PricePerUnitId",
                        column: x => x.PricePerUnitId,
                        principalTable: "OpsReportPricePerUnits",
                        principalColumn: "PricePerUnitId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPumpOps",
                columns: table => new
                {
                    PumpOpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    PumpId = table.Column<int>(nullable: true),
                    TypeOperation = table.Column<string>(nullable: true),
                    IdLinerId = table.Column<int>(nullable: true),
                    LenStrokeId = table.Column<int>(nullable: true),
                    RateStrokeId = table.Column<int>(nullable: true),
                    PressureId = table.Column<int>(nullable: true),
                    PcEfficiencyId = table.Column<int>(nullable: true),
                    PumpOutputId = table.Column<int>(nullable: true),
                    MdBitId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPumpOps", x => x.PumpOpId);
                    table.ForeignKey(
                        name: "FK_OpsReportPumpOps_OpsReportIdLiners_IdLinerId",
                        column: x => x.IdLinerId,
                        principalTable: "OpsReportIdLiners",
                        principalColumn: "IdLinerId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportPumpOps_OpsReportLenStrokes_LenStrokeId",
                        column: x => x.LenStrokeId,
                        principalTable: "OpsReportLenStrokes",
                        principalColumn: "LenStrokeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportPumpOps_OpsReportMdBits_MdBitId",
                        column: x => x.MdBitId,
                        principalTable: "OpsReportMdBits",
                        principalColumn: "MdBitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportPumpOps_OpsReportPcEfficiencys_PcEfficiencyId",
                        column: x => x.PcEfficiencyId,
                        principalTable: "OpsReportPcEfficiencys",
                        principalColumn: "PcEfficiencyId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportPumpOps_OpsReportPressures_PressureId",
                        column: x => x.PressureId,
                        principalTable: "OpsReportPressures",
                        principalColumn: "PressureId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportPumpOps_OpsReportPumps_PumpId",
                        column: x => x.PumpId,
                        principalTable: "OpsReportPumps",
                        principalColumn: "PumpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportPumpOps_OpsReportPumpOutputs_PumpOutputId",
                        column: x => x.PumpOutputId,
                        principalTable: "OpsReportPumpOutputs",
                        principalColumn: "PumpOutputId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportPumpOps_OpsReportRateStrokes_RateStrokeId",
                        column: x => x.RateStrokeId,
                        principalTable: "OpsReportRateStrokes",
                        principalColumn: "RateStrokeId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportCorUseds",
                columns: table => new
                {
                    CorUsedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GravAxialAccelCorId = table.Column<int>(nullable: true),
                    GravTran1AccelCorId = table.Column<int>(nullable: true),
                    GravTran2AccelCorId = table.Column<int>(nullable: true),
                    MagAxialDrlstrCorId = table.Column<int>(nullable: true),
                    MagTran1DrlstrCorId = table.Column<int>(nullable: true),
                    MagTran2DrlstrCorId = table.Column<int>(nullable: true),
                    SagIncCorId = table.Column<int>(nullable: true),
                    SagAziCorId = table.Column<int>(nullable: true),
                    StnMagDeclUsedId = table.Column<int>(nullable: true),
                    StnGridCorUsedId = table.Column<int>(nullable: true),
                    DirSensorOffsetId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportCorUseds", x => x.CorUsedId);
                    table.ForeignKey(
                        name: "FK_OpsReportCorUseds_OpsReportDirSensorOffsets_DirSensorOffsetId",
                        column: x => x.DirSensorOffsetId,
                        principalTable: "OpsReportDirSensorOffsets",
                        principalColumn: "DirSensorOffsetId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportCorUseds_OpsReportGravAxialAccelCors_GravAxialAccelCorId",
                        column: x => x.GravAxialAccelCorId,
                        principalTable: "OpsReportGravAxialAccelCors",
                        principalColumn: "GravAxialAccelCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportCorUseds_OpsReportGravTran1AccelCors_GravTran1AccelCorId",
                        column: x => x.GravTran1AccelCorId,
                        principalTable: "OpsReportGravTran1AccelCors",
                        principalColumn: "GravTran1AccelCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportCorUseds_OpsReportGravTran2AccelCors_GravTran2AccelCorId",
                        column: x => x.GravTran2AccelCorId,
                        principalTable: "OpsReportGravTran2AccelCors",
                        principalColumn: "GravTran2AccelCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportCorUseds_OpsReportMagAxialDrlstrCors_MagAxialDrlstrCorId",
                        column: x => x.MagAxialDrlstrCorId,
                        principalTable: "OpsReportMagAxialDrlstrCors",
                        principalColumn: "MagAxialDrlstrCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportCorUseds_OpsReportMagTran1DrlstrCors_MagTran1DrlstrCorId",
                        column: x => x.MagTran1DrlstrCorId,
                        principalTable: "OpsReportMagTran1DrlstrCors",
                        principalColumn: "MagTran1DrlstrCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportCorUseds_OpsReportMagTran2DrlstrCors_MagTran2DrlstrCorId",
                        column: x => x.MagTran2DrlstrCorId,
                        principalTable: "OpsReportMagTran2DrlstrCors",
                        principalColumn: "MagTran2DrlstrCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportCorUseds_OpsReportSagAziCors_SagAziCorId",
                        column: x => x.SagAziCorId,
                        principalTable: "OpsReportSagAziCors",
                        principalColumn: "SagAziCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportCorUseds_OpsReportSagIncCors_SagIncCorId",
                        column: x => x.SagIncCorId,
                        principalTable: "OpsReportSagIncCors",
                        principalColumn: "SagIncCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportCorUseds_OpsReportStnGridCorUseds_StnGridCorUsedId",
                        column: x => x.StnGridCorUsedId,
                        principalTable: "OpsReportStnGridCorUseds",
                        principalColumn: "StnGridCorUsedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportCorUseds_OpsReportStnMagDeclUseds_StnMagDeclUsedId",
                        column: x => x.StnMagDeclUsedId,
                        principalTable: "OpsReportStnMagDeclUseds",
                        principalColumn: "StnMagDeclUsedId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportActivitys",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    DTimStart = table.Column<string>(nullable: true),
                    DTimEnd = table.Column<string>(nullable: true),
                    DurationId = table.Column<int>(nullable: true),
                    Phase = table.Column<string>(nullable: true),
                    ActivityCode = table.Column<string>(nullable: true),
                    DetailActivity = table.Column<string>(nullable: true),
                    TypeActivityClass = table.Column<string>(nullable: true),
                    MdHoleStartId = table.Column<int>(nullable: true),
                    TvdHoleStartId = table.Column<int>(nullable: true),
                    MdHoleEndId = table.Column<int>(nullable: true),
                    TvdHoleEndId = table.Column<int>(nullable: true),
                    MdBitStartId = table.Column<int>(nullable: true),
                    MdBitEndId = table.Column<int>(nullable: true),
                    State = table.Column<string>(nullable: true),
                    Operator = table.Column<string>(nullable: true),
                    Optimum = table.Column<string>(nullable: true),
                    Productive = table.Column<string>(nullable: true),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportActivitys", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_OpsReportActivitys_OpsReportDurations_DurationId",
                        column: x => x.DurationId,
                        principalTable: "OpsReportDurations",
                        principalColumn: "DurationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportActivitys_OpsReportMdBitEnds_MdBitEndId",
                        column: x => x.MdBitEndId,
                        principalTable: "OpsReportMdBitEnds",
                        principalColumn: "MdBitEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportActivitys_OpsReportMdBitStarts_MdBitStartId",
                        column: x => x.MdBitStartId,
                        principalTable: "OpsReportMdBitStarts",
                        principalColumn: "MdBitStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportActivitys_OpsReportMdHoleEnds_MdHoleEndId",
                        column: x => x.MdHoleEndId,
                        principalTable: "OpsReportMdHoleEnds",
                        principalColumn: "MdHoleEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportActivitys_OpsReportMdHoleStarts_MdHoleStartId",
                        column: x => x.MdHoleStartId,
                        principalTable: "OpsReportMdHoleStarts",
                        principalColumn: "MdHoleStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportActivitys_OpsReportTvdHoleEnds_TvdHoleEndId",
                        column: x => x.TvdHoleEndId,
                        principalTable: "OpsReportTvdHoleEnds",
                        principalColumn: "TvdHoleEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportActivitys_OpsReportTvdHoleStarts_TvdHoleStartId",
                        column: x => x.TvdHoleStartId,
                        principalTable: "OpsReportTvdHoleStarts",
                        principalColumn: "TvdHoleStartId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRigResponses",
                columns: table => new
                {
                    RigResponseId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RigHeadingId = table.Column<int>(nullable: true),
                    RigHeaveId = table.Column<int>(nullable: true),
                    RigPitchAngleId = table.Column<int>(nullable: true),
                    RigRollAngleId = table.Column<int>(nullable: true),
                    RiserAngleId = table.Column<int>(nullable: true),
                    RiserDirectionId = table.Column<int>(nullable: true),
                    RiserTensionId = table.Column<int>(nullable: true),
                    VariableDeckLoadId = table.Column<int>(nullable: true),
                    TotalDeckLoadId = table.Column<int>(nullable: true),
                    GuideBaseAngleId = table.Column<int>(nullable: true),
                    BallJointAngleId = table.Column<int>(nullable: true),
                    BallJointDirectionId = table.Column<int>(nullable: true),
                    OffsetRigId = table.Column<int>(nullable: true),
                    LoadLeg1Id = table.Column<int>(nullable: true),
                    LoadLeg2Id = table.Column<int>(nullable: true),
                    LoadLeg3Id = table.Column<int>(nullable: true),
                    LoadLeg4Id = table.Column<int>(nullable: true),
                    PenetrationLeg1Id = table.Column<int>(nullable: true),
                    PenetrationLeg2Id = table.Column<int>(nullable: true),
                    PenetrationLeg3Id = table.Column<int>(nullable: true),
                    PenetrationLeg4Id = table.Column<int>(nullable: true),
                    DispRigId = table.Column<int>(nullable: true),
                    MeanDraftId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRigResponses", x => x.RigResponseId);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportBallJointAngles_BallJointAngleId",
                        column: x => x.BallJointAngleId,
                        principalTable: "OpsReportBallJointAngles",
                        principalColumn: "BallJointAngleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportBallJointDirections_BallJointDirectionId",
                        column: x => x.BallJointDirectionId,
                        principalTable: "OpsReportBallJointDirections",
                        principalColumn: "BallJointDirectionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportDispRigs_DispRigId",
                        column: x => x.DispRigId,
                        principalTable: "OpsReportDispRigs",
                        principalColumn: "DispRigId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportGuideBaseAngles_GuideBaseAngleId",
                        column: x => x.GuideBaseAngleId,
                        principalTable: "OpsReportGuideBaseAngles",
                        principalColumn: "GuideBaseAngleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportLoadLeg1s_LoadLeg1Id",
                        column: x => x.LoadLeg1Id,
                        principalTable: "OpsReportLoadLeg1s",
                        principalColumn: "LoadLeg1Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportLoadLeg2s_LoadLeg2Id",
                        column: x => x.LoadLeg2Id,
                        principalTable: "OpsReportLoadLeg2s",
                        principalColumn: "LoadLeg2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportLoadLeg3s_LoadLeg3Id",
                        column: x => x.LoadLeg3Id,
                        principalTable: "OpsReportLoadLeg3s",
                        principalColumn: "LoadLeg3Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportLoadLeg4s_LoadLeg4Id",
                        column: x => x.LoadLeg4Id,
                        principalTable: "OpsReportLoadLeg4s",
                        principalColumn: "LoadLeg4Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportMeanDrafts_MeanDraftId",
                        column: x => x.MeanDraftId,
                        principalTable: "OpsReportMeanDrafts",
                        principalColumn: "MeanDraftId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportOffsetRigs_OffsetRigId",
                        column: x => x.OffsetRigId,
                        principalTable: "OpsReportOffsetRigs",
                        principalColumn: "OffsetRigId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportPenetrationLeg1s_PenetrationLeg1Id",
                        column: x => x.PenetrationLeg1Id,
                        principalTable: "OpsReportPenetrationLeg1s",
                        principalColumn: "PenetrationLeg1Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportPenetrationLeg2s_PenetrationLeg2Id",
                        column: x => x.PenetrationLeg2Id,
                        principalTable: "OpsReportPenetrationLeg2s",
                        principalColumn: "PenetrationLeg2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportPenetrationLeg3s_PenetrationLeg3Id",
                        column: x => x.PenetrationLeg3Id,
                        principalTable: "OpsReportPenetrationLeg3s",
                        principalColumn: "PenetrationLeg3Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportPenetrationLeg4s_PenetrationLeg4Id",
                        column: x => x.PenetrationLeg4Id,
                        principalTable: "OpsReportPenetrationLeg4s",
                        principalColumn: "PenetrationLeg4Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportRigHeadings_RigHeadingId",
                        column: x => x.RigHeadingId,
                        principalTable: "OpsReportRigHeadings",
                        principalColumn: "RigHeadingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportRigHeaves_RigHeaveId",
                        column: x => x.RigHeaveId,
                        principalTable: "OpsReportRigHeaves",
                        principalColumn: "RigHeaveId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportRigPitchAngles_RigPitchAngleId",
                        column: x => x.RigPitchAngleId,
                        principalTable: "OpsReportRigPitchAngles",
                        principalColumn: "RigPitchAngleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportRigRollAngles_RigRollAngleId",
                        column: x => x.RigRollAngleId,
                        principalTable: "OpsReportRigRollAngles",
                        principalColumn: "RigRollAngleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportRiserAngles_RiserAngleId",
                        column: x => x.RiserAngleId,
                        principalTable: "OpsReportRiserAngles",
                        principalColumn: "RiserAngleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportRiserDirections_RiserDirectionId",
                        column: x => x.RiserDirectionId,
                        principalTable: "OpsReportRiserDirections",
                        principalColumn: "RiserDirectionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportRiserTensions_RiserTensionId",
                        column: x => x.RiserTensionId,
                        principalTable: "OpsReportRiserTensions",
                        principalColumn: "RiserTensionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportTotalDeckLoads_TotalDeckLoadId",
                        column: x => x.TotalDeckLoadId,
                        principalTable: "OpsReportTotalDeckLoads",
                        principalColumn: "TotalDeckLoadId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRigResponses_OpsReportVariableDeckLoads_VariableDeckLoadId",
                        column: x => x.VariableDeckLoadId,
                        principalTable: "OpsReportVariableDeckLoads",
                        principalColumn: "VariableDeckLoadId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMatrixCovs",
                columns: table => new
                {
                    MatrixCovId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VarianceNNId = table.Column<int>(nullable: true),
                    VarianceNEOpsReportsId = table.Column<int>(nullable: true),
                    VarianceNVertId = table.Column<int>(nullable: true),
                    VarianceEEId = table.Column<int>(nullable: true),
                    VarianceEVertId = table.Column<int>(nullable: true),
                    VarianceVertVertId = table.Column<int>(nullable: true),
                    BiasNId = table.Column<int>(nullable: true),
                    BiasEId = table.Column<int>(nullable: true),
                    BiasVertId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMatrixCovs", x => x.MatrixCovId);
                    table.ForeignKey(
                        name: "FK_OpsReportMatrixCovs_OpsReportBiasEs_BiasEId",
                        column: x => x.BiasEId,
                        principalTable: "OpsReportBiasEs",
                        principalColumn: "BiasEId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMatrixCovs_OpsReportBiasNs_BiasNId",
                        column: x => x.BiasNId,
                        principalTable: "OpsReportBiasNs",
                        principalColumn: "BiasNId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMatrixCovs_OpsReportBiasVerts_BiasVertId",
                        column: x => x.BiasVertId,
                        principalTable: "OpsReportBiasVerts",
                        principalColumn: "BiasVertId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMatrixCovs_OpsReportVarianceEEs_VarianceEEId",
                        column: x => x.VarianceEEId,
                        principalTable: "OpsReportVarianceEEs",
                        principalColumn: "VarianceEEId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMatrixCovs_OpsReportVarianceEVerts_VarianceEVertId",
                        column: x => x.VarianceEVertId,
                        principalTable: "OpsReportVarianceEVerts",
                        principalColumn: "VarianceEVertId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMatrixCovs_OpsReportVarianceNEs_VarianceNEOpsReportsId",
                        column: x => x.VarianceNEOpsReportsId,
                        principalTable: "OpsReportVarianceNEs",
                        principalColumn: "OpsReportsId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMatrixCovs_OpsReportVarianceNNs_VarianceNNId",
                        column: x => x.VarianceNNId,
                        principalTable: "OpsReportVarianceNNs",
                        principalColumn: "VarianceNNId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMatrixCovs_OpsReportVarianceNVerts_VarianceNVertId",
                        column: x => x.VarianceNVertId,
                        principalTable: "OpsReportVarianceNVerts",
                        principalColumn: "VarianceNVertId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMatrixCovs_OpsReportVarianceVertVerts_VarianceVertVertId",
                        column: x => x.VarianceVertVertId,
                        principalTable: "OpsReportVarianceVertVerts",
                        principalColumn: "VarianceVertVertId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportWeathers",
                columns: table => new
                {
                    WeatherId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    Agency = table.Column<string>(nullable: true),
                    BarometricPressureId = table.Column<int>(nullable: true),
                    BeaufortScaleNumber = table.Column<string>(nullable: true),
                    TempSurfaceMnId = table.Column<int>(nullable: true),
                    TempSurfaceMxId = table.Column<int>(nullable: true),
                    TempWindChillId = table.Column<int>(nullable: true),
                    TempseaId = table.Column<int>(nullable: true),
                    VisibilityId = table.Column<int>(nullable: true),
                    AziWaveId = table.Column<int>(nullable: true),
                    HtWaveId = table.Column<int>(nullable: true),
                    PeriodWaveId = table.Column<int>(nullable: true),
                    AziWindId = table.Column<int>(nullable: true),
                    VelWindId = table.Column<int>(nullable: true),
                    TypePrecip = table.Column<string>(nullable: true),
                    AmtPrecipId = table.Column<int>(nullable: true),
                    CoverCloud = table.Column<string>(nullable: true),
                    CeilingCloudId = table.Column<int>(nullable: true),
                    CurrentSeaId = table.Column<int>(nullable: true),
                    AziCurrentSeaId = table.Column<int>(nullable: true),
                    Comments = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportWeathers", x => x.WeatherId);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportAmtPrecips_AmtPrecipId",
                        column: x => x.AmtPrecipId,
                        principalTable: "OpsReportAmtPrecips",
                        principalColumn: "AmtPrecipId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportAziCurrentSeas_AziCurrentSeaId",
                        column: x => x.AziCurrentSeaId,
                        principalTable: "OpsReportAziCurrentSeas",
                        principalColumn: "AziCurrentSeaId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportAziWaves_AziWaveId",
                        column: x => x.AziWaveId,
                        principalTable: "OpsReportAziWaves",
                        principalColumn: "AziWaveId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportAziWinds_AziWindId",
                        column: x => x.AziWindId,
                        principalTable: "OpsReportAziWinds",
                        principalColumn: "AziWindId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportBarometricPressures_BarometricPressureId",
                        column: x => x.BarometricPressureId,
                        principalTable: "OpsReportBarometricPressures",
                        principalColumn: "BarometricPressureId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportCeilingClouds_CeilingCloudId",
                        column: x => x.CeilingCloudId,
                        principalTable: "OpsReportCeilingClouds",
                        principalColumn: "CeilingCloudId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportCurrentSeas_CurrentSeaId",
                        column: x => x.CurrentSeaId,
                        principalTable: "OpsReportCurrentSeas",
                        principalColumn: "CurrentSeaId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportHtWaves_HtWaveId",
                        column: x => x.HtWaveId,
                        principalTable: "OpsReportHtWaves",
                        principalColumn: "HtWaveId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportPeriodWaves_PeriodWaveId",
                        column: x => x.PeriodWaveId,
                        principalTable: "OpsReportPeriodWaves",
                        principalColumn: "PeriodWaveId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportTempSurfaceMns_TempSurfaceMnId",
                        column: x => x.TempSurfaceMnId,
                        principalTable: "OpsReportTempSurfaceMns",
                        principalColumn: "TempSurfaceMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportTempSurfaceMxs_TempSurfaceMxId",
                        column: x => x.TempSurfaceMxId,
                        principalTable: "OpsReportTempSurfaceMxs",
                        principalColumn: "TempSurfaceMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportTempWindChills_TempWindChillId",
                        column: x => x.TempWindChillId,
                        principalTable: "OpsReportTempWindChills",
                        principalColumn: "TempWindChillId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportTempseas_TempseaId",
                        column: x => x.TempseaId,
                        principalTable: "OpsReportTempseas",
                        principalColumn: "TempseaId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportVelWinds_VelWindId",
                        column: x => x.VelWindId,
                        principalTable: "OpsReportVelWinds",
                        principalColumn: "VelWindId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportWeathers_OpsReportVisibilitys_VisibilityId",
                        column: x => x.VisibilityId,
                        principalTable: "OpsReportVisibilitys",
                        principalColumn: "VisibilityId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMudLossess",
                columns: table => new
                {
                    MudLossesId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VolLostShakerSurfId = table.Column<int>(nullable: true),
                    VolLostMudCleanerSurfId = table.Column<int>(nullable: true),
                    VolLostPitsSurfId = table.Column<int>(nullable: true),
                    VolLostTrippingSurfId = table.Column<int>(nullable: true),
                    VolLostOtherSurfId = table.Column<int>(nullable: true),
                    VolTotMudLostSurfId = table.Column<int>(nullable: true),
                    VolLostCircHoleId = table.Column<int>(nullable: true),
                    VolLostCsgHoleId = table.Column<int>(nullable: true),
                    VolLostCmtHoleId = table.Column<int>(nullable: true),
                    VolLostBhdCsgHoleId = table.Column<int>(nullable: true),
                    VolLostAbandonHoleId = table.Column<int>(nullable: true),
                    VolLostOtherHoleId = table.Column<int>(nullable: true),
                    VolTotMudLostHoleId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMudLossess", x => x.MudLossesId);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolLostAbandonHoles_VolLostAbandonHoleId",
                        column: x => x.VolLostAbandonHoleId,
                        principalTable: "OpsReportVolLostAbandonHoles",
                        principalColumn: "VolLostAbandonHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolLostBhdCsgHoles_VolLostBhdCsgHoleId",
                        column: x => x.VolLostBhdCsgHoleId,
                        principalTable: "OpsReportVolLostBhdCsgHoles",
                        principalColumn: "VolLostBhdCsgHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolLostCircHoles_VolLostCircHoleId",
                        column: x => x.VolLostCircHoleId,
                        principalTable: "OpsReportVolLostCircHoles",
                        principalColumn: "VolLostCircHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolLostCmtHoles_VolLostCmtHoleId",
                        column: x => x.VolLostCmtHoleId,
                        principalTable: "OpsReportVolLostCmtHoles",
                        principalColumn: "VolLostCmtHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolLostCsgHoles_VolLostCsgHoleId",
                        column: x => x.VolLostCsgHoleId,
                        principalTable: "OpsReportVolLostCsgHoles",
                        principalColumn: "VolLostCsgHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolLostMudCleanerSurfs_VolLostMudCleanerSurfId",
                        column: x => x.VolLostMudCleanerSurfId,
                        principalTable: "OpsReportVolLostMudCleanerSurfs",
                        principalColumn: "VolLostMudCleanerSurfId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolLostOtherHoles_VolLostOtherHoleId",
                        column: x => x.VolLostOtherHoleId,
                        principalTable: "OpsReportVolLostOtherHoles",
                        principalColumn: "VolLostOtherHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolLostOtherSurfs_VolLostOtherSurfId",
                        column: x => x.VolLostOtherSurfId,
                        principalTable: "OpsReportVolLostOtherSurfs",
                        principalColumn: "VolLostOtherSurfId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolLostPitsSurfs_VolLostPitsSurfId",
                        column: x => x.VolLostPitsSurfId,
                        principalTable: "OpsReportVolLostPitsSurfs",
                        principalColumn: "VolLostPitsSurfId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolLostShakerSurfs_VolLostShakerSurfId",
                        column: x => x.VolLostShakerSurfId,
                        principalTable: "OpsReportVolLostShakerSurfs",
                        principalColumn: "VolLostShakerSurfId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolLostTrippingSurfs_VolLostTrippingSurfId",
                        column: x => x.VolLostTrippingSurfId,
                        principalTable: "OpsReportVolLostTrippingSurfs",
                        principalColumn: "VolLostTrippingSurfId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolTotMudLostHoles_VolTotMudLostHoleId",
                        column: x => x.VolTotMudLostHoleId,
                        principalTable: "OpsReportVolTotMudLostHoles",
                        principalColumn: "VolTotMudLostHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudLossess_OpsReportVolTotMudLostSurfs_VolTotMudLostSurfId",
                        column: x => x.VolTotMudLostSurfId,
                        principalTable: "OpsReportVolTotMudLostSurfs",
                        principalColumn: "VolTotMudLostSurfId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDrillingParams",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    ETimOpBitId = table.Column<int>(nullable: true),
                    MdHoleStartId = table.Column<int>(nullable: true),
                    MdHoleStopId = table.Column<int>(nullable: true),
                    TubularUidRef = table.Column<string>(nullable: true),
                    HkldRotId = table.Column<int>(nullable: true),
                    OverPullId = table.Column<int>(nullable: true),
                    SlackOffId = table.Column<int>(nullable: true),
                    HkldUpId = table.Column<int>(nullable: true),
                    HkldDnId = table.Column<int>(nullable: true),
                    TqOnBotAvId = table.Column<int>(nullable: true),
                    TqOnBotMxId = table.Column<int>(nullable: true),
                    TqOnBotMnId = table.Column<int>(nullable: true),
                    TqOffBotAvId = table.Column<int>(nullable: true),
                    TqDhAvId = table.Column<int>(nullable: true),
                    WtAboveJarId = table.Column<int>(nullable: true),
                    WtBelowJarId = table.Column<int>(nullable: true),
                    WtMudUom = table.Column<string>(nullable: true),
                    FlowratePumpId = table.Column<int>(nullable: true),
                    PowBitId = table.Column<int>(nullable: true),
                    VelNozzleAvId = table.Column<int>(nullable: true),
                    PresDropBitId = table.Column<int>(nullable: true),
                    CTimHoldId = table.Column<int>(nullable: true),
                    CTimSteeringId = table.Column<int>(nullable: true),
                    CTimDrillRotId = table.Column<int>(nullable: true),
                    CTimDrillSlidId = table.Column<int>(nullable: true),
                    CTimCircId = table.Column<int>(nullable: true),
                    CTimReamId = table.Column<int>(nullable: true),
                    DistDrillRotId = table.Column<int>(nullable: true),
                    DistDrillSlidId = table.Column<int>(nullable: true),
                    DistReamId = table.Column<int>(nullable: true),
                    DistHoldId = table.Column<int>(nullable: true),
                    DistSteeringId = table.Column<int>(nullable: true),
                    RpmAvId = table.Column<int>(nullable: true),
                    RpmMxId = table.Column<int>(nullable: true),
                    RpmMnId = table.Column<int>(nullable: true),
                    RpmAvDhId = table.Column<int>(nullable: true),
                    RopAvId = table.Column<int>(nullable: true),
                    RopMxId = table.Column<int>(nullable: true),
                    RopMnId = table.Column<int>(nullable: true),
                    WobAvId = table.Column<int>(nullable: true),
                    WobMxId = table.Column<int>(nullable: true),
                    WobMnId = table.Column<int>(nullable: true),
                    WobAvDhId = table.Column<int>(nullable: true),
                    ReasonTrip = table.Column<string>(nullable: true),
                    ObjectiveBha = table.Column<string>(nullable: true),
                    AziTopId = table.Column<int>(nullable: true),
                    AziBottomId = table.Column<int>(nullable: true),
                    InclStartId = table.Column<int>(nullable: true),
                    InclMxId = table.Column<int>(nullable: true),
                    InclMnId = table.Column<int>(nullable: true),
                    InclStopId = table.Column<int>(nullable: true),
                    TempMudDhMxId = table.Column<int>(nullable: true),
                    PresPumpAvId = table.Column<int>(nullable: true),
                    FlowrateBitId = table.Column<int>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDrillingParams", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportAziBottoms_AziBottomId",
                        column: x => x.AziBottomId,
                        principalTable: "OpsReportAziBottoms",
                        principalColumn: "AziBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportAziTops_AziTopId",
                        column: x => x.AziTopId,
                        principalTable: "OpsReportAziTops",
                        principalColumn: "AziTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportCTimCircs_CTimCircId",
                        column: x => x.CTimCircId,
                        principalTable: "OpsReportCTimCircs",
                        principalColumn: "CTimCircId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportCTimDrillRots_CTimDrillRotId",
                        column: x => x.CTimDrillRotId,
                        principalTable: "OpsReportCTimDrillRots",
                        principalColumn: "CTimDrillRotId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportCTimDrillSlids_CTimDrillSlidId",
                        column: x => x.CTimDrillSlidId,
                        principalTable: "OpsReportCTimDrillSlids",
                        principalColumn: "CTimDrillSlidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportCTimHolds_CTimHoldId",
                        column: x => x.CTimHoldId,
                        principalTable: "OpsReportCTimHolds",
                        principalColumn: "CTimHoldId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportCTimReams_CTimReamId",
                        column: x => x.CTimReamId,
                        principalTable: "OpsReportCTimReams",
                        principalColumn: "CTimReamId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportCTimSteerings_CTimSteeringId",
                        column: x => x.CTimSteeringId,
                        principalTable: "OpsReportCTimSteerings",
                        principalColumn: "CTimSteeringId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportDistDrillRots_DistDrillRotId",
                        column: x => x.DistDrillRotId,
                        principalTable: "OpsReportDistDrillRots",
                        principalColumn: "DistDrillRotId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportDistDrillSlids_DistDrillSlidId",
                        column: x => x.DistDrillSlidId,
                        principalTable: "OpsReportDistDrillSlids",
                        principalColumn: "DistDrillSlidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportDistHolds_DistHoldId",
                        column: x => x.DistHoldId,
                        principalTable: "OpsReportDistHolds",
                        principalColumn: "DistHoldId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportDistReams_DistReamId",
                        column: x => x.DistReamId,
                        principalTable: "OpsReportDistReams",
                        principalColumn: "DistReamId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportDistSteerings_DistSteeringId",
                        column: x => x.DistSteeringId,
                        principalTable: "OpsReportDistSteerings",
                        principalColumn: "DistSteeringId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportETimOpBits_ETimOpBitId",
                        column: x => x.ETimOpBitId,
                        principalTable: "OpsReportETimOpBits",
                        principalColumn: "ETimOpBitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportFlowrateBits_FlowrateBitId",
                        column: x => x.FlowrateBitId,
                        principalTable: "OpsReportFlowrateBits",
                        principalColumn: "FlowrateBitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportFlowratePumps_FlowratePumpId",
                        column: x => x.FlowratePumpId,
                        principalTable: "OpsReportFlowratePumps",
                        principalColumn: "FlowratePumpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportHkldDns_HkldDnId",
                        column: x => x.HkldDnId,
                        principalTable: "OpsReportHkldDns",
                        principalColumn: "HkldDnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportHkldRots_HkldRotId",
                        column: x => x.HkldRotId,
                        principalTable: "OpsReportHkldRots",
                        principalColumn: "HkldRotId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportHkldUps_HkldUpId",
                        column: x => x.HkldUpId,
                        principalTable: "OpsReportHkldUps",
                        principalColumn: "HkldUpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportInclMns_InclMnId",
                        column: x => x.InclMnId,
                        principalTable: "OpsReportInclMns",
                        principalColumn: "InclMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportInclMxs_InclMxId",
                        column: x => x.InclMxId,
                        principalTable: "OpsReportInclMxs",
                        principalColumn: "InclMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportInclStarts_InclStartId",
                        column: x => x.InclStartId,
                        principalTable: "OpsReportInclStarts",
                        principalColumn: "InclStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportInclStops_InclStopId",
                        column: x => x.InclStopId,
                        principalTable: "OpsReportInclStops",
                        principalColumn: "InclStopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportMdHoleStarts_MdHoleStartId",
                        column: x => x.MdHoleStartId,
                        principalTable: "OpsReportMdHoleStarts",
                        principalColumn: "MdHoleStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportMdHoleStops_MdHoleStopId",
                        column: x => x.MdHoleStopId,
                        principalTable: "OpsReportMdHoleStops",
                        principalColumn: "MdHoleStopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportOverPulls_OverPullId",
                        column: x => x.OverPullId,
                        principalTable: "OpsReportOverPulls",
                        principalColumn: "OverPullId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportPowBits_PowBitId",
                        column: x => x.PowBitId,
                        principalTable: "OpsReportPowBits",
                        principalColumn: "PowBitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportPresDropBits_PresDropBitId",
                        column: x => x.PresDropBitId,
                        principalTable: "OpsReportPresDropBits",
                        principalColumn: "PresDropBitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportPresPumpAvs_PresPumpAvId",
                        column: x => x.PresPumpAvId,
                        principalTable: "OpsReportPresPumpAvs",
                        principalColumn: "PresPumpAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportRopAvs_RopAvId",
                        column: x => x.RopAvId,
                        principalTable: "OpsReportRopAvs",
                        principalColumn: "RopAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportRopMns_RopMnId",
                        column: x => x.RopMnId,
                        principalTable: "OpsReportRopMns",
                        principalColumn: "RopMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportRopMxs_RopMxId",
                        column: x => x.RopMxId,
                        principalTable: "OpsReportRopMxs",
                        principalColumn: "RopMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportRpmAvDhs_RpmAvDhId",
                        column: x => x.RpmAvDhId,
                        principalTable: "OpsReportRpmAvDhs",
                        principalColumn: "RpmAvDhId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportRpmAvs_RpmAvId",
                        column: x => x.RpmAvId,
                        principalTable: "OpsReportRpmAvs",
                        principalColumn: "RpmAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportRpmMns_RpmMnId",
                        column: x => x.RpmMnId,
                        principalTable: "OpsReportRpmMns",
                        principalColumn: "RpmMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportRpmMxs_RpmMxId",
                        column: x => x.RpmMxId,
                        principalTable: "OpsReportRpmMxs",
                        principalColumn: "RpmMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportSlackOffs_SlackOffId",
                        column: x => x.SlackOffId,
                        principalTable: "OpsReportSlackOffs",
                        principalColumn: "SlackOffId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportTempMudDhMxs_TempMudDhMxId",
                        column: x => x.TempMudDhMxId,
                        principalTable: "OpsReportTempMudDhMxs",
                        principalColumn: "TempMudDhMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportTqDhAvs_TqDhAvId",
                        column: x => x.TqDhAvId,
                        principalTable: "OpsReportTqDhAvs",
                        principalColumn: "TqDhAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportTqOffBotAvs_TqOffBotAvId",
                        column: x => x.TqOffBotAvId,
                        principalTable: "OpsReportTqOffBotAvs",
                        principalColumn: "TqOffBotAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportTqOnBotAvs_TqOnBotAvId",
                        column: x => x.TqOnBotAvId,
                        principalTable: "OpsReportTqOnBotAvs",
                        principalColumn: "TqOnBotAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportTqOnBotMns_TqOnBotMnId",
                        column: x => x.TqOnBotMnId,
                        principalTable: "OpsReportTqOnBotMns",
                        principalColumn: "TqOnBotMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportTqOnBotMxs_TqOnBotMxId",
                        column: x => x.TqOnBotMxId,
                        principalTable: "OpsReportTqOnBotMxs",
                        principalColumn: "TqOnBotMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportTubulars_TubularUidRef",
                        column: x => x.TubularUidRef,
                        principalTable: "OpsReportTubulars",
                        principalColumn: "UidRef",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportVelNozzleAvs_VelNozzleAvId",
                        column: x => x.VelNozzleAvId,
                        principalTable: "OpsReportVelNozzleAvs",
                        principalColumn: "VelNozzleAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportWobAvDhs_WobAvDhId",
                        column: x => x.WobAvDhId,
                        principalTable: "OpsReportWobAvDhs",
                        principalColumn: "WobAvDhId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportWobAvs_WobAvId",
                        column: x => x.WobAvId,
                        principalTable: "OpsReportWobAvs",
                        principalColumn: "WobAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportWobMns_WobMnId",
                        column: x => x.WobMnId,
                        principalTable: "OpsReportWobMns",
                        principalColumn: "WobMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportWobMxs_WobMxId",
                        column: x => x.WobMxId,
                        principalTable: "OpsReportWobMxs",
                        principalColumn: "WobMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportWtAboveJars_WtAboveJarId",
                        column: x => x.WtAboveJarId,
                        principalTable: "OpsReportWtAboveJars",
                        principalColumn: "WtAboveJarId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportWtBelowJars_WtBelowJarId",
                        column: x => x.WtBelowJarId,
                        principalTable: "OpsReportWtBelowJars",
                        principalColumn: "WtBelowJarId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDrillingParams_OpsReportWtMuds_WtMudUom",
                        column: x => x.WtMudUom,
                        principalTable: "OpsReportWtMuds",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportFluids",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    Type = table.Column<string>(nullable: true),
                    LocationSample = table.Column<string>(nullable: true),
                    DensityId = table.Column<int>(nullable: true),
                    VisFunnelId = table.Column<int>(nullable: true),
                    TempVisId = table.Column<int>(nullable: true),
                    PvReportPvId = table.Column<int>(nullable: true),
                    YpId = table.Column<int>(nullable: true),
                    Gel10SecId = table.Column<int>(nullable: true),
                    Gel10MinId = table.Column<int>(nullable: true),
                    Gel30MinId = table.Column<int>(nullable: true),
                    FilterCakeLtlpId = table.Column<int>(nullable: true),
                    FiltrateLtlpId = table.Column<int>(nullable: true),
                    TempHthpId = table.Column<int>(nullable: true),
                    PresHthpId = table.Column<int>(nullable: true),
                    FiltrateHthpId = table.Column<int>(nullable: true),
                    FilterCakeHthpId = table.Column<int>(nullable: true),
                    SolidsPcId = table.Column<int>(nullable: true),
                    WaterPcId = table.Column<int>(nullable: true),
                    OilPcId = table.Column<int>(nullable: true),
                    SandPcId = table.Column<int>(nullable: true),
                    SolidsLowGravPcId = table.Column<int>(nullable: true),
                    SolidsCalcPcId = table.Column<int>(nullable: true),
                    BaritePcId = table.Column<int>(nullable: true),
                    LcmId = table.Column<int>(nullable: true),
                    MbtId = table.Column<int>(nullable: true),
                    Ph = table.Column<string>(nullable: true),
                    TempPhId = table.Column<int>(nullable: true),
                    PmId = table.Column<int>(nullable: true),
                    PmFiltrateId = table.Column<int>(nullable: true),
                    MfId = table.Column<int>(nullable: true),
                    AlkalinityP1Id = table.Column<int>(nullable: true),
                    AlkalinityP2Id = table.Column<int>(nullable: true),
                    ChlorideId = table.Column<int>(nullable: true),
                    CalciumMagnesiumId = table.Column<int>(nullable: true),
                    MagnesiumId = table.Column<int>(nullable: true),
                    BrinePcId = table.Column<int>(nullable: true),
                    LimeId = table.Column<int>(nullable: true),
                    ElectStabId = table.Column<int>(nullable: true),
                    CalciumChlorideId = table.Column<int>(nullable: true),
                    Company = table.Column<string>(nullable: true),
                    Engineer = table.Column<string>(nullable: true),
                    Asg = table.Column<string>(nullable: true),
                    SolidsHiGravPcId = table.Column<int>(nullable: true),
                    PolymerId = table.Column<int>(nullable: true),
                    PolyType = table.Column<string>(nullable: true),
                    SolCorPcId = table.Column<int>(nullable: true),
                    OilCtgId = table.Column<int>(nullable: true),
                    HardnessCaId = table.Column<int>(nullable: true),
                    SulfideId = table.Column<int>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportFluids", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportAlkalinityP1s_AlkalinityP1Id",
                        column: x => x.AlkalinityP1Id,
                        principalTable: "OpsReportAlkalinityP1s",
                        principalColumn: "AlkalinityP1Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportAlkalinityP2s_AlkalinityP2Id",
                        column: x => x.AlkalinityP2Id,
                        principalTable: "OpsReportAlkalinityP2s",
                        principalColumn: "AlkalinityP2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportBaritePcs_BaritePcId",
                        column: x => x.BaritePcId,
                        principalTable: "OpsReportBaritePcs",
                        principalColumn: "BaritePcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportBrinePcs_BrinePcId",
                        column: x => x.BrinePcId,
                        principalTable: "OpsReportBrinePcs",
                        principalColumn: "BrinePcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportCalciumChlorides_CalciumChlorideId",
                        column: x => x.CalciumChlorideId,
                        principalTable: "OpsReportCalciumChlorides",
                        principalColumn: "CalciumChlorideId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportCalciums_CalciumMagnesiumId",
                        column: x => x.CalciumMagnesiumId,
                        principalTable: "OpsReportCalciums",
                        principalColumn: "MagnesiumId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportChlorides_ChlorideId",
                        column: x => x.ChlorideId,
                        principalTable: "OpsReportChlorides",
                        principalColumn: "ChlorideId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportDensitys_DensityId",
                        column: x => x.DensityId,
                        principalTable: "OpsReportDensitys",
                        principalColumn: "DensityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportElectStabs_ElectStabId",
                        column: x => x.ElectStabId,
                        principalTable: "OpsReportElectStabs",
                        principalColumn: "ElectStabId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportFilterCakeHthps_FilterCakeHthpId",
                        column: x => x.FilterCakeHthpId,
                        principalTable: "OpsReportFilterCakeHthps",
                        principalColumn: "FilterCakeHthpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportFilterCakeLtlps_FilterCakeLtlpId",
                        column: x => x.FilterCakeLtlpId,
                        principalTable: "OpsReportFilterCakeLtlps",
                        principalColumn: "FilterCakeLtlpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportFiltrateHthps_FiltrateHthpId",
                        column: x => x.FiltrateHthpId,
                        principalTable: "OpsReportFiltrateHthps",
                        principalColumn: "FiltrateHthpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportFiltrateLtlps_FiltrateLtlpId",
                        column: x => x.FiltrateLtlpId,
                        principalTable: "OpsReportFiltrateLtlps",
                        principalColumn: "FiltrateLtlpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportGel10Mins_Gel10MinId",
                        column: x => x.Gel10MinId,
                        principalTable: "OpsReportGel10Mins",
                        principalColumn: "Gel10MinId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportGel10Secs_Gel10SecId",
                        column: x => x.Gel10SecId,
                        principalTable: "OpsReportGel10Secs",
                        principalColumn: "Gel10SecId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportGel30Mins_Gel30MinId",
                        column: x => x.Gel30MinId,
                        principalTable: "OpsReportGel30Mins",
                        principalColumn: "Gel30MinId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportHardnessCas_HardnessCaId",
                        column: x => x.HardnessCaId,
                        principalTable: "OpsReportHardnessCas",
                        principalColumn: "HardnessCaId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportLcms_LcmId",
                        column: x => x.LcmId,
                        principalTable: "OpsReportLcms",
                        principalColumn: "LcmId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportLimes_LimeId",
                        column: x => x.LimeId,
                        principalTable: "OpsReportLimes",
                        principalColumn: "LimeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportMagnesiums_MagnesiumId",
                        column: x => x.MagnesiumId,
                        principalTable: "OpsReportMagnesiums",
                        principalColumn: "MagnesiumId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportMbts_MbtId",
                        column: x => x.MbtId,
                        principalTable: "OpsReportMbts",
                        principalColumn: "MbtId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportMfs_MfId",
                        column: x => x.MfId,
                        principalTable: "OpsReportMfs",
                        principalColumn: "MfId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportOilCtgs_OilCtgId",
                        column: x => x.OilCtgId,
                        principalTable: "OpsReportOilCtgs",
                        principalColumn: "OilCtgId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportOilPcs_OilPcId",
                        column: x => x.OilPcId,
                        principalTable: "OpsReportOilPcs",
                        principalColumn: "OilPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportPmFiltrates_PmFiltrateId",
                        column: x => x.PmFiltrateId,
                        principalTable: "OpsReportPmFiltrates",
                        principalColumn: "PmFiltrateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportPms_PmId",
                        column: x => x.PmId,
                        principalTable: "OpsReportPms",
                        principalColumn: "PmId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportPolymers_PolymerId",
                        column: x => x.PolymerId,
                        principalTable: "OpsReportPolymers",
                        principalColumn: "PolymerId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportPresHthps_PresHthpId",
                        column: x => x.PresHthpId,
                        principalTable: "OpsReportPresHthps",
                        principalColumn: "PresHthpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportPvs_PvReportPvId",
                        column: x => x.PvReportPvId,
                        principalTable: "OpsReportPvs",
                        principalColumn: "ReportPvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportSandPcs_SandPcId",
                        column: x => x.SandPcId,
                        principalTable: "OpsReportSandPcs",
                        principalColumn: "SandPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportSolCorPcs_SolCorPcId",
                        column: x => x.SolCorPcId,
                        principalTable: "OpsReportSolCorPcs",
                        principalColumn: "SolCorPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportSolidsCalcPcs_SolidsCalcPcId",
                        column: x => x.SolidsCalcPcId,
                        principalTable: "OpsReportSolidsCalcPcs",
                        principalColumn: "SolidsCalcPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportSolidsHiGravPcs_SolidsHiGravPcId",
                        column: x => x.SolidsHiGravPcId,
                        principalTable: "OpsReportSolidsHiGravPcs",
                        principalColumn: "SolidsHiGravPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportSolidsLowGravPcs_SolidsLowGravPcId",
                        column: x => x.SolidsLowGravPcId,
                        principalTable: "OpsReportSolidsLowGravPcs",
                        principalColumn: "SolidsLowGravPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportSolidsPcs_SolidsPcId",
                        column: x => x.SolidsPcId,
                        principalTable: "OpsReportSolidsPcs",
                        principalColumn: "SolidsPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportSulfides_SulfideId",
                        column: x => x.SulfideId,
                        principalTable: "OpsReportSulfides",
                        principalColumn: "SulfideId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportTempHthps_TempHthpId",
                        column: x => x.TempHthpId,
                        principalTable: "OpsReportTempHthps",
                        principalColumn: "TempHthpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportTempPhs_TempPhId",
                        column: x => x.TempPhId,
                        principalTable: "OpsReportTempPhs",
                        principalColumn: "TempPhId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportTempViss_TempVisId",
                        column: x => x.TempVisId,
                        principalTable: "OpsReportTempViss",
                        principalColumn: "TempVisId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportVisFunnels_VisFunnelId",
                        column: x => x.VisFunnelId,
                        principalTable: "OpsReportVisFunnels",
                        principalColumn: "VisFunnelId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportWaterPcs_WaterPcId",
                        column: x => x.WaterPcId,
                        principalTable: "OpsReportWaterPcs",
                        principalColumn: "WaterPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportFluids_OpsReportYps_YpId",
                        column: x => x.YpId,
                        principalTable: "OpsReportYps",
                        principalColumn: "YpId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RigCentrifuges",
                columns: table => new
                {
                    CentrifugeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Manufacturer = table.Column<string>(nullable: true),
                    Model = table.Column<string>(nullable: true),
                    DTimInstall = table.Column<string>(nullable: true),
                    DTimRemove = table.Column<string>(nullable: true),
                    Type = table.Column<string>(nullable: true),
                    CapFlowId = table.Column<int>(nullable: true),
                    Owner = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigCentrifuges", x => x.CentrifugeId);
                    table.ForeignKey(
                        name: "FK_RigCentrifuges_RigCapFlows_CapFlowId",
                        column: x => x.CapFlowId,
                        principalTable: "RigCapFlows",
                        principalColumn: "CapFlowId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RigPits",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    Index = table.Column<string>(nullable: true),
                    DTimInstall = table.Column<string>(nullable: true),
                    DTimRemove = table.Column<string>(nullable: true),
                    CapMxId = table.Column<int>(nullable: true),
                    Owner = table.Column<string>(nullable: true),
                    TypePit = table.Column<string>(nullable: true),
                    IsActive = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPits", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_RigPits_RigCapMxs_CapMxId",
                        column: x => x.CapMxId,
                        principalTable: "RigCapMxs",
                        principalColumn: "CapMxId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RigShakers",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    Manufacturer = table.Column<string>(nullable: true),
                    Model = table.Column<string>(nullable: true),
                    DTimInstall = table.Column<string>(nullable: true),
                    DTimRemove = table.Column<string>(nullable: true),
                    Type = table.Column<string>(nullable: true),
                    LocationShaker = table.Column<string>(nullable: true),
                    NumDecks = table.Column<string>(nullable: true),
                    NumCascLevel = table.Column<string>(nullable: true),
                    MudCleaner = table.Column<string>(nullable: true),
                    CapFlowId = table.Column<int>(nullable: true),
                    Owner = table.Column<string>(nullable: true),
                    SizeMeshMnId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigShakers", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_RigShakers_RigCapFlows_CapFlowId",
                        column: x => x.CapFlowId,
                        principalTable: "RigCapFlows",
                        principalColumn: "CapFlowId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigShakers_RigSizeMeshMns_SizeMeshMnId",
                        column: x => x.SizeMeshMnId,
                        principalTable: "RigSizeMeshMns",
                        principalColumn: "SizeMeshMnId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RigDegassers",
                columns: table => new
                {
                    DegasserId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Manufacturer = table.Column<string>(nullable: true),
                    Model = table.Column<string>(nullable: true),
                    DTimInstall = table.Column<string>(nullable: true),
                    DTimRemove = table.Column<string>(nullable: true),
                    Type = table.Column<string>(nullable: true),
                    Owner = table.Column<string>(nullable: true),
                    HeightId = table.Column<int>(nullable: true),
                    LenId = table.Column<int>(nullable: true),
                    IdUniqueId = table.Column<int>(nullable: true),
                    CapFlowId = table.Column<int>(nullable: true),
                    AreaSeparatorFlowId = table.Column<int>(nullable: true),
                    HtMudSealId = table.Column<int>(nullable: true),
                    IdInletId = table.Column<int>(nullable: true),
                    IdVentLineId = table.Column<int>(nullable: true),
                    LenVentLineId = table.Column<int>(nullable: true),
                    CapGasSepId = table.Column<int>(nullable: true),
                    CapBlowdownId = table.Column<int>(nullable: true),
                    PresRatingId = table.Column<int>(nullable: true),
                    TempRatingId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigDegassers", x => x.DegasserId);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigAreaSeparatorFlows_AreaSeparatorFlowId",
                        column: x => x.AreaSeparatorFlowId,
                        principalTable: "RigAreaSeparatorFlows",
                        principalColumn: "AreaSeparatorFlowId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigCapBlowdowns_CapBlowdownId",
                        column: x => x.CapBlowdownId,
                        principalTable: "RigCapBlowdowns",
                        principalColumn: "CapBlowdownId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigCapFlows_CapFlowId",
                        column: x => x.CapFlowId,
                        principalTable: "RigCapFlows",
                        principalColumn: "CapFlowId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigCapGasSeps_CapGasSepId",
                        column: x => x.CapGasSepId,
                        principalTable: "RigCapGasSeps",
                        principalColumn: "CapGasSepId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigHeights_HeightId",
                        column: x => x.HeightId,
                        principalTable: "RigHeights",
                        principalColumn: "HeightId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigHtMudSeals_HtMudSealId",
                        column: x => x.HtMudSealId,
                        principalTable: "RigHtMudSeals",
                        principalColumn: "HtMudSealId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigIdInlets_IdInletId",
                        column: x => x.IdInletId,
                        principalTable: "RigIdInlets",
                        principalColumn: "IdInletId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigIds_IdUniqueId",
                        column: x => x.IdUniqueId,
                        principalTable: "RigIds",
                        principalColumn: "UniqueId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigIdVentLines_IdVentLineId",
                        column: x => x.IdVentLineId,
                        principalTable: "RigIdVentLines",
                        principalColumn: "IdVentLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigLens_LenId",
                        column: x => x.LenId,
                        principalTable: "RigLens",
                        principalColumn: "LenId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigLenVentLines_LenVentLineId",
                        column: x => x.LenVentLineId,
                        principalTable: "RigLenVentLines",
                        principalColumn: "LenVentLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigPresRatings_PresRatingId",
                        column: x => x.PresRatingId,
                        principalTable: "RigPresRatings",
                        principalColumn: "PresRatingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigDegassers_RigTempRatings_TempRatingId",
                        column: x => x.TempRatingId,
                        principalTable: "RigTempRatings",
                        principalColumn: "TempRatingId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RigBops",
                columns: table => new
                {
                    BopId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Manufacturer = table.Column<string>(nullable: true),
                    Model = table.Column<string>(nullable: true),
                    DTimInstall = table.Column<string>(nullable: true),
                    DTimRemove = table.Column<string>(nullable: true),
                    TypeConnectionBop = table.Column<string>(nullable: true),
                    SizeConnectionBopId = table.Column<int>(nullable: true),
                    PresBopRatingId = table.Column<int>(nullable: true),
                    SizeBopSysId = table.Column<int>(nullable: true),
                    RotBop = table.Column<string>(nullable: true),
                    IdBoosterLineId = table.Column<int>(nullable: true),
                    OdBoosterLineId = table.Column<int>(nullable: true),
                    LenBoosterLineId = table.Column<int>(nullable: true),
                    IdSurfLineId = table.Column<int>(nullable: true),
                    OdSurfLineId = table.Column<int>(nullable: true),
                    LenSurfLineId = table.Column<int>(nullable: true),
                    IdChkLineId = table.Column<int>(nullable: true),
                    OdChkLineId = table.Column<int>(nullable: true),
                    LenChkLineId = table.Column<int>(nullable: true),
                    IdKillLineId = table.Column<int>(nullable: true),
                    OdKillLineId = table.Column<int>(nullable: true),
                    LenKillLineId = table.Column<int>(nullable: true),
                    TypeDiverter = table.Column<string>(nullable: true),
                    DiaDiverterId = table.Column<int>(nullable: true),
                    PresWorkDiverterId = table.Column<int>(nullable: true),
                    Accumulator = table.Column<string>(nullable: true),
                    CapAccFluidId = table.Column<int>(nullable: true),
                    PresAccPreChargeId = table.Column<int>(nullable: true),
                    VolAccPreChargeId = table.Column<int>(nullable: true),
                    PresAccOpRatingId = table.Column<int>(nullable: true),
                    TypeControlManifold = table.Column<string>(nullable: true),
                    DescControlManifold = table.Column<string>(nullable: true),
                    TypeChokeManifold = table.Column<string>(nullable: true),
                    PresChokeManifoldId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigBops", x => x.BopId);
                    table.ForeignKey(
                        name: "FK_RigBops_RigCapAccFluids_CapAccFluidId",
                        column: x => x.CapAccFluidId,
                        principalTable: "RigCapAccFluids",
                        principalColumn: "CapAccFluidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigDiaDiverters_DiaDiverterId",
                        column: x => x.DiaDiverterId,
                        principalTable: "RigDiaDiverters",
                        principalColumn: "DiaDiverterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigIdBoosterLines_IdBoosterLineId",
                        column: x => x.IdBoosterLineId,
                        principalTable: "RigIdBoosterLines",
                        principalColumn: "IdBoosterLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigIdChkLines_IdChkLineId",
                        column: x => x.IdChkLineId,
                        principalTable: "RigIdChkLines",
                        principalColumn: "IdChkLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigIdKillLines_IdKillLineId",
                        column: x => x.IdKillLineId,
                        principalTable: "RigIdKillLines",
                        principalColumn: "IdKillLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigIdSurfLines_IdSurfLineId",
                        column: x => x.IdSurfLineId,
                        principalTable: "RigIdSurfLines",
                        principalColumn: "IdSurfLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigLenBoosterLines_LenBoosterLineId",
                        column: x => x.LenBoosterLineId,
                        principalTable: "RigLenBoosterLines",
                        principalColumn: "LenBoosterLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigLenChkLines_LenChkLineId",
                        column: x => x.LenChkLineId,
                        principalTable: "RigLenChkLines",
                        principalColumn: "LenChkLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigLenKillLines_LenKillLineId",
                        column: x => x.LenKillLineId,
                        principalTable: "RigLenKillLines",
                        principalColumn: "LenKillLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigLenSurfLines_LenSurfLineId",
                        column: x => x.LenSurfLineId,
                        principalTable: "RigLenSurfLines",
                        principalColumn: "LenSurfLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigOdBoosterLines_OdBoosterLineId",
                        column: x => x.OdBoosterLineId,
                        principalTable: "RigOdBoosterLines",
                        principalColumn: "OdBoosterLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigOdChkLines_OdChkLineId",
                        column: x => x.OdChkLineId,
                        principalTable: "RigOdChkLines",
                        principalColumn: "OdChkLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigOdKillLines_OdKillLineId",
                        column: x => x.OdKillLineId,
                        principalTable: "RigOdKillLines",
                        principalColumn: "OdKillLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigOdSurfLines_OdSurfLineId",
                        column: x => x.OdSurfLineId,
                        principalTable: "RigOdSurfLines",
                        principalColumn: "OdSurfLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigPresAccOpRatings_PresAccOpRatingId",
                        column: x => x.PresAccOpRatingId,
                        principalTable: "RigPresAccOpRatings",
                        principalColumn: "PresAccOpRatingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigPresAccPreCharges_PresAccPreChargeId",
                        column: x => x.PresAccPreChargeId,
                        principalTable: "RigPresAccPreCharges",
                        principalColumn: "PresAccPreChargeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigPresBopRatings_PresBopRatingId",
                        column: x => x.PresBopRatingId,
                        principalTable: "RigPresBopRatings",
                        principalColumn: "PresBopRatingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigPresChokeManifolds_PresChokeManifoldId",
                        column: x => x.PresChokeManifoldId,
                        principalTable: "RigPresChokeManifolds",
                        principalColumn: "PresChokeManifoldId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigPresWorkDiverters_PresWorkDiverterId",
                        column: x => x.PresWorkDiverterId,
                        principalTable: "RigPresWorkDiverters",
                        principalColumn: "PresWorkDiverterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigSizeBopSyss_SizeBopSysId",
                        column: x => x.SizeBopSysId,
                        principalTable: "RigSizeBopSyss",
                        principalColumn: "SizeBopSysId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigSizeConnectionBops_SizeConnectionBopId",
                        column: x => x.SizeConnectionBopId,
                        principalTable: "RigSizeConnectionBops",
                        principalColumn: "SizeConnectionBopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBops_RigVolAccPreCharges_VolAccPreChargeId",
                        column: x => x.VolAccPreChargeId,
                        principalTable: "RigVolAccPreCharges",
                        principalColumn: "VolAccPreChargeId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RigPumps",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    Index = table.Column<string>(nullable: true),
                    Manufacturer = table.Column<string>(nullable: true),
                    Model = table.Column<string>(nullable: true),
                    DTimInstall = table.Column<string>(nullable: true),
                    DTimRemove = table.Column<string>(nullable: true),
                    Owner = table.Column<string>(nullable: true),
                    TypePump = table.Column<string>(nullable: true),
                    NumCyl = table.Column<string>(nullable: true),
                    OdRodId = table.Column<int>(nullable: true),
                    IdLinerId = table.Column<int>(nullable: true),
                    PumpAction = table.Column<string>(nullable: true),
                    EffId = table.Column<int>(nullable: true),
                    LenStrokeId = table.Column<int>(nullable: true),
                    PresMxId = table.Column<int>(nullable: true),
                    PowHydMxId = table.Column<int>(nullable: true),
                    SpmMxId = table.Column<int>(nullable: true),
                    DisplacementId = table.Column<int>(nullable: true),
                    PresDampId = table.Column<int>(nullable: true),
                    VolDampId = table.Column<int>(nullable: true),
                    PowMechMxId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigPumps", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_RigPumps_RigDisplacements_DisplacementId",
                        column: x => x.DisplacementId,
                        principalTable: "RigDisplacements",
                        principalColumn: "DisplacementId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigPumps_RigEffs_EffId",
                        column: x => x.EffId,
                        principalTable: "RigEffs",
                        principalColumn: "EffId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigPumps_RigIdLiners_IdLinerId",
                        column: x => x.IdLinerId,
                        principalTable: "RigIdLiners",
                        principalColumn: "IdLinerId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigPumps_RigLenStrokes_LenStrokeId",
                        column: x => x.LenStrokeId,
                        principalTable: "RigLenStrokes",
                        principalColumn: "LenStrokeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigPumps_RigOdRods_OdRodId",
                        column: x => x.OdRodId,
                        principalTable: "RigOdRods",
                        principalColumn: "OdRodId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigPumps_RigPowHydMxs_PowHydMxId",
                        column: x => x.PowHydMxId,
                        principalTable: "RigPowHydMxs",
                        principalColumn: "PowHydMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigPumps_RigPowMechMxs_PowMechMxId",
                        column: x => x.PowMechMxId,
                        principalTable: "RigPowMechMxs",
                        principalColumn: "PowMechMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigPumps_RigPresDamps_PresDampId",
                        column: x => x.PresDampId,
                        principalTable: "RigPresDamps",
                        principalColumn: "PresDampId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigPumps_RigPresMxs_PresMxId",
                        column: x => x.PresMxId,
                        principalTable: "RigPresMxs",
                        principalColumn: "PresMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigPumps_RigSpmMxs_SpmMxId",
                        column: x => x.SpmMxId,
                        principalTable: "RigSpmMxs",
                        principalColumn: "SpmMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigPumps_RigVolDamps_VolDampId",
                        column: x => x.VolDampId,
                        principalTable: "RigVolDamps",
                        principalColumn: "VolDampId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RigSurfaceEquipments",
                columns: table => new
                {
                    SurfaceEquipmentId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Description = table.Column<string>(nullable: true),
                    PresRatingId = table.Column<int>(nullable: true),
                    TypeSurfEquip = table.Column<string>(nullable: true),
                    UsePumpDischarge = table.Column<string>(nullable: true),
                    UseStandpipe = table.Column<string>(nullable: true),
                    UseHose = table.Column<string>(nullable: true),
                    UseSwivel = table.Column<string>(nullable: true),
                    UseKelly = table.Column<string>(nullable: true),
                    UseTopStack = table.Column<string>(nullable: true),
                    UseInjStack = table.Column<string>(nullable: true),
                    UseSurfaceIron = table.Column<string>(nullable: true),
                    IdStandpipeId = table.Column<int>(nullable: true),
                    LenStandpipeId = table.Column<int>(nullable: true),
                    IdHoseId = table.Column<int>(nullable: true),
                    LenHoseId = table.Column<int>(nullable: true),
                    IdSwivelId = table.Column<int>(nullable: true),
                    LenSwivelId = table.Column<int>(nullable: true),
                    IdKellyId = table.Column<int>(nullable: true),
                    LenKellyId = table.Column<int>(nullable: true),
                    IdDischargeLineId = table.Column<int>(nullable: true),
                    LenDischargeLineId = table.Column<int>(nullable: true),
                    CtWrapType = table.Column<string>(nullable: true),
                    OdReelId = table.Column<int>(nullable: true),
                    OdCoreId = table.Column<int>(nullable: true),
                    WidReelWrapId = table.Column<int>(nullable: true),
                    LenReelId = table.Column<int>(nullable: true),
                    InjStkUp = table.Column<string>(nullable: true),
                    HtInjStkId = table.Column<int>(nullable: true),
                    UmbInside = table.Column<string>(nullable: true),
                    OdUmbilicalId = table.Column<int>(nullable: true),
                    LenUmbilicalId = table.Column<int>(nullable: true),
                    IdTopStkId = table.Column<int>(nullable: true),
                    HtTopStkId = table.Column<int>(nullable: true),
                    HtFlangeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigSurfaceEquipments", x => x.SurfaceEquipmentId);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigHtFlanges_HtFlangeId",
                        column: x => x.HtFlangeId,
                        principalTable: "RigHtFlanges",
                        principalColumn: "HtFlangeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigHtInjStks_HtInjStkId",
                        column: x => x.HtInjStkId,
                        principalTable: "RigHtInjStks",
                        principalColumn: "HtInjStkId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigHtTopStks_HtTopStkId",
                        column: x => x.HtTopStkId,
                        principalTable: "RigHtTopStks",
                        principalColumn: "HtTopStkId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigIdDischargeLines_IdDischargeLineId",
                        column: x => x.IdDischargeLineId,
                        principalTable: "RigIdDischargeLines",
                        principalColumn: "IdDischargeLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigIdHoses_IdHoseId",
                        column: x => x.IdHoseId,
                        principalTable: "RigIdHoses",
                        principalColumn: "IdHoseId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigIdKellys_IdKellyId",
                        column: x => x.IdKellyId,
                        principalTable: "RigIdKellys",
                        principalColumn: "IdKellyId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigIdStandpipes_IdStandpipeId",
                        column: x => x.IdStandpipeId,
                        principalTable: "RigIdStandpipes",
                        principalColumn: "IdStandpipeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigIdSwivels_IdSwivelId",
                        column: x => x.IdSwivelId,
                        principalTable: "RigIdSwivels",
                        principalColumn: "IdSwivelId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigIdTopStks_IdTopStkId",
                        column: x => x.IdTopStkId,
                        principalTable: "RigIdTopStks",
                        principalColumn: "IdTopStkId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigLenDischargeLines_LenDischargeLineId",
                        column: x => x.LenDischargeLineId,
                        principalTable: "RigLenDischargeLines",
                        principalColumn: "LenDischargeLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigLenHoses_LenHoseId",
                        column: x => x.LenHoseId,
                        principalTable: "RigLenHoses",
                        principalColumn: "LenHoseId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigLenKellys_LenKellyId",
                        column: x => x.LenKellyId,
                        principalTable: "RigLenKellys",
                        principalColumn: "LenKellyId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigLenReels_LenReelId",
                        column: x => x.LenReelId,
                        principalTable: "RigLenReels",
                        principalColumn: "LenReelId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigLenStandpipes_LenStandpipeId",
                        column: x => x.LenStandpipeId,
                        principalTable: "RigLenStandpipes",
                        principalColumn: "LenStandpipeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigLenSwivels_LenSwivelId",
                        column: x => x.LenSwivelId,
                        principalTable: "RigLenSwivels",
                        principalColumn: "LenSwivelId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigLenUmbilicals_LenUmbilicalId",
                        column: x => x.LenUmbilicalId,
                        principalTable: "RigLenUmbilicals",
                        principalColumn: "LenUmbilicalId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigOdCores_OdCoreId",
                        column: x => x.OdCoreId,
                        principalTable: "RigOdCores",
                        principalColumn: "OdCoreId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigOdReels_OdReelId",
                        column: x => x.OdReelId,
                        principalTable: "RigOdReels",
                        principalColumn: "OdReelId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigOdUmbilicals_OdUmbilicalId",
                        column: x => x.OdUmbilicalId,
                        principalTable: "RigOdUmbilicals",
                        principalColumn: "OdUmbilicalId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigPresRatings_PresRatingId",
                        column: x => x.PresRatingId,
                        principalTable: "RigPresRatings",
                        principalColumn: "PresRatingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigSurfaceEquipments_RigWidReelWraps_WidReelWrapId",
                        column: x => x.WidReelWrapId,
                        principalTable: "RigWidReelWraps",
                        principalColumn: "WidReelWrapId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Risks",
                columns: table => new
                {
                    RiskId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    ObjectReferenceId = table.Column<int>(nullable: true),
                    Type = table.Column<string>(nullable: true),
                    Category = table.Column<string>(nullable: true),
                    SubCategory = table.Column<string>(nullable: true),
                    MdHoleStartId = table.Column<int>(nullable: true),
                    MdHoleEndId = table.Column<int>(nullable: true),
                    TvdHoleStartId = table.Column<int>(nullable: true),
                    TvdHoleEndId = table.Column<int>(nullable: true),
                    DiaHoleUom = table.Column<string>(nullable: true),
                    SeverityLevel = table.Column<string>(nullable: true),
                    ProbabilityLevel = table.Column<string>(nullable: true),
                    Summary = table.Column<string>(nullable: true),
                    Details = table.Column<string>(nullable: true),
                    Identification = table.Column<string>(nullable: true),
                    Mitigation = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Risks", x => x.RiskId);
                    table.ForeignKey(
                        name: "FK_Risks_RiskDiaHole_DiaHoleUom",
                        column: x => x.DiaHoleUom,
                        principalTable: "RiskDiaHole",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Risks_RiskMdHoleEnds_MdHoleEndId",
                        column: x => x.MdHoleEndId,
                        principalTable: "RiskMdHoleEnds",
                        principalColumn: "MdHoleEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Risks_RiskMdHoleStarts_MdHoleStartId",
                        column: x => x.MdHoleStartId,
                        principalTable: "RiskMdHoleStarts",
                        principalColumn: "MdHoleStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Risks_RiskObjectReferences_ObjectReferenceId",
                        column: x => x.ObjectReferenceId,
                        principalTable: "RiskObjectReferences",
                        principalColumn: "ObjectReferenceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Risks_RiskTvdHoleEnds_TvdHoleEndId",
                        column: x => x.TvdHoleEndId,
                        principalTable: "RiskTvdHoleEnds",
                        principalColumn: "TvdHoleEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Risks_RiskTvdHoleStarts_TvdHoleStartId",
                        column: x => x.TvdHoleStartId,
                        principalTable: "RiskTvdHoleStarts",
                        principalColumn: "TvdHoleStartId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SideWallCoreQualifier",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    Type = table.Column<string>(nullable: true),
                    AbundanceUom = table.Column<string>(nullable: true),
                    AbundanceCode = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallCoreQualifier", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_SideWallCoreQualifier_SideWallCoreAbundance_AbundanceUom",
                        column: x => x.AbundanceUom,
                        principalTable: "SideWallCoreAbundance",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SideWallCoreShow",
                columns: table => new
                {
                    SideWallCoreId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShowRat = table.Column<string>(nullable: true),
                    StainColor = table.Column<string>(nullable: true),
                    StainDistr = table.Column<string>(nullable: true),
                    StainPcUom = table.Column<string>(nullable: true),
                    NatFlorColor = table.Column<string>(nullable: true),
                    NatFlorPcUom = table.Column<string>(nullable: true),
                    NatFlorLevel = table.Column<string>(nullable: true),
                    NatFlorDesc = table.Column<string>(nullable: true),
                    CutColor = table.Column<string>(nullable: true),
                    CutSpeed = table.Column<string>(nullable: true),
                    CutStrength = table.Column<string>(nullable: true),
                    CutForm = table.Column<string>(nullable: true),
                    CutLevel = table.Column<string>(nullable: true),
                    CutFlorColor = table.Column<string>(nullable: true),
                    CutFlorSpeed = table.Column<string>(nullable: true),
                    CutFlorStrength = table.Column<string>(nullable: true),
                    CutFlorForm = table.Column<string>(nullable: true),
                    CutFlorLevel = table.Column<string>(nullable: true),
                    ResidueColor = table.Column<string>(nullable: true),
                    ShowDesc = table.Column<string>(nullable: true),
                    ImpregnatedLitho = table.Column<string>(nullable: true),
                    Odor = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallCoreShow", x => x.SideWallCoreId);
                    table.ForeignKey(
                        name: "FK_SideWallCoreShow_SideWallCoreNatFlorPc_NatFlorPcUom",
                        column: x => x.NatFlorPcUom,
                        principalTable: "SideWallCoreNatFlorPc",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SideWallCoreShow_SideWallCoreStainPc_StainPcUom",
                        column: x => x.StainPcUom,
                        principalTable: "SideWallCoreStainPc",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPumpFlowBackTests",
                columns: table => new
                {
                    PumpFlowBackTestId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FractureCloseDurationId = table.Column<int>(nullable: true),
                    FractureClosePresId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPumpFlowBackTests", x => x.PumpFlowBackTestId);
                    table.ForeignKey(
                        name: "FK_StimJobPumpFlowBackTests_StimJobFractureCloseDurations_FractureCloseDurationId",
                        column: x => x.FractureCloseDurationId,
                        principalTable: "StimJobFractureCloseDurations",
                        principalColumn: "FractureCloseDurationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPumpFlowBackTests_StimJobFractureClosePress_FractureClosePresId",
                        column: x => x.FractureClosePresId,
                        principalTable: "StimJobFractureClosePress",
                        principalColumn: "FractureClosePresId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStepRateTests",
                columns: table => new
                {
                    StepRateTestId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FractureExtensionPresId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStepRateTests", x => x.StepRateTestId);
                    table.ForeignKey(
                        name: "FK_StimJobStepRateTests_StimJobFractureExtensionPress_FractureExtensionPresId",
                        column: x => x.FractureExtensionPresId,
                        principalTable: "StimJobFractureExtensionPress",
                        principalColumn: "FractureExtensionPresId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStepDownTests",
                columns: table => new
                {
                    StepDownTestId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InitialShutinPresId = table.Column<int>(nullable: true),
                    BottomholeFluidDensityId = table.Column<int>(nullable: true),
                    DiameterEntryHolePipeFrictionId = table.Column<int>(nullable: true),
                    PerforationCount = table.Column<string>(nullable: true),
                    DischargeCoefficient = table.Column<string>(nullable: true),
                    EffectivePerfs = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStepDownTests", x => x.StepDownTestId);
                    table.ForeignKey(
                        name: "FK_StimJobStepDownTests_StimJobBottomholeFluidDensitys_BottomholeFluidDensityId",
                        column: x => x.BottomholeFluidDensityId,
                        principalTable: "StimJobBottomholeFluidDensitys",
                        principalColumn: "BottomholeFluidDensityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobStepDownTests_StimJobDiameterEntryHoles_DiameterEntryHolePipeFrictionId",
                        column: x => x.DiameterEntryHolePipeFrictionId,
                        principalTable: "StimJobDiameterEntryHoles",
                        principalColumn: "PipeFrictionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobStepDownTests_StimJobInitialShutinPress_InitialShutinPresId",
                        column: x => x.InitialShutinPresId,
                        principalTable: "StimJobInitialShutinPress",
                        principalColumn: "InitialShutinPresId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobReservoirIntervals",
                columns: table => new
                {
                    ReservoirIntervalId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MdLithTopId = table.Column<int>(nullable: true),
                    MdLithBottomId = table.Column<int>(nullable: true),
                    LithFormationPermeabilityId = table.Column<int>(nullable: true),
                    LithYoungsModulusId = table.Column<int>(nullable: true),
                    LithPorePresId = table.Column<int>(nullable: true),
                    LithNetPayThicknessId = table.Column<int>(nullable: true),
                    LithName = table.Column<string>(nullable: true),
                    MdGrossPayTopId = table.Column<int>(nullable: true),
                    MdGrossPayBottomId = table.Column<int>(nullable: true),
                    GrossPayThicknessId = table.Column<int>(nullable: true),
                    NetPayThicknessId = table.Column<int>(nullable: true),
                    NetPayPorePresId = table.Column<int>(nullable: true),
                    NetPayFluidCompressibilityId = table.Column<int>(nullable: true),
                    NetPayFluidViscosityId = table.Column<int>(nullable: true),
                    NetPayName = table.Column<string>(nullable: true),
                    NetPayFormationPermeabilityId = table.Column<int>(nullable: true),
                    LithPoissonsRatioId = table.Column<int>(nullable: true),
                    NetPayFormationPorosityId = table.Column<int>(nullable: true),
                    FormationPermeabilityId = table.Column<int>(nullable: true),
                    FormationPorosityId = table.Column<int>(nullable: true),
                    NameFormation = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobReservoirIntervals", x => x.ReservoirIntervalId);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobFormationPermeabilitys_FormationPermeabilityId",
                        column: x => x.FormationPermeabilityId,
                        principalTable: "StimJobFormationPermeabilitys",
                        principalColumn: "FormationPermeabilityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobFormationPorositys_FormationPorosityId",
                        column: x => x.FormationPorosityId,
                        principalTable: "StimJobFormationPorositys",
                        principalColumn: "FormationPorosityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobGrossPayThicknesss_GrossPayThicknessId",
                        column: x => x.GrossPayThicknessId,
                        principalTable: "StimJobGrossPayThicknesss",
                        principalColumn: "GrossPayThicknessId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobLithFormationPermeabilitys_LithFormationPermeabilityId",
                        column: x => x.LithFormationPermeabilityId,
                        principalTable: "StimJobLithFormationPermeabilitys",
                        principalColumn: "LithFormationPermeabilityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobLithNetPayThicknesss_LithNetPayThicknessId",
                        column: x => x.LithNetPayThicknessId,
                        principalTable: "StimJobLithNetPayThicknesss",
                        principalColumn: "LithNetPayThicknessId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobLithPoissonsRatios_LithPoissonsRatioId",
                        column: x => x.LithPoissonsRatioId,
                        principalTable: "StimJobLithPoissonsRatios",
                        principalColumn: "LithPoissonsRatioId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobLithPorePress_LithPorePresId",
                        column: x => x.LithPorePresId,
                        principalTable: "StimJobLithPorePress",
                        principalColumn: "LithPorePresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobLithYoungsModuluss_LithYoungsModulusId",
                        column: x => x.LithYoungsModulusId,
                        principalTable: "StimJobLithYoungsModuluss",
                        principalColumn: "LithYoungsModulusId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobMdGrossPayBottoms_MdGrossPayBottomId",
                        column: x => x.MdGrossPayBottomId,
                        principalTable: "StimJobMdGrossPayBottoms",
                        principalColumn: "MdGrossPayBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobMdGrossPayTops_MdGrossPayTopId",
                        column: x => x.MdGrossPayTopId,
                        principalTable: "StimJobMdGrossPayTops",
                        principalColumn: "MdGrossPayTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobMdLithBottoms_MdLithBottomId",
                        column: x => x.MdLithBottomId,
                        principalTable: "StimJobMdLithBottoms",
                        principalColumn: "MdLithBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobMdLithTops_MdLithTopId",
                        column: x => x.MdLithTopId,
                        principalTable: "StimJobMdLithTops",
                        principalColumn: "MdLithTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobNetPayFluidCompressibilitys_NetPayFluidCompressibilityId",
                        column: x => x.NetPayFluidCompressibilityId,
                        principalTable: "StimJobNetPayFluidCompressibilitys",
                        principalColumn: "NetPayFluidCompressibilityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobNetPayFluidViscositys_NetPayFluidViscosityId",
                        column: x => x.NetPayFluidViscosityId,
                        principalTable: "StimJobNetPayFluidViscositys",
                        principalColumn: "NetPayFluidViscosityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobNetPayFormationPermeabilitys_NetPayFormationPermeabilityId",
                        column: x => x.NetPayFormationPermeabilityId,
                        principalTable: "StimJobNetPayFormationPermeabilitys",
                        principalColumn: "NetPayFormationPermeabilityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobNetPayFormationPorositys_NetPayFormationPorosityId",
                        column: x => x.NetPayFormationPorosityId,
                        principalTable: "StimJobNetPayFormationPorositys",
                        principalColumn: "NetPayFormationPorosityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobNetPayPorePress_NetPayPorePresId",
                        column: x => x.NetPayPorePresId,
                        principalTable: "StimJobNetPayPorePress",
                        principalColumn: "NetPayPorePresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobReservoirIntervals_StimJobNetPayThicknesss_NetPayThicknessId",
                        column: x => x.NetPayThicknessId,
                        principalTable: "StimJobNetPayThicknesss",
                        principalColumn: "NetPayThicknessId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFluidEfficiencyTests",
                columns: table => new
                {
                    FluidEfficiencyTestId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTimStart = table.Column<string>(nullable: true),
                    DTimEnd = table.Column<string>(nullable: true),
                    EndPdlDurationId = table.Column<int>(nullable: true),
                    FractureCloseDurationId = table.Column<int>(nullable: true),
                    FractureClosePresId = table.Column<int>(nullable: true),
                    FractureExtensionPresId = table.Column<int>(nullable: true),
                    NetPresId = table.Column<int>(nullable: true),
                    PorePresId = table.Column<int>(nullable: true),
                    PseudoRadialPresId = table.Column<int>(nullable: true),
                    FractureLengthId = table.Column<int>(nullable: true),
                    FractureWidthId = table.Column<int>(nullable: true),
                    FluidEfficiencyId = table.Column<int>(nullable: true),
                    PdlCoef = table.Column<string>(nullable: true),
                    ResidualPermeabilityId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFluidEfficiencyTests", x => x.FluidEfficiencyTestId);
                    table.ForeignKey(
                        name: "FK_StimJobFluidEfficiencyTests_StimJobEndPdlDurations_EndPdlDurationId",
                        column: x => x.EndPdlDurationId,
                        principalTable: "StimJobEndPdlDurations",
                        principalColumn: "EndPdlDurationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFluidEfficiencyTests_StimJobFluidEfficiencys_FluidEfficiencyId",
                        column: x => x.FluidEfficiencyId,
                        principalTable: "StimJobFluidEfficiencys",
                        principalColumn: "FluidEfficiencyId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFluidEfficiencyTests_StimJobFractureCloseDurations_FractureCloseDurationId",
                        column: x => x.FractureCloseDurationId,
                        principalTable: "StimJobFractureCloseDurations",
                        principalColumn: "FractureCloseDurationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFluidEfficiencyTests_StimJobFractureClosePress_FractureClosePresId",
                        column: x => x.FractureClosePresId,
                        principalTable: "StimJobFractureClosePress",
                        principalColumn: "FractureClosePresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFluidEfficiencyTests_StimJobFractureExtensionPress_FractureExtensionPresId",
                        column: x => x.FractureExtensionPresId,
                        principalTable: "StimJobFractureExtensionPress",
                        principalColumn: "FractureExtensionPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFluidEfficiencyTests_StimJobFractureLengths_FractureLengthId",
                        column: x => x.FractureLengthId,
                        principalTable: "StimJobFractureLengths",
                        principalColumn: "FractureLengthId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFluidEfficiencyTests_StimJobFractureWidths_FractureWidthId",
                        column: x => x.FractureWidthId,
                        principalTable: "StimJobFractureWidths",
                        principalColumn: "FractureWidthId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFluidEfficiencyTests_StimJobNetPress_NetPresId",
                        column: x => x.NetPresId,
                        principalTable: "StimJobNetPress",
                        principalColumn: "NetPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFluidEfficiencyTests_StimJobPorePress_PorePresId",
                        column: x => x.PorePresId,
                        principalTable: "StimJobPorePress",
                        principalColumn: "PorePresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFluidEfficiencyTests_StimJobPseudoRadialPress_PseudoRadialPresId",
                        column: x => x.PseudoRadialPresId,
                        principalTable: "StimJobPseudoRadialPress",
                        principalColumn: "PseudoRadialPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFluidEfficiencyTests_StimJobResidualPermeabilitys_ResidualPermeabilityId",
                        column: x => x.ResidualPermeabilityId,
                        principalTable: "StimJobResidualPermeabilitys",
                        principalColumn: "ResidualPermeabilityId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobShutinPress",
                columns: table => new
                {
                    ShutinPresId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PresId = table.Column<int>(nullable: true),
                    TimeAfterShutinId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobShutinPress", x => x.ShutinPresId);
                    table.ForeignKey(
                        name: "FK_StimJobShutinPress_StimJobPress_PresId",
                        column: x => x.PresId,
                        principalTable: "StimJobPress",
                        principalColumn: "PresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobShutinPress_StimJobTimeAfterShutins_TimeAfterShutinId",
                        column: x => x.TimeAfterShutinId,
                        principalTable: "StimJobTimeAfterShutins",
                        principalColumn: "TimeAfterShutinId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPerforationIntervals",
                columns: table => new
                {
                    PerforationIntervalId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<string>(nullable: true),
                    MdPerforationsTopId = table.Column<int>(nullable: true),
                    MdPerforationsBottomId = table.Column<int>(nullable: true),
                    TvdPerforationsTopId = table.Column<int>(nullable: true),
                    TvdPerforationsBottomId = table.Column<int>(nullable: true),
                    PerforationCount = table.Column<string>(nullable: true),
                    SizeId = table.Column<int>(nullable: true),
                    DensityPerforationId = table.Column<int>(nullable: true),
                    PhasingPerforationId = table.Column<int>(nullable: true),
                    FrictionFactor = table.Column<string>(nullable: true),
                    FrictionPresId = table.Column<int>(nullable: true),
                    DischargeCoefficient = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPerforationIntervals", x => x.PerforationIntervalId);
                    table.ForeignKey(
                        name: "FK_StimJobPerforationIntervals_StimJobDensityPerforations_DensityPerforationId",
                        column: x => x.DensityPerforationId,
                        principalTable: "StimJobDensityPerforations",
                        principalColumn: "DensityPerforationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPerforationIntervals_StimJobFrictionPress_FrictionPresId",
                        column: x => x.FrictionPresId,
                        principalTable: "StimJobFrictionPress",
                        principalColumn: "FrictionPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPerforationIntervals_StimJobMdPerforationsBottoms_MdPerforationsBottomId",
                        column: x => x.MdPerforationsBottomId,
                        principalTable: "StimJobMdPerforationsBottoms",
                        principalColumn: "MdPerforationsBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPerforationIntervals_StimJobMdPerforationsTops_MdPerforationsTopId",
                        column: x => x.MdPerforationsTopId,
                        principalTable: "StimJobMdPerforationsTops",
                        principalColumn: "MdPerforationsTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPerforationIntervals_StimJobPhasingPerforations_PhasingPerforationId",
                        column: x => x.PhasingPerforationId,
                        principalTable: "StimJobPhasingPerforations",
                        principalColumn: "PhasingPerforationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPerforationIntervals_StimJobSizes_SizeId",
                        column: x => x.SizeId,
                        principalTable: "StimJobSizes",
                        principalColumn: "SizeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPerforationIntervals_StimJobTvdPerforationsBottoms_TvdPerforationsBottomId",
                        column: x => x.TvdPerforationsBottomId,
                        principalTable: "StimJobTvdPerforationsBottoms",
                        principalColumn: "TvdPerforationsBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPerforationIntervals_StimJobTvdPerforationsTops_TvdPerforationsTopId",
                        column: x => x.TvdPerforationsTopId,
                        principalTable: "StimJobTvdPerforationsTops",
                        principalColumn: "TvdPerforationsTopId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobProppants",
                columns: table => new
                {
                    ProppantId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    Kind = table.Column<string>(nullable: true),
                    WeightId = table.Column<int>(nullable: true),
                    SieveSize = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobProppants", x => x.ProppantId);
                    table.ForeignKey(
                        name: "FK_StimJobProppants_StimJobWeights_WeightId",
                        column: x => x.WeightId,
                        principalTable: "StimJobWeights",
                        principalColumn: "WeightId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobFlowPaths",
                columns: table => new
                {
                    FlowPathId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Kind = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    MaxTreatmentPresId = table.Column<int>(nullable: true),
                    MaxSlurryRateId = table.Column<int>(nullable: true),
                    MaxWellheadRateId = table.Column<int>(nullable: true),
                    MaxN2StdRateId = table.Column<int>(nullable: true),
                    MaxCO2LiquidRateId = table.Column<int>(nullable: true),
                    MaxGelRateId = table.Column<int>(nullable: true),
                    MaxOilRateId = table.Column<int>(nullable: true),
                    MaxAcidRateId = table.Column<int>(nullable: true),
                    MaxPropConcId = table.Column<int>(nullable: true),
                    MaxSlurryPropConcId = table.Column<int>(nullable: true),
                    AvgTreatPresId = table.Column<int>(nullable: true),
                    AvgBaseFluidRateId = table.Column<int>(nullable: true),
                    AvgSlurryRateId = table.Column<int>(nullable: true),
                    AvgWellheadRateId = table.Column<int>(nullable: true),
                    AvgN2StdRateId = table.Column<int>(nullable: true),
                    AvgCO2LiquidRateId = table.Column<int>(nullable: true),
                    AvgGelRateId = table.Column<int>(nullable: true),
                    AvgOilRateId = table.Column<int>(nullable: true),
                    AvgAcidRateId = table.Column<int>(nullable: true),
                    AvgPropConcId = table.Column<int>(nullable: true),
                    AvgSlurryPropConcId = table.Column<int>(nullable: true),
                    AvgTemperatureId = table.Column<int>(nullable: true),
                    AvgIntervalPhaseFraction = table.Column<string>(nullable: true),
                    AvgBaseFluidQualityId = table.Column<int>(nullable: true),
                    AvgN2BaseFluidQualityId = table.Column<int>(nullable: true),
                    AvgCO2BaseFluidQualityId = table.Column<int>(nullable: true),
                    AvgHydraulicPowerId = table.Column<int>(nullable: true),
                    BaseFluidVolId = table.Column<int>(nullable: true),
                    SlurryVolId = table.Column<int>(nullable: true),
                    WellheadVolStdVolN2Id = table.Column<int>(nullable: true),
                    StdVolN2Id = table.Column<int>(nullable: true),
                    MassCO2Id = table.Column<int>(nullable: true),
                    GelVolId = table.Column<int>(nullable: true),
                    OilVolId = table.Column<int>(nullable: true),
                    AcidVolId = table.Column<int>(nullable: true),
                    BaseFluidBypassVolId = table.Column<int>(nullable: true),
                    PropMassId = table.Column<int>(nullable: true),
                    MaxPmaxPacPresId = table.Column<int>(nullable: true),
                    MaxPmaxWeaklinkPresId = table.Column<int>(nullable: true),
                    AvgPmaxPacPresId = table.Column<int>(nullable: true),
                    AvgPmaxWeaklinkPresId = table.Column<int>(nullable: true),
                    ShutinPres5MinId = table.Column<int>(nullable: true),
                    ShutinPres10MinId = table.Column<int>(nullable: true),
                    ShutinPres15MinId = table.Column<int>(nullable: true),
                    BreakDownPresId = table.Column<int>(nullable: true),
                    PercentPadId = table.Column<int>(nullable: true),
                    FractureGradientId = table.Column<int>(nullable: true),
                    PipeFrictionFactor = table.Column<string>(nullable: true),
                    StageCount = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobFlowPaths", x => x.FlowPathId);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAcidVols_AcidVolId",
                        column: x => x.AcidVolId,
                        principalTable: "StimJobAcidVols",
                        principalColumn: "AcidVolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgAcidRates_AvgAcidRateId",
                        column: x => x.AvgAcidRateId,
                        principalTable: "StimJobAvgAcidRates",
                        principalColumn: "AvgAcidRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgBaseFluidQualitys_AvgBaseFluidQualityId",
                        column: x => x.AvgBaseFluidQualityId,
                        principalTable: "StimJobAvgBaseFluidQualitys",
                        principalColumn: "AvgBaseFluidQualityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgBaseFluidRates_AvgBaseFluidRateId",
                        column: x => x.AvgBaseFluidRateId,
                        principalTable: "StimJobAvgBaseFluidRates",
                        principalColumn: "AvgBaseFluidRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgCO2BaseFluidQualitys_AvgCO2BaseFluidQualityId",
                        column: x => x.AvgCO2BaseFluidQualityId,
                        principalTable: "StimJobAvgCO2BaseFluidQualitys",
                        principalColumn: "AvgCO2BaseFluidQualityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgCO2LiquidRates_AvgCO2LiquidRateId",
                        column: x => x.AvgCO2LiquidRateId,
                        principalTable: "StimJobAvgCO2LiquidRates",
                        principalColumn: "AvgCO2LiquidRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgGelRates_AvgGelRateId",
                        column: x => x.AvgGelRateId,
                        principalTable: "StimJobAvgGelRates",
                        principalColumn: "AvgGelRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgHydraulicPowers_AvgHydraulicPowerId",
                        column: x => x.AvgHydraulicPowerId,
                        principalTable: "StimJobAvgHydraulicPowers",
                        principalColumn: "AvgHydraulicPowerId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgN2BaseFluidQualitys_AvgN2BaseFluidQualityId",
                        column: x => x.AvgN2BaseFluidQualityId,
                        principalTable: "StimJobAvgN2BaseFluidQualitys",
                        principalColumn: "AvgN2BaseFluidQualityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgN2StdRates_AvgN2StdRateId",
                        column: x => x.AvgN2StdRateId,
                        principalTable: "StimJobAvgN2StdRates",
                        principalColumn: "AvgN2StdRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgOilRates_AvgOilRateId",
                        column: x => x.AvgOilRateId,
                        principalTable: "StimJobAvgOilRates",
                        principalColumn: "AvgOilRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgPmaxPacPress_AvgPmaxPacPresId",
                        column: x => x.AvgPmaxPacPresId,
                        principalTable: "StimJobAvgPmaxPacPress",
                        principalColumn: "AvgPmaxPacPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgPmaxWeaklinkPress_AvgPmaxWeaklinkPresId",
                        column: x => x.AvgPmaxWeaklinkPresId,
                        principalTable: "StimJobAvgPmaxWeaklinkPress",
                        principalColumn: "AvgPmaxWeaklinkPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgPropConcs_AvgPropConcId",
                        column: x => x.AvgPropConcId,
                        principalTable: "StimJobAvgPropConcs",
                        principalColumn: "AvgPropConcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgSlurryPropConcs_AvgSlurryPropConcId",
                        column: x => x.AvgSlurryPropConcId,
                        principalTable: "StimJobAvgSlurryPropConcs",
                        principalColumn: "AvgSlurryPropConcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgSlurryRates_AvgSlurryRateId",
                        column: x => x.AvgSlurryRateId,
                        principalTable: "StimJobAvgSlurryRates",
                        principalColumn: "AvgSlurryRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgTemperatures_AvgTemperatureId",
                        column: x => x.AvgTemperatureId,
                        principalTable: "StimJobAvgTemperatures",
                        principalColumn: "AvgTemperatureId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgTreatPress_AvgTreatPresId",
                        column: x => x.AvgTreatPresId,
                        principalTable: "StimJobAvgTreatPress",
                        principalColumn: "AvgTreatPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobAvgWellheadRates_AvgWellheadRateId",
                        column: x => x.AvgWellheadRateId,
                        principalTable: "StimJobAvgWellheadRates",
                        principalColumn: "AvgWellheadRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobBaseFluidBypassVols_BaseFluidBypassVolId",
                        column: x => x.BaseFluidBypassVolId,
                        principalTable: "StimJobBaseFluidBypassVols",
                        principalColumn: "BaseFluidBypassVolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobBaseFluidVols_BaseFluidVolId",
                        column: x => x.BaseFluidVolId,
                        principalTable: "StimJobBaseFluidVols",
                        principalColumn: "BaseFluidVolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobBreakDownPress_BreakDownPresId",
                        column: x => x.BreakDownPresId,
                        principalTable: "StimJobBreakDownPress",
                        principalColumn: "BreakDownPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobFractureGradients_FractureGradientId",
                        column: x => x.FractureGradientId,
                        principalTable: "StimJobFractureGradients",
                        principalColumn: "FractureGradientId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobGelVols_GelVolId",
                        column: x => x.GelVolId,
                        principalTable: "StimJobGelVols",
                        principalColumn: "GelVolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMassCO2s_MassCO2Id",
                        column: x => x.MassCO2Id,
                        principalTable: "StimJobMassCO2s",
                        principalColumn: "MassCO2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMaxAcidRates_MaxAcidRateId",
                        column: x => x.MaxAcidRateId,
                        principalTable: "StimJobMaxAcidRates",
                        principalColumn: "MaxAcidRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMaxCO2LiquidRates_MaxCO2LiquidRateId",
                        column: x => x.MaxCO2LiquidRateId,
                        principalTable: "StimJobMaxCO2LiquidRates",
                        principalColumn: "MaxCO2LiquidRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMaxGelRates_MaxGelRateId",
                        column: x => x.MaxGelRateId,
                        principalTable: "StimJobMaxGelRates",
                        principalColumn: "MaxGelRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMaxN2StdRates_MaxN2StdRateId",
                        column: x => x.MaxN2StdRateId,
                        principalTable: "StimJobMaxN2StdRates",
                        principalColumn: "MaxN2StdRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMaxOilRates_MaxOilRateId",
                        column: x => x.MaxOilRateId,
                        principalTable: "StimJobMaxOilRates",
                        principalColumn: "MaxOilRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMaxPmaxPacPress_MaxPmaxPacPresId",
                        column: x => x.MaxPmaxPacPresId,
                        principalTable: "StimJobMaxPmaxPacPress",
                        principalColumn: "MaxPmaxPacPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMaxPmaxWeaklinkPress_MaxPmaxWeaklinkPresId",
                        column: x => x.MaxPmaxWeaklinkPresId,
                        principalTable: "StimJobMaxPmaxWeaklinkPress",
                        principalColumn: "MaxPmaxWeaklinkPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMaxPropConcs_MaxPropConcId",
                        column: x => x.MaxPropConcId,
                        principalTable: "StimJobMaxPropConcs",
                        principalColumn: "MaxPropConcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMaxSlurryPropConcs_MaxSlurryPropConcId",
                        column: x => x.MaxSlurryPropConcId,
                        principalTable: "StimJobMaxSlurryPropConcs",
                        principalColumn: "MaxSlurryPropConcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMaxSlurryRates_MaxSlurryRateId",
                        column: x => x.MaxSlurryRateId,
                        principalTable: "StimJobMaxSlurryRates",
                        principalColumn: "MaxSlurryRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMaxTreatmentPress_MaxTreatmentPresId",
                        column: x => x.MaxTreatmentPresId,
                        principalTable: "StimJobMaxTreatmentPress",
                        principalColumn: "MaxTreatmentPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobMaxWellheadRates_MaxWellheadRateId",
                        column: x => x.MaxWellheadRateId,
                        principalTable: "StimJobMaxWellheadRates",
                        principalColumn: "MaxWellheadRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobOilVols_OilVolId",
                        column: x => x.OilVolId,
                        principalTable: "StimJobOilVols",
                        principalColumn: "OilVolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobPercentPads_PercentPadId",
                        column: x => x.PercentPadId,
                        principalTable: "StimJobPercentPads",
                        principalColumn: "PercentPadId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobPropMasss_PropMassId",
                        column: x => x.PropMassId,
                        principalTable: "StimJobPropMasss",
                        principalColumn: "PropMassId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobShutinPres10Mins_ShutinPres10MinId",
                        column: x => x.ShutinPres10MinId,
                        principalTable: "StimJobShutinPres10Mins",
                        principalColumn: "ShutinPres10MinId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobShutinPres15Mins_ShutinPres15MinId",
                        column: x => x.ShutinPres15MinId,
                        principalTable: "StimJobShutinPres15Mins",
                        principalColumn: "ShutinPres15MinId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobShutinPres5Mins_ShutinPres5MinId",
                        column: x => x.ShutinPres5MinId,
                        principalTable: "StimJobShutinPres5Mins",
                        principalColumn: "ShutinPres5MinId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobSlurryVols_SlurryVolId",
                        column: x => x.SlurryVolId,
                        principalTable: "StimJobSlurryVols",
                        principalColumn: "SlurryVolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobStdVolN2s_StdVolN2Id",
                        column: x => x.StdVolN2Id,
                        principalTable: "StimJobStdVolN2s",
                        principalColumn: "StdVolN2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobFlowPaths_StimJobWellheadVols_WellheadVolStdVolN2Id",
                        column: x => x.WellheadVolStdVolN2Id,
                        principalTable: "StimJobWellheadVols",
                        principalColumn: "StdVolN2Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SurveyPrograms",
                columns: table => new
                {
                    SurveyProgramId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    SurveyVer = table.Column<string>(nullable: true),
                    DTimTrajProg = table.Column<string>(nullable: true),
                    Engineer = table.Column<string>(nullable: true),
                    Final = table.Column<string>(nullable: true),
                    CommonDataSurveyProgramCommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyPrograms", x => x.SurveyProgramId);
                    table.ForeignKey(
                        name: "FK_SurveyPrograms_SurveyProgramCommonData_CommonDataSurveyProgramCommonDataId",
                        column: x => x.CommonDataSurveyProgramCommonDataId,
                        principalTable: "SurveyProgramCommonData",
                        principalColumn: "SurveyProgramCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Targets",
                columns: table => new
                {
                    TargetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    DispNsCenterId = table.Column<int>(nullable: true),
                    DispEwCenterId = table.Column<int>(nullable: true),
                    TvdId = table.Column<int>(nullable: true),
                    DispNsOffsetId = table.Column<int>(nullable: true),
                    DispEwOffsetId = table.Column<int>(nullable: true),
                    ThickAboveId = table.Column<int>(nullable: true),
                    ThickBelowId = table.Column<int>(nullable: true),
                    DipId = table.Column<int>(nullable: true),
                    StrikeId = table.Column<int>(nullable: true),
                    RotationId = table.Column<int>(nullable: true),
                    LenMajorAxisId = table.Column<int>(nullable: true),
                    WidMinorAxisId = table.Column<int>(nullable: true),
                    TypeTargetScope = table.Column<string>(nullable: true),
                    DispNsSectOrigId = table.Column<int>(nullable: true),
                    DispEwSectOrigId = table.Column<int>(nullable: true),
                    AziRef = table.Column<string>(nullable: true),
                    CatTarg = table.Column<string>(nullable: true),
                    CommonDataTargetCommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Targets", x => x.TargetId);
                    table.ForeignKey(
                        name: "FK_Targets_TargetCommonDatas_CommonDataTargetCommonDataId",
                        column: x => x.CommonDataTargetCommonDataId,
                        principalTable: "TargetCommonDatas",
                        principalColumn: "TargetCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetDips_DipId",
                        column: x => x.DipId,
                        principalTable: "TargetDips",
                        principalColumn: "DipId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetDispEwCenters_DispEwCenterId",
                        column: x => x.DispEwCenterId,
                        principalTable: "TargetDispEwCenters",
                        principalColumn: "DispEwCenterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetDispEwOffsets_DispEwOffsetId",
                        column: x => x.DispEwOffsetId,
                        principalTable: "TargetDispEwOffsets",
                        principalColumn: "DispEwOffsetId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetDispEwSectOrigs_DispEwSectOrigId",
                        column: x => x.DispEwSectOrigId,
                        principalTable: "TargetDispEwSectOrigs",
                        principalColumn: "DispEwSectOrigId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetDispNsCenters_DispNsCenterId",
                        column: x => x.DispNsCenterId,
                        principalTable: "TargetDispNsCenters",
                        principalColumn: "DispNsCenterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetDispNsOffsets_DispNsOffsetId",
                        column: x => x.DispNsOffsetId,
                        principalTable: "TargetDispNsOffsets",
                        principalColumn: "DispNsOffsetId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetDispNsSectOrigs_DispNsSectOrigId",
                        column: x => x.DispNsSectOrigId,
                        principalTable: "TargetDispNsSectOrigs",
                        principalColumn: "DispNsSectOrigId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetLenMajorAxiss_LenMajorAxisId",
                        column: x => x.LenMajorAxisId,
                        principalTable: "TargetLenMajorAxiss",
                        principalColumn: "LenMajorAxisId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetRotations_RotationId",
                        column: x => x.RotationId,
                        principalTable: "TargetRotations",
                        principalColumn: "RotationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetStrikes_StrikeId",
                        column: x => x.StrikeId,
                        principalTable: "TargetStrikes",
                        principalColumn: "StrikeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetThickAboves_ThickAboveId",
                        column: x => x.ThickAboveId,
                        principalTable: "TargetThickAboves",
                        principalColumn: "ThickAboveId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetThickBelows_ThickBelowId",
                        column: x => x.ThickBelowId,
                        principalTable: "TargetThickBelows",
                        principalColumn: "ThickBelowId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetTvds_TvdId",
                        column: x => x.TvdId,
                        principalTable: "TargetTvds",
                        principalColumn: "TvdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Targets_TargetWidMinorAxiss_WidMinorAxisId",
                        column: x => x.WidMinorAxisId,
                        principalTable: "TargetWidMinorAxiss",
                        principalColumn: "WidMinorAxisId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelModelParameter",
                columns: table => new
                {
                    ModelParametersId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MisalignmentMode = table.Column<string>(nullable: true),
                    GyroInitializationId = table.Column<int>(nullable: true),
                    GyroReinitializationDistanceId = table.Column<int>(nullable: true),
                    NoiseReductionFactor = table.Column<string>(nullable: true),
                    Switching = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelModelParameter", x => x.ModelParametersId);
                    table.ForeignKey(
                        name: "FK_ToolErrorModelModelParameter_ToolErrorModelGyroInitializations_GyroInitializationId",
                        column: x => x.GyroInitializationId,
                        principalTable: "ToolErrorModelGyroInitializations",
                        principalColumn: "GyroInitializationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ToolErrorModelModelParameter_ToolErrorModelGyroReinitializationDistances_GyroReinitializationDistanceId",
                        column: x => x.GyroReinitializationDistanceId,
                        principalTable: "ToolErrorModelGyroReinitializationDistances",
                        principalColumn: "GyroReinitializationDistanceId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelOperatingConditions",
                columns: table => new
                {
                    OperatingConditionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Parameter = table.Column<string>(nullable: true),
                    Value = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    MinId = table.Column<int>(nullable: true),
                    MaxId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelOperatingConditions", x => x.OperatingConditionId);
                    table.ForeignKey(
                        name: "FK_ToolErrorModelOperatingConditions_ToolErrorModelMaxs_MaxId",
                        column: x => x.MaxId,
                        principalTable: "ToolErrorModelMaxs",
                        principalColumn: "MaxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ToolErrorModelOperatingConditions_ToolErrorModelMins_MinId",
                        column: x => x.MinId,
                        principalTable: "ToolErrorModelMins",
                        principalColumn: "MinId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorTermSetNomenclatures",
                columns: table => new
                {
                    NomenclatureId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ConstantId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorTermSetNomenclatures", x => x.NomenclatureId);
                    table.ForeignKey(
                        name: "FK_ToolErrorTermSetNomenclatures_ToolErrorTermSetConstants_ConstantId",
                        column: x => x.ConstantId,
                        principalTable: "ToolErrorTermSetConstants",
                        principalColumn: "ConstantId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryValids",
                columns: table => new
                {
                    ValidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MagTotalFieldCalcId = table.Column<int>(nullable: true),
                    MagDipAngleCalcId = table.Column<int>(nullable: true),
                    GravTotalFieldCalcId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryValids", x => x.ValidId);
                    table.ForeignKey(
                        name: "FK_TrajectoryValids_TrajectoryGravTotalFieldCalcs_GravTotalFieldCalcId",
                        column: x => x.GravTotalFieldCalcId,
                        principalTable: "TrajectoryGravTotalFieldCalcs",
                        principalColumn: "GravTotalFieldCalcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryValids_TrajectoryMagDipAngleCalcs_MagDipAngleCalcId",
                        column: x => x.MagDipAngleCalcId,
                        principalTable: "TrajectoryMagDipAngleCalcs",
                        principalColumn: "MagDipAngleCalcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryValids_TrajectoryMagTotalFieldCalcs_MagTotalFieldCalcId",
                        column: x => x.MagTotalFieldCalcId,
                        principalTable: "TrajectoryMagTotalFieldCalcs",
                        principalColumn: "MagTotalFieldCalcId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryRawDatas",
                columns: table => new
                {
                    RawDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GravAxialRawId = table.Column<int>(nullable: true),
                    GravTran1RawId = table.Column<int>(nullable: true),
                    GravTran2RawId = table.Column<int>(nullable: true),
                    MagAxialRawId = table.Column<int>(nullable: true),
                    MagTran1RawId = table.Column<int>(nullable: true),
                    MagTran2RawId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryRawDatas", x => x.RawDataId);
                    table.ForeignKey(
                        name: "FK_TrajectoryRawDatas_TrajectoryGravAxialRaws_GravAxialRawId",
                        column: x => x.GravAxialRawId,
                        principalTable: "TrajectoryGravAxialRaws",
                        principalColumn: "GravAxialRawId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryRawDatas_TrajectoryGravTran1Raws_GravTran1RawId",
                        column: x => x.GravTran1RawId,
                        principalTable: "TrajectoryGravTran1Raws",
                        principalColumn: "GravTran1RawId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryRawDatas_TrajectoryGravTran2Raws_GravTran2RawId",
                        column: x => x.GravTran2RawId,
                        principalTable: "TrajectoryGravTran2Raws",
                        principalColumn: "GravTran2RawId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryRawDatas_TrajectoryMagAxialRaws_MagAxialRawId",
                        column: x => x.MagAxialRawId,
                        principalTable: "TrajectoryMagAxialRaws",
                        principalColumn: "MagAxialRawId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryRawDatas_TrajectoryMagTran1Raws_MagTran1RawId",
                        column: x => x.MagTran1RawId,
                        principalTable: "TrajectoryMagTran1Raws",
                        principalColumn: "MagTran1RawId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryRawDatas_TrajectoryMagTran2Raws_MagTran2RawId",
                        column: x => x.MagTran2RawId,
                        principalTable: "TrajectoryMagTran2Raws",
                        principalColumn: "MagTran2RawId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryCorUseds",
                columns: table => new
                {
                    TrajectoryCorUsedId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GravAxialAccelCorId = table.Column<int>(nullable: true),
                    GravTran1AccelCorId = table.Column<int>(nullable: true),
                    GravTran2AccelCorId = table.Column<int>(nullable: true),
                    MagAxialDrlstrCorId = table.Column<int>(nullable: true),
                    MagTran1DrlstrCorId = table.Column<int>(nullable: true),
                    MagTran2DrlstrCorId = table.Column<int>(nullable: true),
                    SagIncCorId = table.Column<int>(nullable: true),
                    SagAziCorId = table.Column<int>(nullable: true),
                    StnMagDeclUsedId = table.Column<int>(nullable: true),
                    StnGridCorUsedId = table.Column<int>(nullable: true),
                    DirSensorOffsetId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryCorUseds", x => x.TrajectoryCorUsedId);
                    table.ForeignKey(
                        name: "FK_TrajectoryCorUseds_TrajectoryDirSensorOffsets_DirSensorOffsetId",
                        column: x => x.DirSensorOffsetId,
                        principalTable: "TrajectoryDirSensorOffsets",
                        principalColumn: "DirSensorOffsetId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryCorUseds_TrajectoryGravAxialAccelCors_GravAxialAccelCorId",
                        column: x => x.GravAxialAccelCorId,
                        principalTable: "TrajectoryGravAxialAccelCors",
                        principalColumn: "GravAxialAccelCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryCorUseds_TrajectoryGravTran1AccelCors_GravTran1AccelCorId",
                        column: x => x.GravTran1AccelCorId,
                        principalTable: "TrajectoryGravTran1AccelCors",
                        principalColumn: "GravTran1AccelCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryCorUseds_TrajectoryGravTran2AccelCors_GravTran2AccelCorId",
                        column: x => x.GravTran2AccelCorId,
                        principalTable: "TrajectoryGravTran2AccelCors",
                        principalColumn: "GravTran2AccelCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryCorUseds_TrajectoryMagAxialDrlstrCors_MagAxialDrlstrCorId",
                        column: x => x.MagAxialDrlstrCorId,
                        principalTable: "TrajectoryMagAxialDrlstrCors",
                        principalColumn: "MagAxialDrlstrCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryCorUseds_TrajectoryMagTran1DrlstrCors_MagTran1DrlstrCorId",
                        column: x => x.MagTran1DrlstrCorId,
                        principalTable: "TrajectoryMagTran1DrlstrCors",
                        principalColumn: "MagTran1DrlstrCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryCorUseds_TrajectoryMagTran2DrlstrCors_MagTran2DrlstrCorId",
                        column: x => x.MagTran2DrlstrCorId,
                        principalTable: "TrajectoryMagTran2DrlstrCors",
                        principalColumn: "MagTran2DrlstrCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryCorUseds_TrajectorySagAziCors_SagAziCorId",
                        column: x => x.SagAziCorId,
                        principalTable: "TrajectorySagAziCors",
                        principalColumn: "SagAziCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryCorUseds_TrajectorySagIncCors_SagIncCorId",
                        column: x => x.SagIncCorId,
                        principalTable: "TrajectorySagIncCors",
                        principalColumn: "SagIncCorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryCorUseds_TrajectoryStnGridCorUseds_StnGridCorUsedId",
                        column: x => x.StnGridCorUsedId,
                        principalTable: "TrajectoryStnGridCorUseds",
                        principalColumn: "StnGridCorUsedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryCorUseds_TrajectoryStnMagDeclUseds_StnMagDeclUsedId",
                        column: x => x.StnMagDeclUsedId,
                        principalTable: "TrajectoryStnMagDeclUseds",
                        principalColumn: "StnMagDeclUsedId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryMatrixCovs",
                columns: table => new
                {
                    MatrixCovId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VarianceNNId = table.Column<int>(nullable: true),
                    VarianceNEId = table.Column<int>(nullable: true),
                    VarianceNVertId = table.Column<int>(nullable: true),
                    VarianceEEId = table.Column<int>(nullable: true),
                    VarianceEVertId = table.Column<int>(nullable: true),
                    VarianceVertVertId = table.Column<int>(nullable: true),
                    BiasNDtId = table.Column<int>(nullable: true),
                    BiasEId = table.Column<int>(nullable: true),
                    BiasVertId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryMatrixCovs", x => x.MatrixCovId);
                    table.ForeignKey(
                        name: "FK_TrajectoryMatrixCovs_TrajectoryBiasEs_BiasEId",
                        column: x => x.BiasEId,
                        principalTable: "TrajectoryBiasEs",
                        principalColumn: "BiasEId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryMatrixCovs_TrajectoryBiasNs_BiasNDtId",
                        column: x => x.BiasNDtId,
                        principalTable: "TrajectoryBiasNs",
                        principalColumn: "BiasNDtId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryMatrixCovs_TrajectoryBiasVerts_BiasVertId",
                        column: x => x.BiasVertId,
                        principalTable: "TrajectoryBiasVerts",
                        principalColumn: "BiasVertId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryMatrixCovs_TrajectoryVarianceEEs_VarianceEEId",
                        column: x => x.VarianceEEId,
                        principalTable: "TrajectoryVarianceEEs",
                        principalColumn: "VarianceEEId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryMatrixCovs_TrajectoryVarianceEVerts_VarianceEVertId",
                        column: x => x.VarianceEVertId,
                        principalTable: "TrajectoryVarianceEVerts",
                        principalColumn: "VarianceEVertId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryMatrixCovs_TrajectoryVarianceNEs_VarianceNEId",
                        column: x => x.VarianceNEId,
                        principalTable: "TrajectoryVarianceNEs",
                        principalColumn: "VarianceNEId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryMatrixCovs_TrajectoryVarianceNNs_VarianceNNId",
                        column: x => x.VarianceNNId,
                        principalTable: "TrajectoryVarianceNNs",
                        principalColumn: "VarianceNNId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryMatrixCovs_TrajectoryVarianceNVerts_VarianceNVertId",
                        column: x => x.VarianceNVertId,
                        principalTable: "TrajectoryVarianceNVerts",
                        principalColumn: "VarianceNVertId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryMatrixCovs_TrajectoryVarianceVertVerts_VarianceVertVertId",
                        column: x => x.VarianceVertVertId,
                        principalTable: "TrajectoryVarianceVertVerts",
                        principalColumn: "VarianceVertVertId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Tubulars",
                columns: table => new
                {
                    TubularId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    TypeTubularAssy = table.Column<string>(nullable: true),
                    ValveFloat = table.Column<string>(nullable: true),
                    SourceNuclear = table.Column<string>(nullable: true),
                    DiaHoleAssyId = table.Column<int>(nullable: true),
                    CommonDataTubularyCommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tubulars", x => x.TubularId);
                    table.ForeignKey(
                        name: "FK_Tubulars_TubularCommonDatas_CommonDataTubularyCommonDataId",
                        column: x => x.CommonDataTubularyCommonDataId,
                        principalTable: "TubularCommonDatas",
                        principalColumn: "TubularyCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Tubulars_TubularDiaHoleAssy_DiaHoleAssyId",
                        column: x => x.DiaHoleAssyId,
                        principalTable: "TubularDiaHoleAssy",
                        principalColumn: "DiaHoleAssyId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TubularHoleOpener",
                columns: table => new
                {
                    HoleOpenerId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TypeHoleOpener = table.Column<string>(nullable: true),
                    NumCutter = table.Column<string>(nullable: true),
                    Manufacturer = table.Column<string>(nullable: true),
                    DiaHoleOpenerId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularHoleOpener", x => x.HoleOpenerId);
                    table.ForeignKey(
                        name: "FK_TubularHoleOpener_TubularDiaHoleOpener_DiaHoleOpenerId",
                        column: x => x.DiaHoleOpenerId,
                        principalTable: "TubularDiaHoleOpener",
                        principalColumn: "DiaHoleOpenerId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TubularBitRecord",
                columns: table => new
                {
                    BitId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NumBit = table.Column<string>(nullable: true),
                    DiaBitId = table.Column<int>(nullable: true),
                    DiaPassThruId = table.Column<int>(nullable: true),
                    DiaPilotId = table.Column<int>(nullable: true),
                    Manufacturer = table.Column<string>(nullable: true),
                    TypeBit = table.Column<string>(nullable: true),
                    CostId = table.Column<int>(nullable: true),
                    CodeIADC = table.Column<string>(nullable: true),
                    CondInitInner = table.Column<string>(nullable: true),
                    CondInitOuter = table.Column<string>(nullable: true),
                    CondInitDull = table.Column<string>(nullable: true),
                    CondInitLocation = table.Column<string>(nullable: true),
                    CondInitBearing = table.Column<string>(nullable: true),
                    CondInitGauge = table.Column<string>(nullable: true),
                    CondInitOther = table.Column<string>(nullable: true),
                    CondInitReason = table.Column<string>(nullable: true),
                    CondFinalInner = table.Column<string>(nullable: true),
                    CondFinalOuter = table.Column<string>(nullable: true),
                    CondFinalDull = table.Column<string>(nullable: true),
                    CondFinalLocation = table.Column<string>(nullable: true),
                    CondFinalBearing = table.Column<string>(nullable: true),
                    CondFinalGauge = table.Column<string>(nullable: true),
                    CondFinalOther = table.Column<string>(nullable: true),
                    CondFinalReason = table.Column<string>(nullable: true),
                    Drive = table.Column<string>(nullable: true),
                    BitClass = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularBitRecord", x => x.BitId);
                    table.ForeignKey(
                        name: "FK_TubularBitRecord_TubularCosts_CostId",
                        column: x => x.CostId,
                        principalTable: "TubularCosts",
                        principalColumn: "CostId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularBitRecord_TubularDiaBits_DiaBitId",
                        column: x => x.DiaBitId,
                        principalTable: "TubularDiaBits",
                        principalColumn: "DiaBitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularBitRecord_TubularDiaPassThrus_DiaPassThruId",
                        column: x => x.DiaPassThruId,
                        principalTable: "TubularDiaPassThrus",
                        principalColumn: "DiaPassThruId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularBitRecord_TubularDiaPilot_DiaPilotId",
                        column: x => x.DiaPilotId,
                        principalTable: "TubularDiaPilot",
                        principalColumn: "DiaPilotId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TubularBend",
                columns: table => new
                {
                    BendId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AngleId = table.Column<int>(nullable: true),
                    DistBendBotId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularBend", x => x.BendId);
                    table.ForeignKey(
                        name: "FK_TubularBend_TubularAngle_AngleId",
                        column: x => x.AngleId,
                        principalTable: "TubularAngle",
                        principalColumn: "AngleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularBend_TubularDistBendBot_DistBendBotId",
                        column: x => x.DistBendBotId,
                        principalTable: "TubularDistBendBot",
                        principalColumn: "DistBendBotId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TubularJar",
                columns: table => new
                {
                    JarId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ForUpSetId = table.Column<int>(nullable: true),
                    ForDownSetId = table.Column<int>(nullable: true),
                    ForUpTripId = table.Column<int>(nullable: true),
                    ForDownTripId = table.Column<int>(nullable: true),
                    ForPmpOpenId = table.Column<int>(nullable: true),
                    ForSealFricId = table.Column<int>(nullable: true),
                    TypeJar = table.Column<string>(nullable: true),
                    JarAction = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularJar", x => x.JarId);
                    table.ForeignKey(
                        name: "FK_TubularJar_TubularForDownSet_ForDownSetId",
                        column: x => x.ForDownSetId,
                        principalTable: "TubularForDownSet",
                        principalColumn: "ForDownSetId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularJar_TubularForDownTrip_ForDownTripId",
                        column: x => x.ForDownTripId,
                        principalTable: "TubularForDownTrip",
                        principalColumn: "ForDownTripId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularJar_TubularForPmpOpen_ForPmpOpenId",
                        column: x => x.ForPmpOpenId,
                        principalTable: "TubularForPmpOpen",
                        principalColumn: "ForPmpOpenId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularJar_TubularForSealFric_ForSealFricId",
                        column: x => x.ForSealFricId,
                        principalTable: "TubularForSealFric",
                        principalColumn: "ForSealFricId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularJar_TubularForUpSet_ForUpSetId",
                        column: x => x.ForUpSetId,
                        principalTable: "TubularForUpSet",
                        principalColumn: "ForUpSetId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularJar_TubularForUpTrip_ForUpTripId",
                        column: x => x.ForUpTripId,
                        principalTable: "TubularForUpTrip",
                        principalColumn: "ForUpTripId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TubularStabilizer",
                columns: table => new
                {
                    StabilizerId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LenBladeId = table.Column<int>(nullable: true),
                    OdBladeMxId = table.Column<int>(nullable: true),
                    OdBladeMnId = table.Column<int>(nullable: true),
                    DistBladeBotId = table.Column<int>(nullable: true),
                    ShapeBlade = table.Column<string>(nullable: true),
                    FactFric = table.Column<string>(nullable: true),
                    TypeBlade = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularStabilizer", x => x.StabilizerId);
                    table.ForeignKey(
                        name: "FK_TubularStabilizer_TubularDistBladeBot_DistBladeBotId",
                        column: x => x.DistBladeBotId,
                        principalTable: "TubularDistBladeBot",
                        principalColumn: "DistBladeBotId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularStabilizer_TubularLenBlade_LenBladeId",
                        column: x => x.LenBladeId,
                        principalTable: "TubularLenBlade",
                        principalColumn: "LenBladeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularStabilizer_TubularOdBladeMn_OdBladeMnId",
                        column: x => x.OdBladeMnId,
                        principalTable: "TubularOdBladeMn",
                        principalColumn: "OdBladeMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularStabilizer_TubularOdBladeMx_OdBladeMxId",
                        column: x => x.OdBladeMxId,
                        principalTable: "TubularOdBladeMx",
                        principalColumn: "OdBladeMxId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TubularMwdTool",
                columns: table => new
                {
                    MwdToolId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FlowrateMnId = table.Column<int>(nullable: true),
                    FlowrateMxId = table.Column<int>(nullable: true),
                    TempMxId = table.Column<int>(nullable: true),
                    IdEquvId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularMwdTool", x => x.MwdToolId);
                    table.ForeignKey(
                        name: "FK_TubularMwdTool_TubularFlowrateMn_FlowrateMnId",
                        column: x => x.FlowrateMnId,
                        principalTable: "TubularFlowrateMn",
                        principalColumn: "FlowrateMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularMwdTool_TubularFlowrateMx_FlowrateMxId",
                        column: x => x.FlowrateMxId,
                        principalTable: "TubularFlowrateMx",
                        principalColumn: "FlowrateMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularMwdTool_TubularIdEquv_IdEquvId",
                        column: x => x.IdEquvId,
                        principalTable: "TubularIdEquv",
                        principalColumn: "IdEquvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularMwdTool_TubularTempMx_TempMxId",
                        column: x => x.TempMxId,
                        principalTable: "TubularTempMx",
                        principalColumn: "TempMxId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TubularMotor",
                columns: table => new
                {
                    MotorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OffsetToolId = table.Column<int>(nullable: true),
                    PresLossFact = table.Column<string>(nullable: true),
                    FlowrateMnId = table.Column<int>(nullable: true),
                    FlowrateMxId = table.Column<int>(nullable: true),
                    DiaRotorNozzleId = table.Column<int>(nullable: true),
                    ClearanceBearBoxId = table.Column<int>(nullable: true),
                    LobesRotor = table.Column<string>(nullable: true),
                    LobesStator = table.Column<string>(nullable: true),
                    TypeBearing = table.Column<string>(nullable: true),
                    TempOpMxId = table.Column<int>(nullable: true),
                    RotorCatcher = table.Column<string>(nullable: true),
                    DumpValve = table.Column<string>(nullable: true),
                    DiaNozzleId = table.Column<int>(nullable: true),
                    Rotatable = table.Column<string>(nullable: true),
                    BendSettingsMnId = table.Column<int>(nullable: true),
                    BendSettingsMxId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularMotor", x => x.MotorId);
                    table.ForeignKey(
                        name: "FK_TubularMotor_TubularBendSettingsMn_BendSettingsMnId",
                        column: x => x.BendSettingsMnId,
                        principalTable: "TubularBendSettingsMn",
                        principalColumn: "BendSettingsMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularMotor_TubularBendSettingsMx_BendSettingsMxId",
                        column: x => x.BendSettingsMxId,
                        principalTable: "TubularBendSettingsMx",
                        principalColumn: "BendSettingsMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularMotor_TubularClearanceBearBox_ClearanceBearBoxId",
                        column: x => x.ClearanceBearBoxId,
                        principalTable: "TubularClearanceBearBox",
                        principalColumn: "ClearanceBearBoxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularMotor_TubularDiaNozzle_DiaNozzleId",
                        column: x => x.DiaNozzleId,
                        principalTable: "TubularDiaNozzle",
                        principalColumn: "DiaNozzleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularMotor_TubularDiaRotorNozzle_DiaRotorNozzleId",
                        column: x => x.DiaRotorNozzleId,
                        principalTable: "TubularDiaRotorNozzle",
                        principalColumn: "DiaRotorNozzleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularMotor_TubularFlowrateMn_FlowrateMnId",
                        column: x => x.FlowrateMnId,
                        principalTable: "TubularFlowrateMn",
                        principalColumn: "FlowrateMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularMotor_TubularFlowrateMx_FlowrateMxId",
                        column: x => x.FlowrateMxId,
                        principalTable: "TubularFlowrateMx",
                        principalColumn: "FlowrateMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularMotor_TubularOffsetTool_OffsetToolId",
                        column: x => x.OffsetToolId,
                        principalTable: "TubularOffsetTool",
                        principalColumn: "OffsetToolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularMotor_TubularTempOpMx_TempOpMxId",
                        column: x => x.TempOpMxId,
                        principalTable: "TubularTempOpMx",
                        principalColumn: "TempOpMxId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TubularConnection",
                columns: table => new
                {
                    ConnectionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IdTubularIdId = table.Column<int>(nullable: true),
                    OdId = table.Column<int>(nullable: true),
                    LenId = table.Column<int>(nullable: true),
                    TypeThread = table.Column<string>(nullable: true),
                    SizeThreadId = table.Column<int>(nullable: true),
                    TensYieldId = table.Column<int>(nullable: true),
                    TqYieldId = table.Column<int>(nullable: true),
                    Position = table.Column<string>(nullable: true),
                    CriticalCrossSectionId = table.Column<int>(nullable: true),
                    PresLeakId = table.Column<int>(nullable: true),
                    TqMakeupId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularConnection", x => x.ConnectionId);
                    table.ForeignKey(
                        name: "FK_TubularConnection_TubularCriticalCrossSection_CriticalCrossSectionId",
                        column: x => x.CriticalCrossSectionId,
                        principalTable: "TubularCriticalCrossSection",
                        principalColumn: "CriticalCrossSectionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularConnection_TubularId_IdTubularIdId",
                        column: x => x.IdTubularIdId,
                        principalTable: "TubularId",
                        principalColumn: "TubularIdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularConnection_TubularLen_LenId",
                        column: x => x.LenId,
                        principalTable: "TubularLen",
                        principalColumn: "LenId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularConnection_TubularOd_OdId",
                        column: x => x.OdId,
                        principalTable: "TubularOd",
                        principalColumn: "OdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularConnection_TubularPresLeak_PresLeakId",
                        column: x => x.PresLeakId,
                        principalTable: "TubularPresLeak",
                        principalColumn: "PresLeakId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularConnection_TubularSizeThread_SizeThreadId",
                        column: x => x.SizeThreadId,
                        principalTable: "TubularSizeThread",
                        principalColumn: "SizeThreadId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularConnection_TubularTensYield_TensYieldId",
                        column: x => x.TensYieldId,
                        principalTable: "TubularTensYield",
                        principalColumn: "TensYieldId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularConnection_TubularTqMakeup_TqMakeupId",
                        column: x => x.TqMakeupId,
                        principalTable: "TubularTqMakeup",
                        principalColumn: "TqMakeupId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularConnection_TubularTqYield_TqYieldId",
                        column: x => x.TqYieldId,
                        principalTable: "TubularTqYield",
                        principalColumn: "TqYieldId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometrySection",
                columns: table => new
                {
                    WbGeometrySectionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TypeHoleCasing = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomDiaDriftId = table.Column<int>(nullable: true),
                    TvdTopId = table.Column<int>(nullable: true),
                    TvdBottomId = table.Column<int>(nullable: true),
                    IdSectionId = table.Column<int>(nullable: true),
                    OdSectionId = table.Column<int>(nullable: true),
                    WtPerLenId = table.Column<int>(nullable: true),
                    Grade = table.Column<string>(nullable: true),
                    CurveConductor = table.Column<string>(nullable: true),
                    DiaDriftId = table.Column<int>(nullable: true),
                    FactFric = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometrySection", x => x.WbGeometrySectionId);
                    table.ForeignKey(
                        name: "FK_WbGeometrySection_WbGeometryDiaDrift_DiaDriftId",
                        column: x => x.DiaDriftId,
                        principalTable: "WbGeometryDiaDrift",
                        principalColumn: "DiaDriftId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WbGeometrySection_WbGeometryIdSection_IdSectionId",
                        column: x => x.IdSectionId,
                        principalTable: "WbGeometryIdSection",
                        principalColumn: "IdSectionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WbGeometrySection_WbGeometryMdBottom_MdBottomDiaDriftId",
                        column: x => x.MdBottomDiaDriftId,
                        principalTable: "WbGeometryMdBottom",
                        principalColumn: "DiaDriftId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WbGeometrySection_WbGeometryMdTop_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "WbGeometryMdTop",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WbGeometrySection_WbGeometryOdSection_OdSectionId",
                        column: x => x.OdSectionId,
                        principalTable: "WbGeometryOdSection",
                        principalColumn: "OdSectionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WbGeometrySection_WbGeometryTvdBottom_TvdBottomId",
                        column: x => x.TvdBottomId,
                        principalTable: "WbGeometryTvdBottom",
                        principalColumn: "TvdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WbGeometrySection_WbGeometryTvdTop_TvdTopId",
                        column: x => x.TvdTopId,
                        principalTable: "WbGeometryTvdTop",
                        principalColumn: "TvdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WbGeometrySection_WbGeometryWtPerLen_WtPerLenId",
                        column: x => x.WtPerLenId,
                        principalTable: "WbGeometryWtPerLen",
                        principalColumn: "WtPerLenId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WellBores",
                columns: table => new
                {
                    WellboreId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    Number = table.Column<string>(nullable: true),
                    SuffixAPI = table.Column<string>(nullable: true),
                    NumGovt = table.Column<string>(nullable: true),
                    StatusWellbore = table.Column<string>(nullable: true),
                    PurposeWellbore = table.Column<string>(nullable: true),
                    TypeWellbore = table.Column<string>(nullable: true),
                    Shape = table.Column<string>(nullable: true),
                    DTimKickoff = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    TvdId = table.Column<int>(nullable: true),
                    MdKickoffId = table.Column<int>(nullable: true),
                    TvdKickoffId = table.Column<int>(nullable: true),
                    MdPlannedId = table.Column<int>(nullable: true),
                    TvdPlannedId = table.Column<int>(nullable: true),
                    MdSubSeaPlannedId = table.Column<int>(nullable: true),
                    TvdSubSeaPlannedId = table.Column<int>(nullable: true),
                    DayTargetId = table.Column<int>(nullable: true),
                    CommonDataWellBoreCommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellBores", x => x.WellboreId);
                    table.ForeignKey(
                        name: "FK_WellBores_WellBoreCommonData_CommonDataWellBoreCommonDataId",
                        column: x => x.CommonDataWellBoreCommonDataId,
                        principalTable: "WellBoreCommonData",
                        principalColumn: "WellBoreCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellBores_WellboreDayTarget_DayTargetId",
                        column: x => x.DayTargetId,
                        principalTable: "WellboreDayTarget",
                        principalColumn: "DayTargetId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellBores_WellboreMd_MdId",
                        column: x => x.MdId,
                        principalTable: "WellboreMd",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellBores_WellboreMdKickoff_MdKickoffId",
                        column: x => x.MdKickoffId,
                        principalTable: "WellboreMdKickoff",
                        principalColumn: "MdKickoffId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellBores_WellboreMdPlanned_MdPlannedId",
                        column: x => x.MdPlannedId,
                        principalTable: "WellboreMdPlanned",
                        principalColumn: "MdPlannedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellBores_WellboreMdSubSeaPlanned_MdSubSeaPlannedId",
                        column: x => x.MdSubSeaPlannedId,
                        principalTable: "WellboreMdSubSeaPlanned",
                        principalColumn: "MdSubSeaPlannedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellBores_WellboreTvd_TvdId",
                        column: x => x.TvdId,
                        principalTable: "WellboreTvd",
                        principalColumn: "TvdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellBores_WellboreTvdKickoff_TvdKickoffId",
                        column: x => x.TvdKickoffId,
                        principalTable: "WellboreTvdKickoff",
                        principalColumn: "TvdKickoffId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellBores_WellboreTvdPlanned_TvdPlannedId",
                        column: x => x.TvdPlannedId,
                        principalTable: "WellboreTvdPlanned",
                        principalColumn: "TvdPlannedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellBores_WellboreTvdSubSeaPlanned_TvdSubSeaPlannedId",
                        column: x => x.TvdSubSeaPlannedId,
                        principalTable: "WellboreTvdSubSeaPlanned",
                        principalColumn: "TvdSubSeaPlannedId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WellCommonDatas",
                columns: table => new
                {
                    CommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTimCreation = table.Column<string>(nullable: true),
                    DTimLastChange = table.Column<string>(nullable: true),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true),
                    DefaultDatumId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellCommonDatas", x => x.CommonDataId);
                    table.ForeignKey(
                        name: "FK_WellCommonDatas_WellDefaultDatums_DefaultDatumId",
                        column: x => x.DefaultDatumId,
                        principalTable: "WellDefaultDatums",
                        principalColumn: "DefaultDatumId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WellLocalCRSs",
                columns: table => new
                {
                    LocalCRSId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UsesWellAsOrigin = table.Column<string>(nullable: true),
                    YAxisAzimuthId = table.Column<int>(nullable: true),
                    XRotationCounterClockwise = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellLocalCRSs", x => x.LocalCRSId);
                    table.ForeignKey(
                        name: "FK_WellLocalCRSs_WellYAxisAzimuths_YAxisAzimuthId",
                        column: x => x.YAxisAzimuthId,
                        principalTable: "WellYAxisAzimuths",
                        principalColumn: "YAxisAzimuthId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Bharuns",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    TubularUidRef = table.Column<string>(nullable: true),
                    DTimStart = table.Column<DateTime>(nullable: false),
                    DTimStop = table.Column<DateTime>(nullable: false),
                    DTimStartDrilling = table.Column<DateTime>(nullable: false),
                    DTimStopDrilling = table.Column<DateTime>(nullable: false),
                    PlanDoglegUom = table.Column<string>(nullable: true),
                    ActDoglegUom = table.Column<string>(nullable: true),
                    ActDoglegMxUom = table.Column<string>(nullable: true),
                    StatusBha = table.Column<string>(nullable: true),
                    NumBitRun = table.Column<int>(nullable: false),
                    NumStringRun = table.Column<int>(nullable: false),
                    ReasonTrip = table.Column<string>(nullable: true),
                    ObjectiveBha = table.Column<string>(nullable: true),
                    DrillingParamsUid = table.Column<string>(nullable: true),
                    CommonDataId = table.Column<int>(nullable: true),
                    UidWell = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Bharuns", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_Bharuns_BharunActDoglegMxs_ActDoglegMxUom",
                        column: x => x.ActDoglegMxUom,
                        principalTable: "BharunActDoglegMxs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Bharuns_BharunActDoglegs_ActDoglegUom",
                        column: x => x.ActDoglegUom,
                        principalTable: "BharunActDoglegs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Bharuns_BharunCommonDatas_CommonDataId",
                        column: x => x.CommonDataId,
                        principalTable: "BharunCommonDatas",
                        principalColumn: "CommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Bharuns_BharunDrillingParamss_DrillingParamsUid",
                        column: x => x.DrillingParamsUid,
                        principalTable: "BharunDrillingParamss",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Bharuns_BharunPlanDoglegs_PlanDoglegUom",
                        column: x => x.PlanDoglegUom,
                        principalTable: "BharunPlanDoglegs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Bharuns_BharunTubulars_TubularUidRef",
                        column: x => x.TubularUidRef,
                        principalTable: "BharunTubulars",
                        principalColumn: "UidRef",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CementJobCementingFluids",
                columns: table => new
                {
                    CementingFluidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FluidIndex = table.Column<int>(nullable: false),
                    TypeFluid = table.Column<string>(nullable: true),
                    DescFluid = table.Column<string>(nullable: true),
                    Purpose = table.Column<string>(nullable: true),
                    ClassSlurryDryBlend = table.Column<string>(nullable: true),
                    MdFluidTopId = table.Column<int>(nullable: true),
                    MdFluidBottomId = table.Column<int>(nullable: true),
                    SourceWater = table.Column<string>(nullable: true),
                    VolWaterId = table.Column<int>(nullable: true),
                    VolCementId = table.Column<int>(nullable: true),
                    RatioMixWaterId = table.Column<int>(nullable: true),
                    VolFluidId = table.Column<int>(nullable: true),
                    CementPumpScheduleId = table.Column<int>(nullable: true),
                    ExcessPcId = table.Column<int>(nullable: true),
                    VolYieldId = table.Column<int>(nullable: true),
                    DensityId = table.Column<int>(nullable: true),
                    SolidVolumeFractionId = table.Column<int>(nullable: true),
                    VolPumpedId = table.Column<int>(nullable: true),
                    VolOtherId = table.Column<int>(nullable: true),
                    FluidRheologicalModel = table.Column<string>(nullable: true),
                    VisId = table.Column<int>(nullable: true),
                    YpJobYpId = table.Column<int>(nullable: true),
                    NId = table.Column<int>(nullable: true),
                    KId = table.Column<int>(nullable: true),
                    Gel10SecReadingId = table.Column<int>(nullable: true),
                    Gel10SecStrengthId = table.Column<int>(nullable: true),
                    Gel1MinReadingId = table.Column<int>(nullable: true),
                    Gel1MinStrengthId = table.Column<int>(nullable: true),
                    Gel10MinReadingId = table.Column<int>(nullable: true),
                    Gel10MinStrengthId = table.Column<int>(nullable: true),
                    TypeBaseFluid = table.Column<string>(nullable: true),
                    DensBaseFluidId = table.Column<int>(nullable: true),
                    DryBlendName = table.Column<string>(nullable: true),
                    DryBlendDescription = table.Column<string>(nullable: true),
                    MassDryBlendId = table.Column<int>(nullable: true),
                    DensDryBlendId = table.Column<int>(nullable: true),
                    MassSackDryBlendId = table.Column<int>(nullable: true),
                    CementAdditiveId = table.Column<int>(nullable: true),
                    FoamUsed = table.Column<string>(nullable: true),
                    TypeGasFoam = table.Column<string>(nullable: true),
                    VolGasFoamId = table.Column<int>(nullable: true),
                    RatioConstGasMethodAvId = table.Column<int>(nullable: true),
                    DensConstGasMethodId = table.Column<int>(nullable: true),
                    RatioConstGasMethodStartId = table.Column<int>(nullable: true),
                    RatioConstGasMethodEndId = table.Column<int>(nullable: true),
                    DensConstGasFoamId = table.Column<int>(nullable: true),
                    ETimThickeningId = table.Column<int>(nullable: true),
                    TempThickeningId = table.Column<int>(nullable: true),
                    PresTestThickeningId = table.Column<int>(nullable: true),
                    ConsTestThickeningId = table.Column<int>(nullable: true),
                    PcFreeWaterId = table.Column<int>(nullable: true),
                    TempFreeWaterId = table.Column<int>(nullable: true),
                    VolTestFluidLossId = table.Column<int>(nullable: true),
                    TempFluidLossId = table.Column<int>(nullable: true),
                    PresTestFluidLossId = table.Column<int>(nullable: true),
                    TimeFluidLossId = table.Column<int>(nullable: true),
                    VolAPIFluidLossId = table.Column<int>(nullable: true),
                    ETimComprStren1Id = table.Column<int>(nullable: true),
                    ETimComprStren2Id = table.Column<int>(nullable: true),
                    PresComprStren1Id = table.Column<int>(nullable: true),
                    PresComprStren2Id = table.Column<int>(nullable: true),
                    TempComprStren1Id = table.Column<int>(nullable: true),
                    TempComprStren2Id = table.Column<int>(nullable: true),
                    DensAtPresId = table.Column<int>(nullable: true),
                    VolReservedId = table.Column<int>(nullable: true),
                    VolTotSlurryId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobCementingFluids", x => x.CementingFluidId);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobCementAdditives_CementAdditiveId",
                        column: x => x.CementAdditiveId,
                        principalTable: "CementJobCementAdditives",
                        principalColumn: "CementAdditiveId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobCementPumpSchedules_CementPumpScheduleId",
                        column: x => x.CementPumpScheduleId,
                        principalTable: "CementJobCementPumpSchedules",
                        principalColumn: "CementPumpScheduleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobConsTestThickenings_ConsTestThickeningId",
                        column: x => x.ConsTestThickeningId,
                        principalTable: "CementJobConsTestThickenings",
                        principalColumn: "ConsTestThickeningId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobDensAtPress_DensAtPresId",
                        column: x => x.DensAtPresId,
                        principalTable: "CementJobDensAtPress",
                        principalColumn: "DensAtPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobDensBaseFluids_DensBaseFluidId",
                        column: x => x.DensBaseFluidId,
                        principalTable: "CementJobDensBaseFluids",
                        principalColumn: "DensBaseFluidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobDensConstGasFoams_DensConstGasFoamId",
                        column: x => x.DensConstGasFoamId,
                        principalTable: "CementJobDensConstGasFoams",
                        principalColumn: "DensConstGasFoamId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobDensConstGasMethods_DensConstGasMethodId",
                        column: x => x.DensConstGasMethodId,
                        principalTable: "CementJobDensConstGasMethods",
                        principalColumn: "DensConstGasMethodId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobDensDryBlends_DensDryBlendId",
                        column: x => x.DensDryBlendId,
                        principalTable: "CementJobDensDryBlends",
                        principalColumn: "DensDryBlendId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobDensitys_DensityId",
                        column: x => x.DensityId,
                        principalTable: "CementJobDensitys",
                        principalColumn: "DensityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobETimComprStren1s_ETimComprStren1Id",
                        column: x => x.ETimComprStren1Id,
                        principalTable: "CementJobETimComprStren1s",
                        principalColumn: "ETimComprStren1Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobETimComprStren2s_ETimComprStren2Id",
                        column: x => x.ETimComprStren2Id,
                        principalTable: "CementJobETimComprStren2s",
                        principalColumn: "ETimComprStren2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobETimThickenings_ETimThickeningId",
                        column: x => x.ETimThickeningId,
                        principalTable: "CementJobETimThickenings",
                        principalColumn: "ETimThickeningId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobExcessPcs_ExcessPcId",
                        column: x => x.ExcessPcId,
                        principalTable: "CementJobExcessPcs",
                        principalColumn: "ExcessPcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobGel10MinReadings_Gel10MinReadingId",
                        column: x => x.Gel10MinReadingId,
                        principalTable: "CementJobGel10MinReadings",
                        principalColumn: "Gel10MinReadingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobGel10MinStrengths_Gel10MinStrengthId",
                        column: x => x.Gel10MinStrengthId,
                        principalTable: "CementJobGel10MinStrengths",
                        principalColumn: "Gel10MinStrengthId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobGel10SecReadings_Gel10SecReadingId",
                        column: x => x.Gel10SecReadingId,
                        principalTable: "CementJobGel10SecReadings",
                        principalColumn: "Gel10SecReadingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobGel10SecStrengths_Gel10SecStrengthId",
                        column: x => x.Gel10SecStrengthId,
                        principalTable: "CementJobGel10SecStrengths",
                        principalColumn: "Gel10SecStrengthId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobGel1MinReadings_Gel1MinReadingId",
                        column: x => x.Gel1MinReadingId,
                        principalTable: "CementJobGel1MinReadings",
                        principalColumn: "Gel1MinReadingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobGel1MinStrengths_Gel1MinStrengthId",
                        column: x => x.Gel1MinStrengthId,
                        principalTable: "CementJobGel1MinStrengths",
                        principalColumn: "Gel1MinStrengthId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobKs_KId",
                        column: x => x.KId,
                        principalTable: "CementJobKs",
                        principalColumn: "KId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobMassDryBlends_MassDryBlendId",
                        column: x => x.MassDryBlendId,
                        principalTable: "CementJobMassDryBlends",
                        principalColumn: "MassDryBlendId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobMassSackDryBlends_MassSackDryBlendId",
                        column: x => x.MassSackDryBlendId,
                        principalTable: "CementJobMassSackDryBlends",
                        principalColumn: "MassSackDryBlendId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobMdFluidBottoms_MdFluidBottomId",
                        column: x => x.MdFluidBottomId,
                        principalTable: "CementJobMdFluidBottoms",
                        principalColumn: "MdFluidBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobMdFluidTops_MdFluidTopId",
                        column: x => x.MdFluidTopId,
                        principalTable: "CementJobMdFluidTops",
                        principalColumn: "MdFluidTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobNs_NId",
                        column: x => x.NId,
                        principalTable: "CementJobNs",
                        principalColumn: "NId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobPcFreeWaters_PcFreeWaterId",
                        column: x => x.PcFreeWaterId,
                        principalTable: "CementJobPcFreeWaters",
                        principalColumn: "PcFreeWaterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobPresComprStren1s_PresComprStren1Id",
                        column: x => x.PresComprStren1Id,
                        principalTable: "CementJobPresComprStren1s",
                        principalColumn: "PresComprStren1Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobPresComprStren2s_PresComprStren2Id",
                        column: x => x.PresComprStren2Id,
                        principalTable: "CementJobPresComprStren2s",
                        principalColumn: "PresComprStren2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobPresTestFluidLosss_PresTestFluidLossId",
                        column: x => x.PresTestFluidLossId,
                        principalTable: "CementJobPresTestFluidLosss",
                        principalColumn: "PresTestFluidLossId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobPresTestThickenings_PresTestThickeningId",
                        column: x => x.PresTestThickeningId,
                        principalTable: "CementJobPresTestThickenings",
                        principalColumn: "PresTestThickeningId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobRatioConstGasMethodAvs_RatioConstGasMethodAvId",
                        column: x => x.RatioConstGasMethodAvId,
                        principalTable: "CementJobRatioConstGasMethodAvs",
                        principalColumn: "RatioConstGasMethodAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobRatioConstGasMethodEnds_RatioConstGasMethodEndId",
                        column: x => x.RatioConstGasMethodEndId,
                        principalTable: "CementJobRatioConstGasMethodEnds",
                        principalColumn: "RatioConstGasMethodEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobRatioConstGasMethodStarts_RatioConstGasMethodStartId",
                        column: x => x.RatioConstGasMethodStartId,
                        principalTable: "CementJobRatioConstGasMethodStarts",
                        principalColumn: "RatioConstGasMethodStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobRatioMixWaters_RatioMixWaterId",
                        column: x => x.RatioMixWaterId,
                        principalTable: "CementJobRatioMixWaters",
                        principalColumn: "RatioMixWaterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobSolidVolumeFractions_SolidVolumeFractionId",
                        column: x => x.SolidVolumeFractionId,
                        principalTable: "CementJobSolidVolumeFractions",
                        principalColumn: "SolidVolumeFractionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobTempComprStren1s_TempComprStren1Id",
                        column: x => x.TempComprStren1Id,
                        principalTable: "CementJobTempComprStren1s",
                        principalColumn: "TempComprStren1Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobTempComprStren2s_TempComprStren2Id",
                        column: x => x.TempComprStren2Id,
                        principalTable: "CementJobTempComprStren2s",
                        principalColumn: "TempComprStren2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobTempFluidLosss_TempFluidLossId",
                        column: x => x.TempFluidLossId,
                        principalTable: "CementJobTempFluidLosss",
                        principalColumn: "TempFluidLossId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobTempFreeWaters_TempFreeWaterId",
                        column: x => x.TempFreeWaterId,
                        principalTable: "CementJobTempFreeWaters",
                        principalColumn: "TempFreeWaterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobTempThickenings_TempThickeningId",
                        column: x => x.TempThickeningId,
                        principalTable: "CementJobTempThickenings",
                        principalColumn: "TempThickeningId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobTimeFluidLosss_TimeFluidLossId",
                        column: x => x.TimeFluidLossId,
                        principalTable: "CementJobTimeFluidLosss",
                        principalColumn: "TimeFluidLossId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobViss_VisId",
                        column: x => x.VisId,
                        principalTable: "CementJobViss",
                        principalColumn: "VisId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobVolAPIFluidLosss_VolAPIFluidLossId",
                        column: x => x.VolAPIFluidLossId,
                        principalTable: "CementJobVolAPIFluidLosss",
                        principalColumn: "VolAPIFluidLossId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobVolCements_VolCementId",
                        column: x => x.VolCementId,
                        principalTable: "CementJobVolCements",
                        principalColumn: "VolCementId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobVolFluids_VolFluidId",
                        column: x => x.VolFluidId,
                        principalTable: "CementJobVolFluids",
                        principalColumn: "VolFluidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobVolGasFoams_VolGasFoamId",
                        column: x => x.VolGasFoamId,
                        principalTable: "CementJobVolGasFoams",
                        principalColumn: "VolGasFoamId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobVolOthers_VolOtherId",
                        column: x => x.VolOtherId,
                        principalTable: "CementJobVolOthers",
                        principalColumn: "VolOtherId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobVolPumpeds_VolPumpedId",
                        column: x => x.VolPumpedId,
                        principalTable: "CementJobVolPumpeds",
                        principalColumn: "VolPumpedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobVolReserveds_VolReservedId",
                        column: x => x.VolReservedId,
                        principalTable: "CementJobVolReserveds",
                        principalColumn: "VolReservedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobVolTestFluidLosss_VolTestFluidLossId",
                        column: x => x.VolTestFluidLossId,
                        principalTable: "CementJobVolTestFluidLosss",
                        principalColumn: "VolTestFluidLossId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobVolTotSlurrys_VolTotSlurryId",
                        column: x => x.VolTotSlurryId,
                        principalTable: "CementJobVolTotSlurrys",
                        principalColumn: "VolTotSlurryId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobVolWaters_VolWaterId",
                        column: x => x.VolWaterId,
                        principalTable: "CementJobVolWaters",
                        principalColumn: "VolWaterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobVolYields_VolYieldId",
                        column: x => x.VolYieldId,
                        principalTable: "CementJobVolYields",
                        principalColumn: "VolYieldId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementingFluids_CementJobYps_YpJobYpId",
                        column: x => x.YpJobYpId,
                        principalTable: "CementJobYps",
                        principalColumn: "JobYpId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ChangeLogChangeHistory",
                columns: table => new
                {
                    ChangeHistoryId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTimChange = table.Column<string>(nullable: true),
                    ChangeType = table.Column<string>(nullable: true),
                    ChangeInfo = table.Column<string>(nullable: true),
                    StartIndexUom = table.Column<string>(nullable: true),
                    EndIndexUom = table.Column<string>(nullable: true),
                    Mnemonics = table.Column<string>(nullable: true),
                    ChangeLogUid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ChangeLogChangeHistory", x => x.ChangeHistoryId);
                    table.ForeignKey(
                        name: "FK_ChangeLogChangeHistory_ChangeLogs_ChangeLogUid",
                        column: x => x.ChangeLogUid,
                        principalTable: "ChangeLogs",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ChangeLogChangeHistory_ChangeLogEndIndexs_EndIndexUom",
                        column: x => x.EndIndexUom,
                        principalTable: "ChangeLogEndIndexs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ChangeLogChangeHistory_ChangeLogStartIndexs_StartIndexUom",
                        column: x => x.StartIndexUom,
                        principalTable: "ChangeLogStartIndexs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreQualifiers",
                columns: table => new
                {
                    QualifierId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    ConvCoreLithologyLithologyId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreQualifiers", x => x.QualifierId);
                    table.ForeignKey(
                        name: "FK_ConvCoreQualifiers_ConvCoreLithologys_ConvCoreLithologyLithologyId",
                        column: x => x.ConvCoreLithologyLithologyId,
                        principalTable: "ConvCoreLithologys",
                        principalColumn: "LithologyId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ConvCoreGeologyIntervals",
                columns: table => new
                {
                    GeologyIntervalId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TypeLithology = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomId = table.Column<int>(nullable: true),
                    DTim = table.Column<string>(nullable: true),
                    TvdTopId = table.Column<int>(nullable: true),
                    TvdBaseId = table.Column<int>(nullable: true),
                    RopAvId = table.Column<int>(nullable: true),
                    RopMnId = table.Column<int>(nullable: true),
                    RopMxId = table.Column<int>(nullable: true),
                    WobAvId = table.Column<int>(nullable: true),
                    TqAvId = table.Column<int>(nullable: true),
                    RpmAvId = table.Column<int>(nullable: true),
                    WtMudAvId = table.Column<int>(nullable: true),
                    EcdTdAvId = table.Column<int>(nullable: true),
                    DxcAv = table.Column<string>(nullable: true),
                    LithologyId = table.Column<int>(nullable: true),
                    ShowId = table.Column<int>(nullable: true),
                    ChromatographId = table.Column<int>(nullable: true),
                    MudGasId = table.Column<int>(nullable: true),
                    DensBulkId = table.Column<int>(nullable: true),
                    DensShaleId = table.Column<int>(nullable: true),
                    CalciteId = table.Column<int>(nullable: true),
                    DolomiteId = table.Column<int>(nullable: true),
                    CecId = table.Column<int>(nullable: true),
                    CalcStabId = table.Column<int>(nullable: true),
                    NameFormation = table.Column<string>(nullable: true),
                    Lithostratigraphic = table.Column<string>(nullable: true),
                    Chronostratigraphic = table.Column<string>(nullable: true),
                    SizeMnId = table.Column<int>(nullable: true),
                    SizeMxId = table.Column<int>(nullable: true),
                    LenPlugId = table.Column<int>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    CuttingFluid = table.Column<string>(nullable: true),
                    CleaningMethod = table.Column<string>(nullable: true),
                    DryingMethod = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCoreGeologyIntervals", x => x.GeologyIntervalId);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreCalcStabs_CalcStabId",
                        column: x => x.CalcStabId,
                        principalTable: "ConvCoreCalcStabs",
                        principalColumn: "CalcStabId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreCalcites_CalciteId",
                        column: x => x.CalciteId,
                        principalTable: "ConvCoreCalcites",
                        principalColumn: "CalciteId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreCecs_CecId",
                        column: x => x.CecId,
                        principalTable: "ConvCoreCecs",
                        principalColumn: "CecId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreChromatographs_ChromatographId",
                        column: x => x.ChromatographId,
                        principalTable: "ConvCoreChromatographs",
                        principalColumn: "ChromatographId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreDensBulks_DensBulkId",
                        column: x => x.DensBulkId,
                        principalTable: "ConvCoreDensBulks",
                        principalColumn: "DensBulkId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreDensShales_DensShaleId",
                        column: x => x.DensShaleId,
                        principalTable: "ConvCoreDensShales",
                        principalColumn: "DensShaleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreDolomites_DolomiteId",
                        column: x => x.DolomiteId,
                        principalTable: "ConvCoreDolomites",
                        principalColumn: "DolomiteId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreEcdTdAvs_EcdTdAvId",
                        column: x => x.EcdTdAvId,
                        principalTable: "ConvCoreEcdTdAvs",
                        principalColumn: "EcdTdAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreLenPlugs_LenPlugId",
                        column: x => x.LenPlugId,
                        principalTable: "ConvCoreLenPlugs",
                        principalColumn: "LenPlugId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreLithologys_LithologyId",
                        column: x => x.LithologyId,
                        principalTable: "ConvCoreLithologys",
                        principalColumn: "LithologyId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreMdBottoms_MdBottomId",
                        column: x => x.MdBottomId,
                        principalTable: "ConvCoreMdBottoms",
                        principalColumn: "MdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreMdTops_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "ConvCoreMdTops",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreMudGass_MudGasId",
                        column: x => x.MudGasId,
                        principalTable: "ConvCoreMudGass",
                        principalColumn: "MudGasId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreRopAvs_RopAvId",
                        column: x => x.RopAvId,
                        principalTable: "ConvCoreRopAvs",
                        principalColumn: "RopAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreRopMns_RopMnId",
                        column: x => x.RopMnId,
                        principalTable: "ConvCoreRopMns",
                        principalColumn: "RopMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreRopMxs_RopMxId",
                        column: x => x.RopMxId,
                        principalTable: "ConvCoreRopMxs",
                        principalColumn: "RopMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreRpmAvs_RpmAvId",
                        column: x => x.RpmAvId,
                        principalTable: "ConvCoreRpmAvs",
                        principalColumn: "RpmAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreShows_ShowId",
                        column: x => x.ShowId,
                        principalTable: "ConvCoreShows",
                        principalColumn: "ShowId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreSizeMns_SizeMnId",
                        column: x => x.SizeMnId,
                        principalTable: "ConvCoreSizeMns",
                        principalColumn: "SizeMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreSizeMxs_SizeMxId",
                        column: x => x.SizeMxId,
                        principalTable: "ConvCoreSizeMxs",
                        principalColumn: "SizeMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreTqAvs_TqAvId",
                        column: x => x.TqAvId,
                        principalTable: "ConvCoreTqAvs",
                        principalColumn: "TqAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreTvdBases_TvdBaseId",
                        column: x => x.TvdBaseId,
                        principalTable: "ConvCoreTvdBases",
                        principalColumn: "TvdBaseId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreTvdTops_TvdTopId",
                        column: x => x.TvdTopId,
                        principalTable: "ConvCoreTvdTops",
                        principalColumn: "TvdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreWobAvs_WobAvId",
                        column: x => x.WobAvId,
                        principalTable: "ConvCoreWobAvs",
                        principalColumn: "WobAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCoreGeologyIntervals_ConvCoreWtMudAvs_WtMudAvId",
                        column: x => x.WtMudAvId,
                        principalTable: "ConvCoreWtMudAvs",
                        principalColumn: "WtMudAvId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemEllipsoid",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    Description = table.Column<string>(nullable: true),
                    IdentifierCodeSpace = table.Column<string>(nullable: true),
                    SemiMajorAxisUom = table.Column<string>(nullable: true),
                    SecondDefiningParameterId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemEllipsoid", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemEllipsoid_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                        column: x => x.IdentifierCodeSpace,
                        principalTable: "CoordinateReferenceSystemIdentifier",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemEllipsoid_CoordinateReferenceSystemSecondDefiningParameter_SecondDefiningParameterId",
                        column: x => x.SecondDefiningParameterId,
                        principalTable: "CoordinateReferenceSystemSecondDefiningParameter",
                        principalColumn: "SecondDefiningParameterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemEllipsoid_CoordinateReferenceSystemSemiMajorAxis_SemiMajorAxisUom",
                        column: x => x.SemiMajorAxisUom,
                        principalTable: "CoordinateReferenceSystemSemiMajorAxis",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReportRheometer",
                columns: table => new
                {
                    RheometerId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TempRheomId = table.Column<int>(nullable: true),
                    PresRheomId = table.Column<int>(nullable: true),
                    Vis3Rpm = table.Column<string>(nullable: true),
                    Vis6Rpm = table.Column<string>(nullable: true),
                    Vis100Rpm = table.Column<string>(nullable: true),
                    Vis200Rpm = table.Column<string>(nullable: true),
                    Vis300Rpm = table.Column<string>(nullable: true),
                    Vis600Rpm = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    FluidsReportFluidUid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReportRheometer", x => x.RheometerId);
                    table.ForeignKey(
                        name: "FK_FluidsReportRheometer_FluidsReportFluid_FluidsReportFluidUid",
                        column: x => x.FluidsReportFluidUid,
                        principalTable: "FluidsReportFluid",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportRheometer_FluidsReportPresRheom_PresRheomId",
                        column: x => x.PresRheomId,
                        principalTable: "FluidsReportPresRheom",
                        principalColumn: "PresRheomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReportRheometer_FluidsReportTempRheom_TempRheomId",
                        column: x => x.TempRheomId,
                        principalTable: "FluidsReportTempRheom",
                        principalColumn: "TempRheomId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FluidsReports",
                columns: table => new
                {
                    FluidsReportId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    DTim = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    TvdId = table.Column<int>(nullable: true),
                    NumReport = table.Column<string>(nullable: true),
                    FluidUid = table.Column<string>(nullable: true),
                    CommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FluidsReports", x => x.FluidsReportId);
                    table.ForeignKey(
                        name: "FK_FluidsReports_FluidsReportCommonDatas_CommonDataId",
                        column: x => x.CommonDataId,
                        principalTable: "FluidsReportCommonDatas",
                        principalColumn: "CommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReports_FluidsReportFluid_FluidUid",
                        column: x => x.FluidUid,
                        principalTable: "FluidsReportFluid",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReports_FluidsReportMd_MdId",
                        column: x => x.MdId,
                        principalTable: "FluidsReportMd",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FluidsReports_FluidsReportTvd_TvdId",
                        column: x => x.TvdId,
                        principalTable: "FluidsReportTvd",
                        principalColumn: "TvdId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LogCurveInfos",
                columns: table => new
                {
                    LogCurveInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Mnemonic = table.Column<string>(nullable: true),
                    ClassWitsml = table.Column<string>(nullable: true),
                    Unit = table.Column<string>(nullable: true),
                    MnemAlias = table.Column<string>(nullable: true),
                    NullValue = table.Column<string>(nullable: true),
                    MinIndexId = table.Column<int>(nullable: true),
                    MaxIndexId = table.Column<int>(nullable: true),
                    CurveDescription = table.Column<string>(nullable: true),
                    SensorOffsetId = table.Column<int>(nullable: true),
                    TraceState = table.Column<string>(nullable: true),
                    TypeLogData = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    LogId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogCurveInfos", x => x.LogCurveInfoId);
                    table.ForeignKey(
                        name: "FK_LogCurveInfos_Logs_LogId",
                        column: x => x.LogId,
                        principalTable: "Logs",
                        principalColumn: "LogId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LogCurveInfos_LogMaxIndexs_MaxIndexId",
                        column: x => x.MaxIndexId,
                        principalTable: "LogMaxIndexs",
                        principalColumn: "MaxIndexId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LogCurveInfos_LogMinIndexs_MinIndexId",
                        column: x => x.MinIndexId,
                        principalTable: "LogMinIndexs",
                        principalColumn: "MinIndexId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LogCurveInfos_LogSensorOffsets_SensorOffsetId",
                        column: x => x.SensorOffsetId,
                        principalTable: "LogSensorOffsets",
                        principalColumn: "SensorOffsetId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LogParams",
                columns: table => new
                {
                    LogParamId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uid = table.Column<string>(nullable: true),
                    Uom = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    Index = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true),
                    LogId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogParams", x => x.LogParamId);
                    table.ForeignKey(
                        name: "FK_LogParams_Logs_LogId",
                        column: x => x.LogId,
                        principalTable: "Logs",
                        principalColumn: "LogId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MudLogLithology",
                columns: table => new
                {
                    LithologyId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Color = table.Column<string>(nullable: true),
                    Texture = table.Column<string>(nullable: true),
                    Hardness = table.Column<string>(nullable: true),
                    SizeGrain = table.Column<string>(nullable: true),
                    Roundness = table.Column<string>(nullable: true),
                    Sorting = table.Column<string>(nullable: true),
                    MatrixCement = table.Column<string>(nullable: true),
                    PorosityVisible = table.Column<string>(nullable: true),
                    Permeability = table.Column<string>(nullable: true),
                    DensShaleId = table.Column<int>(nullable: true),
                    QualifierId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogLithology", x => x.LithologyId);
                    table.ForeignKey(
                        name: "FK_MudLogLithology_MudLogDensShale_DensShaleId",
                        column: x => x.DensShaleId,
                        principalTable: "MudLogDensShale",
                        principalColumn: "DensShaleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogLithology_MudLogQualifier_QualifierId",
                        column: x => x.QualifierId,
                        principalTable: "MudLogQualifier",
                        principalColumn: "QualifierId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupCommonDatas",
                columns: table => new
                {
                    ObjectGroupCommonDataId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SourceName = table.Column<string>(nullable: true),
                    DTimCreation = table.Column<string>(nullable: true),
                    DTimLastChange = table.Column<string>(nullable: true),
                    ItemState = table.Column<string>(nullable: true),
                    ServiceCategory = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true),
                    AcquisitionTimeZoneId = table.Column<int>(nullable: true),
                    DefaultDatumId = table.Column<int>(nullable: true),
                    PrivateGroupOnly = table.Column<string>(nullable: true),
                    ExtensionAny = table.Column<string>(nullable: true),
                    ExtensionNameValueId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupCommonDatas", x => x.ObjectGroupCommonDataId);
                    table.ForeignKey(
                        name: "FK_ObjectGroupCommonDatas_ObjectGroupAcquisitionTimeZones_AcquisitionTimeZoneId",
                        column: x => x.AcquisitionTimeZoneId,
                        principalTable: "ObjectGroupAcquisitionTimeZones",
                        principalColumn: "AcquisitionTimeZoneId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroupCommonDatas_ObjectGroupDefaultDatum_DefaultDatumId",
                        column: x => x.DefaultDatumId,
                        principalTable: "ObjectGroupDefaultDatum",
                        principalColumn: "DefaultDatumId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroupCommonDatas_ObjectGroupExtensionNameValues_ExtensionNameValueId",
                        column: x => x.ExtensionNameValueId,
                        principalTable: "ObjectGroupExtensionNameValues",
                        principalColumn: "ExtensionNameValueId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroupMemberObjects",
                columns: table => new
                {
                    MemberObjectId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ObjectReferenceId = table.Column<int>(nullable: true),
                    IndexType = table.Column<string>(nullable: true),
                    Sequence1Id = table.Column<int>(nullable: true),
                    Sequence2Id = table.Column<int>(nullable: true),
                    Sequence3Id = table.Column<int>(nullable: true),
                    RangeMinId = table.Column<int>(nullable: true),
                    RangeMaxId = table.Column<int>(nullable: true),
                    RangeDateTimeMin = table.Column<string>(nullable: true),
                    RangeDateTimeMax = table.Column<string>(nullable: true),
                    MnemonicList = table.Column<string>(nullable: true),
                    ReferenceDepthId = table.Column<int>(nullable: true),
                    ReferenceDateTime = table.Column<string>(nullable: true),
                    ParamId = table.Column<int>(nullable: true),
                    ExtensionNameValueId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroupMemberObjects", x => x.MemberObjectId);
                    table.ForeignKey(
                        name: "FK_ObjectGroupMemberObjects_ObjectGroupExtensionNameValues_ExtensionNameValueId",
                        column: x => x.ExtensionNameValueId,
                        principalTable: "ObjectGroupExtensionNameValues",
                        principalColumn: "ExtensionNameValueId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroupMemberObjects_ObjectGroupObjectReference_ObjectReferenceId",
                        column: x => x.ObjectReferenceId,
                        principalTable: "ObjectGroupObjectReference",
                        principalColumn: "ObjectReferenceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroupMemberObjects_ObjectGroupParam_ParamId",
                        column: x => x.ParamId,
                        principalTable: "ObjectGroupParam",
                        principalColumn: "ParamId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroupMemberObjects_ObjectGroupRangeMaxs_RangeMaxId",
                        column: x => x.RangeMaxId,
                        principalTable: "ObjectGroupRangeMaxs",
                        principalColumn: "RangeMaxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroupMemberObjects_ObjectGroupRangeMins_RangeMinId",
                        column: x => x.RangeMinId,
                        principalTable: "ObjectGroupRangeMins",
                        principalColumn: "RangeMinId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroupMemberObjects_ObjectGroupReferenceDepths_ReferenceDepthId",
                        column: x => x.ReferenceDepthId,
                        principalTable: "ObjectGroupReferenceDepths",
                        principalColumn: "ReferenceDepthId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroupMemberObjects_ObjectGroupSequence1s_Sequence1Id",
                        column: x => x.Sequence1Id,
                        principalTable: "ObjectGroupSequence1s",
                        principalColumn: "Sequence1Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroupMemberObjects_ObjectGroupSequence2s_Sequence2Id",
                        column: x => x.Sequence2Id,
                        principalTable: "ObjectGroupSequence2s",
                        principalColumn: "Sequence2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroupMemberObjects_ObjectGroupSequence3s_Sequence3Id",
                        column: x => x.Sequence3Id,
                        principalTable: "ObjectGroupSequence3s",
                        principalColumn: "Sequence3Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportHses",
                columns: table => new
                {
                    HseId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DaysIncFreeId = table.Column<int>(nullable: true),
                    IncidentId = table.Column<int>(nullable: true),
                    LastCsgPresTest = table.Column<string>(nullable: true),
                    PresLastCsgId = table.Column<int>(nullable: true),
                    LastBopPresTest = table.Column<string>(nullable: true),
                    NextBopPresTest = table.Column<string>(nullable: true),
                    PresStdPipeId = table.Column<int>(nullable: true),
                    PresKellyHoseId = table.Column<int>(nullable: true),
                    PresDiverterId = table.Column<int>(nullable: true),
                    PresAnnularId = table.Column<int>(nullable: true),
                    PresRamsId = table.Column<int>(nullable: true),
                    PresChokeLineId = table.Column<int>(nullable: true),
                    PresChokeManId = table.Column<int>(nullable: true),
                    LastFireBoatDrill = table.Column<string>(nullable: true),
                    LastAbandonDrill = table.Column<string>(nullable: true),
                    LastRigInspection = table.Column<string>(nullable: true),
                    LastSafetyMeeting = table.Column<string>(nullable: true),
                    LastSafetyInspection = table.Column<string>(nullable: true),
                    LastTripDrill = table.Column<string>(nullable: true),
                    LastDiverterDrill = table.Column<string>(nullable: true),
                    LastBopDrill = table.Column<string>(nullable: true),
                    RegAgencyInsp = table.Column<string>(nullable: true),
                    NonComplianceIssued = table.Column<string>(nullable: true),
                    NumStopCards = table.Column<string>(nullable: true),
                    FluidDischargedId = table.Column<int>(nullable: true),
                    VolCtgDischargedId = table.Column<int>(nullable: true),
                    VolOilCtgDischargeId = table.Column<int>(nullable: true),
                    WasteDischargedId = table.Column<int>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportHses", x => x.HseId);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportDaysIncFrees_DaysIncFreeId",
                        column: x => x.DaysIncFreeId,
                        principalTable: "OpsReportDaysIncFrees",
                        principalColumn: "DaysIncFreeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportFluidDischargeds_FluidDischargedId",
                        column: x => x.FluidDischargedId,
                        principalTable: "OpsReportFluidDischargeds",
                        principalColumn: "FluidDischargedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportIncidents_IncidentId",
                        column: x => x.IncidentId,
                        principalTable: "OpsReportIncidents",
                        principalColumn: "IncidentId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportPresAnnulars_PresAnnularId",
                        column: x => x.PresAnnularId,
                        principalTable: "OpsReportPresAnnulars",
                        principalColumn: "PresAnnularId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportPresChokeLines_PresChokeLineId",
                        column: x => x.PresChokeLineId,
                        principalTable: "OpsReportPresChokeLines",
                        principalColumn: "PresChokeLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportPresChokeMans_PresChokeManId",
                        column: x => x.PresChokeManId,
                        principalTable: "OpsReportPresChokeMans",
                        principalColumn: "PresChokeManId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportPresDiverters_PresDiverterId",
                        column: x => x.PresDiverterId,
                        principalTable: "OpsReportPresDiverters",
                        principalColumn: "PresDiverterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportPresKellyHoses_PresKellyHoseId",
                        column: x => x.PresKellyHoseId,
                        principalTable: "OpsReportPresKellyHoses",
                        principalColumn: "PresKellyHoseId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportPresLastCsgs_PresLastCsgId",
                        column: x => x.PresLastCsgId,
                        principalTable: "OpsReportPresLastCsgs",
                        principalColumn: "PresLastCsgId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportPresRamss_PresRamsId",
                        column: x => x.PresRamsId,
                        principalTable: "OpsReportPresRamss",
                        principalColumn: "PresRamsId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportPresStdPipes_PresStdPipeId",
                        column: x => x.PresStdPipeId,
                        principalTable: "OpsReportPresStdPipes",
                        principalColumn: "PresStdPipeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportVolCtgDischargeds_VolCtgDischargedId",
                        column: x => x.VolCtgDischargedId,
                        principalTable: "OpsReportVolCtgDischargeds",
                        principalColumn: "VolCtgDischargedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportVolOilCtgDischarges_VolOilCtgDischargeId",
                        column: x => x.VolOilCtgDischargeId,
                        principalTable: "OpsReportVolOilCtgDischarges",
                        principalColumn: "VolOilCtgDischargeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportHses_OpsReportWasteDischargeds_WasteDischargedId",
                        column: x => x.WasteDischargedId,
                        principalTable: "OpsReportWasteDischargeds",
                        principalColumn: "WasteDischargedId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportShakerOps",
                columns: table => new
                {
                    ShakerOpId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShakerId = table.Column<int>(nullable: true),
                    MdHoleId = table.Column<int>(nullable: true),
                    DTim = table.Column<string>(nullable: true),
                    HoursRunId = table.Column<int>(nullable: true),
                    PcScreenCoveredId = table.Column<int>(nullable: true),
                    ShakerScreenId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportShakerOps", x => x.ShakerOpId);
                    table.ForeignKey(
                        name: "FK_OpsReportShakerOps_OpsReportHoursRuns_HoursRunId",
                        column: x => x.HoursRunId,
                        principalTable: "OpsReportHoursRuns",
                        principalColumn: "HoursRunId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportShakerOps_OpsReportMdHoles_MdHoleId",
                        column: x => x.MdHoleId,
                        principalTable: "OpsReportMdHoles",
                        principalColumn: "MdHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportShakerOps_OpsReportPcScreenCovereds_PcScreenCoveredId",
                        column: x => x.PcScreenCoveredId,
                        principalTable: "OpsReportPcScreenCovereds",
                        principalColumn: "PcScreenCoveredId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportShakerOps_OpsReportShakers_ShakerId",
                        column: x => x.ShakerId,
                        principalTable: "OpsReportShakers",
                        principalColumn: "ShakerId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportShakerOps_OpsReportShakerScreens_ShakerScreenId",
                        column: x => x.ShakerScreenId,
                        principalTable: "OpsReportShakerScreens",
                        principalColumn: "ShakerScreenId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportAnchorAngles",
                columns: table => new
                {
                    AnchorAngleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    Index = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true),
                    OpsReportRigResponseRigResponseId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportAnchorAngles", x => x.AnchorAngleId);
                    table.ForeignKey(
                        name: "FK_OpsReportAnchorAngles_OpsReportRigResponses_OpsReportRigResponseRigResponseId",
                        column: x => x.OpsReportRigResponseRigResponseId,
                        principalTable: "OpsReportRigResponses",
                        principalColumn: "RigResponseId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportAnchorTensions",
                columns: table => new
                {
                    AnchorTensionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uom = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    Index = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true),
                    OpsReportRigResponseRigResponseId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportAnchorTensions", x => x.AnchorTensionId);
                    table.ForeignKey(
                        name: "FK_OpsReportAnchorTensions_OpsReportRigResponses_OpsReportRigResponseRigResponseId",
                        column: x => x.OpsReportRigResponseRigResponseId,
                        principalTable: "OpsReportRigResponses",
                        principalColumn: "RigResponseId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportTrajectoryStations",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    DTimStn = table.Column<string>(nullable: true),
                    TypeTrajStation = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    TvdId = table.Column<int>(nullable: true),
                    InclId = table.Column<int>(nullable: true),
                    AziId = table.Column<int>(nullable: true),
                    MtfId = table.Column<int>(nullable: true),
                    GtfId = table.Column<int>(nullable: true),
                    DispNsId = table.Column<int>(nullable: true),
                    DispEwId = table.Column<int>(nullable: true),
                    VertSectId = table.Column<int>(nullable: true),
                    DlsId = table.Column<int>(nullable: true),
                    RateTurnId = table.Column<int>(nullable: true),
                    RateBuildId = table.Column<int>(nullable: true),
                    MdDeltaId = table.Column<int>(nullable: true),
                    TvdDeltaId = table.Column<int>(nullable: true),
                    ModelToolError = table.Column<string>(nullable: true),
                    GravTotalUncertId = table.Column<int>(nullable: true),
                    DipAngleUncertId = table.Column<int>(nullable: true),
                    MagTotalUncertId = table.Column<int>(nullable: true),
                    GravAccelCorUsed = table.Column<string>(nullable: true),
                    MagXAxialCorUsed = table.Column<string>(nullable: true),
                    SagCorUsed = table.Column<string>(nullable: true),
                    MagDrlstrCorUsed = table.Column<string>(nullable: true),
                    StatusTrajStation = table.Column<string>(nullable: true),
                    RawDataId = table.Column<int>(nullable: true),
                    CorUsedId = table.Column<int>(nullable: true),
                    ValidId = table.Column<int>(nullable: true),
                    MatrixCovId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportTrajectoryStations", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportAzis_AziId",
                        column: x => x.AziId,
                        principalTable: "OpsReportAzis",
                        principalColumn: "AziId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportCorUseds_CorUsedId",
                        column: x => x.CorUsedId,
                        principalTable: "OpsReportCorUseds",
                        principalColumn: "CorUsedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportDipAngleUncerts_DipAngleUncertId",
                        column: x => x.DipAngleUncertId,
                        principalTable: "OpsReportDipAngleUncerts",
                        principalColumn: "DipAngleUncertId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportDispEws_DispEwId",
                        column: x => x.DispEwId,
                        principalTable: "OpsReportDispEws",
                        principalColumn: "DispEwId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportDispNss_DispNsId",
                        column: x => x.DispNsId,
                        principalTable: "OpsReportDispNss",
                        principalColumn: "DispNsId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportDlss_DlsId",
                        column: x => x.DlsId,
                        principalTable: "OpsReportDlss",
                        principalColumn: "DlsId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportGravTotalUncerts_GravTotalUncertId",
                        column: x => x.GravTotalUncertId,
                        principalTable: "OpsReportGravTotalUncerts",
                        principalColumn: "GravTotalUncertId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportGtfs_GtfId",
                        column: x => x.GtfId,
                        principalTable: "OpsReportGtfs",
                        principalColumn: "GtfId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportIncls_InclId",
                        column: x => x.InclId,
                        principalTable: "OpsReportIncls",
                        principalColumn: "InclId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportMagTotalUncerts_MagTotalUncertId",
                        column: x => x.MagTotalUncertId,
                        principalTable: "OpsReportMagTotalUncerts",
                        principalColumn: "MagTotalUncertId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportMatrixCovs_MatrixCovId",
                        column: x => x.MatrixCovId,
                        principalTable: "OpsReportMatrixCovs",
                        principalColumn: "MatrixCovId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportMdDeltas_MdDeltaId",
                        column: x => x.MdDeltaId,
                        principalTable: "OpsReportMdDeltas",
                        principalColumn: "MdDeltaId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportMds_MdId",
                        column: x => x.MdId,
                        principalTable: "OpsReportMds",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportMtfs_MtfId",
                        column: x => x.MtfId,
                        principalTable: "OpsReportMtfs",
                        principalColumn: "MtfId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportRateBuilds_RateBuildId",
                        column: x => x.RateBuildId,
                        principalTable: "OpsReportRateBuilds",
                        principalColumn: "RateBuildId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportRateTurns_RateTurnId",
                        column: x => x.RateTurnId,
                        principalTable: "OpsReportRateTurns",
                        principalColumn: "RateTurnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportRawDatas_RawDataId",
                        column: x => x.RawDataId,
                        principalTable: "OpsReportRawDatas",
                        principalColumn: "RawDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportTvdDeltas_TvdDeltaId",
                        column: x => x.TvdDeltaId,
                        principalTable: "OpsReportTvdDeltas",
                        principalColumn: "TvdDeltaId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportTvds_TvdId",
                        column: x => x.TvdId,
                        principalTable: "OpsReportTvds",
                        principalColumn: "TvdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportValids_ValidId",
                        column: x => x.ValidId,
                        principalTable: "OpsReportValids",
                        principalColumn: "ValidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportTrajectoryStations_OpsReportVertSects_VertSectId",
                        column: x => x.VertSectId,
                        principalTable: "OpsReportVertSects",
                        principalColumn: "VertSectId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportMudVolumes",
                columns: table => new
                {
                    MudVolumeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VolTotMudStartId = table.Column<int>(nullable: true),
                    VolMudDumpedId = table.Column<int>(nullable: true),
                    VolMudReceivedId = table.Column<int>(nullable: true),
                    VolMudReturnedId = table.Column<int>(nullable: true),
                    MudLossesId = table.Column<int>(nullable: true),
                    VolMudBuiltId = table.Column<int>(nullable: true),
                    VolMudStringId = table.Column<int>(nullable: true),
                    VolMudCasingId = table.Column<int>(nullable: true),
                    VolMudHoleId = table.Column<int>(nullable: true),
                    VolMudRiserId = table.Column<int>(nullable: true),
                    VolTotMudEndId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportMudVolumes", x => x.MudVolumeId);
                    table.ForeignKey(
                        name: "FK_OpsReportMudVolumes_OpsReportMudLossess_MudLossesId",
                        column: x => x.MudLossesId,
                        principalTable: "OpsReportMudLossess",
                        principalColumn: "MudLossesId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudVolumes_OpsReportVolMudBuilts_VolMudBuiltId",
                        column: x => x.VolMudBuiltId,
                        principalTable: "OpsReportVolMudBuilts",
                        principalColumn: "VolMudBuiltId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudVolumes_OpsReportVolMudCasings_VolMudCasingId",
                        column: x => x.VolMudCasingId,
                        principalTable: "OpsReportVolMudCasings",
                        principalColumn: "VolMudCasingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudVolumes_OpsReportVolMudDumpeds_VolMudDumpedId",
                        column: x => x.VolMudDumpedId,
                        principalTable: "OpsReportVolMudDumpeds",
                        principalColumn: "VolMudDumpedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudVolumes_OpsReportVolMudHoles_VolMudHoleId",
                        column: x => x.VolMudHoleId,
                        principalTable: "OpsReportVolMudHoles",
                        principalColumn: "VolMudHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudVolumes_OpsReportVolMudReceiveds_VolMudReceivedId",
                        column: x => x.VolMudReceivedId,
                        principalTable: "OpsReportVolMudReceiveds",
                        principalColumn: "VolMudReceivedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudVolumes_OpsReportVolMudReturneds_VolMudReturnedId",
                        column: x => x.VolMudReturnedId,
                        principalTable: "OpsReportVolMudReturneds",
                        principalColumn: "VolMudReturnedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudVolumes_OpsReportVolMudRisers_VolMudRiserId",
                        column: x => x.VolMudRiserId,
                        principalTable: "OpsReportVolMudRisers",
                        principalColumn: "VolMudRiserId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudVolumes_OpsReportVolMudStrings_VolMudStringId",
                        column: x => x.VolMudStringId,
                        principalTable: "OpsReportVolMudStrings",
                        principalColumn: "VolMudStringId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudVolumes_OpsReportVolTotMudEnds_VolTotMudEndId",
                        column: x => x.VolTotMudEndId,
                        principalTable: "OpsReportVolTotMudEnds",
                        principalColumn: "VolTotMudEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportMudVolumes_OpsReportVolTotMudStarts_VolTotMudStartId",
                        column: x => x.VolTotMudStartId,
                        principalTable: "OpsReportVolTotMudStarts",
                        principalColumn: "VolTotMudStartId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportRheometers",
                columns: table => new
                {
                    RheometerId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TempRheomId = table.Column<int>(nullable: true),
                    PresRheomId = table.Column<int>(nullable: true),
                    Vis3Rpm = table.Column<string>(nullable: true),
                    Vis6Rpm = table.Column<string>(nullable: true),
                    Vis100Rpm = table.Column<string>(nullable: true),
                    Vis200Rpm = table.Column<string>(nullable: true),
                    Vis300Rpm = table.Column<string>(nullable: true),
                    Vis600Rpm = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    OpsReportFluidUid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportRheometers", x => x.RheometerId);
                    table.ForeignKey(
                        name: "FK_OpsReportRheometers_OpsReportFluids_OpsReportFluidUid",
                        column: x => x.OpsReportFluidUid,
                        principalTable: "OpsReportFluids",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRheometers_OpsReportPresRheoms_PresRheomId",
                        column: x => x.PresRheomId,
                        principalTable: "OpsReportPresRheoms",
                        principalColumn: "PresRheomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportRheometers_OpsReportTempRheoms_TempRheomId",
                        column: x => x.TempRheomId,
                        principalTable: "OpsReportTempRheoms",
                        principalColumn: "TempRheomId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RigBopComponents",
                columns: table => new
                {
                    BopComponentId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TypeBopComp = table.Column<string>(nullable: true),
                    DescComp = table.Column<string>(nullable: true),
                    IdPassThruId = table.Column<int>(nullable: true),
                    PresWorkId = table.Column<int>(nullable: true),
                    DiaCloseMnId = table.Column<int>(nullable: true),
                    DiaCloseMxId = table.Column<int>(nullable: true),
                    Nomenclature = table.Column<string>(nullable: true),
                    IsVariable = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    RigBopBopId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RigBopComponents", x => x.BopComponentId);
                    table.ForeignKey(
                        name: "FK_RigBopComponents_RigDiaCloseMns_DiaCloseMnId",
                        column: x => x.DiaCloseMnId,
                        principalTable: "RigDiaCloseMns",
                        principalColumn: "DiaCloseMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBopComponents_RigDiaCloseMxs_DiaCloseMxId",
                        column: x => x.DiaCloseMxId,
                        principalTable: "RigDiaCloseMxs",
                        principalColumn: "DiaCloseMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBopComponents_RigIdPassThrus_IdPassThruId",
                        column: x => x.IdPassThruId,
                        principalTable: "RigIdPassThrus",
                        principalColumn: "IdPassThruId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBopComponents_RigPresWorks_PresWorkId",
                        column: x => x.PresWorkId,
                        principalTable: "RigPresWorks",
                        principalColumn: "PresWorkId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RigBopComponents_RigBops_RigBopBopId",
                        column: x => x.RigBopBopId,
                        principalTable: "RigBops",
                        principalColumn: "BopId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Rigs",
                columns: table => new
                {
                    RigId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    Owner = table.Column<string>(nullable: true),
                    TypeRig = table.Column<string>(nullable: true),
                    Manufacturer = table.Column<string>(nullable: true),
                    YearEntService = table.Column<string>(nullable: true),
                    ClassRig = table.Column<string>(nullable: true),
                    Approvals = table.Column<string>(nullable: true),
                    Registration = table.Column<string>(nullable: true),
                    TelNumber = table.Column<string>(nullable: true),
                    FaxNumber = table.Column<string>(nullable: true),
                    EmailAddress = table.Column<string>(nullable: true),
                    NameContact = table.Column<string>(nullable: true),
                    RatingDrillDepthId = table.Column<int>(nullable: true),
                    RatingWaterDepthId = table.Column<int>(nullable: true),
                    IsOffshore = table.Column<string>(nullable: true),
                    AirGapId = table.Column<int>(nullable: true),
                    DTimStartOp = table.Column<string>(nullable: true),
                    DTimEndOp = table.Column<string>(nullable: true),
                    BopId = table.Column<int>(nullable: true),
                    PitUid = table.Column<string>(nullable: true),
                    PumpUid = table.Column<string>(nullable: true),
                    ShakerUid = table.Column<string>(nullable: true),
                    CentrifugeId = table.Column<int>(nullable: true),
                    HydrocycloneId = table.Column<int>(nullable: true),
                    DegasserId = table.Column<int>(nullable: true),
                    SurfaceEquipmentId = table.Column<int>(nullable: true),
                    NumDerricks = table.Column<string>(nullable: true),
                    TypeDerrick = table.Column<string>(nullable: true),
                    RatingDerrickId = table.Column<int>(nullable: true),
                    HtDerrickId = table.Column<int>(nullable: true),
                    RatingHkldId = table.Column<int>(nullable: true),
                    CapWindDerrickId = table.Column<int>(nullable: true),
                    WtBlockId = table.Column<int>(nullable: true),
                    RatingBlockId = table.Column<int>(nullable: true),
                    NumBlockLines = table.Column<string>(nullable: true),
                    TypeHook = table.Column<string>(nullable: true),
                    RatingHookId = table.Column<int>(nullable: true),
                    SizeDrillLineId = table.Column<int>(nullable: true),
                    TypeDrawWorks = table.Column<string>(nullable: true),
                    PowerDrawWorksId = table.Column<int>(nullable: true),
                    RatingDrawWorksId = table.Column<int>(nullable: true),
                    MotorDrawWorks = table.Column<string>(nullable: true),
                    DescBrake = table.Column<string>(nullable: true),
                    TypeSwivel = table.Column<string>(nullable: true),
                    RatingSwivelId = table.Column<int>(nullable: true),
                    RotSystem = table.Column<string>(nullable: true),
                    DescRotSystem = table.Column<string>(nullable: true),
                    RatingTqRotSysId = table.Column<int>(nullable: true),
                    RotSizeOpeningId = table.Column<int>(nullable: true),
                    RatingRotSystemId = table.Column<int>(nullable: true),
                    ScrSystem = table.Column<string>(nullable: true),
                    PipeHandlingSystem = table.Column<string>(nullable: true),
                    CapBulkMudId = table.Column<int>(nullable: true),
                    CapLiquidMudId = table.Column<int>(nullable: true),
                    CapDrillWaterId = table.Column<int>(nullable: true),
                    CapPotableWaterId = table.Column<int>(nullable: true),
                    CapFuelId = table.Column<int>(nullable: true),
                    CapBulkCementId = table.Column<int>(nullable: true),
                    MainEngine = table.Column<string>(nullable: true),
                    Generator = table.Column<string>(nullable: true),
                    CementUnit = table.Column<string>(nullable: true),
                    NumBunks = table.Column<string>(nullable: true),
                    BunksPerRoom = table.Column<string>(nullable: true),
                    NumCranes = table.Column<string>(nullable: true),
                    NumAnch = table.Column<string>(nullable: true),
                    MoorType = table.Column<string>(nullable: true),
                    NumGuideTens = table.Column<string>(nullable: true),
                    NumRiserTens = table.Column<string>(nullable: true),
                    VarDeckLdMxId = table.Column<int>(nullable: true),
                    VdlStormId = table.Column<int>(nullable: true),
                    NumThrusters = table.Column<string>(nullable: true),
                    Azimuthing = table.Column<string>(nullable: true),
                    MotionCompensationMnId = table.Column<int>(nullable: true),
                    MotionCompensationMxId = table.Column<int>(nullable: true),
                    StrokeMotionCompensationId = table.Column<int>(nullable: true),
                    RiserAngleLimitId = table.Column<int>(nullable: true),
                    HeaveMxId = table.Column<int>(nullable: true),
                    Gantry = table.Column<string>(nullable: true),
                    Flares = table.Column<string>(nullable: true),
                    CommonDataRigCommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Rigs", x => x.RigId);
                    table.ForeignKey(
                        name: "FK_Rigs_RigAirGaps_AirGapId",
                        column: x => x.AirGapId,
                        principalTable: "RigAirGaps",
                        principalColumn: "AirGapId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigBops_BopId",
                        column: x => x.BopId,
                        principalTable: "RigBops",
                        principalColumn: "BopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigCapBulkCements_CapBulkCementId",
                        column: x => x.CapBulkCementId,
                        principalTable: "RigCapBulkCements",
                        principalColumn: "CapBulkCementId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigCapBulkMuds_CapBulkMudId",
                        column: x => x.CapBulkMudId,
                        principalTable: "RigCapBulkMuds",
                        principalColumn: "CapBulkMudId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigCapDrillWaters_CapDrillWaterId",
                        column: x => x.CapDrillWaterId,
                        principalTable: "RigCapDrillWaters",
                        principalColumn: "CapDrillWaterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigCapFuels_CapFuelId",
                        column: x => x.CapFuelId,
                        principalTable: "RigCapFuels",
                        principalColumn: "CapFuelId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigCapLiquidMuds_CapLiquidMudId",
                        column: x => x.CapLiquidMudId,
                        principalTable: "RigCapLiquidMuds",
                        principalColumn: "CapLiquidMudId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigCapPotableWaters_CapPotableWaterId",
                        column: x => x.CapPotableWaterId,
                        principalTable: "RigCapPotableWaters",
                        principalColumn: "CapPotableWaterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigCapWindDerricks_CapWindDerrickId",
                        column: x => x.CapWindDerrickId,
                        principalTable: "RigCapWindDerricks",
                        principalColumn: "CapWindDerrickId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigCentrifuges_CentrifugeId",
                        column: x => x.CentrifugeId,
                        principalTable: "RigCentrifuges",
                        principalColumn: "CentrifugeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigCommonDatas_CommonDataRigCommonDataId",
                        column: x => x.CommonDataRigCommonDataId,
                        principalTable: "RigCommonDatas",
                        principalColumn: "RigCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigDegassers_DegasserId",
                        column: x => x.DegasserId,
                        principalTable: "RigDegassers",
                        principalColumn: "DegasserId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigHeaveMxs_HeaveMxId",
                        column: x => x.HeaveMxId,
                        principalTable: "RigHeaveMxs",
                        principalColumn: "HeaveMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigHtDerricks_HtDerrickId",
                        column: x => x.HtDerrickId,
                        principalTable: "RigHtDerricks",
                        principalColumn: "HtDerrickId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigHydrocyclones_HydrocycloneId",
                        column: x => x.HydrocycloneId,
                        principalTable: "RigHydrocyclones",
                        principalColumn: "HydrocycloneId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigMotionCompensationMns_MotionCompensationMnId",
                        column: x => x.MotionCompensationMnId,
                        principalTable: "RigMotionCompensationMns",
                        principalColumn: "MotionCompensationMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigMotionCompensationMxs_MotionCompensationMxId",
                        column: x => x.MotionCompensationMxId,
                        principalTable: "RigMotionCompensationMxs",
                        principalColumn: "MotionCompensationMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigPits_PitUid",
                        column: x => x.PitUid,
                        principalTable: "RigPits",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigPowerDrawWork_PowerDrawWorksId",
                        column: x => x.PowerDrawWorksId,
                        principalTable: "RigPowerDrawWork",
                        principalColumn: "PowerDrawWorksId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigPumps_PumpUid",
                        column: x => x.PumpUid,
                        principalTable: "RigPumps",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigRatingBlocks_RatingBlockId",
                        column: x => x.RatingBlockId,
                        principalTable: "RigRatingBlocks",
                        principalColumn: "RatingBlockId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigRatingDerricks_RatingDerrickId",
                        column: x => x.RatingDerrickId,
                        principalTable: "RigRatingDerricks",
                        principalColumn: "RatingDerrickId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigRatingDrawWork_RatingDrawWorksId",
                        column: x => x.RatingDrawWorksId,
                        principalTable: "RigRatingDrawWork",
                        principalColumn: "RatingDrawWorksId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigRatingDrillDepths_RatingDrillDepthId",
                        column: x => x.RatingDrillDepthId,
                        principalTable: "RigRatingDrillDepths",
                        principalColumn: "RatingDrillDepthId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigRatingHklds_RatingHkldId",
                        column: x => x.RatingHkldId,
                        principalTable: "RigRatingHklds",
                        principalColumn: "RatingHkldId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigRatingHooks_RatingHookId",
                        column: x => x.RatingHookId,
                        principalTable: "RigRatingHooks",
                        principalColumn: "RatingHookId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigRatingRotSystems_RatingRotSystemId",
                        column: x => x.RatingRotSystemId,
                        principalTable: "RigRatingRotSystems",
                        principalColumn: "RatingRotSystemId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigRatingSwivels_RatingSwivelId",
                        column: x => x.RatingSwivelId,
                        principalTable: "RigRatingSwivels",
                        principalColumn: "RatingSwivelId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigRatingTqRotSy_RatingTqRotSysId",
                        column: x => x.RatingTqRotSysId,
                        principalTable: "RigRatingTqRotSy",
                        principalColumn: "RatingTqRotSysId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigRatingWaterDepths_RatingWaterDepthId",
                        column: x => x.RatingWaterDepthId,
                        principalTable: "RigRatingWaterDepths",
                        principalColumn: "RatingWaterDepthId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigRiserAngleLimits_RiserAngleLimitId",
                        column: x => x.RiserAngleLimitId,
                        principalTable: "RigRiserAngleLimits",
                        principalColumn: "RiserAngleLimitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigRotSizeOpenings_RotSizeOpeningId",
                        column: x => x.RotSizeOpeningId,
                        principalTable: "RigRotSizeOpenings",
                        principalColumn: "RotSizeOpeningId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigShakers_ShakerUid",
                        column: x => x.ShakerUid,
                        principalTable: "RigShakers",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigSizeDrillLines_SizeDrillLineId",
                        column: x => x.SizeDrillLineId,
                        principalTable: "RigSizeDrillLines",
                        principalColumn: "SizeDrillLineId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigStrokeMotionCompensations_StrokeMotionCompensationId",
                        column: x => x.StrokeMotionCompensationId,
                        principalTable: "RigStrokeMotionCompensations",
                        principalColumn: "StrokeMotionCompensationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigSurfaceEquipments_SurfaceEquipmentId",
                        column: x => x.SurfaceEquipmentId,
                        principalTable: "RigSurfaceEquipments",
                        principalColumn: "SurfaceEquipmentId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigVarDeckLdMxs_VarDeckLdMxId",
                        column: x => x.VarDeckLdMxId,
                        principalTable: "RigVarDeckLdMxs",
                        principalColumn: "VarDeckLdMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigVdlStorms_VdlStormId",
                        column: x => x.VdlStormId,
                        principalTable: "RigVdlStorms",
                        principalColumn: "VdlStormId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Rigs_RigWtBlocks_WtBlockId",
                        column: x => x.WtBlockId,
                        principalTable: "RigWtBlocks",
                        principalColumn: "WtBlockId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SideWallCoreLithology",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    Type = table.Column<string>(nullable: true),
                    CodeLith = table.Column<string>(nullable: true),
                    LithPcUom = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    LithClass = table.Column<string>(nullable: true),
                    GrainType = table.Column<string>(nullable: true),
                    DunhamClass = table.Column<string>(nullable: true),
                    Color = table.Column<string>(nullable: true),
                    Texture = table.Column<string>(nullable: true),
                    Hardness = table.Column<string>(nullable: true),
                    SizeGrain = table.Column<string>(nullable: true),
                    Roundness = table.Column<string>(nullable: true),
                    Sorting = table.Column<string>(nullable: true),
                    MatrixCement = table.Column<string>(nullable: true),
                    PorosityVisible = table.Column<string>(nullable: true),
                    Permeability = table.Column<string>(nullable: true),
                    DensShaleUom = table.Column<string>(nullable: true),
                    QualifierUid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallCoreLithology", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_SideWallCoreLithology_SideWallCoreDensShale_DensShaleUom",
                        column: x => x.DensShaleUom,
                        principalTable: "SideWallCoreDensShale",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SideWallCoreLithology_SideWallLithPcs_LithPcUom",
                        column: x => x.LithPcUom,
                        principalTable: "SideWallLithPcs",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SideWallCoreLithology_SideWallCoreQualifier_QualifierUid",
                        column: x => x.QualifierUid,
                        principalTable: "SideWallCoreQualifier",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPresMeasurements",
                columns: table => new
                {
                    PresMeasurementId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PresId = table.Column<int>(nullable: true),
                    BottomholeRateId = table.Column<int>(nullable: true),
                    StepRateTestId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPresMeasurements", x => x.PresMeasurementId);
                    table.ForeignKey(
                        name: "FK_StimJobPresMeasurements_StimJobBottomholeRates_BottomholeRateId",
                        column: x => x.BottomholeRateId,
                        principalTable: "StimJobBottomholeRates",
                        principalColumn: "BottomholeRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPresMeasurements_StimJobPress_PresId",
                        column: x => x.PresId,
                        principalTable: "StimJobPress",
                        principalColumn: "PresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPresMeasurements_StimJobStepRateTests_StepRateTestId",
                        column: x => x.StepRateTestId,
                        principalTable: "StimJobStepRateTests",
                        principalColumn: "StepRateTestId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobSteps",
                columns: table => new
                {
                    StepId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Number = table.Column<string>(nullable: true),
                    BottomholeRateId = table.Column<int>(nullable: true),
                    PresId = table.Column<int>(nullable: true),
                    PipeFrictionId = table.Column<int>(nullable: true),
                    EntryFrictionId = table.Column<int>(nullable: true),
                    PerfFrictionId = table.Column<int>(nullable: true),
                    NearWellboreFrictionId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    StepDownTestId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobSteps", x => x.StepId);
                    table.ForeignKey(
                        name: "FK_StimJobSteps_StimJobBottomholeRates_BottomholeRateId",
                        column: x => x.BottomholeRateId,
                        principalTable: "StimJobBottomholeRates",
                        principalColumn: "BottomholeRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobSteps_StimJobEntryFrictions_EntryFrictionId",
                        column: x => x.EntryFrictionId,
                        principalTable: "StimJobEntryFrictions",
                        principalColumn: "EntryFrictionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobSteps_StimJobNearWellboreFrictions_NearWellboreFrictionId",
                        column: x => x.NearWellboreFrictionId,
                        principalTable: "StimJobNearWellboreFrictions",
                        principalColumn: "NearWellboreFrictionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobSteps_StimJobPerfFrictions_PerfFrictionId",
                        column: x => x.PerfFrictionId,
                        principalTable: "StimJobPerfFrictions",
                        principalColumn: "PerfFrictionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobSteps_StimJobPipeFrictions_PipeFrictionId",
                        column: x => x.PipeFrictionId,
                        principalTable: "StimJobPipeFrictions",
                        principalColumn: "PipeFrictionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobSteps_StimJobPress_PresId",
                        column: x => x.PresId,
                        principalTable: "StimJobPress",
                        principalColumn: "PresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobSteps_StimJobStepDownTests_StepDownTestId",
                        column: x => x.StepDownTestId,
                        principalTable: "StimJobStepDownTests",
                        principalColumn: "StepDownTestId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobPdatSessions",
                columns: table => new
                {
                    PdatSessionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Number = table.Column<string>(nullable: true),
                    DTimPumpOn = table.Column<string>(nullable: true),
                    DTimPumpOff = table.Column<string>(nullable: true),
                    DTimWellShutin = table.Column<string>(nullable: true),
                    DTimFractureClose = table.Column<string>(nullable: true),
                    PumpDurationId = table.Column<int>(nullable: true),
                    AvgBottomholeTreatmentPresId = table.Column<int>(nullable: true),
                    BottomholeHydrostaticPresId = table.Column<int>(nullable: true),
                    BubblePointPresId = table.Column<int>(nullable: true),
                    FractureClosePresId = table.Column<int>(nullable: true),
                    FrictionPresId = table.Column<int>(nullable: true),
                    InitialShutinPresId = table.Column<int>(nullable: true),
                    PorePresId = table.Column<int>(nullable: true),
                    AvgBottomholeTreatmentRateId = table.Column<int>(nullable: true),
                    FluidDensityId = table.Column<int>(nullable: true),
                    BaseFluidVolId = table.Column<int>(nullable: true),
                    WellboreVolumeId = table.Column<int>(nullable: true),
                    MdSurfaceId = table.Column<int>(nullable: true),
                    MdBottomholeId = table.Column<int>(nullable: true),
                    MdMidPerforationId = table.Column<int>(nullable: true),
                    TvdMidPerforationId = table.Column<int>(nullable: true),
                    SurfaceTemperatureId = table.Column<int>(nullable: true),
                    BottomholeTemperatureId = table.Column<int>(nullable: true),
                    SurfaceFluidTemperatureId = table.Column<int>(nullable: true),
                    FluidCompressibilityId = table.Column<int>(nullable: true),
                    ReservoirTotalCompressibilityId = table.Column<int>(nullable: true),
                    FluidNprimeFactor = table.Column<string>(nullable: true),
                    FluidKprimeFactor = table.Column<string>(nullable: true),
                    FluidSpecificHeatId = table.Column<int>(nullable: true),
                    FluidThermalConductivityId = table.Column<int>(nullable: true),
                    FluidThermalExpansionCoefficientId = table.Column<int>(nullable: true),
                    FluidEfficiencyId = table.Column<int>(nullable: true),
                    FoamQualityId = table.Column<int>(nullable: true),
                    PercentPadId = table.Column<int>(nullable: true),
                    TemperatureCorrectionApplied = table.Column<string>(nullable: true),
                    StepRateTestId = table.Column<int>(nullable: true),
                    FluidEfficiencyTestId = table.Column<int>(nullable: true),
                    PumpFlowBackTestId = table.Column<int>(nullable: true),
                    StepDownTestId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobPdatSessions", x => x.PdatSessionId);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobAvgBottomholeTreatmentPress_AvgBottomholeTreatmentPresId",
                        column: x => x.AvgBottomholeTreatmentPresId,
                        principalTable: "StimJobAvgBottomholeTreatmentPress",
                        principalColumn: "AvgBottomholeTreatmentPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobAvgBottomholeTreatmentRates_AvgBottomholeTreatmentRateId",
                        column: x => x.AvgBottomholeTreatmentRateId,
                        principalTable: "StimJobAvgBottomholeTreatmentRates",
                        principalColumn: "AvgBottomholeTreatmentRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobBaseFluidVols_BaseFluidVolId",
                        column: x => x.BaseFluidVolId,
                        principalTable: "StimJobBaseFluidVols",
                        principalColumn: "BaseFluidVolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobBottomholeHydrostaticPress_BottomholeHydrostaticPresId",
                        column: x => x.BottomholeHydrostaticPresId,
                        principalTable: "StimJobBottomholeHydrostaticPress",
                        principalColumn: "BottomholeHydrostaticPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobBottomholeTemperatures_BottomholeTemperatureId",
                        column: x => x.BottomholeTemperatureId,
                        principalTable: "StimJobBottomholeTemperatures",
                        principalColumn: "BottomholeTemperatureId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobBubblePointPress_BubblePointPresId",
                        column: x => x.BubblePointPresId,
                        principalTable: "StimJobBubblePointPress",
                        principalColumn: "BubblePointPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobFluidCompressibilitys_FluidCompressibilityId",
                        column: x => x.FluidCompressibilityId,
                        principalTable: "StimJobFluidCompressibilitys",
                        principalColumn: "FluidCompressibilityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobFluidDensitys_FluidDensityId",
                        column: x => x.FluidDensityId,
                        principalTable: "StimJobFluidDensitys",
                        principalColumn: "FluidDensityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobFluidEfficiencys_FluidEfficiencyId",
                        column: x => x.FluidEfficiencyId,
                        principalTable: "StimJobFluidEfficiencys",
                        principalColumn: "FluidEfficiencyId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobFluidEfficiencyTests_FluidEfficiencyTestId",
                        column: x => x.FluidEfficiencyTestId,
                        principalTable: "StimJobFluidEfficiencyTests",
                        principalColumn: "FluidEfficiencyTestId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobFluidSpecificHeats_FluidSpecificHeatId",
                        column: x => x.FluidSpecificHeatId,
                        principalTable: "StimJobFluidSpecificHeats",
                        principalColumn: "FluidSpecificHeatId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobFluidThermalConductivitys_FluidThermalConductivityId",
                        column: x => x.FluidThermalConductivityId,
                        principalTable: "StimJobFluidThermalConductivitys",
                        principalColumn: "FluidThermalConductivityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobFluidThermalExpansionCoefficients_FluidThermalExpansionCoefficientId",
                        column: x => x.FluidThermalExpansionCoefficientId,
                        principalTable: "StimJobFluidThermalExpansionCoefficients",
                        principalColumn: "FluidThermalExpansionCoefficientId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobFoamQualitys_FoamQualityId",
                        column: x => x.FoamQualityId,
                        principalTable: "StimJobFoamQualitys",
                        principalColumn: "FoamQualityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobFractureClosePress_FractureClosePresId",
                        column: x => x.FractureClosePresId,
                        principalTable: "StimJobFractureClosePress",
                        principalColumn: "FractureClosePresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobFrictionPress_FrictionPresId",
                        column: x => x.FrictionPresId,
                        principalTable: "StimJobFrictionPress",
                        principalColumn: "FrictionPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobInitialShutinPress_InitialShutinPresId",
                        column: x => x.InitialShutinPresId,
                        principalTable: "StimJobInitialShutinPress",
                        principalColumn: "InitialShutinPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobMdBottomholes_MdBottomholeId",
                        column: x => x.MdBottomholeId,
                        principalTable: "StimJobMdBottomholes",
                        principalColumn: "MdBottomholeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobMdMidPerforations_MdMidPerforationId",
                        column: x => x.MdMidPerforationId,
                        principalTable: "StimJobMdMidPerforations",
                        principalColumn: "MdMidPerforationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobMdSurfaces_MdSurfaceId",
                        column: x => x.MdSurfaceId,
                        principalTable: "StimJobMdSurfaces",
                        principalColumn: "MdSurfaceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobPercentPads_PercentPadId",
                        column: x => x.PercentPadId,
                        principalTable: "StimJobPercentPads",
                        principalColumn: "PercentPadId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobPorePress_PorePresId",
                        column: x => x.PorePresId,
                        principalTable: "StimJobPorePress",
                        principalColumn: "PorePresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobPumpDurations_PumpDurationId",
                        column: x => x.PumpDurationId,
                        principalTable: "StimJobPumpDurations",
                        principalColumn: "PumpDurationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobPumpFlowBackTests_PumpFlowBackTestId",
                        column: x => x.PumpFlowBackTestId,
                        principalTable: "StimJobPumpFlowBackTests",
                        principalColumn: "PumpFlowBackTestId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobReservoirTotalCompressibilitys_ReservoirTotalCompressibilityId",
                        column: x => x.ReservoirTotalCompressibilityId,
                        principalTable: "StimJobReservoirTotalCompressibilitys",
                        principalColumn: "ReservoirTotalCompressibilityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobStepDownTests_StepDownTestId",
                        column: x => x.StepDownTestId,
                        principalTable: "StimJobStepDownTests",
                        principalColumn: "StepDownTestId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobStepRateTests_StepRateTestId",
                        column: x => x.StepRateTestId,
                        principalTable: "StimJobStepRateTests",
                        principalColumn: "StepRateTestId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobSurfaceFluidTemperatures_SurfaceFluidTemperatureId",
                        column: x => x.SurfaceFluidTemperatureId,
                        principalTable: "StimJobSurfaceFluidTemperatures",
                        principalColumn: "SurfaceFluidTemperatureId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobSurfaceTemperatures_SurfaceTemperatureId",
                        column: x => x.SurfaceTemperatureId,
                        principalTable: "StimJobSurfaceTemperatures",
                        principalColumn: "SurfaceTemperatureId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobTvdMidPerforations_TvdMidPerforationId",
                        column: x => x.TvdMidPerforationId,
                        principalTable: "StimJobTvdMidPerforations",
                        principalColumn: "TvdMidPerforationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobPdatSessions_StimJobWellboreVolumes_WellboreVolumeId",
                        column: x => x.WellboreVolumeId,
                        principalTable: "StimJobWellboreVolumes",
                        principalColumn: "WellboreVolumeId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobStageFluids",
                columns: table => new
                {
                    StageFluidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    FluidVolId = table.Column<int>(nullable: true),
                    WaterSource = table.Column<string>(nullable: true),
                    ProppantId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobStageFluids", x => x.StageFluidId);
                    table.ForeignKey(
                        name: "FK_StimJobStageFluids_StimJobFluidVols_FluidVolId",
                        column: x => x.FluidVolId,
                        principalTable: "StimJobFluidVols",
                        principalColumn: "FluidVolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobStageFluids_StimJobProppants_ProppantId",
                        column: x => x.ProppantId,
                        principalTable: "StimJobProppants",
                        principalColumn: "ProppantId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobJobEvents",
                columns: table => new
                {
                    JobEventId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Number = table.Column<string>(nullable: true),
                    DTim = table.Column<string>(nullable: true),
                    Comment = table.Column<string>(nullable: true),
                    NumStage = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    FlowPathId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobJobEvents", x => x.JobEventId);
                    table.ForeignKey(
                        name: "FK_StimJobJobEvents_StimJobFlowPaths_FlowPathId",
                        column: x => x.FlowPathId,
                        principalTable: "StimJobFlowPaths",
                        principalColumn: "FlowPathId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTubulars",
                columns: table => new
                {
                    TubularId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<string>(nullable: true),
                    IdId = table.Column<int>(nullable: true),
                    OdId = table.Column<int>(nullable: true),
                    WeightId = table.Column<int>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomId = table.Column<int>(nullable: true),
                    VolumeFactorId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    FlowPathId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTubulars", x => x.TubularId);
                    table.ForeignKey(
                        name: "FK_StimJobTubulars_StimJobFlowPaths_FlowPathId",
                        column: x => x.FlowPathId,
                        principalTable: "StimJobFlowPaths",
                        principalColumn: "FlowPathId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobTubulars_StimJobIds_IdId",
                        column: x => x.IdId,
                        principalTable: "StimJobIds",
                        principalColumn: "IdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobTubulars_StimJobMdBottoms_MdBottomId",
                        column: x => x.MdBottomId,
                        principalTable: "StimJobMdBottoms",
                        principalColumn: "MdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobTubulars_StimJobMdTops_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "StimJobMdTops",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobTubulars_StimJobOds_OdId",
                        column: x => x.OdId,
                        principalTable: "StimJobOds",
                        principalColumn: "OdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobTubulars_StimJobVolumeFactors_VolumeFactorId",
                        column: x => x.VolumeFactorId,
                        principalTable: "StimJobVolumeFactors",
                        principalColumn: "VolumeFactorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobTubulars_StimJobWeights_WeightId",
                        column: x => x.WeightId,
                        principalTable: "StimJobWeights",
                        principalColumn: "WeightId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SurveyProgramSurveySection",
                columns: table => new
                {
                    SurveySectionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Sequence = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    MdStartId = table.Column<int>(nullable: true),
                    MdEndId = table.Column<int>(nullable: true),
                    NameSurveyCompany = table.Column<string>(nullable: true),
                    NameTool = table.Column<string>(nullable: true),
                    TypeTool = table.Column<string>(nullable: true),
                    ModelError = table.Column<string>(nullable: true),
                    Overwrite = table.Column<string>(nullable: true),
                    FrequencyMxId = table.Column<int>(nullable: true),
                    ItemState = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    SurveyProgramId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyProgramSurveySection", x => x.SurveySectionId);
                    table.ForeignKey(
                        name: "FK_SurveyProgramSurveySection_SurveyProgramFrequencyMx_FrequencyMxId",
                        column: x => x.FrequencyMxId,
                        principalTable: "SurveyProgramFrequencyMx",
                        principalColumn: "FrequencyMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SurveyProgramSurveySection_SurveyProgramMdEnd_MdEndId",
                        column: x => x.MdEndId,
                        principalTable: "SurveyProgramMdEnd",
                        principalColumn: "MdEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SurveyProgramSurveySection_SurveyProgramMdStart_MdStartId",
                        column: x => x.MdStartId,
                        principalTable: "SurveyProgramMdStart",
                        principalColumn: "MdStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SurveyProgramSurveySection_SurveyPrograms_SurveyProgramId",
                        column: x => x.SurveyProgramId,
                        principalTable: "SurveyPrograms",
                        principalColumn: "SurveyProgramId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TargetSections",
                columns: table => new
                {
                    TargetSectionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SectNumber = table.Column<string>(nullable: true),
                    TypeTargetSectionScope = table.Column<string>(nullable: true),
                    LenRadiusId = table.Column<int>(nullable: true),
                    AngleArcId = table.Column<int>(nullable: true),
                    ThickAboveId = table.Column<int>(nullable: true),
                    ThickBelowId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    TargetId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetSections", x => x.TargetSectionId);
                    table.ForeignKey(
                        name: "FK_TargetSections_TargetAngleArcs_AngleArcId",
                        column: x => x.AngleArcId,
                        principalTable: "TargetAngleArcs",
                        principalColumn: "AngleArcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TargetSections_TargetLenRadiuss_LenRadiusId",
                        column: x => x.LenRadiusId,
                        principalTable: "TargetLenRadiuss",
                        principalColumn: "LenRadiusId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TargetSections_Targets_TargetId",
                        column: x => x.TargetId,
                        principalTable: "Targets",
                        principalColumn: "TargetId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TargetSections_TargetThickAboves_ThickAboveId",
                        column: x => x.ThickAboveId,
                        principalTable: "TargetThickAboves",
                        principalColumn: "ThickAboveId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TargetSections_TargetThickBelows_ThickBelowId",
                        column: x => x.ThickBelowId,
                        principalTable: "TargetThickBelows",
                        principalColumn: "ThickBelowId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModels",
                columns: table => new
                {
                    ToolErrorModelId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    AuthorizationId = table.Column<int>(nullable: true),
                    OperatingConditionId = table.Column<int>(nullable: true),
                    UseErrorTermSetId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    ModelParametersId = table.Column<int>(nullable: true),
                    CommonDataToolErrorModelCommonDataId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModels", x => x.ToolErrorModelId);
                    table.ForeignKey(
                        name: "FK_ToolErrorModels_ToolErrorModelAuthorizations_AuthorizationId",
                        column: x => x.AuthorizationId,
                        principalTable: "ToolErrorModelAuthorizations",
                        principalColumn: "AuthorizationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ToolErrorModels_ToolErrorModelCommonDatas_CommonDataToolErrorModelCommonDataId",
                        column: x => x.CommonDataToolErrorModelCommonDataId,
                        principalTable: "ToolErrorModelCommonDatas",
                        principalColumn: "ToolErrorModelCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ToolErrorModels_ToolErrorModelModelParameter_ModelParametersId",
                        column: x => x.ModelParametersId,
                        principalTable: "ToolErrorModelModelParameter",
                        principalColumn: "ModelParametersId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ToolErrorModels_ToolErrorModelOperatingConditions_OperatingConditionId",
                        column: x => x.OperatingConditionId,
                        principalTable: "ToolErrorModelOperatingConditions",
                        principalColumn: "OperatingConditionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ToolErrorModels_ToolErrorModelUseErrorTermSets_UseErrorTermSetId",
                        column: x => x.UseErrorTermSetId,
                        principalTable: "ToolErrorModelUseErrorTermSets",
                        principalColumn: "UseErrorTermSetId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorTermSetFunctions",
                columns: table => new
                {
                    FunctionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    NomenclatureId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorTermSetFunctions", x => x.FunctionId);
                    table.ForeignKey(
                        name: "FK_ToolErrorTermSetFunctions_ToolErrorTermSetNomenclatures_NomenclatureId",
                        column: x => x.NomenclatureId,
                        principalTable: "ToolErrorTermSetNomenclatures",
                        principalColumn: "NomenclatureId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorTermSetParameters",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    NomenclatureId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorTermSetParameters", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_ToolErrorTermSetParameters_ToolErrorTermSetNomenclatures_NomenclatureId",
                        column: x => x.NomenclatureId,
                        principalTable: "ToolErrorTermSetNomenclatures",
                        principalColumn: "NomenclatureId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorTermSets",
                columns: table => new
                {
                    ToolErrorTermSetId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    AuthorizationId = table.Column<int>(nullable: true),
                    NomenclatureId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorTermSets", x => x.ToolErrorTermSetId);
                    table.ForeignKey(
                        name: "FK_ToolErrorTermSets_ToolErrorTermSetAuthorizations_AuthorizationId",
                        column: x => x.AuthorizationId,
                        principalTable: "ToolErrorTermSetAuthorizations",
                        principalColumn: "AuthorizationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ToolErrorTermSets_ToolErrorTermSetNomenclatures_NomenclatureId",
                        column: x => x.NomenclatureId,
                        principalTable: "ToolErrorTermSetNomenclatures",
                        principalColumn: "NomenclatureId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryStations",
                columns: table => new
                {
                    TrajectoryStationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTimStn = table.Column<string>(nullable: true),
                    TypeTrajStation = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    TvdId = table.Column<int>(nullable: true),
                    InclId = table.Column<int>(nullable: true),
                    AziId = table.Column<int>(nullable: true),
                    MtfId = table.Column<int>(nullable: true),
                    GtfId = table.Column<int>(nullable: true),
                    DispNsId = table.Column<int>(nullable: true),
                    DispEwId = table.Column<int>(nullable: true),
                    VertSectId = table.Column<int>(nullable: true),
                    DlsId = table.Column<int>(nullable: true),
                    RateTurnId = table.Column<int>(nullable: true),
                    RateBuildId = table.Column<int>(nullable: true),
                    MdDeltaId = table.Column<int>(nullable: true),
                    TvdDeltaId = table.Column<int>(nullable: true),
                    ModelToolError = table.Column<string>(nullable: true),
                    GravTotalUncertId = table.Column<int>(nullable: true),
                    DipAngleUncertId = table.Column<int>(nullable: true),
                    MagTotalUncertId = table.Column<int>(nullable: true),
                    GravAccelCorUsed = table.Column<string>(nullable: true),
                    MagXAxialCorUsed = table.Column<string>(nullable: true),
                    SagCorUsed = table.Column<string>(nullable: true),
                    MagDrlstrCorUsed = table.Column<string>(nullable: true),
                    StatusTrajStation = table.Column<string>(nullable: true),
                    RawDataId = table.Column<int>(nullable: true),
                    CorUsedTrajectoryCorUsedId = table.Column<int>(nullable: true),
                    ValidId = table.Column<int>(nullable: true),
                    MatrixCovId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryStations", x => x.TrajectoryStationId);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryAzis_AziId",
                        column: x => x.AziId,
                        principalTable: "TrajectoryAzis",
                        principalColumn: "AziId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryCorUseds_CorUsedTrajectoryCorUsedId",
                        column: x => x.CorUsedTrajectoryCorUsedId,
                        principalTable: "TrajectoryCorUseds",
                        principalColumn: "TrajectoryCorUsedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryDipAngleUncerts_DipAngleUncertId",
                        column: x => x.DipAngleUncertId,
                        principalTable: "TrajectoryDipAngleUncerts",
                        principalColumn: "DipAngleUncertId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryDispEws_DispEwId",
                        column: x => x.DispEwId,
                        principalTable: "TrajectoryDispEws",
                        principalColumn: "DispEwId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryDispNss_DispNsId",
                        column: x => x.DispNsId,
                        principalTable: "TrajectoryDispNss",
                        principalColumn: "DispNsId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryDlss_DlsId",
                        column: x => x.DlsId,
                        principalTable: "TrajectoryDlss",
                        principalColumn: "DlsId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryGravTotalUncerts_GravTotalUncertId",
                        column: x => x.GravTotalUncertId,
                        principalTable: "TrajectoryGravTotalUncerts",
                        principalColumn: "GravTotalUncertId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryGtfs_GtfId",
                        column: x => x.GtfId,
                        principalTable: "TrajectoryGtfs",
                        principalColumn: "GtfId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryIncls_InclId",
                        column: x => x.InclId,
                        principalTable: "TrajectoryIncls",
                        principalColumn: "InclId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryMagTotalUncerts_MagTotalUncertId",
                        column: x => x.MagTotalUncertId,
                        principalTable: "TrajectoryMagTotalUncerts",
                        principalColumn: "MagTotalUncertId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryMatrixCovs_MatrixCovId",
                        column: x => x.MatrixCovId,
                        principalTable: "TrajectoryMatrixCovs",
                        principalColumn: "MatrixCovId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryMdDeltas_MdDeltaId",
                        column: x => x.MdDeltaId,
                        principalTable: "TrajectoryMdDeltas",
                        principalColumn: "MdDeltaId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryMds_MdId",
                        column: x => x.MdId,
                        principalTable: "TrajectoryMds",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryMtfs_MtfId",
                        column: x => x.MtfId,
                        principalTable: "TrajectoryMtfs",
                        principalColumn: "MtfId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryRateBuilds_RateBuildId",
                        column: x => x.RateBuildId,
                        principalTable: "TrajectoryRateBuilds",
                        principalColumn: "RateBuildId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryRateTurns_RateTurnId",
                        column: x => x.RateTurnId,
                        principalTable: "TrajectoryRateTurns",
                        principalColumn: "RateTurnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryRawDatas_RawDataId",
                        column: x => x.RawDataId,
                        principalTable: "TrajectoryRawDatas",
                        principalColumn: "RawDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryTvdDeltas_TvdDeltaId",
                        column: x => x.TvdDeltaId,
                        principalTable: "TrajectoryTvdDeltas",
                        principalColumn: "TvdDeltaId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryTvds_TvdId",
                        column: x => x.TvdId,
                        principalTable: "TrajectoryTvds",
                        principalColumn: "TvdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryValids_ValidId",
                        column: x => x.ValidId,
                        principalTable: "TrajectoryValids",
                        principalColumn: "ValidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryStations_TrajectoryVertSects_VertSectId",
                        column: x => x.VertSectId,
                        principalTable: "TrajectoryVertSects",
                        principalColumn: "VertSectId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TubularSensor",
                columns: table => new
                {
                    SensorId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TypeMeasurement = table.Column<string>(nullable: true),
                    OffsetBotId = table.Column<int>(nullable: true),
                    Comments = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    TubularMwdToolMwdToolId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularSensor", x => x.SensorId);
                    table.ForeignKey(
                        name: "FK_TubularSensor_TubularOffsetBot_OffsetBotId",
                        column: x => x.OffsetBotId,
                        principalTable: "TubularOffsetBot",
                        principalColumn: "OffsetBotId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularSensor_TubularMwdTool_TubularMwdToolMwdToolId",
                        column: x => x.TubularMwdToolMwdToolId,
                        principalTable: "TubularMwdTool",
                        principalColumn: "MwdToolId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TubularComponent",
                columns: table => new
                {
                    TubularComponentId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TypeTubularComp = table.Column<string>(nullable: true),
                    Sequence = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    IdTubularIdId = table.Column<int>(nullable: true),
                    OdId = table.Column<int>(nullable: true),
                    LenId = table.Column<int>(nullable: true),
                    LenJointAvId = table.Column<int>(nullable: true),
                    NumJointStand = table.Column<string>(nullable: true),
                    WtPerLenId = table.Column<int>(nullable: true),
                    Grade = table.Column<string>(nullable: true),
                    OdDriftId = table.Column<int>(nullable: true),
                    TensYieldId = table.Column<int>(nullable: true),
                    TqYieldId = table.Column<int>(nullable: true),
                    StressFatigId = table.Column<int>(nullable: true),
                    LenFishneckId = table.Column<int>(nullable: true),
                    IdFishneckId = table.Column<int>(nullable: true),
                    OdFishneckId = table.Column<int>(nullable: true),
                    DispId = table.Column<int>(nullable: true),
                    PresBurstId = table.Column<int>(nullable: true),
                    PresCollapseId = table.Column<int>(nullable: true),
                    ClassService = table.Column<string>(nullable: true),
                    WearWallId = table.Column<int>(nullable: true),
                    ThickWallId = table.Column<int>(nullable: true),
                    ConfigCon = table.Column<string>(nullable: true),
                    BendStiffnessId = table.Column<int>(nullable: true),
                    AxialStiffnessId = table.Column<int>(nullable: true),
                    TorsionalStiffnessId = table.Column<int>(nullable: true),
                    TypeMaterial = table.Column<string>(nullable: true),
                    DoglegMxId = table.Column<int>(nullable: true),
                    Vendor = table.Column<string>(nullable: true),
                    Model = table.Column<string>(nullable: true),
                    NameTagId = table.Column<int>(nullable: true),
                    BitRecordBitId = table.Column<int>(nullable: true),
                    AreaNozzleFlowId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    HoleOpenerId = table.Column<int>(nullable: true),
                    StabilizerId = table.Column<int>(nullable: true),
                    MotorId = table.Column<int>(nullable: true),
                    BendId = table.Column<int>(nullable: true),
                    MwdToolId = table.Column<int>(nullable: true),
                    ConnectionId = table.Column<int>(nullable: true),
                    JarId = table.Column<int>(nullable: true),
                    TubularId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularComponent", x => x.TubularComponentId);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularAreaNozzleFlow_AreaNozzleFlowId",
                        column: x => x.AreaNozzleFlowId,
                        principalTable: "TubularAreaNozzleFlow",
                        principalColumn: "AreaNozzleFlowId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularAxialStiffness_AxialStiffnessId",
                        column: x => x.AxialStiffnessId,
                        principalTable: "TubularAxialStiffness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularBend_BendId",
                        column: x => x.BendId,
                        principalTable: "TubularBend",
                        principalColumn: "BendId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularBendStiffness_BendStiffnessId",
                        column: x => x.BendStiffnessId,
                        principalTable: "TubularBendStiffness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularBitRecord_BitRecordBitId",
                        column: x => x.BitRecordBitId,
                        principalTable: "TubularBitRecord",
                        principalColumn: "BitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularConnection_ConnectionId",
                        column: x => x.ConnectionId,
                        principalTable: "TubularConnection",
                        principalColumn: "ConnectionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularDisp_DispId",
                        column: x => x.DispId,
                        principalTable: "TubularDisp",
                        principalColumn: "DispId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularDoglegMx_DoglegMxId",
                        column: x => x.DoglegMxId,
                        principalTable: "TubularDoglegMx",
                        principalColumn: "DoglegMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularHoleOpener_HoleOpenerId",
                        column: x => x.HoleOpenerId,
                        principalTable: "TubularHoleOpener",
                        principalColumn: "HoleOpenerId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularIdFishneck_IdFishneckId",
                        column: x => x.IdFishneckId,
                        principalTable: "TubularIdFishneck",
                        principalColumn: "IdFishneckId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularId_IdTubularIdId",
                        column: x => x.IdTubularIdId,
                        principalTable: "TubularId",
                        principalColumn: "TubularIdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularJar_JarId",
                        column: x => x.JarId,
                        principalTable: "TubularJar",
                        principalColumn: "JarId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularLenFishneck_LenFishneckId",
                        column: x => x.LenFishneckId,
                        principalTable: "TubularLenFishneck",
                        principalColumn: "LenFishneckId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularLen_LenId",
                        column: x => x.LenId,
                        principalTable: "TubularLen",
                        principalColumn: "LenId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularLenJointAv_LenJointAvId",
                        column: x => x.LenJointAvId,
                        principalTable: "TubularLenJointAv",
                        principalColumn: "LenJointAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularMotor_MotorId",
                        column: x => x.MotorId,
                        principalTable: "TubularMotor",
                        principalColumn: "MotorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularMwdTool_MwdToolId",
                        column: x => x.MwdToolId,
                        principalTable: "TubularMwdTool",
                        principalColumn: "MwdToolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularNameTag_NameTagId",
                        column: x => x.NameTagId,
                        principalTable: "TubularNameTag",
                        principalColumn: "NameTagId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularOdDrifts_OdDriftId",
                        column: x => x.OdDriftId,
                        principalTable: "TubularOdDrifts",
                        principalColumn: "OdDriftId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularOdFishneck_OdFishneckId",
                        column: x => x.OdFishneckId,
                        principalTable: "TubularOdFishneck",
                        principalColumn: "OdFishneckId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularOd_OdId",
                        column: x => x.OdId,
                        principalTable: "TubularOd",
                        principalColumn: "OdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularPresBurst_PresBurstId",
                        column: x => x.PresBurstId,
                        principalTable: "TubularPresBurst",
                        principalColumn: "PresBurstId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularPresCollapse_PresCollapseId",
                        column: x => x.PresCollapseId,
                        principalTable: "TubularPresCollapse",
                        principalColumn: "PresCollapseId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularStabilizer_StabilizerId",
                        column: x => x.StabilizerId,
                        principalTable: "TubularStabilizer",
                        principalColumn: "StabilizerId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularStressFatig_StressFatigId",
                        column: x => x.StressFatigId,
                        principalTable: "TubularStressFatig",
                        principalColumn: "StressFatigId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularTensYield_TensYieldId",
                        column: x => x.TensYieldId,
                        principalTable: "TubularTensYield",
                        principalColumn: "TensYieldId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularThickWall_ThickWallId",
                        column: x => x.ThickWallId,
                        principalTable: "TubularThickWall",
                        principalColumn: "ThickWallId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularTorsionalStiffness_TorsionalStiffnessId",
                        column: x => x.TorsionalStiffnessId,
                        principalTable: "TubularTorsionalStiffness",
                        principalColumn: "TorsionalStiffnessId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularTqYield_TqYieldId",
                        column: x => x.TqYieldId,
                        principalTable: "TubularTqYield",
                        principalColumn: "TqYieldId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_Tubulars_TubularId",
                        column: x => x.TubularId,
                        principalTable: "Tubulars",
                        principalColumn: "TubularId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularWearWall_WearWallId",
                        column: x => x.WearWallId,
                        principalTable: "TubularWearWall",
                        principalColumn: "WearWallId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularComponent_TubularWtPerLen_WtPerLenId",
                        column: x => x.WtPerLenId,
                        principalTable: "TubularWtPerLen",
                        principalColumn: "WtPerLenId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WbGeometrys",
                columns: table => new
                {
                    WbGeometryId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    DTimReport = table.Column<string>(nullable: true),
                    MdBottomDiaDriftId = table.Column<int>(nullable: true),
                    GapAirId = table.Column<int>(nullable: true),
                    DepthWaterMeanId = table.Column<int>(nullable: true),
                    WbGeometrySectionId = table.Column<int>(nullable: true),
                    CommonDataWbGeometryCommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WbGeometrys", x => x.WbGeometryId);
                    table.ForeignKey(
                        name: "FK_WbGeometrys_WbGeometryCommonData_CommonDataWbGeometryCommonDataId",
                        column: x => x.CommonDataWbGeometryCommonDataId,
                        principalTable: "WbGeometryCommonData",
                        principalColumn: "WbGeometryCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WbGeometrys_WbGeometryDepthWaterMean_DepthWaterMeanId",
                        column: x => x.DepthWaterMeanId,
                        principalTable: "WbGeometryDepthWaterMean",
                        principalColumn: "DepthWaterMeanId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WbGeometrys_WbGeometryGapAir_GapAirId",
                        column: x => x.GapAirId,
                        principalTable: "WbGeometryGapAir",
                        principalColumn: "GapAirId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WbGeometrys_WbGeometryMdBottom_MdBottomDiaDriftId",
                        column: x => x.MdBottomDiaDriftId,
                        principalTable: "WbGeometryMdBottom",
                        principalColumn: "DiaDriftId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WbGeometrys_WbGeometrySection_WbGeometrySectionId",
                        column: x => x.WbGeometrySectionId,
                        principalTable: "WbGeometrySection",
                        principalColumn: "WbGeometrySectionId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CementJobCementStages",
                columns: table => new
                {
                    CementStageId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uid = table.Column<string>(nullable: true),
                    NumStage = table.Column<string>(nullable: true),
                    TypeStage = table.Column<string>(nullable: true),
                    DTimMixStart = table.Column<string>(nullable: true),
                    DTimPumpStart = table.Column<string>(nullable: true),
                    DTimPumpEnd = table.Column<string>(nullable: true),
                    DTimDisplaceStart = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomId = table.Column<int>(nullable: true),
                    VolExcessId = table.Column<int>(nullable: true),
                    FlowrateDisplaceAvId = table.Column<int>(nullable: true),
                    FlowrateDisplaceMxId = table.Column<int>(nullable: true),
                    PresDisplaceId = table.Column<int>(nullable: true),
                    VolReturnsId = table.Column<int>(nullable: true),
                    ETimMudCirculationId = table.Column<int>(nullable: true),
                    FlowrateMudCircCementJobFlowrateMudCircId = table.Column<int>(nullable: true),
                    PresMudCircId = table.Column<int>(nullable: true),
                    FlowrateEndId = table.Column<int>(nullable: true),
                    CementingFluidId = table.Column<int>(nullable: true),
                    AfterFlowAnn = table.Column<string>(nullable: true),
                    SqueezeObj = table.Column<string>(nullable: true),
                    SqueezeObtained = table.Column<string>(nullable: true),
                    MdStringId = table.Column<int>(nullable: true),
                    MdToolId = table.Column<int>(nullable: true),
                    MdCoilTbgId = table.Column<int>(nullable: true),
                    VolCsgInId = table.Column<int>(nullable: true),
                    VolCsgOutId = table.Column<int>(nullable: true),
                    TailPipeUsed = table.Column<string>(nullable: true),
                    DiaTailPipeId = table.Column<int>(nullable: true),
                    TailPipePerf = table.Column<string>(nullable: true),
                    PresTbgStartPresTbgStId = table.Column<int>(nullable: true),
                    PresTbgEndId = table.Column<int>(nullable: true),
                    PresCsgStartId = table.Column<int>(nullable: true),
                    PresCsgEndId = table.Column<int>(nullable: true),
                    PresBackPressureId = table.Column<int>(nullable: true),
                    PresCoilTbgStartId = table.Column<int>(nullable: true),
                    PresCoilTbgEndId = table.Column<int>(nullable: true),
                    PresBreakDownId = table.Column<int>(nullable: true),
                    FlowrateBreakDownId = table.Column<int>(nullable: true),
                    PresSqueezeAvId = table.Column<int>(nullable: true),
                    PresSqueezeEndId = table.Column<int>(nullable: true),
                    PresSqueezeHeld = table.Column<string>(nullable: true),
                    PresSqueezeId = table.Column<int>(nullable: true),
                    ETimPresHeldId = table.Column<int>(nullable: true),
                    FlowrateSqueezeAvId = table.Column<int>(nullable: true),
                    FlowrateSqueezeMxId = table.Column<int>(nullable: true),
                    FlowratePumpStartId = table.Column<int>(nullable: true),
                    FlowratePumpEndId = table.Column<int>(nullable: true),
                    PillBelowPlug = table.Column<string>(nullable: true),
                    PlugCatcher = table.Column<string>(nullable: true),
                    MdCircOutId = table.Column<int>(nullable: true),
                    VolCircPriorId = table.Column<int>(nullable: true),
                    TypeOriginalMud = table.Column<string>(nullable: true),
                    WtMudId = table.Column<int>(nullable: true),
                    VisFunnelMudId = table.Column<int>(nullable: true),
                    PvMudId = table.Column<int>(nullable: true),
                    YpMudId = table.Column<int>(nullable: true),
                    Gel10SecId = table.Column<int>(nullable: true),
                    Gel10MinId = table.Column<int>(nullable: true),
                    TempBHCTId = table.Column<int>(nullable: true),
                    TempBHSTId = table.Column<int>(nullable: true),
                    VolExcessMethod = table.Column<string>(nullable: true),
                    MixMethod = table.Column<string>(nullable: true),
                    DensMeasBy = table.Column<string>(nullable: true),
                    AnnFlowAfter = table.Column<string>(nullable: true),
                    TopPlug = table.Column<string>(nullable: true),
                    BotPlug = table.Column<string>(nullable: true),
                    BotPlugNumber = table.Column<string>(nullable: true),
                    PlugBumped = table.Column<string>(nullable: true),
                    PresPriorBumpId = table.Column<int>(nullable: true),
                    PresBumpId = table.Column<int>(nullable: true),
                    PresHeldId = table.Column<int>(nullable: true),
                    FloatHeld = table.Column<string>(nullable: true),
                    VolMudLostId = table.Column<int>(nullable: true),
                    FluidDisplace = table.Column<string>(nullable: true),
                    DensDisplaceFluidId = table.Column<int>(nullable: true),
                    VolDisplaceFluidId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobCementStages", x => x.CementStageId);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobCementingFluids_CementingFluidId",
                        column: x => x.CementingFluidId,
                        principalTable: "CementJobCementingFluids",
                        principalColumn: "CementingFluidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobDensDisplaceFluids_DensDisplaceFluidId",
                        column: x => x.DensDisplaceFluidId,
                        principalTable: "CementJobDensDisplaceFluids",
                        principalColumn: "DensDisplaceFluidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobDiaTailPipes_DiaTailPipeId",
                        column: x => x.DiaTailPipeId,
                        principalTable: "CementJobDiaTailPipes",
                        principalColumn: "DiaTailPipeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobETimMudCirculations_ETimMudCirculationId",
                        column: x => x.ETimMudCirculationId,
                        principalTable: "CementJobETimMudCirculations",
                        principalColumn: "ETimMudCirculationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobETimPresHelds_ETimPresHeldId",
                        column: x => x.ETimPresHeldId,
                        principalTable: "CementJobETimPresHelds",
                        principalColumn: "ETimPresHeldId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobFlowrateBreakDowns_FlowrateBreakDownId",
                        column: x => x.FlowrateBreakDownId,
                        principalTable: "CementJobFlowrateBreakDowns",
                        principalColumn: "FlowrateBreakDownId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobFlowrateDisplaceAvs_FlowrateDisplaceAvId",
                        column: x => x.FlowrateDisplaceAvId,
                        principalTable: "CementJobFlowrateDisplaceAvs",
                        principalColumn: "FlowrateDisplaceAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobFlowrateDisplaceMxs_FlowrateDisplaceMxId",
                        column: x => x.FlowrateDisplaceMxId,
                        principalTable: "CementJobFlowrateDisplaceMxs",
                        principalColumn: "FlowrateDisplaceMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobFlowrateEnds_FlowrateEndId",
                        column: x => x.FlowrateEndId,
                        principalTable: "CementJobFlowrateEnds",
                        principalColumn: "FlowrateEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobFlowrateMudCircs_FlowrateMudCircCementJobFlowrateMudCircId",
                        column: x => x.FlowrateMudCircCementJobFlowrateMudCircId,
                        principalTable: "CementJobFlowrateMudCircs",
                        principalColumn: "CementJobFlowrateMudCircId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobFlowratePumpEnds_FlowratePumpEndId",
                        column: x => x.FlowratePumpEndId,
                        principalTable: "CementJobFlowratePumpEnds",
                        principalColumn: "FlowratePumpEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobFlowratePumpStarts_FlowratePumpStartId",
                        column: x => x.FlowratePumpStartId,
                        principalTable: "CementJobFlowratePumpStarts",
                        principalColumn: "FlowratePumpStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobFlowrateSqueezeAvs_FlowrateSqueezeAvId",
                        column: x => x.FlowrateSqueezeAvId,
                        principalTable: "CementJobFlowrateSqueezeAvs",
                        principalColumn: "FlowrateSqueezeAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobFlowrateSqueezeMxs_FlowrateSqueezeMxId",
                        column: x => x.FlowrateSqueezeMxId,
                        principalTable: "CementJobFlowrateSqueezeMxs",
                        principalColumn: "FlowrateSqueezeMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobGel10Mins_Gel10MinId",
                        column: x => x.Gel10MinId,
                        principalTable: "CementJobGel10Mins",
                        principalColumn: "Gel10MinId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobGel10Secs_Gel10SecId",
                        column: x => x.Gel10SecId,
                        principalTable: "CementJobGel10Secs",
                        principalColumn: "Gel10SecId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobMdBottoms_MdBottomId",
                        column: x => x.MdBottomId,
                        principalTable: "CementJobMdBottoms",
                        principalColumn: "MdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobMdCircOuts_MdCircOutId",
                        column: x => x.MdCircOutId,
                        principalTable: "CementJobMdCircOuts",
                        principalColumn: "MdCircOutId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobMdCoilTbgs_MdCoilTbgId",
                        column: x => x.MdCoilTbgId,
                        principalTable: "CementJobMdCoilTbgs",
                        principalColumn: "MdCoilTbgId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobMdStrings_MdStringId",
                        column: x => x.MdStringId,
                        principalTable: "CementJobMdStrings",
                        principalColumn: "MdStringId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobMdTools_MdToolId",
                        column: x => x.MdToolId,
                        principalTable: "CementJobMdTools",
                        principalColumn: "MdToolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobMdTops_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "CementJobMdTops",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresBackPressures_PresBackPressureId",
                        column: x => x.PresBackPressureId,
                        principalTable: "CementJobPresBackPressures",
                        principalColumn: "PresBackPressureId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresBreakDowns_PresBreakDownId",
                        column: x => x.PresBreakDownId,
                        principalTable: "CementJobPresBreakDowns",
                        principalColumn: "PresBreakDownId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresBumps_PresBumpId",
                        column: x => x.PresBumpId,
                        principalTable: "CementJobPresBumps",
                        principalColumn: "PresBumpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresCoilTbgEnds_PresCoilTbgEndId",
                        column: x => x.PresCoilTbgEndId,
                        principalTable: "CementJobPresCoilTbgEnds",
                        principalColumn: "PresCoilTbgEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresCoilTbgStarts_PresCoilTbgStartId",
                        column: x => x.PresCoilTbgStartId,
                        principalTable: "CementJobPresCoilTbgStarts",
                        principalColumn: "PresCoilTbgStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresCsgEnds_PresCsgEndId",
                        column: x => x.PresCsgEndId,
                        principalTable: "CementJobPresCsgEnds",
                        principalColumn: "PresCsgEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresCsgStarts_PresCsgStartId",
                        column: x => x.PresCsgStartId,
                        principalTable: "CementJobPresCsgStarts",
                        principalColumn: "PresCsgStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresDisplaces_PresDisplaceId",
                        column: x => x.PresDisplaceId,
                        principalTable: "CementJobPresDisplaces",
                        principalColumn: "PresDisplaceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresHelds_PresHeldId",
                        column: x => x.PresHeldId,
                        principalTable: "CementJobPresHelds",
                        principalColumn: "PresHeldId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresMudCircs_PresMudCircId",
                        column: x => x.PresMudCircId,
                        principalTable: "CementJobPresMudCircs",
                        principalColumn: "PresMudCircId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresPriorBumps_PresPriorBumpId",
                        column: x => x.PresPriorBumpId,
                        principalTable: "CementJobPresPriorBumps",
                        principalColumn: "PresPriorBumpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresSqueezeAvs_PresSqueezeAvId",
                        column: x => x.PresSqueezeAvId,
                        principalTable: "CementJobPresSqueezeAvs",
                        principalColumn: "PresSqueezeAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresSqueezeEnds_PresSqueezeEndId",
                        column: x => x.PresSqueezeEndId,
                        principalTable: "CementJobPresSqueezeEnds",
                        principalColumn: "PresSqueezeEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresSqueezes_PresSqueezeId",
                        column: x => x.PresSqueezeId,
                        principalTable: "CementJobPresSqueezes",
                        principalColumn: "PresSqueezeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresTbgEnds_PresTbgEndId",
                        column: x => x.PresTbgEndId,
                        principalTable: "CementJobPresTbgEnds",
                        principalColumn: "PresTbgEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPresTbgStarts_PresTbgStartPresTbgStId",
                        column: x => x.PresTbgStartPresTbgStId,
                        principalTable: "CementJobPresTbgStarts",
                        principalColumn: "PresTbgStId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobPvMuds_PvMudId",
                        column: x => x.PvMudId,
                        principalTable: "CementJobPvMuds",
                        principalColumn: "PvMudId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobTempBHCTs_TempBHCTId",
                        column: x => x.TempBHCTId,
                        principalTable: "CementJobTempBHCTs",
                        principalColumn: "TempBHCTId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobTempBHSTs_TempBHSTId",
                        column: x => x.TempBHSTId,
                        principalTable: "CementJobTempBHSTs",
                        principalColumn: "TempBHSTId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobVisFunnelMuds_VisFunnelMudId",
                        column: x => x.VisFunnelMudId,
                        principalTable: "CementJobVisFunnelMuds",
                        principalColumn: "VisFunnelMudId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobVolCircPriors_VolCircPriorId",
                        column: x => x.VolCircPriorId,
                        principalTable: "CementJobVolCircPriors",
                        principalColumn: "VolCircPriorId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobVolCsgIns_VolCsgInId",
                        column: x => x.VolCsgInId,
                        principalTable: "CementJobVolCsgIns",
                        principalColumn: "VolCsgInId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobVolCsgOuts_VolCsgOutId",
                        column: x => x.VolCsgOutId,
                        principalTable: "CementJobVolCsgOuts",
                        principalColumn: "VolCsgOutId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobVolDisplaceFluids_VolDisplaceFluidId",
                        column: x => x.VolDisplaceFluidId,
                        principalTable: "CementJobVolDisplaceFluids",
                        principalColumn: "VolDisplaceFluidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobVolExcesss_VolExcessId",
                        column: x => x.VolExcessId,
                        principalTable: "CementJobVolExcesss",
                        principalColumn: "VolExcessId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobVolMudLosts_VolMudLostId",
                        column: x => x.VolMudLostId,
                        principalTable: "CementJobVolMudLosts",
                        principalColumn: "VolMudLostId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobVolReturnss_VolReturnsId",
                        column: x => x.VolReturnsId,
                        principalTable: "CementJobVolReturnss",
                        principalColumn: "VolReturnsId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobWtMuds_WtMudId",
                        column: x => x.WtMudId,
                        principalTable: "CementJobWtMuds",
                        principalColumn: "WtMudId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobCementStages_CementJobYpMuds_YpMudId",
                        column: x => x.YpMudId,
                        principalTable: "CementJobYpMuds",
                        principalColumn: "YpMudId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ConvCores",
                columns: table => new
                {
                    ConvCoreId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    MdCoreTopId = table.Column<int>(nullable: true),
                    MdCoreBottomId = table.Column<int>(nullable: true),
                    DTimCoreStart = table.Column<string>(nullable: true),
                    DTimCoreEnd = table.Column<string>(nullable: true),
                    CoreReference = table.Column<string>(nullable: true),
                    CoringContractor = table.Column<string>(nullable: true),
                    AnalysisContractor = table.Column<string>(nullable: true),
                    CoreBarrel = table.Column<string>(nullable: true),
                    InnerBarrelUsed = table.Column<string>(nullable: true),
                    InnerBarrelType = table.Column<string>(nullable: true),
                    LenBarrelId = table.Column<int>(nullable: true),
                    CoreBitType = table.Column<string>(nullable: true),
                    DiaBitId = table.Column<int>(nullable: true),
                    DiaCoreId = table.Column<int>(nullable: true),
                    LenCoredId = table.Column<int>(nullable: true),
                    LenRecoveredId = table.Column<int>(nullable: true),
                    RecoverPcLenRecoveredId = table.Column<int>(nullable: true),
                    InclHoleId = table.Column<int>(nullable: true),
                    CoreOrientation = table.Column<string>(nullable: true),
                    CoreMethod = table.Column<string>(nullable: true),
                    CoreTreatmentMethod = table.Column<string>(nullable: true),
                    CoreFluidUsed = table.Column<string>(nullable: true),
                    NameFormation = table.Column<string>(nullable: true),
                    GeologyIntervalId = table.Column<int>(nullable: true),
                    CoreDescription = table.Column<string>(nullable: true),
                    CommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConvCores", x => x.ConvCoreId);
                    table.ForeignKey(
                        name: "FK_ConvCores_ConvCoreCommonDatas_CommonDataId",
                        column: x => x.CommonDataId,
                        principalTable: "ConvCoreCommonDatas",
                        principalColumn: "CommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCores_ConvCoreDiaBits_DiaBitId",
                        column: x => x.DiaBitId,
                        principalTable: "ConvCoreDiaBits",
                        principalColumn: "DiaBitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCores_ConvCoreDiaCores_DiaCoreId",
                        column: x => x.DiaCoreId,
                        principalTable: "ConvCoreDiaCores",
                        principalColumn: "DiaCoreId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCores_ConvCoreGeologyIntervals_GeologyIntervalId",
                        column: x => x.GeologyIntervalId,
                        principalTable: "ConvCoreGeologyIntervals",
                        principalColumn: "GeologyIntervalId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCores_ConvCoreInclHoles_InclHoleId",
                        column: x => x.InclHoleId,
                        principalTable: "ConvCoreInclHoles",
                        principalColumn: "InclHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCores_ConvCoreLenBarrels_LenBarrelId",
                        column: x => x.LenBarrelId,
                        principalTable: "ConvCoreLenBarrels",
                        principalColumn: "LenBarrelId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCores_ConvCoreLenCoreds_LenCoredId",
                        column: x => x.LenCoredId,
                        principalTable: "ConvCoreLenCoreds",
                        principalColumn: "LenCoredId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCores_ConvCoreLenRecovereds_LenRecoveredId",
                        column: x => x.LenRecoveredId,
                        principalTable: "ConvCoreLenRecovereds",
                        principalColumn: "LenRecoveredId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCores_ConvCoreMdCoreBottoms_MdCoreBottomId",
                        column: x => x.MdCoreBottomId,
                        principalTable: "ConvCoreMdCoreBottoms",
                        principalColumn: "MdCoreBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCores_ConvCoreMdCoreTops_MdCoreTopId",
                        column: x => x.MdCoreTopId,
                        principalTable: "ConvCoreMdCoreTops",
                        principalColumn: "MdCoreTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ConvCores_ConvCoreRecoverPcs_RecoverPcLenRecoveredId",
                        column: x => x.RecoverPcLenRecoveredId,
                        principalTable: "ConvCoreRecoverPcs",
                        principalColumn: "LenRecoveredId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemUsesEllipsoid",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    EllipsoidId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemUsesEllipsoid", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemUsesEllipsoid_CoordinateReferenceSystemEllipsoid_EllipsoidId",
                        column: x => x.EllipsoidId,
                        principalTable: "CoordinateReferenceSystemEllipsoid",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MudLogGeologyInterval",
                columns: table => new
                {
                    GeologyIntervalId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TypeLithology = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomId = table.Column<int>(nullable: true),
                    DTim = table.Column<string>(nullable: true),
                    TvdTopId = table.Column<int>(nullable: true),
                    TvdBaseId = table.Column<int>(nullable: true),
                    RopAvId = table.Column<int>(nullable: true),
                    RopMnId = table.Column<int>(nullable: true),
                    RopMxId = table.Column<int>(nullable: true),
                    WobAvId = table.Column<int>(nullable: true),
                    TqAvId = table.Column<int>(nullable: true),
                    RpmAvId = table.Column<int>(nullable: true),
                    WtMudAvId = table.Column<int>(nullable: true),
                    EcdTdAvId = table.Column<int>(nullable: true),
                    DxcAv = table.Column<string>(nullable: true),
                    LithologyId = table.Column<int>(nullable: true),
                    ShowId = table.Column<int>(nullable: true),
                    ChromatographId = table.Column<int>(nullable: true),
                    MudGasId = table.Column<int>(nullable: true),
                    DensBulkId = table.Column<int>(nullable: true),
                    DensShaleId = table.Column<int>(nullable: true),
                    CalciteId = table.Column<int>(nullable: true),
                    DolomiteId = table.Column<int>(nullable: true),
                    CecId = table.Column<int>(nullable: true),
                    CalcStabId = table.Column<int>(nullable: true),
                    LithostratigraphicId = table.Column<int>(nullable: true),
                    SizeMnId = table.Column<int>(nullable: true),
                    SizeMxId = table.Column<int>(nullable: true),
                    LenPlugId = table.Column<int>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    CuttingFluid = table.Column<string>(nullable: true),
                    CleaningMethod = table.Column<string>(nullable: true),
                    DryingMethod = table.Column<string>(nullable: true),
                    CommonTimeId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogGeologyInterval", x => x.GeologyIntervalId);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogCalcStab_CalcStabId",
                        column: x => x.CalcStabId,
                        principalTable: "MudLogCalcStab",
                        principalColumn: "CalcStabId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogCalcite_CalciteId",
                        column: x => x.CalciteId,
                        principalTable: "MudLogCalcite",
                        principalColumn: "CalciteId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogCec_CecId",
                        column: x => x.CecId,
                        principalTable: "MudLogCec",
                        principalColumn: "CecId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogChromatograph_ChromatographId",
                        column: x => x.ChromatographId,
                        principalTable: "MudLogChromatograph",
                        principalColumn: "ChromatographId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogCommonTime_CommonTimeId",
                        column: x => x.CommonTimeId,
                        principalTable: "MudLogCommonTime",
                        principalColumn: "CommonTimeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogDensBulk_DensBulkId",
                        column: x => x.DensBulkId,
                        principalTable: "MudLogDensBulk",
                        principalColumn: "DensBulkId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogDensShale_DensShaleId",
                        column: x => x.DensShaleId,
                        principalTable: "MudLogDensShale",
                        principalColumn: "DensShaleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogDolomite_DolomiteId",
                        column: x => x.DolomiteId,
                        principalTable: "MudLogDolomite",
                        principalColumn: "DolomiteId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogEcdTdAv_EcdTdAvId",
                        column: x => x.EcdTdAvId,
                        principalTable: "MudLogEcdTdAv",
                        principalColumn: "EcdTdAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogLenPlug_LenPlugId",
                        column: x => x.LenPlugId,
                        principalTable: "MudLogLenPlug",
                        principalColumn: "LenPlugId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogLithology_LithologyId",
                        column: x => x.LithologyId,
                        principalTable: "MudLogLithology",
                        principalColumn: "LithologyId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogLithostratigraphic_LithostratigraphicId",
                        column: x => x.LithostratigraphicId,
                        principalTable: "MudLogLithostratigraphic",
                        principalColumn: "LithostratigraphicId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogMdBottom_MdBottomId",
                        column: x => x.MdBottomId,
                        principalTable: "MudLogMdBottom",
                        principalColumn: "MdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogMdTop_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "MudLogMdTop",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogMudGas_MudGasId",
                        column: x => x.MudGasId,
                        principalTable: "MudLogMudGas",
                        principalColumn: "MudGasId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogRopAv_RopAvId",
                        column: x => x.RopAvId,
                        principalTable: "MudLogRopAv",
                        principalColumn: "RopAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogRopMn_RopMnId",
                        column: x => x.RopMnId,
                        principalTable: "MudLogRopMn",
                        principalColumn: "RopMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogRopMx_RopMxId",
                        column: x => x.RopMxId,
                        principalTable: "MudLogRopMx",
                        principalColumn: "RopMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogRpmAv_RpmAvId",
                        column: x => x.RpmAvId,
                        principalTable: "MudLogRpmAv",
                        principalColumn: "RpmAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogShow_ShowId",
                        column: x => x.ShowId,
                        principalTable: "MudLogShow",
                        principalColumn: "ShowId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogSizeMn_SizeMnId",
                        column: x => x.SizeMnId,
                        principalTable: "MudLogSizeMn",
                        principalColumn: "SizeMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogSizeMx_SizeMxId",
                        column: x => x.SizeMxId,
                        principalTable: "MudLogSizeMx",
                        principalColumn: "SizeMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogTqAv_TqAvId",
                        column: x => x.TqAvId,
                        principalTable: "MudLogTqAv",
                        principalColumn: "TqAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogTvdBase_TvdBaseId",
                        column: x => x.TvdBaseId,
                        principalTable: "MudLogTvdBase",
                        principalColumn: "TvdBaseId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogTvdTop_TvdTopId",
                        column: x => x.TvdTopId,
                        principalTable: "MudLogTvdTop",
                        principalColumn: "TvdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogWobAv_WobAvId",
                        column: x => x.WobAvId,
                        principalTable: "MudLogWobAv",
                        principalColumn: "WobAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogGeologyInterval_MudLogWtMudAv_WtMudAvId",
                        column: x => x.WtMudAvId,
                        principalTable: "MudLogWtMudAv",
                        principalColumn: "WtMudAvId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ObjectGroups",
                columns: table => new
                {
                    ObjectGroupId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    GroupType = table.Column<string>(nullable: true),
                    Sequence = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    ParamId = table.Column<int>(nullable: true),
                    MemberObjectId = table.Column<int>(nullable: true),
                    CommonDataObjectGroupCommonDataId = table.Column<int>(nullable: true),
                    CustomData = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectGroups", x => x.ObjectGroupId);
                    table.ForeignKey(
                        name: "FK_ObjectGroups_ObjectGroupCommonDatas_CommonDataObjectGroupCommonDataId",
                        column: x => x.CommonDataObjectGroupCommonDataId,
                        principalTable: "ObjectGroupCommonDatas",
                        principalColumn: "ObjectGroupCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroups_ObjectGroupMemberObjects_MemberObjectId",
                        column: x => x.MemberObjectId,
                        principalTable: "ObjectGroupMemberObjects",
                        principalColumn: "MemberObjectId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ObjectGroups_ObjectGroupParam_ParamId",
                        column: x => x.ParamId,
                        principalTable: "ObjectGroupParam",
                        principalColumn: "ParamId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportLocations",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    WellCRSId = table.Column<int>(nullable: true),
                    LatitudeId = table.Column<int>(nullable: true),
                    LongitudeId = table.Column<int>(nullable: true),
                    ProjectedXId = table.Column<int>(nullable: true),
                    ProjectedYId = table.Column<int>(nullable: true),
                    OpsReportTrajectoryStationUid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportLocations", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_OpsReportLocations_OpsReportLatitudes_LatitudeId",
                        column: x => x.LatitudeId,
                        principalTable: "OpsReportLatitudes",
                        principalColumn: "LatitudeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportLocations_OpsReportLongitudes_LongitudeId",
                        column: x => x.LongitudeId,
                        principalTable: "OpsReportLongitudes",
                        principalColumn: "LongitudeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportLocations_OpsReportTrajectoryStations_OpsReportTrajectoryStationUid",
                        column: x => x.OpsReportTrajectoryStationUid,
                        principalTable: "OpsReportTrajectoryStations",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportLocations_OpsReportProjectedXs_ProjectedXId",
                        column: x => x.ProjectedXId,
                        principalTable: "OpsReportProjectedXs",
                        principalColumn: "ProjectedXId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportLocations_OpsReportProjectedYs_ProjectedYId",
                        column: x => x.ProjectedYId,
                        principalTable: "OpsReportProjectedYs",
                        principalColumn: "ProjectedYId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportLocations_OpsReportWellCRSs_WellCRSId",
                        column: x => x.WellCRSId,
                        principalTable: "OpsReportWellCRSs",
                        principalColumn: "WellCRSId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReports",
                columns: table => new
                {
                    OpsReportId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    RigOpsReportRigId = table.Column<int>(nullable: true),
                    DTim = table.Column<string>(nullable: true),
                    ETimStartId = table.Column<int>(nullable: true),
                    ETimSpudId = table.Column<int>(nullable: true),
                    ETimLocId = table.Column<int>(nullable: true),
                    MdReportId = table.Column<int>(nullable: true),
                    TvdReportId = table.Column<int>(nullable: true),
                    DistDrillId = table.Column<int>(nullable: true),
                    ETimDrillId = table.Column<int>(nullable: true),
                    MdPlannedId = table.Column<int>(nullable: true),
                    RopAvId = table.Column<int>(nullable: true),
                    RopCurrentId = table.Column<int>(nullable: true),
                    Supervisor = table.Column<string>(nullable: true),
                    Engineer = table.Column<string>(nullable: true),
                    Geologist = table.Column<string>(nullable: true),
                    ETimDrillRotId = table.Column<int>(nullable: true),
                    ETimDrillSlidId = table.Column<int>(nullable: true),
                    ETimCircId = table.Column<int>(nullable: true),
                    ETimReamId = table.Column<int>(nullable: true),
                    ETimHoldId = table.Column<int>(nullable: true),
                    ETimSteeringId = table.Column<int>(nullable: true),
                    DistDrillRotId = table.Column<int>(nullable: true),
                    DistDrillSlidId = table.Column<int>(nullable: true),
                    DistReamId = table.Column<int>(nullable: true),
                    DistHoldId = table.Column<int>(nullable: true),
                    DistSteeringId = table.Column<int>(nullable: true),
                    NumPob = table.Column<string>(nullable: true),
                    NumContract = table.Column<string>(nullable: true),
                    NumOperator = table.Column<string>(nullable: true),
                    NumService = table.Column<string>(nullable: true),
                    ActivityUid = table.Column<string>(nullable: true),
                    DrillingParamsUid = table.Column<string>(nullable: true),
                    TrajectoryStationUid = table.Column<string>(nullable: true),
                    FluidUid = table.Column<string>(nullable: true),
                    MudVolumeId = table.Column<int>(nullable: true),
                    MudInventoryId = table.Column<int>(nullable: true),
                    BulkId = table.Column<int>(nullable: true),
                    RigResponseId = table.Column<int>(nullable: true),
                    PumpOpId = table.Column<int>(nullable: true),
                    ShakerOpId = table.Column<int>(nullable: true),
                    HseId = table.Column<int>(nullable: true),
                    SupportCraftId = table.Column<int>(nullable: true),
                    WeatherId = table.Column<int>(nullable: true),
                    NumAFE = table.Column<string>(nullable: true),
                    CostDayId = table.Column<int>(nullable: true),
                    CostDayMudId = table.Column<int>(nullable: true),
                    DiaHoleId = table.Column<int>(nullable: true),
                    ConditionHole = table.Column<string>(nullable: true),
                    Lithology = table.Column<string>(nullable: true),
                    NameFormation = table.Column<string>(nullable: true),
                    DiaCsgLastId = table.Column<int>(nullable: true),
                    MdCsgLastId = table.Column<int>(nullable: true),
                    TvdCsgLastId = table.Column<int>(nullable: true),
                    TvdLotId = table.Column<int>(nullable: true),
                    PresLotEmwId = table.Column<int>(nullable: true),
                    PresKickTolId = table.Column<int>(nullable: true),
                    VolKickTolId = table.Column<int>(nullable: true),
                    MaaspId = table.Column<int>(nullable: true),
                    TubularId = table.Column<int>(nullable: true),
                    Sum24Hr = table.Column<string>(nullable: true),
                    Forecast24Hr = table.Column<string>(nullable: true),
                    StatusCurrent = table.Column<string>(nullable: true),
                    CommonDataOpsReportsCommonDataid = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReports", x => x.OpsReportId);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportActivitys_ActivityUid",
                        column: x => x.ActivityUid,
                        principalTable: "OpsReportActivitys",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportBulks_BulkId",
                        column: x => x.BulkId,
                        principalTable: "OpsReportBulks",
                        principalColumn: "BulkId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportsCommonDatas_CommonDataOpsReportsCommonDataid",
                        column: x => x.CommonDataOpsReportsCommonDataid,
                        principalTable: "OpsReportsCommonDatas",
                        principalColumn: "OpsReportsCommonDataid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportCostDays_CostDayId",
                        column: x => x.CostDayId,
                        principalTable: "OpsReportCostDays",
                        principalColumn: "CostDayId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportCostDayMuds_CostDayMudId",
                        column: x => x.CostDayMudId,
                        principalTable: "OpsReportCostDayMuds",
                        principalColumn: "CostDayMudId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportDiaCsgLasts_DiaCsgLastId",
                        column: x => x.DiaCsgLastId,
                        principalTable: "OpsReportDiaCsgLasts",
                        principalColumn: "DiaCsgLastId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportDiaHoles_DiaHoleId",
                        column: x => x.DiaHoleId,
                        principalTable: "OpsReportDiaHoles",
                        principalColumn: "DiaHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportDistDrills_DistDrillId",
                        column: x => x.DistDrillId,
                        principalTable: "OpsReportDistDrills",
                        principalColumn: "DistDrillId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportDistDrillRots_DistDrillRotId",
                        column: x => x.DistDrillRotId,
                        principalTable: "OpsReportDistDrillRots",
                        principalColumn: "DistDrillRotId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportDistDrillSlids_DistDrillSlidId",
                        column: x => x.DistDrillSlidId,
                        principalTable: "OpsReportDistDrillSlids",
                        principalColumn: "DistDrillSlidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportDistHolds_DistHoldId",
                        column: x => x.DistHoldId,
                        principalTable: "OpsReportDistHolds",
                        principalColumn: "DistHoldId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportDistReams_DistReamId",
                        column: x => x.DistReamId,
                        principalTable: "OpsReportDistReams",
                        principalColumn: "DistReamId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportDistSteerings_DistSteeringId",
                        column: x => x.DistSteeringId,
                        principalTable: "OpsReportDistSteerings",
                        principalColumn: "DistSteeringId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportDrillingParams_DrillingParamsUid",
                        column: x => x.DrillingParamsUid,
                        principalTable: "OpsReportDrillingParams",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportETimCircs_ETimCircId",
                        column: x => x.ETimCircId,
                        principalTable: "OpsReportETimCircs",
                        principalColumn: "ETimCircId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportETimDrills_ETimDrillId",
                        column: x => x.ETimDrillId,
                        principalTable: "OpsReportETimDrills",
                        principalColumn: "ETimDrillId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportETimDrillRots_ETimDrillRotId",
                        column: x => x.ETimDrillRotId,
                        principalTable: "OpsReportETimDrillRots",
                        principalColumn: "ETimDrillRotId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportETimDrillSlids_ETimDrillSlidId",
                        column: x => x.ETimDrillSlidId,
                        principalTable: "OpsReportETimDrillSlids",
                        principalColumn: "ETimDrillSlidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportETimHolds_ETimHoldId",
                        column: x => x.ETimHoldId,
                        principalTable: "OpsReportETimHolds",
                        principalColumn: "ETimHoldId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportETimLocs_ETimLocId",
                        column: x => x.ETimLocId,
                        principalTable: "OpsReportETimLocs",
                        principalColumn: "ETimLocId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportETimReams_ETimReamId",
                        column: x => x.ETimReamId,
                        principalTable: "OpsReportETimReams",
                        principalColumn: "ETimReamId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportETimSpuds_ETimSpudId",
                        column: x => x.ETimSpudId,
                        principalTable: "OpsReportETimSpuds",
                        principalColumn: "ETimSpudId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportETimStarts_ETimStartId",
                        column: x => x.ETimStartId,
                        principalTable: "OpsReportETimStarts",
                        principalColumn: "ETimStartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportETimSteerings_ETimSteeringId",
                        column: x => x.ETimSteeringId,
                        principalTable: "OpsReportETimSteerings",
                        principalColumn: "ETimSteeringId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportFluids_FluidUid",
                        column: x => x.FluidUid,
                        principalTable: "OpsReportFluids",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportHses_HseId",
                        column: x => x.HseId,
                        principalTable: "OpsReportHses",
                        principalColumn: "HseId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportMaasps_MaaspId",
                        column: x => x.MaaspId,
                        principalTable: "OpsReportMaasps",
                        principalColumn: "MaaspId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportMdCsgLasts_MdCsgLastId",
                        column: x => x.MdCsgLastId,
                        principalTable: "OpsReportMdCsgLasts",
                        principalColumn: "MdCsgLastId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportMdPlanneds_MdPlannedId",
                        column: x => x.MdPlannedId,
                        principalTable: "OpsReportMdPlanneds",
                        principalColumn: "MdPlannedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportMdReports_MdReportId",
                        column: x => x.MdReportId,
                        principalTable: "OpsReportMdReports",
                        principalColumn: "MdReportId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportMudInventorys_MudInventoryId",
                        column: x => x.MudInventoryId,
                        principalTable: "OpsReportMudInventorys",
                        principalColumn: "MudInventoryId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportMudVolumes_MudVolumeId",
                        column: x => x.MudVolumeId,
                        principalTable: "OpsReportMudVolumes",
                        principalColumn: "MudVolumeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportPresKickTols_PresKickTolId",
                        column: x => x.PresKickTolId,
                        principalTable: "OpsReportPresKickTols",
                        principalColumn: "PresKickTolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportPresLotEmws_PresLotEmwId",
                        column: x => x.PresLotEmwId,
                        principalTable: "OpsReportPresLotEmws",
                        principalColumn: "PresLotEmwId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportPumpOps_PumpOpId",
                        column: x => x.PumpOpId,
                        principalTable: "OpsReportPumpOps",
                        principalColumn: "PumpOpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportRigs_RigOpsReportRigId",
                        column: x => x.RigOpsReportRigId,
                        principalTable: "OpsReportRigs",
                        principalColumn: "OpsReportRigId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportRigResponses_RigResponseId",
                        column: x => x.RigResponseId,
                        principalTable: "OpsReportRigResponses",
                        principalColumn: "RigResponseId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportRopAvs_RopAvId",
                        column: x => x.RopAvId,
                        principalTable: "OpsReportRopAvs",
                        principalColumn: "RopAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportRopCurrents_RopCurrentId",
                        column: x => x.RopCurrentId,
                        principalTable: "OpsReportRopCurrents",
                        principalColumn: "RopCurrentId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportShakerOps_ShakerOpId",
                        column: x => x.ShakerOpId,
                        principalTable: "OpsReportShakerOps",
                        principalColumn: "ShakerOpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportSupportCrafts_SupportCraftId",
                        column: x => x.SupportCraftId,
                        principalTable: "OpsReportSupportCrafts",
                        principalColumn: "SupportCraftId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportTrajectoryStations_TrajectoryStationUid",
                        column: x => x.TrajectoryStationUid,
                        principalTable: "OpsReportTrajectoryStations",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_Tubulars_TubularId",
                        column: x => x.TubularId,
                        principalTable: "Tubulars",
                        principalColumn: "TubularId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportTvdCsgLasts_TvdCsgLastId",
                        column: x => x.TvdCsgLastId,
                        principalTable: "OpsReportTvdCsgLasts",
                        principalColumn: "TvdCsgLastId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportTvdLots_TvdLotId",
                        column: x => x.TvdLotId,
                        principalTable: "OpsReportTvdLots",
                        principalColumn: "TvdLotId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportTvdReports_TvdReportId",
                        column: x => x.TvdReportId,
                        principalTable: "OpsReportTvdReports",
                        principalColumn: "TvdReportId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportVolKickTols_VolKickTolId",
                        column: x => x.VolKickTolId,
                        principalTable: "OpsReportVolKickTols",
                        principalColumn: "VolKickTolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReports_OpsReportWeathers_WeatherId",
                        column: x => x.WeatherId,
                        principalTable: "OpsReportWeathers",
                        principalColumn: "WeatherId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SideWallCoreSwcSample",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    MdUom = table.Column<string>(nullable: true),
                    LithologyUid = table.Column<string>(nullable: true),
                    ShowSideWallCoreId = table.Column<int>(nullable: true),
                    NameFormation = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SideWallCoreSwcSample", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_SideWallCoreSwcSample_SideWallCoreLithology_LithologyUid",
                        column: x => x.LithologyUid,
                        principalTable: "SideWallCoreLithology",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SideWallCoreSwcSample_SideWallMd_MdUom",
                        column: x => x.MdUom,
                        principalTable: "SideWallMd",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SideWallCoreSwcSample_SideWallCoreShow_ShowSideWallCoreId",
                        column: x => x.ShowSideWallCoreId,
                        principalTable: "SideWallCoreShow",
                        principalColumn: "SideWallCoreId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobJobIntervals",
                columns: table => new
                {
                    JobIntervalId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UidTreatmentInterval = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    Number = table.Column<string>(nullable: true),
                    DTimStart = table.Column<string>(nullable: true),
                    FormationName = table.Column<string>(nullable: true),
                    MdFormationTopId = table.Column<int>(nullable: true),
                    MdFormationBottomId = table.Column<int>(nullable: true),
                    TvdFormationTopId = table.Column<int>(nullable: true),
                    TvdFormationBottomId = table.Column<int>(nullable: true),
                    OpenHoleName = table.Column<string>(nullable: true),
                    OpenHoleDiameterId = table.Column<int>(nullable: true),
                    MdOpenHoleTopId = table.Column<int>(nullable: true),
                    MdOpenHoleBottomId = table.Column<int>(nullable: true),
                    TvdOpenHoleTopId = table.Column<int>(nullable: true),
                    TvdOpenHoleBottomId = table.Column<int>(nullable: true),
                    TotalFrictionPresLossId = table.Column<int>(nullable: true),
                    TotalPumpTimeId = table.Column<int>(nullable: true),
                    MaxPresTubingId = table.Column<int>(nullable: true),
                    MaxPresAnnulusId = table.Column<int>(nullable: true),
                    MaxFluidRateTubingId = table.Column<int>(nullable: true),
                    MaxFluidRateAnnulusId = table.Column<int>(nullable: true),
                    AvgPresTubingId = table.Column<int>(nullable: true),
                    AvgPresCasingId = table.Column<int>(nullable: true),
                    BreakDownPresId = table.Column<int>(nullable: true),
                    AveragePresId = table.Column<int>(nullable: true),
                    AvgBaseFluidReturnRateId = table.Column<int>(nullable: true),
                    AvgSlurryReturnRateId = table.Column<int>(nullable: true),
                    AvgBottomholeRateId = table.Column<int>(nullable: true),
                    TotalVolumeId = table.Column<int>(nullable: true),
                    MaxProppantConcSurfaceId = table.Column<int>(nullable: true),
                    MaxProppantConcBottomholeId = table.Column<int>(nullable: true),
                    AvgProppantConcSurfaceId = table.Column<int>(nullable: true),
                    AvgProppantConcBottomholeId = table.Column<int>(nullable: true),
                    PerfproppantConcId = table.Column<int>(nullable: true),
                    TotalProppantMassId = table.Column<int>(nullable: true),
                    PercentProppantPumpedId = table.Column<int>(nullable: true),
                    WellboreProppantMassId = table.Column<int>(nullable: true),
                    FormationProppantMassId = table.Column<int>(nullable: true),
                    PerfBallCount = table.Column<string>(nullable: true),
                    TotalN2StdVolumeId = table.Column<int>(nullable: true),
                    TotalCO2MassId = table.Column<int>(nullable: true),
                    FractureGradientId = table.Column<int>(nullable: true),
                    FinalFractureGradientId = table.Column<int>(nullable: true),
                    InitialShutinPresId = table.Column<int>(nullable: true),
                    ScreenOutPresId = table.Column<int>(nullable: true),
                    HhpOrderedCO2Id = table.Column<int>(nullable: true),
                    HhpOrderedFluidId = table.Column<int>(nullable: true),
                    HhpUsedCO2Id = table.Column<int>(nullable: true),
                    HhpUsedFluidId = table.Column<int>(nullable: true),
                    PerfBallSizeId = table.Column<int>(nullable: true),
                    ScreenedOut = table.Column<string>(nullable: true),
                    AvgFractureWidthId = table.Column<int>(nullable: true),
                    AvgConductivityId = table.Column<int>(nullable: true),
                    NetPresId = table.Column<int>(nullable: true),
                    ClosurePresId = table.Column<int>(nullable: true),
                    ClosureDurationId = table.Column<int>(nullable: true),
                    PdatSessionId = table.Column<int>(nullable: true),
                    ReservoirIntervalId = table.Column<int>(nullable: true),
                    PerforationIntervalId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobJobIntervals", x => x.JobIntervalId);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobAveragePress_AveragePresId",
                        column: x => x.AveragePresId,
                        principalTable: "StimJobAveragePress",
                        principalColumn: "AveragePresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobAvgBaseFluidReturnRates_AvgBaseFluidReturnRateId",
                        column: x => x.AvgBaseFluidReturnRateId,
                        principalTable: "StimJobAvgBaseFluidReturnRates",
                        principalColumn: "AvgBaseFluidReturnRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobAvgBottomholeRates_AvgBottomholeRateId",
                        column: x => x.AvgBottomholeRateId,
                        principalTable: "StimJobAvgBottomholeRates",
                        principalColumn: "AvgBottomholeRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobAvgConductivitys_AvgConductivityId",
                        column: x => x.AvgConductivityId,
                        principalTable: "StimJobAvgConductivitys",
                        principalColumn: "AvgConductivityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobAvgFractureWidths_AvgFractureWidthId",
                        column: x => x.AvgFractureWidthId,
                        principalTable: "StimJobAvgFractureWidths",
                        principalColumn: "AvgFractureWidthId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobAvgPresCasings_AvgPresCasingId",
                        column: x => x.AvgPresCasingId,
                        principalTable: "StimJobAvgPresCasings",
                        principalColumn: "AvgPresCasingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobAvgPresTubings_AvgPresTubingId",
                        column: x => x.AvgPresTubingId,
                        principalTable: "StimJobAvgPresTubings",
                        principalColumn: "AvgPresTubingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobAvgProppantConcBottomholes_AvgProppantConcBottomholeId",
                        column: x => x.AvgProppantConcBottomholeId,
                        principalTable: "StimJobAvgProppantConcBottomholes",
                        principalColumn: "AvgProppantConcBottomholeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobAvgProppantConcSurfaces_AvgProppantConcSurfaceId",
                        column: x => x.AvgProppantConcSurfaceId,
                        principalTable: "StimJobAvgProppantConcSurfaces",
                        principalColumn: "AvgProppantConcSurfaceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobAvgSlurryReturnRates_AvgSlurryReturnRateId",
                        column: x => x.AvgSlurryReturnRateId,
                        principalTable: "StimJobAvgSlurryReturnRates",
                        principalColumn: "AvgSlurryReturnRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobBreakDownPress_BreakDownPresId",
                        column: x => x.BreakDownPresId,
                        principalTable: "StimJobBreakDownPress",
                        principalColumn: "BreakDownPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobClosureDurations_ClosureDurationId",
                        column: x => x.ClosureDurationId,
                        principalTable: "StimJobClosureDurations",
                        principalColumn: "ClosureDurationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobClosurePress_ClosurePresId",
                        column: x => x.ClosurePresId,
                        principalTable: "StimJobClosurePress",
                        principalColumn: "ClosurePresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobFinalFractureGradients_FinalFractureGradientId",
                        column: x => x.FinalFractureGradientId,
                        principalTable: "StimJobFinalFractureGradients",
                        principalColumn: "FinalFractureGradientId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobFormationProppantMasss_FormationProppantMassId",
                        column: x => x.FormationProppantMassId,
                        principalTable: "StimJobFormationProppantMasss",
                        principalColumn: "FormationProppantMassId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobFractureGradients_FractureGradientId",
                        column: x => x.FractureGradientId,
                        principalTable: "StimJobFractureGradients",
                        principalColumn: "FractureGradientId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobHhpOrderedCO2s_HhpOrderedCO2Id",
                        column: x => x.HhpOrderedCO2Id,
                        principalTable: "StimJobHhpOrderedCO2s",
                        principalColumn: "HhpOrderedCO2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobHhpOrderedFluids_HhpOrderedFluidId",
                        column: x => x.HhpOrderedFluidId,
                        principalTable: "StimJobHhpOrderedFluids",
                        principalColumn: "HhpOrderedFluidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobHhpUsedCO2s_HhpUsedCO2Id",
                        column: x => x.HhpUsedCO2Id,
                        principalTable: "StimJobHhpUsedCO2s",
                        principalColumn: "HhpUsedCO2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobHhpUsedFluids_HhpUsedFluidId",
                        column: x => x.HhpUsedFluidId,
                        principalTable: "StimJobHhpUsedFluids",
                        principalColumn: "HhpUsedFluidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobInitialShutinPress_InitialShutinPresId",
                        column: x => x.InitialShutinPresId,
                        principalTable: "StimJobInitialShutinPress",
                        principalColumn: "InitialShutinPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobMaxFluidRateAnnuluss_MaxFluidRateAnnulusId",
                        column: x => x.MaxFluidRateAnnulusId,
                        principalTable: "StimJobMaxFluidRateAnnuluss",
                        principalColumn: "MaxFluidRateAnnulusId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobMaxFluidRateTubings_MaxFluidRateTubingId",
                        column: x => x.MaxFluidRateTubingId,
                        principalTable: "StimJobMaxFluidRateTubings",
                        principalColumn: "MaxFluidRateTubingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobMaxPresAnnuluss_MaxPresAnnulusId",
                        column: x => x.MaxPresAnnulusId,
                        principalTable: "StimJobMaxPresAnnuluss",
                        principalColumn: "MaxPresAnnulusId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobMaxPresTubings_MaxPresTubingId",
                        column: x => x.MaxPresTubingId,
                        principalTable: "StimJobMaxPresTubings",
                        principalColumn: "MaxPresTubingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobMaxProppantConcBottomholes_MaxProppantConcBottomholeId",
                        column: x => x.MaxProppantConcBottomholeId,
                        principalTable: "StimJobMaxProppantConcBottomholes",
                        principalColumn: "MaxProppantConcBottomholeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobMaxProppantConcSurfaces_MaxProppantConcSurfaceId",
                        column: x => x.MaxProppantConcSurfaceId,
                        principalTable: "StimJobMaxProppantConcSurfaces",
                        principalColumn: "MaxProppantConcSurfaceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobMdFormationBottoms_MdFormationBottomId",
                        column: x => x.MdFormationBottomId,
                        principalTable: "StimJobMdFormationBottoms",
                        principalColumn: "MdFormationBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobMdFormationTops_MdFormationTopId",
                        column: x => x.MdFormationTopId,
                        principalTable: "StimJobMdFormationTops",
                        principalColumn: "MdFormationTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobMdOpenHoleBottoms_MdOpenHoleBottomId",
                        column: x => x.MdOpenHoleBottomId,
                        principalTable: "StimJobMdOpenHoleBottoms",
                        principalColumn: "MdOpenHoleBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobMdOpenHoleTops_MdOpenHoleTopId",
                        column: x => x.MdOpenHoleTopId,
                        principalTable: "StimJobMdOpenHoleTops",
                        principalColumn: "MdOpenHoleTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobNetPress_NetPresId",
                        column: x => x.NetPresId,
                        principalTable: "StimJobNetPress",
                        principalColumn: "NetPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobOpenHoleDiameters_OpenHoleDiameterId",
                        column: x => x.OpenHoleDiameterId,
                        principalTable: "StimJobOpenHoleDiameters",
                        principalColumn: "OpenHoleDiameterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobPdatSessions_PdatSessionId",
                        column: x => x.PdatSessionId,
                        principalTable: "StimJobPdatSessions",
                        principalColumn: "PdatSessionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobPercentProppantPumpeds_PercentProppantPumpedId",
                        column: x => x.PercentProppantPumpedId,
                        principalTable: "StimJobPercentProppantPumpeds",
                        principalColumn: "PercentProppantPumpedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobPerfBallSizes_PerfBallSizeId",
                        column: x => x.PerfBallSizeId,
                        principalTable: "StimJobPerfBallSizes",
                        principalColumn: "PerfBallSizeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobPerforationIntervals_PerforationIntervalId",
                        column: x => x.PerforationIntervalId,
                        principalTable: "StimJobPerforationIntervals",
                        principalColumn: "PerforationIntervalId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobPerfproppantConcs_PerfproppantConcId",
                        column: x => x.PerfproppantConcId,
                        principalTable: "StimJobPerfproppantConcs",
                        principalColumn: "PerfproppantConcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobReservoirIntervals_ReservoirIntervalId",
                        column: x => x.ReservoirIntervalId,
                        principalTable: "StimJobReservoirIntervals",
                        principalColumn: "ReservoirIntervalId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobScreenOutPress_ScreenOutPresId",
                        column: x => x.ScreenOutPresId,
                        principalTable: "StimJobScreenOutPress",
                        principalColumn: "ScreenOutPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobTotalCO2Masss_TotalCO2MassId",
                        column: x => x.TotalCO2MassId,
                        principalTable: "StimJobTotalCO2Masss",
                        principalColumn: "TotalCO2MassId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobTotalFrictionPresLosss_TotalFrictionPresLossId",
                        column: x => x.TotalFrictionPresLossId,
                        principalTable: "StimJobTotalFrictionPresLosss",
                        principalColumn: "TotalFrictionPresLossId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobTotalN2StdVolumes_TotalN2StdVolumeId",
                        column: x => x.TotalN2StdVolumeId,
                        principalTable: "StimJobTotalN2StdVolumes",
                        principalColumn: "TotalN2StdVolumeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobTotalProppantMasss_TotalProppantMassId",
                        column: x => x.TotalProppantMassId,
                        principalTable: "StimJobTotalProppantMasss",
                        principalColumn: "TotalProppantMassId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobTotalPumpTimes_TotalPumpTimeId",
                        column: x => x.TotalPumpTimeId,
                        principalTable: "StimJobTotalPumpTimes",
                        principalColumn: "TotalPumpTimeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobTotalVolumes_TotalVolumeId",
                        column: x => x.TotalVolumeId,
                        principalTable: "StimJobTotalVolumes",
                        principalColumn: "TotalVolumeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobTvdFormationBottoms_TvdFormationBottomId",
                        column: x => x.TvdFormationBottomId,
                        principalTable: "StimJobTvdFormationBottoms",
                        principalColumn: "TvdFormationBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobTvdFormationTops_TvdFormationTopId",
                        column: x => x.TvdFormationTopId,
                        principalTable: "StimJobTvdFormationTops",
                        principalColumn: "TvdFormationTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobTvdOpenHoleBottoms_TvdOpenHoleBottomId",
                        column: x => x.TvdOpenHoleBottomId,
                        principalTable: "StimJobTvdOpenHoleBottoms",
                        principalColumn: "TvdOpenHoleBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobTvdOpenHoleTops_TvdOpenHoleTopId",
                        column: x => x.TvdOpenHoleTopId,
                        principalTable: "StimJobTvdOpenHoleTops",
                        principalColumn: "TvdOpenHoleTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobIntervals_StimJobWellboreProppantMasss_WellboreProppantMassId",
                        column: x => x.WellboreProppantMassId,
                        principalTable: "StimJobWellboreProppantMasss",
                        principalColumn: "WellboreProppantMassId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobAdditives",
                columns: table => new
                {
                    AdditiveId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    Kind = table.Column<string>(nullable: true),
                    VolumeId = table.Column<int>(nullable: true),
                    MassId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    StageFluidId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobAdditives", x => x.AdditiveId);
                    table.ForeignKey(
                        name: "FK_StimJobAdditives_StimJobMasss_MassId",
                        column: x => x.MassId,
                        principalTable: "StimJobMasss",
                        principalColumn: "MassId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobAdditives_StimJobStageFluids_StageFluidId",
                        column: x => x.StageFluidId,
                        principalTable: "StimJobStageFluids",
                        principalColumn: "StageFluidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobAdditives_StimJobVolumes_VolumeId",
                        column: x => x.VolumeId,
                        principalTable: "StimJobVolumes",
                        principalColumn: "VolumeId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobJobStages",
                columns: table => new
                {
                    JobStageId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Kind = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Number = table.Column<string>(nullable: true),
                    DTimStart = table.Column<string>(nullable: true),
                    DTimEnd = table.Column<string>(nullable: true),
                    PumpTimeId = table.Column<int>(nullable: true),
                    StartRateSurfaceLiquidId = table.Column<int>(nullable: true),
                    EndRateSurfaceLiquidId = table.Column<int>(nullable: true),
                    AvgRateSurfaceLiquidId = table.Column<int>(nullable: true),
                    StartRateSurfaceCO2Id = table.Column<int>(nullable: true),
                    EndRateSurfaceCO2Id = table.Column<int>(nullable: true),
                    AvgRateSurfaceCO2Id = table.Column<int>(nullable: true),
                    StartStdRateSurfaceN2Id = table.Column<int>(nullable: true),
                    EndStdRateSurfaceN2Id = table.Column<int>(nullable: true),
                    AvgStdRateSurfaceN2Id = table.Column<int>(nullable: true),
                    StartPresSurfaceId = table.Column<int>(nullable: true),
                    EndPresSurfaceId = table.Column<int>(nullable: true),
                    AveragePresSurfaceId = table.Column<int>(nullable: true),
                    StartPumpRateBottomholeId = table.Column<int>(nullable: true),
                    EndPumpRateBottomholeId = table.Column<int>(nullable: true),
                    AvgPumpRateBottomholeId = table.Column<int>(nullable: true),
                    StartPresBottomholeId = table.Column<int>(nullable: true),
                    EndPresBottomholeId = table.Column<int>(nullable: true),
                    AveragePresBottomholeId = table.Column<int>(nullable: true),
                    StartProppantConcSurfaceId = table.Column<int>(nullable: true),
                    EndProppantConcSurfaceId = table.Column<int>(nullable: true),
                    AvgProppantConcSurfaceId = table.Column<int>(nullable: true),
                    StartProppantConcBottomholeId = table.Column<int>(nullable: true),
                    EndProppantConcBottomholeId = table.Column<int>(nullable: true),
                    AvgProppantConcBottomholeId = table.Column<int>(nullable: true),
                    StartFoamRateN2Id = table.Column<int>(nullable: true),
                    EndFoamRateN2Id = table.Column<int>(nullable: true),
                    StartFoamRateCO2Id = table.Column<int>(nullable: true),
                    EndFoamRateCO2Id = table.Column<int>(nullable: true),
                    FluidVolBaseId = table.Column<int>(nullable: true),
                    FluidVolSlurryId = table.Column<int>(nullable: true),
                    SlurryRateBeginId = table.Column<int>(nullable: true),
                    SlurryRateEndId = table.Column<int>(nullable: true),
                    ProppantMassWellHeadId = table.Column<int>(nullable: true),
                    ProppantMassId = table.Column<int>(nullable: true),
                    MaxPresId = table.Column<int>(nullable: true),
                    MaxSlurryRateId = table.Column<int>(nullable: true),
                    MaxWellheadRateId = table.Column<int>(nullable: true),
                    MaxN2StdRateId = table.Column<int>(nullable: true),
                    MaxCO2LiquidRateId = table.Column<int>(nullable: true),
                    MaxPropConcId = table.Column<int>(nullable: true),
                    MaxSlurryPropConcId = table.Column<int>(nullable: true),
                    AvgPropConcId = table.Column<int>(nullable: true),
                    AvgSlurryPropConcId = table.Column<int>(nullable: true),
                    AvgTemperatureId = table.Column<int>(nullable: true),
                    AvgInternalPhaseFractionId = table.Column<int>(nullable: true),
                    AvgBaseFluidQualityId = table.Column<int>(nullable: true),
                    AvgN2BaseFluidQualityId = table.Column<int>(nullable: true),
                    AvgCO2BaseFluidQualityId = table.Column<int>(nullable: true),
                    AvgHydraulicPowerId = table.Column<int>(nullable: true),
                    AvgBaseFluidRateId = table.Column<int>(nullable: true),
                    AvgSlurryRateId = table.Column<int>(nullable: true),
                    AvgWellheadRateId = table.Column<int>(nullable: true),
                    AvgN2StdRateId = table.Column<int>(nullable: true),
                    AvgCO2RateId = table.Column<int>(nullable: true),
                    BaseFluidVolId = table.Column<int>(nullable: true),
                    SlurryVolId = table.Column<int>(nullable: true),
                    WellheadVolStdVolN2Id = table.Column<int>(nullable: true),
                    MaxPmaxPacPresId = table.Column<int>(nullable: true),
                    MaxPmaxWeaklinkPresId = table.Column<int>(nullable: true),
                    MaxGelRateId = table.Column<int>(nullable: true),
                    MaxOilRateId = table.Column<int>(nullable: true),
                    MaxAcidRateId = table.Column<int>(nullable: true),
                    AvgGelRateId = table.Column<int>(nullable: true),
                    AvgOilRateId = table.Column<int>(nullable: true),
                    AvgAcidRateId = table.Column<int>(nullable: true),
                    GelVolumeId = table.Column<int>(nullable: true),
                    OilVolumeId = table.Column<int>(nullable: true),
                    AcidVolumeId = table.Column<int>(nullable: true),
                    BaseFluidBypassVolId = table.Column<int>(nullable: true),
                    FrictionFactor = table.Column<string>(nullable: true),
                    StageFluidId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    FlowPathId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobJobStages", x => x.JobStageId);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAcidVolumes_AcidVolumeId",
                        column: x => x.AcidVolumeId,
                        principalTable: "StimJobAcidVolumes",
                        principalColumn: "AcidVolumeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAveragePresBottomholes_AveragePresBottomholeId",
                        column: x => x.AveragePresBottomholeId,
                        principalTable: "StimJobAveragePresBottomholes",
                        principalColumn: "AveragePresBottomholeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAveragePresSurfaces_AveragePresSurfaceId",
                        column: x => x.AveragePresSurfaceId,
                        principalTable: "StimJobAveragePresSurfaces",
                        principalColumn: "AveragePresSurfaceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgAcidRates_AvgAcidRateId",
                        column: x => x.AvgAcidRateId,
                        principalTable: "StimJobAvgAcidRates",
                        principalColumn: "AvgAcidRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgBaseFluidQualitys_AvgBaseFluidQualityId",
                        column: x => x.AvgBaseFluidQualityId,
                        principalTable: "StimJobAvgBaseFluidQualitys",
                        principalColumn: "AvgBaseFluidQualityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgBaseFluidRates_AvgBaseFluidRateId",
                        column: x => x.AvgBaseFluidRateId,
                        principalTable: "StimJobAvgBaseFluidRates",
                        principalColumn: "AvgBaseFluidRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgCO2BaseFluidQualitys_AvgCO2BaseFluidQualityId",
                        column: x => x.AvgCO2BaseFluidQualityId,
                        principalTable: "StimJobAvgCO2BaseFluidQualitys",
                        principalColumn: "AvgCO2BaseFluidQualityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgCO2Rates_AvgCO2RateId",
                        column: x => x.AvgCO2RateId,
                        principalTable: "StimJobAvgCO2Rates",
                        principalColumn: "AvgCO2RateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgGelRates_AvgGelRateId",
                        column: x => x.AvgGelRateId,
                        principalTable: "StimJobAvgGelRates",
                        principalColumn: "AvgGelRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgHydraulicPowers_AvgHydraulicPowerId",
                        column: x => x.AvgHydraulicPowerId,
                        principalTable: "StimJobAvgHydraulicPowers",
                        principalColumn: "AvgHydraulicPowerId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgInternalPhaseFractions_AvgInternalPhaseFractionId",
                        column: x => x.AvgInternalPhaseFractionId,
                        principalTable: "StimJobAvgInternalPhaseFractions",
                        principalColumn: "AvgInternalPhaseFractionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgN2BaseFluidQualitys_AvgN2BaseFluidQualityId",
                        column: x => x.AvgN2BaseFluidQualityId,
                        principalTable: "StimJobAvgN2BaseFluidQualitys",
                        principalColumn: "AvgN2BaseFluidQualityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgN2StdRates_AvgN2StdRateId",
                        column: x => x.AvgN2StdRateId,
                        principalTable: "StimJobAvgN2StdRates",
                        principalColumn: "AvgN2StdRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgOilRates_AvgOilRateId",
                        column: x => x.AvgOilRateId,
                        principalTable: "StimJobAvgOilRates",
                        principalColumn: "AvgOilRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgPropConcs_AvgPropConcId",
                        column: x => x.AvgPropConcId,
                        principalTable: "StimJobAvgPropConcs",
                        principalColumn: "AvgPropConcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgProppantConcBottomholes_AvgProppantConcBottomholeId",
                        column: x => x.AvgProppantConcBottomholeId,
                        principalTable: "StimJobAvgProppantConcBottomholes",
                        principalColumn: "AvgProppantConcBottomholeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgProppantConcSurfaces_AvgProppantConcSurfaceId",
                        column: x => x.AvgProppantConcSurfaceId,
                        principalTable: "StimJobAvgProppantConcSurfaces",
                        principalColumn: "AvgProppantConcSurfaceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgPumpRateBottomholes_AvgPumpRateBottomholeId",
                        column: x => x.AvgPumpRateBottomholeId,
                        principalTable: "StimJobAvgPumpRateBottomholes",
                        principalColumn: "AvgPumpRateBottomholeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgRateSurfaceCO2s_AvgRateSurfaceCO2Id",
                        column: x => x.AvgRateSurfaceCO2Id,
                        principalTable: "StimJobAvgRateSurfaceCO2s",
                        principalColumn: "AvgRateSurfaceCO2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgRateSurfaceLiquids_AvgRateSurfaceLiquidId",
                        column: x => x.AvgRateSurfaceLiquidId,
                        principalTable: "StimJobAvgRateSurfaceLiquids",
                        principalColumn: "AvgRateSurfaceLiquidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgSlurryPropConcs_AvgSlurryPropConcId",
                        column: x => x.AvgSlurryPropConcId,
                        principalTable: "StimJobAvgSlurryPropConcs",
                        principalColumn: "AvgSlurryPropConcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgSlurryRates_AvgSlurryRateId",
                        column: x => x.AvgSlurryRateId,
                        principalTable: "StimJobAvgSlurryRates",
                        principalColumn: "AvgSlurryRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgStdRateSurfaceN2s_AvgStdRateSurfaceN2Id",
                        column: x => x.AvgStdRateSurfaceN2Id,
                        principalTable: "StimJobAvgStdRateSurfaceN2s",
                        principalColumn: "AvgStdRateSurfaceN2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgTemperatures_AvgTemperatureId",
                        column: x => x.AvgTemperatureId,
                        principalTable: "StimJobAvgTemperatures",
                        principalColumn: "AvgTemperatureId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobAvgWellheadRates_AvgWellheadRateId",
                        column: x => x.AvgWellheadRateId,
                        principalTable: "StimJobAvgWellheadRates",
                        principalColumn: "AvgWellheadRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobBaseFluidBypassVols_BaseFluidBypassVolId",
                        column: x => x.BaseFluidBypassVolId,
                        principalTable: "StimJobBaseFluidBypassVols",
                        principalColumn: "BaseFluidBypassVolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobBaseFluidVols_BaseFluidVolId",
                        column: x => x.BaseFluidVolId,
                        principalTable: "StimJobBaseFluidVols",
                        principalColumn: "BaseFluidVolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobEndFoamRateCO2s_EndFoamRateCO2Id",
                        column: x => x.EndFoamRateCO2Id,
                        principalTable: "StimJobEndFoamRateCO2s",
                        principalColumn: "EndFoamRateCO2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobEndFoamRateN2s_EndFoamRateN2Id",
                        column: x => x.EndFoamRateN2Id,
                        principalTable: "StimJobEndFoamRateN2s",
                        principalColumn: "EndFoamRateN2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobEndPresBottomholes_EndPresBottomholeId",
                        column: x => x.EndPresBottomholeId,
                        principalTable: "StimJobEndPresBottomholes",
                        principalColumn: "EndPresBottomholeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobEndPresSurfaces_EndPresSurfaceId",
                        column: x => x.EndPresSurfaceId,
                        principalTable: "StimJobEndPresSurfaces",
                        principalColumn: "EndPresSurfaceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobEndProppantConcBottomholes_EndProppantConcBottomholeId",
                        column: x => x.EndProppantConcBottomholeId,
                        principalTable: "StimJobEndProppantConcBottomholes",
                        principalColumn: "EndProppantConcBottomholeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobEndProppantConcSurfaces_EndProppantConcSurfaceId",
                        column: x => x.EndProppantConcSurfaceId,
                        principalTable: "StimJobEndProppantConcSurfaces",
                        principalColumn: "EndProppantConcSurfaceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobEndPumpRateBottomholes_EndPumpRateBottomholeId",
                        column: x => x.EndPumpRateBottomholeId,
                        principalTable: "StimJobEndPumpRateBottomholes",
                        principalColumn: "EndPumpRateBottomholeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobEndRateSurfaceCO2s_EndRateSurfaceCO2Id",
                        column: x => x.EndRateSurfaceCO2Id,
                        principalTable: "StimJobEndRateSurfaceCO2s",
                        principalColumn: "EndRateSurfaceCO2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobEndRateSurfaceLiquids_EndRateSurfaceLiquidId",
                        column: x => x.EndRateSurfaceLiquidId,
                        principalTable: "StimJobEndRateSurfaceLiquids",
                        principalColumn: "EndRateSurfaceLiquidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobEndStdRateSurfaceN2s_EndStdRateSurfaceN2Id",
                        column: x => x.EndStdRateSurfaceN2Id,
                        principalTable: "StimJobEndStdRateSurfaceN2s",
                        principalColumn: "EndStdRateSurfaceN2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobFlowPaths_FlowPathId",
                        column: x => x.FlowPathId,
                        principalTable: "StimJobFlowPaths",
                        principalColumn: "FlowPathId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobFluidVolBases_FluidVolBaseId",
                        column: x => x.FluidVolBaseId,
                        principalTable: "StimJobFluidVolBases",
                        principalColumn: "FluidVolBaseId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobFluidVolSlurrys_FluidVolSlurryId",
                        column: x => x.FluidVolSlurryId,
                        principalTable: "StimJobFluidVolSlurrys",
                        principalColumn: "FluidVolSlurryId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobGelVolumes_GelVolumeId",
                        column: x => x.GelVolumeId,
                        principalTable: "StimJobGelVolumes",
                        principalColumn: "GelVolumeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobMaxAcidRates_MaxAcidRateId",
                        column: x => x.MaxAcidRateId,
                        principalTable: "StimJobMaxAcidRates",
                        principalColumn: "MaxAcidRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobMaxCO2LiquidRates_MaxCO2LiquidRateId",
                        column: x => x.MaxCO2LiquidRateId,
                        principalTable: "StimJobMaxCO2LiquidRates",
                        principalColumn: "MaxCO2LiquidRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobMaxGelRates_MaxGelRateId",
                        column: x => x.MaxGelRateId,
                        principalTable: "StimJobMaxGelRates",
                        principalColumn: "MaxGelRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobMaxN2StdRates_MaxN2StdRateId",
                        column: x => x.MaxN2StdRateId,
                        principalTable: "StimJobMaxN2StdRates",
                        principalColumn: "MaxN2StdRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobMaxOilRates_MaxOilRateId",
                        column: x => x.MaxOilRateId,
                        principalTable: "StimJobMaxOilRates",
                        principalColumn: "MaxOilRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobMaxPmaxPacPress_MaxPmaxPacPresId",
                        column: x => x.MaxPmaxPacPresId,
                        principalTable: "StimJobMaxPmaxPacPress",
                        principalColumn: "MaxPmaxPacPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobMaxPmaxWeaklinkPress_MaxPmaxWeaklinkPresId",
                        column: x => x.MaxPmaxWeaklinkPresId,
                        principalTable: "StimJobMaxPmaxWeaklinkPress",
                        principalColumn: "MaxPmaxWeaklinkPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobMaxPress_MaxPresId",
                        column: x => x.MaxPresId,
                        principalTable: "StimJobMaxPress",
                        principalColumn: "MaxPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobMaxPropConcs_MaxPropConcId",
                        column: x => x.MaxPropConcId,
                        principalTable: "StimJobMaxPropConcs",
                        principalColumn: "MaxPropConcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobMaxSlurryPropConcs_MaxSlurryPropConcId",
                        column: x => x.MaxSlurryPropConcId,
                        principalTable: "StimJobMaxSlurryPropConcs",
                        principalColumn: "MaxSlurryPropConcId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobMaxSlurryRates_MaxSlurryRateId",
                        column: x => x.MaxSlurryRateId,
                        principalTable: "StimJobMaxSlurryRates",
                        principalColumn: "MaxSlurryRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobMaxWellheadRates_MaxWellheadRateId",
                        column: x => x.MaxWellheadRateId,
                        principalTable: "StimJobMaxWellheadRates",
                        principalColumn: "MaxWellheadRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobOilVolumes_OilVolumeId",
                        column: x => x.OilVolumeId,
                        principalTable: "StimJobOilVolumes",
                        principalColumn: "OilVolumeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobProppantMasss_ProppantMassId",
                        column: x => x.ProppantMassId,
                        principalTable: "StimJobProppantMasss",
                        principalColumn: "ProppantMassId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobProppantMassWellHeads_ProppantMassWellHeadId",
                        column: x => x.ProppantMassWellHeadId,
                        principalTable: "StimJobProppantMassWellHeads",
                        principalColumn: "ProppantMassWellHeadId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobPumpTimes_PumpTimeId",
                        column: x => x.PumpTimeId,
                        principalTable: "StimJobPumpTimes",
                        principalColumn: "PumpTimeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobSlurryRateBegins_SlurryRateBeginId",
                        column: x => x.SlurryRateBeginId,
                        principalTable: "StimJobSlurryRateBegins",
                        principalColumn: "SlurryRateBeginId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobSlurryRateEnds_SlurryRateEndId",
                        column: x => x.SlurryRateEndId,
                        principalTable: "StimJobSlurryRateEnds",
                        principalColumn: "SlurryRateEndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobSlurryVols_SlurryVolId",
                        column: x => x.SlurryVolId,
                        principalTable: "StimJobSlurryVols",
                        principalColumn: "SlurryVolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobStageFluids_StageFluidId",
                        column: x => x.StageFluidId,
                        principalTable: "StimJobStageFluids",
                        principalColumn: "StageFluidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobStartFoamRateCO2s_StartFoamRateCO2Id",
                        column: x => x.StartFoamRateCO2Id,
                        principalTable: "StimJobStartFoamRateCO2s",
                        principalColumn: "StartFoamRateCO2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobStartFoamRateN2s_StartFoamRateN2Id",
                        column: x => x.StartFoamRateN2Id,
                        principalTable: "StimJobStartFoamRateN2s",
                        principalColumn: "StartFoamRateN2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobStartPresBottomholes_StartPresBottomholeId",
                        column: x => x.StartPresBottomholeId,
                        principalTable: "StimJobStartPresBottomholes",
                        principalColumn: "StartPresBottomholeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobStartPresSurfaces_StartPresSurfaceId",
                        column: x => x.StartPresSurfaceId,
                        principalTable: "StimJobStartPresSurfaces",
                        principalColumn: "StartPresSurfaceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobStartProppantConcBottomholes_StartProppantConcBottomholeId",
                        column: x => x.StartProppantConcBottomholeId,
                        principalTable: "StimJobStartProppantConcBottomholes",
                        principalColumn: "StartProppantConcBottomholeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobStartProppantConcSurfaces_StartProppantConcSurfaceId",
                        column: x => x.StartProppantConcSurfaceId,
                        principalTable: "StimJobStartProppantConcSurfaces",
                        principalColumn: "StartProppantConcSurfaceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobStartPumpRateBottomholes_StartPumpRateBottomholeId",
                        column: x => x.StartPumpRateBottomholeId,
                        principalTable: "StimJobStartPumpRateBottomholes",
                        principalColumn: "StartPumpRateBottomholeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobStartRateSurfaceCO2s_StartRateSurfaceCO2Id",
                        column: x => x.StartRateSurfaceCO2Id,
                        principalTable: "StimJobStartRateSurfaceCO2s",
                        principalColumn: "StartRateSurfaceCO2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobStartRateSurfaceLiquids_StartRateSurfaceLiquidId",
                        column: x => x.StartRateSurfaceLiquidId,
                        principalTable: "StimJobStartRateSurfaceLiquids",
                        principalColumn: "StartRateSurfaceLiquidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobStartStdRateSurfaceN2s_StartStdRateSurfaceN2Id",
                        column: x => x.StartStdRateSurfaceN2Id,
                        principalTable: "StimJobStartStdRateSurfaceN2s",
                        principalColumn: "StartStdRateSurfaceN2Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobJobStages_StimJobWellheadVols_WellheadVolStdVolN2Id",
                        column: x => x.WellheadVolStdVolN2Id,
                        principalTable: "StimJobWellheadVols",
                        principalColumn: "StdVolN2Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TargetLocations",
                columns: table => new
                {
                    TargetLocationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WellCRSId = table.Column<int>(nullable: true),
                    LatitudeId = table.Column<int>(nullable: true),
                    LongitudeId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    ProjectedXId = table.Column<int>(nullable: true),
                    ProjectedYId = table.Column<int>(nullable: true),
                    TargetId = table.Column<int>(nullable: true),
                    TargetSectionId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TargetLocations", x => x.TargetLocationId);
                    table.ForeignKey(
                        name: "FK_TargetLocations_TargetLatitudes_LatitudeId",
                        column: x => x.LatitudeId,
                        principalTable: "TargetLatitudes",
                        principalColumn: "LatitudeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TargetLocations_TargetLongitudes_LongitudeId",
                        column: x => x.LongitudeId,
                        principalTable: "TargetLongitudes",
                        principalColumn: "LongitudeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TargetLocations_TargetProjectedXs_ProjectedXId",
                        column: x => x.ProjectedXId,
                        principalTable: "TargetProjectedXs",
                        principalColumn: "ProjectedXId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TargetLocations_TargetProjectedYs_ProjectedYId",
                        column: x => x.ProjectedYId,
                        principalTable: "TargetProjectedYs",
                        principalColumn: "ProjectedYId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TargetLocations_Targets_TargetId",
                        column: x => x.TargetId,
                        principalTable: "Targets",
                        principalColumn: "TargetId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TargetLocations_TargetSections_TargetSectionId",
                        column: x => x.TargetSectionId,
                        principalTable: "TargetSections",
                        principalColumn: "TargetSectionId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TargetLocations_TargetWellCRSs_WellCRSId",
                        column: x => x.WellCRSId,
                        principalTable: "TargetWellCRSs",
                        principalColumn: "WellCRSId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelErrorTermValues",
                columns: table => new
                {
                    ErrorTermValueId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TermId = table.Column<int>(nullable: true),
                    Prop = table.Column<string>(nullable: true),
                    ValueId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    Bias = table.Column<string>(nullable: true),
                    Comment = table.Column<string>(nullable: true),
                    ToolErrorModelId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelErrorTermValues", x => x.ErrorTermValueId);
                    table.ForeignKey(
                        name: "FK_ToolErrorModelErrorTermValues_ToolErrorModelTerms_TermId",
                        column: x => x.TermId,
                        principalTable: "ToolErrorModelTerms",
                        principalColumn: "TermId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ToolErrorModelErrorTermValues_ToolErrorModels_ToolErrorModelId",
                        column: x => x.ToolErrorModelId,
                        principalTable: "ToolErrorModels",
                        principalColumn: "ToolErrorModelId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ToolErrorModelErrorTermValues_ToolErrorModelValues_ValueId",
                        column: x => x.ValueId,
                        principalTable: "ToolErrorModelValues",
                        principalColumn: "ValueId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorModelOperatingIntervals",
                columns: table => new
                {
                    OperatingIntervalId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Mode = table.Column<string>(nullable: true),
                    StartId = table.Column<int>(nullable: true),
                    EndId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    SpeedId = table.Column<int>(nullable: true),
                    ToolErrorModelId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorModelOperatingIntervals", x => x.OperatingIntervalId);
                    table.ForeignKey(
                        name: "FK_ToolErrorModelOperatingIntervals_ToolErrorModelEnds_EndId",
                        column: x => x.EndId,
                        principalTable: "ToolErrorModelEnds",
                        principalColumn: "EndId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ToolErrorModelOperatingIntervals_ToolErrorModelSpeeds_SpeedId",
                        column: x => x.SpeedId,
                        principalTable: "ToolErrorModelSpeeds",
                        principalColumn: "SpeedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ToolErrorModelOperatingIntervals_ToolErrorModelStarts_StartId",
                        column: x => x.StartId,
                        principalTable: "ToolErrorModelStarts",
                        principalColumn: "StartId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ToolErrorModelOperatingIntervals_ToolErrorModels_ToolErrorModelId",
                        column: x => x.ToolErrorModelId,
                        principalTable: "ToolErrorModels",
                        principalColumn: "ToolErrorModelId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorTermSetErrorTerms",
                columns: table => new
                {
                    ErrorTermId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    Type = table.Column<string>(nullable: true),
                    MeasureClass = table.Column<string>(nullable: true),
                    Label = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    OperatingMode = table.Column<string>(nullable: true),
                    ToolErrorTermSetId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorTermSetErrorTerms", x => x.ErrorTermId);
                    table.ForeignKey(
                        name: "FK_ToolErrorTermSetErrorTerms_ToolErrorTermSets_ToolErrorTermSetId",
                        column: x => x.ToolErrorTermSetId,
                        principalTable: "ToolErrorTermSets",
                        principalColumn: "ToolErrorTermSetId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrajectoryLocations",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    WellCRSUidRef = table.Column<string>(nullable: true),
                    LatitudeId = table.Column<int>(nullable: true),
                    LongitudeId = table.Column<int>(nullable: true),
                    EastingId = table.Column<int>(nullable: true),
                    NorthingId = table.Column<int>(nullable: true),
                    TrajectoryStationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrajectoryLocations", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_TrajectoryLocations_TrajectoryEastings_EastingId",
                        column: x => x.EastingId,
                        principalTable: "TrajectoryEastings",
                        principalColumn: "EastingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryLocations_TrajectoryLatitudes_LatitudeId",
                        column: x => x.LatitudeId,
                        principalTable: "TrajectoryLatitudes",
                        principalColumn: "LatitudeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryLocations_TrajectoryLongitudes_LongitudeId",
                        column: x => x.LongitudeId,
                        principalTable: "TrajectoryLongitudes",
                        principalColumn: "LongitudeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryLocations_TrajectoryNorthings_NorthingId",
                        column: x => x.NorthingId,
                        principalTable: "TrajectoryNorthings",
                        principalColumn: "NorthingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryLocations_TrajectoryStations_TrajectoryStationId",
                        column: x => x.TrajectoryStationId,
                        principalTable: "TrajectoryStations",
                        principalColumn: "TrajectoryStationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrajectoryLocations_TrajectoryWellCRSs_WellCRSUidRef",
                        column: x => x.WellCRSUidRef,
                        principalTable: "TrajectoryWellCRSs",
                        principalColumn: "UidRef",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Trajectorys",
                columns: table => new
                {
                    TrajectoryId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    DTimTrajStart = table.Column<string>(nullable: true),
                    DTimTrajEnd = table.Column<string>(nullable: true),
                    MdMnId = table.Column<int>(nullable: true),
                    MdMxId = table.Column<int>(nullable: true),
                    ServiceCompany = table.Column<string>(nullable: true),
                    MagDeclUsedId = table.Column<int>(nullable: true),
                    GridCorUsedId = table.Column<int>(nullable: true),
                    AziVertSectId = table.Column<int>(nullable: true),
                    DispNsVertSectOrigId = table.Column<int>(nullable: true),
                    DispEwVertSectOrigId = table.Column<int>(nullable: true),
                    Definitive = table.Column<string>(nullable: true),
                    Memory = table.Column<string>(nullable: true),
                    FinalTraj = table.Column<string>(nullable: true),
                    AziRef = table.Column<string>(nullable: true),
                    TrajectoryStationId = table.Column<int>(nullable: true),
                    CommonDataTrajectoryCommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Trajectorys", x => x.TrajectoryId);
                    table.ForeignKey(
                        name: "FK_Trajectorys_TrajectoryAziVertSects_AziVertSectId",
                        column: x => x.AziVertSectId,
                        principalTable: "TrajectoryAziVertSects",
                        principalColumn: "AziVertSectId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Trajectorys_TrajectoryCommonDatas_CommonDataTrajectoryCommonDataId",
                        column: x => x.CommonDataTrajectoryCommonDataId,
                        principalTable: "TrajectoryCommonDatas",
                        principalColumn: "TrajectoryCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Trajectorys_TrajectoryDispEwVertSectOrigs_DispEwVertSectOrigId",
                        column: x => x.DispEwVertSectOrigId,
                        principalTable: "TrajectoryDispEwVertSectOrigs",
                        principalColumn: "DispEwVertSectOrigId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Trajectorys_TrajectoryDispNsVertSectOrigs_DispNsVertSectOrigId",
                        column: x => x.DispNsVertSectOrigId,
                        principalTable: "TrajectoryDispNsVertSectOrigs",
                        principalColumn: "DispNsVertSectOrigId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Trajectorys_TrajectoryGridCorUseds_GridCorUsedId",
                        column: x => x.GridCorUsedId,
                        principalTable: "TrajectoryGridCorUseds",
                        principalColumn: "GridCorUsedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Trajectorys_TrajectoryMagDeclUseds_MagDeclUsedId",
                        column: x => x.MagDeclUsedId,
                        principalTable: "TrajectoryMagDeclUseds",
                        principalColumn: "MagDeclUsedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Trajectorys_TrajectoryMdMns_MdMnId",
                        column: x => x.MdMnId,
                        principalTable: "TrajectoryMdMns",
                        principalColumn: "MdMnId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Trajectorys_TrajectoryMdMxs_MdMxId",
                        column: x => x.MdMxId,
                        principalTable: "TrajectoryMdMxs",
                        principalColumn: "MdMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Trajectorys_TrajectoryStations_TrajectoryStationId",
                        column: x => x.TrajectoryStationId,
                        principalTable: "TrajectoryStations",
                        principalColumn: "TrajectoryStationId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TubularNozzle",
                columns: table => new
                {
                    NozzleId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Index = table.Column<string>(nullable: true),
                    DiaNozzleId = table.Column<int>(nullable: true),
                    TypeNozzle = table.Column<string>(nullable: true),
                    LenId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    TubularComponentId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TubularNozzle", x => x.NozzleId);
                    table.ForeignKey(
                        name: "FK_TubularNozzle_TubularDiaNozzle_DiaNozzleId",
                        column: x => x.DiaNozzleId,
                        principalTable: "TubularDiaNozzle",
                        principalColumn: "DiaNozzleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularNozzle_TubularLen_LenId",
                        column: x => x.LenId,
                        principalTable: "TubularLen",
                        principalColumn: "LenId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TubularNozzle_TubularComponent_TubularComponentId",
                        column: x => x.TubularComponentId,
                        principalTable: "TubularComponent",
                        principalColumn: "TubularComponentId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CementJobs",
                columns: table => new
                {
                    CementJobId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uid = table.Column<string>(nullable: true),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    JobType = table.Column<string>(nullable: true),
                    JobConfig = table.Column<string>(nullable: true),
                    DTimJob = table.Column<string>(nullable: true),
                    NameCementedString = table.Column<string>(nullable: true),
                    NameWorkString = table.Column<string>(nullable: true),
                    Contractor = table.Column<string>(nullable: true),
                    CementEngr = table.Column<string>(nullable: true),
                    OffshoreJob = table.Column<string>(nullable: true),
                    MdWaterId = table.Column<int>(nullable: true),
                    ReturnsToSeabed = table.Column<string>(nullable: true),
                    Reciprocating = table.Column<string>(nullable: true),
                    WocId = table.Column<int>(nullable: true),
                    MdPlugTopId = table.Column<int>(nullable: true),
                    MdPlugBotId = table.Column<int>(nullable: true),
                    MdHoleId = table.Column<int>(nullable: true),
                    MdShoeId = table.Column<int>(nullable: true),
                    TvdShoeId = table.Column<int>(nullable: true),
                    MdStringSetId = table.Column<int>(nullable: true),
                    TvdStringSetId = table.Column<int>(nullable: true),
                    CementStageId = table.Column<int>(nullable: true),
                    CementTestId = table.Column<int>(nullable: true),
                    TypePlug = table.Column<string>(nullable: true),
                    NameCementString = table.Column<string>(nullable: true),
                    DTimPlugSet = table.Column<string>(nullable: true),
                    CementDrillOut = table.Column<string>(nullable: true),
                    DTimCementDrillOut = table.Column<string>(nullable: true),
                    TypeSqueeze = table.Column<string>(nullable: true),
                    MdSqueezeId = table.Column<int>(nullable: true),
                    DTimSqueeze = table.Column<string>(nullable: true),
                    ToolCompany = table.Column<string>(nullable: true),
                    TypeTool = table.Column<string>(nullable: true),
                    DTimPipeRotStart = table.Column<string>(nullable: true),
                    DTimPipeRotEnd = table.Column<string>(nullable: true),
                    RpmPipeId = table.Column<int>(nullable: true),
                    TqInitPipeRotId = table.Column<int>(nullable: true),
                    TqPipeAvId = table.Column<int>(nullable: true),
                    TqPipeMxId = table.Column<int>(nullable: true),
                    DTimRecipStart = table.Column<string>(nullable: true),
                    DTimRecipEnd = table.Column<string>(nullable: true),
                    OverPullId = table.Column<int>(nullable: true),
                    SlackOffId = table.Column<int>(nullable: true),
                    RpmPipeRecipId = table.Column<int>(nullable: true),
                    LenPipeRecipStrokeId = table.Column<int>(nullable: true),
                    CoilTubing = table.Column<string>(nullable: true),
                    CommonDataId = table.Column<int>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CementJobs", x => x.CementJobId);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobCementStages_CementStageId",
                        column: x => x.CementStageId,
                        principalTable: "CementJobCementStages",
                        principalColumn: "CementStageId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobCementTests_CementTestId",
                        column: x => x.CementTestId,
                        principalTable: "CementJobCementTests",
                        principalColumn: "CementTestId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobCommonDatas_CommonDataId",
                        column: x => x.CommonDataId,
                        principalTable: "CementJobCommonDatas",
                        principalColumn: "CommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobLenPipeRecipStrokes_LenPipeRecipStrokeId",
                        column: x => x.LenPipeRecipStrokeId,
                        principalTable: "CementJobLenPipeRecipStrokes",
                        principalColumn: "LenPipeRecipStrokeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobMdHoles_MdHoleId",
                        column: x => x.MdHoleId,
                        principalTable: "CementJobMdHoles",
                        principalColumn: "MdHoleId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobMdPlugBots_MdPlugBotId",
                        column: x => x.MdPlugBotId,
                        principalTable: "CementJobMdPlugBots",
                        principalColumn: "MdPlugBotId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobMdPlugTops_MdPlugTopId",
                        column: x => x.MdPlugTopId,
                        principalTable: "CementJobMdPlugTops",
                        principalColumn: "MdPlugTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobMdShoes_MdShoeId",
                        column: x => x.MdShoeId,
                        principalTable: "CementJobMdShoes",
                        principalColumn: "MdShoeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobMdSqueezes_MdSqueezeId",
                        column: x => x.MdSqueezeId,
                        principalTable: "CementJobMdSqueezes",
                        principalColumn: "MdSqueezeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobMdStringSets_MdStringSetId",
                        column: x => x.MdStringSetId,
                        principalTable: "CementJobMdStringSets",
                        principalColumn: "MdStringSetId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobMdWaters_MdWaterId",
                        column: x => x.MdWaterId,
                        principalTable: "CementJobMdWaters",
                        principalColumn: "MdWaterId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobOverPulls_OverPullId",
                        column: x => x.OverPullId,
                        principalTable: "CementJobOverPulls",
                        principalColumn: "OverPullId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobRpmPipes_RpmPipeId",
                        column: x => x.RpmPipeId,
                        principalTable: "CementJobRpmPipes",
                        principalColumn: "RpmPipeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobRpmPipeRecips_RpmPipeRecipId",
                        column: x => x.RpmPipeRecipId,
                        principalTable: "CementJobRpmPipeRecips",
                        principalColumn: "RpmPipeRecipId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobSlackOffs_SlackOffId",
                        column: x => x.SlackOffId,
                        principalTable: "CementJobSlackOffs",
                        principalColumn: "SlackOffId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobTqInitPipeRots_TqInitPipeRotId",
                        column: x => x.TqInitPipeRotId,
                        principalTable: "CementJobTqInitPipeRots",
                        principalColumn: "TqInitPipeRotId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobTqPipeAvs_TqPipeAvId",
                        column: x => x.TqPipeAvId,
                        principalTable: "CementJobTqPipeAvs",
                        principalColumn: "TqPipeAvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobTqPipeMxs_TqPipeMxId",
                        column: x => x.TqPipeMxId,
                        principalTable: "CementJobTqPipeMxs",
                        principalColumn: "TqPipeMxId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobTvdShoes_TvdShoeId",
                        column: x => x.TvdShoeId,
                        principalTable: "CementJobTvdShoes",
                        principalColumn: "TvdShoeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobTvdStringSets_TvdStringSetId",
                        column: x => x.TvdStringSetId,
                        principalTable: "CementJobTvdStringSets",
                        principalColumn: "TvdStringSetId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CementJobs_CementJobWocs_WocId",
                        column: x => x.WocId,
                        principalTable: "CementJobWocs",
                        principalColumn: "WocId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MudLogChronostratigraphic",
                columns: table => new
                {
                    ChronostratigraphicId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Kind = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true),
                    MudLogGeologyIntervalGeologyIntervalId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogChronostratigraphic", x => x.ChronostratigraphicId);
                    table.ForeignKey(
                        name: "FK_MudLogChronostratigraphic_MudLogGeologyInterval_MudLogGeologyIntervalGeologyIntervalId",
                        column: x => x.MudLogGeologyIntervalGeologyIntervalId,
                        principalTable: "MudLogGeologyInterval",
                        principalColumn: "GeologyIntervalId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MudLogs",
                columns: table => new
                {
                    MudLogId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    ObjectGrowing = table.Column<string>(nullable: true),
                    DTim = table.Column<string>(nullable: true),
                    MudLogCompany = table.Column<string>(nullable: true),
                    MudLogEngineers = table.Column<string>(nullable: true),
                    StartMdId = table.Column<int>(nullable: true),
                    EndMdId = table.Column<int>(nullable: true),
                    GeologyIntervalId = table.Column<int>(nullable: true),
                    CommonDataMudLogCommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogs", x => x.MudLogId);
                    table.ForeignKey(
                        name: "FK_MudLogs_MudLogCommonDatas_CommonDataMudLogCommonDataId",
                        column: x => x.CommonDataMudLogCommonDataId,
                        principalTable: "MudLogCommonDatas",
                        principalColumn: "MudLogCommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogs_MudLogEndMd_EndMdId",
                        column: x => x.EndMdId,
                        principalTable: "MudLogEndMd",
                        principalColumn: "EndMdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogs_MudLogGeologyInterval_GeologyIntervalId",
                        column: x => x.GeologyIntervalId,
                        principalTable: "MudLogGeologyInterval",
                        principalColumn: "GeologyIntervalId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogs_MudLogStartMd_StartMdId",
                        column: x => x.StartMdId,
                        principalTable: "MudLogStartMd",
                        principalColumn: "StartMdId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportDayCosts",
                columns: table => new
                {
                    DayCostId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NumAFE = table.Column<string>(nullable: true),
                    CostGroup = table.Column<string>(nullable: true),
                    CostClass = table.Column<string>(nullable: true),
                    CostCode = table.Column<string>(nullable: true),
                    CostSubCode = table.Column<string>(nullable: true),
                    CostItemDescription = table.Column<string>(nullable: true),
                    CostPerItemId = table.Column<int>(nullable: true),
                    ItemKind = table.Column<string>(nullable: true),
                    ItemSize = table.Column<string>(nullable: true),
                    QtyItem = table.Column<string>(nullable: true),
                    CostAmountId = table.Column<int>(nullable: true),
                    NumInvoice = table.Column<string>(nullable: true),
                    NumPO = table.Column<string>(nullable: true),
                    NumTicket = table.Column<string>(nullable: true),
                    IsCarryOver = table.Column<string>(nullable: true),
                    IsRental = table.Column<string>(nullable: true),
                    NumSerial = table.Column<string>(nullable: true),
                    NameVendor = table.Column<string>(nullable: true),
                    NumVendor = table.Column<string>(nullable: true),
                    Pool = table.Column<string>(nullable: true),
                    Estimated = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    OpsReportId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportDayCosts", x => x.DayCostId);
                    table.ForeignKey(
                        name: "FK_OpsReportDayCosts_OpsReportCostAmounts_CostAmountId",
                        column: x => x.CostAmountId,
                        principalTable: "OpsReportCostAmounts",
                        principalColumn: "CostAmountId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDayCosts_OpsReportCostPerItems_CostPerItemId",
                        column: x => x.CostPerItemId,
                        principalTable: "OpsReportCostPerItems",
                        principalColumn: "CostPerItemId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportDayCosts_OpsReports_OpsReportId",
                        column: x => x.OpsReportId,
                        principalTable: "OpsReports",
                        principalColumn: "OpsReportId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPersonnels",
                columns: table => new
                {
                    PersonnelId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Company = table.Column<string>(nullable: true),
                    TypeService = table.Column<string>(nullable: true),
                    NumPeople = table.Column<string>(nullable: true),
                    TotalTimeId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    OpsReportId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPersonnels", x => x.PersonnelId);
                    table.ForeignKey(
                        name: "FK_OpsReportPersonnels_OpsReports_OpsReportId",
                        column: x => x.OpsReportId,
                        principalTable: "OpsReports",
                        principalColumn: "OpsReportId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportPersonnels_OpsReportTotalTimes_TotalTimeId",
                        column: x => x.TotalTimeId,
                        principalTable: "OpsReportTotalTimes",
                        principalColumn: "TotalTimeId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportPitVolumes",
                columns: table => new
                {
                    PitVolumeId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PitId = table.Column<int>(nullable: true),
                    DTim = table.Column<string>(nullable: true),
                    VolPitId = table.Column<int>(nullable: true),
                    DensFluidId = table.Column<int>(nullable: true),
                    DescFluid = table.Column<string>(nullable: true),
                    VisFunnelId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    OpsReportId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportPitVolumes", x => x.PitVolumeId);
                    table.ForeignKey(
                        name: "FK_OpsReportPitVolumes_OpsReportDensFluids_DensFluidId",
                        column: x => x.DensFluidId,
                        principalTable: "OpsReportDensFluids",
                        principalColumn: "DensFluidId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportPitVolumes_OpsReports_OpsReportId",
                        column: x => x.OpsReportId,
                        principalTable: "OpsReports",
                        principalColumn: "OpsReportId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportPitVolumes_OpsReportPits_PitId",
                        column: x => x.PitId,
                        principalTable: "OpsReportPits",
                        principalColumn: "PitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportPitVolumes_OpsReportVisFunnels_VisFunnelId",
                        column: x => x.VisFunnelId,
                        principalTable: "OpsReportVisFunnels",
                        principalColumn: "VisFunnelId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportPitVolumes_OpsReportVolPits_VolPitId",
                        column: x => x.VolPitId,
                        principalTable: "OpsReportVolPits",
                        principalColumn: "VolPitId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpsReportScrs",
                columns: table => new
                {
                    ScrId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    PumpId = table.Column<int>(nullable: true),
                    TypeScr = table.Column<string>(nullable: true),
                    RateStrokeId = table.Column<int>(nullable: true),
                    PresRecordedId = table.Column<int>(nullable: true),
                    MdBitId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    OpsReportId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpsReportScrs", x => x.ScrId);
                    table.ForeignKey(
                        name: "FK_OpsReportScrs_OpsReportMdBits_MdBitId",
                        column: x => x.MdBitId,
                        principalTable: "OpsReportMdBits",
                        principalColumn: "MdBitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportScrs_OpsReports_OpsReportId",
                        column: x => x.OpsReportId,
                        principalTable: "OpsReports",
                        principalColumn: "OpsReportId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportScrs_OpsReportPresRecordeds_PresRecordedId",
                        column: x => x.PresRecordedId,
                        principalTable: "OpsReportPresRecordeds",
                        principalColumn: "PresRecordedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportScrs_OpsReportPumps_PumpId",
                        column: x => x.PumpId,
                        principalTable: "OpsReportPumps",
                        principalColumn: "PumpId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpsReportScrs_OpsReportRateStrokes_RateStrokeId",
                        column: x => x.RateStrokeId,
                        principalTable: "OpsReportRateStrokes",
                        principalColumn: "RateStrokeId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SidewallCores",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    DTimToolRun = table.Column<string>(nullable: true),
                    DTimToolPull = table.Column<string>(nullable: true),
                    MdToolReferenceUom = table.Column<string>(nullable: true),
                    CoreReferenceLog = table.Column<string>(nullable: true),
                    MdCoreUom = table.Column<string>(nullable: true),
                    ServiceCompany = table.Column<string>(nullable: true),
                    AnalysisContractor = table.Column<string>(nullable: true),
                    AnalysisBy = table.Column<string>(nullable: true),
                    SidewallCoringTool = table.Column<string>(nullable: true),
                    DiaHoleUom = table.Column<string>(nullable: true),
                    DiaPlugUom = table.Column<string>(nullable: true),
                    NumPlugsShot = table.Column<string>(nullable: true),
                    NumRecPlugs = table.Column<string>(nullable: true),
                    NumMisfiredPlugs = table.Column<string>(nullable: true),
                    NumEmptyPlugs = table.Column<string>(nullable: true),
                    NumLostPlugs = table.Column<string>(nullable: true),
                    NumPaidPlugs = table.Column<string>(nullable: true),
                    SwcSampleUid = table.Column<string>(nullable: true),
                    CommonDataSidewallCoresCommonDataid = table.Column<int>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SidewallCores", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_SidewallCores_SideWallCoreCommonData_CommonDataSidewallCoresCommonDataid",
                        column: x => x.CommonDataSidewallCoresCommonDataid,
                        principalTable: "SideWallCoreCommonData",
                        principalColumn: "SidewallCoresCommonDataid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SidewallCores_SideWallCoreDiaHole_DiaHoleUom",
                        column: x => x.DiaHoleUom,
                        principalTable: "SideWallCoreDiaHole",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SidewallCores_DiaPlug_DiaPlugUom",
                        column: x => x.DiaPlugUom,
                        principalTable: "DiaPlug",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SidewallCores_SideWallMdCore_MdCoreUom",
                        column: x => x.MdCoreUom,
                        principalTable: "SideWallMdCore",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SidewallCores_SideWallMdToolReference_MdToolReferenceUom",
                        column: x => x.MdToolReferenceUom,
                        principalTable: "SideWallMdToolReference",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SidewallCores_SideWallCoreSwcSample_SwcSampleUid",
                        column: x => x.SwcSampleUid,
                        principalTable: "SideWallCoreSwcSample",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobs",
                columns: table => new
                {
                    StimJobId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    Kind = table.Column<string>(nullable: true),
                    CommodityCode = table.Column<string>(nullable: true),
                    ServiceCompany = table.Column<string>(nullable: true),
                    Supervisor = table.Column<string>(nullable: true),
                    ApiNumber = table.Column<string>(nullable: true),
                    CustomerName = table.Column<string>(nullable: true),
                    DTimArrival = table.Column<string>(nullable: true),
                    DTimStart = table.Column<string>(nullable: true),
                    TotalPumpTimeId = table.Column<int>(nullable: true),
                    MaxJobPresId = table.Column<int>(nullable: true),
                    MaxFluidRateId = table.Column<int>(nullable: true),
                    AvgJobPresId = table.Column<int>(nullable: true),
                    TotalJobVolumeId = table.Column<int>(nullable: true),
                    TotalProppantWtId = table.Column<int>(nullable: true),
                    ProppantName = table.Column<string>(nullable: true),
                    PerfBallCount = table.Column<string>(nullable: true),
                    TotalN2StdVolumeId = table.Column<int>(nullable: true),
                    TotalCO2MassId = table.Column<int>(nullable: true),
                    HhpOrderedId = table.Column<int>(nullable: true),
                    HhpUsedId = table.Column<int>(nullable: true),
                    TreatmentCount = table.Column<string>(nullable: true),
                    FluidEfficiencyId = table.Column<int>(nullable: true),
                    FlowBackPresId = table.Column<int>(nullable: true),
                    FlowBackRateId = table.Column<int>(nullable: true),
                    FlowBackVolumeId = table.Column<int>(nullable: true),
                    TreatmentIntervalCount = table.Column<string>(nullable: true),
                    BottomholeStaticTemperatureId = table.Column<int>(nullable: true),
                    TreatingBottomholeTemperatureId = table.Column<int>(nullable: true),
                    JobIntervalId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobs", x => x.StimJobId);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobAvgJobPress_AvgJobPresId",
                        column: x => x.AvgJobPresId,
                        principalTable: "StimJobAvgJobPress",
                        principalColumn: "AvgJobPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobBottomholeStaticTemperatures_BottomholeStaticTemperatureId",
                        column: x => x.BottomholeStaticTemperatureId,
                        principalTable: "StimJobBottomholeStaticTemperatures",
                        principalColumn: "BottomholeStaticTemperatureId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobFlowBackPress_FlowBackPresId",
                        column: x => x.FlowBackPresId,
                        principalTable: "StimJobFlowBackPress",
                        principalColumn: "FlowBackPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobFlowBackRates_FlowBackRateId",
                        column: x => x.FlowBackRateId,
                        principalTable: "StimJobFlowBackRates",
                        principalColumn: "FlowBackRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobFlowBackVolumes_FlowBackVolumeId",
                        column: x => x.FlowBackVolumeId,
                        principalTable: "StimJobFlowBackVolumes",
                        principalColumn: "FlowBackVolumeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobFluidEfficiencys_FluidEfficiencyId",
                        column: x => x.FluidEfficiencyId,
                        principalTable: "StimJobFluidEfficiencys",
                        principalColumn: "FluidEfficiencyId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobHhpOrdereds_HhpOrderedId",
                        column: x => x.HhpOrderedId,
                        principalTable: "StimJobHhpOrdereds",
                        principalColumn: "HhpOrderedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobHhpUseds_HhpUsedId",
                        column: x => x.HhpUsedId,
                        principalTable: "StimJobHhpUseds",
                        principalColumn: "HhpUsedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobJobIntervals_JobIntervalId",
                        column: x => x.JobIntervalId,
                        principalTable: "StimJobJobIntervals",
                        principalColumn: "JobIntervalId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobMaxFluidRates_MaxFluidRateId",
                        column: x => x.MaxFluidRateId,
                        principalTable: "StimJobMaxFluidRates",
                        principalColumn: "MaxFluidRateId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobMaxJobPress_MaxJobPresId",
                        column: x => x.MaxJobPresId,
                        principalTable: "StimJobMaxJobPress",
                        principalColumn: "MaxJobPresId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobTotalCO2Masss_TotalCO2MassId",
                        column: x => x.TotalCO2MassId,
                        principalTable: "StimJobTotalCO2Masss",
                        principalColumn: "TotalCO2MassId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobTotalJobVolumes_TotalJobVolumeId",
                        column: x => x.TotalJobVolumeId,
                        principalTable: "StimJobTotalJobVolumes",
                        principalColumn: "TotalJobVolumeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobTotalN2StdVolumes_TotalN2StdVolumeId",
                        column: x => x.TotalN2StdVolumeId,
                        principalTable: "StimJobTotalN2StdVolumes",
                        principalColumn: "TotalN2StdVolumeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobTotalProppantWts_TotalProppantWtId",
                        column: x => x.TotalProppantWtId,
                        principalTable: "StimJobTotalProppantWts",
                        principalColumn: "TotalProppantWtId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobTotalPumpTimes_TotalPumpTimeId",
                        column: x => x.TotalPumpTimeId,
                        principalTable: "StimJobTotalPumpTimes",
                        principalColumn: "TotalPumpTimeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobs_StimJobTreatingBottomholeTemperatures_TreatingBottomholeTemperatureId",
                        column: x => x.TreatingBottomholeTemperatureId,
                        principalTable: "StimJobTreatingBottomholeTemperatures",
                        principalColumn: "TreatingBottomholeTemperatureId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StimJobTotalProppantUsages",
                columns: table => new
                {
                    TotalProppantUsageId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    MassId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    JobIntervalId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StimJobTotalProppantUsages", x => x.TotalProppantUsageId);
                    table.ForeignKey(
                        name: "FK_StimJobTotalProppantUsages_StimJobJobIntervals_JobIntervalId",
                        column: x => x.JobIntervalId,
                        principalTable: "StimJobJobIntervals",
                        principalColumn: "JobIntervalId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StimJobTotalProppantUsages_StimJobMasss_MassId",
                        column: x => x.MassId,
                        principalTable: "StimJobMasss",
                        principalColumn: "MassId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ToolErrorTermSetErrorCoefficients",
                columns: table => new
                {
                    ErrorCoefficientId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Azi = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    Inc = table.Column<string>(nullable: true),
                    Depth = table.Column<string>(nullable: true),
                    Tvd = table.Column<string>(nullable: true),
                    ErrorTermId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolErrorTermSetErrorCoefficients", x => x.ErrorCoefficientId);
                    table.ForeignKey(
                        name: "FK_ToolErrorTermSetErrorCoefficients_ToolErrorTermSetErrorTerms_ErrorTermId",
                        column: x => x.ErrorTermId,
                        principalTable: "ToolErrorTermSetErrorTerms",
                        principalColumn: "ErrorTermId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MudLogParameter",
                columns: table => new
                {
                    ParameterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomId = table.Column<int>(nullable: true),
                    Text = table.Column<string>(nullable: true),
                    CommonTimeId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    ForceId = table.Column<int>(nullable: true),
                    MudLogId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MudLogParameter", x => x.ParameterId);
                    table.ForeignKey(
                        name: "FK_MudLogParameter_MudLogCommonTime_CommonTimeId",
                        column: x => x.CommonTimeId,
                        principalTable: "MudLogCommonTime",
                        principalColumn: "CommonTimeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogParameter_MudLogForce_ForceId",
                        column: x => x.ForceId,
                        principalTable: "MudLogForce",
                        principalColumn: "ForceId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogParameter_MudLogMdBottom_MdBottomId",
                        column: x => x.MdBottomId,
                        principalTable: "MudLogMdBottom",
                        principalColumn: "MdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogParameter_MudLogMdTop_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "MudLogMdTop",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MudLogParameter_MudLogs_MudLogId",
                        column: x => x.MudLogId,
                        principalTable: "MudLogs",
                        principalColumn: "MudLogId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemProjectedCRS",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    IdentifierCodeSpace = table.Column<string>(nullable: true),
                    NameCodeSpace = table.Column<string>(nullable: true),
                    Scope = table.Column<string>(nullable: true),
                    DefinedByConversionId = table.Column<string>(nullable: true),
                    BaseGeographicCRSId = table.Column<int>(nullable: true),
                    UsesCartesianCSId = table.Column<int>(nullable: true),
                    SchemaLocation = table.Column<string>(nullable: true),
                    Gml = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemProjectedCRS", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemProjectedCRS_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                        column: x => x.IdentifierCodeSpace,
                        principalTable: "CoordinateReferenceSystemIdentifier",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemUsesAxis",
                columns: table => new
                {
                    UsesAxisId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CoordinateSystemAxisId = table.Column<string>(nullable: true),
                    CartesianCSId = table.Column<string>(nullable: true),
                    EllipsoidalCSId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemUsesAxis", x => x.UsesAxisId);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemUsesAxis_CoordinateReferenceSystemCoordinateSystemAxis_CoordinateSystemAxisId",
                        column: x => x.CoordinateSystemAxisId,
                        principalTable: "CoordinateReferenceSystemCoordinateSystemAxis",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemUsesCartesianCS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CartesianCSId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemUsesCartesianCS", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemDefinedByConversion",
                columns: table => new
                {
                    DefinedByConversionId = table.Column<string>(nullable: false),
                    ConversionId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemDefinedByConversion", x => x.DefinedByConversionId);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemUsesValue",
                columns: table => new
                {
                    UsesValueId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ParameterValueValueOfParameterId = table.Column<int>(nullable: true),
                    ConversionId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemUsesValue", x => x.UsesValueId);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemUsesValue_CoordinateReferenceSystemParameterValue_ParameterValueValueOfParameterId",
                        column: x => x.ParameterValueValueOfParameterId,
                        principalTable: "CoordinateReferenceSystemParameterValue",
                        principalColumn: "ValueOfParameterId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemName",
                columns: table => new
                {
                    CodeSpace = table.Column<string>(nullable: false),
                    Text = table.Column<string>(nullable: true),
                    EllipsoidId = table.Column<string>(nullable: true),
                    GeodeticDatumId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemName", x => x.CodeSpace);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemName_CoordinateReferenceSystemEllipsoid_EllipsoidId",
                        column: x => x.EllipsoidId,
                        principalTable: "CoordinateReferenceSystemEllipsoid",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemCartesianCS",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    IdentifierCodeSpace = table.Column<string>(nullable: true),
                    NameCodeSpace = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemCartesianCS", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemCartesianCS_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                        column: x => x.IdentifierCodeSpace,
                        principalTable: "CoordinateReferenceSystemIdentifier",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemCartesianCS_CoordinateReferenceSystemName_NameCodeSpace",
                        column: x => x.NameCodeSpace,
                        principalTable: "CoordinateReferenceSystemName",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemEllipsoidalCS",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    IdentifierCodeSpace = table.Column<string>(nullable: true),
                    NameCodeSpace = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemEllipsoidalCS", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemEllipsoidalCS_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                        column: x => x.IdentifierCodeSpace,
                        principalTable: "CoordinateReferenceSystemIdentifier",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemEllipsoidalCS_CoordinateReferenceSystemName_NameCodeSpace",
                        column: x => x.NameCodeSpace,
                        principalTable: "CoordinateReferenceSystemName",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemOperationMethod",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    IdentifierCodeSpace = table.Column<string>(nullable: true),
                    NameCodeSpace = table.Column<string>(nullable: true),
                    MethodFormula = table.Column<string>(nullable: true),
                    SourceDimensions = table.Column<string>(nullable: true),
                    TargetDimensions = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemOperationMethod", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemOperationMethod_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                        column: x => x.IdentifierCodeSpace,
                        principalTable: "CoordinateReferenceSystemIdentifier",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemOperationMethod_CoordinateReferenceSystemName_NameCodeSpace",
                        column: x => x.NameCodeSpace,
                        principalTable: "CoordinateReferenceSystemName",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemOperationParameter",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    Description = table.Column<string>(nullable: true),
                    IdentifierCodeSpace = table.Column<string>(nullable: true),
                    NameCodeSpace = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemOperationParameter", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemOperationParameter_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                        column: x => x.IdentifierCodeSpace,
                        principalTable: "CoordinateReferenceSystemIdentifier",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemOperationParameter_CoordinateReferenceSystemName_NameCodeSpace",
                        column: x => x.NameCodeSpace,
                        principalTable: "CoordinateReferenceSystemName",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemPrimeMeridian",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    IdentifierCodeSpace = table.Column<string>(nullable: true),
                    NameCodeSpace = table.Column<string>(nullable: true),
                    GreenwichLongitudeUom = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemPrimeMeridian", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemPrimeMeridian_CoordinateReferenceSystemGreenwichLongitude_GreenwichLongitudeUom",
                        column: x => x.GreenwichLongitudeUom,
                        principalTable: "CoordinateReferenceSystemGreenwichLongitude",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemPrimeMeridian_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                        column: x => x.IdentifierCodeSpace,
                        principalTable: "CoordinateReferenceSystemIdentifier",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemPrimeMeridian_CoordinateReferenceSystemName_NameCodeSpace",
                        column: x => x.NameCodeSpace,
                        principalTable: "CoordinateReferenceSystemName",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemUsesEllipsoidalCS",
                columns: table => new
                {
                    EllipsId = table.Column<string>(nullable: false),
                    EllipsoidalCSId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemUsesEllipsoidalCS", x => x.EllipsId);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemUsesEllipsoidalCS_CoordinateReferenceSystemEllipsoidalCS_EllipsoidalCSId",
                        column: x => x.EllipsoidalCSId,
                        principalTable: "CoordinateReferenceSystemEllipsoidalCS",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemUsesMethod",
                columns: table => new
                {
                    UsesMethodId = table.Column<string>(nullable: false),
                    OperationMethodId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemUsesMethod", x => x.UsesMethodId);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemUsesMethod_CoordinateReferenceSystemOperationMethod_OperationMethodId",
                        column: x => x.OperationMethodId,
                        principalTable: "CoordinateReferenceSystemOperationMethod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemUsesParameter",
                columns: table => new
                {
                    UsesParameterId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OperationParameterId = table.Column<string>(nullable: true),
                    OperationMethodId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemUsesParameter", x => x.UsesParameterId);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemUsesParameter_CoordinateReferenceSystemOperationMethod_OperationMethodId",
                        column: x => x.OperationMethodId,
                        principalTable: "CoordinateReferenceSystemOperationMethod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemUsesParameter_CoordinateReferenceSystemOperationParameter_OperationParameterId",
                        column: x => x.OperationParameterId,
                        principalTable: "CoordinateReferenceSystemOperationParameter",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemUsesPrimeMeridian",
                columns: table => new
                {
                    UsesPrimeMeridianId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PrimeMeridianId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemUsesPrimeMeridian", x => x.UsesPrimeMeridianId);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemUsesPrimeMeridian_CoordinateReferenceSystemPrimeMeridian_PrimeMeridianId",
                        column: x => x.PrimeMeridianId,
                        principalTable: "CoordinateReferenceSystemPrimeMeridian",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemConversion",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    IdentifierCodeSpace = table.Column<string>(nullable: true),
                    NameCodeSpace = table.Column<string>(nullable: true),
                    Scope = table.Column<string>(nullable: true),
                    UsesMethodId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemConversion", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemConversion_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                        column: x => x.IdentifierCodeSpace,
                        principalTable: "CoordinateReferenceSystemIdentifier",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemConversion_CoordinateReferenceSystemName_NameCodeSpace",
                        column: x => x.NameCodeSpace,
                        principalTable: "CoordinateReferenceSystemName",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemConversion_CoordinateReferenceSystemUsesMethod_UsesMethodId",
                        column: x => x.UsesMethodId,
                        principalTable: "CoordinateReferenceSystemUsesMethod",
                        principalColumn: "UsesMethodId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemGeodeticDatum",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    IdentifierCodeSpace = table.Column<string>(nullable: true),
                    Scope = table.Column<string>(nullable: true),
                    AnchorPoint = table.Column<string>(nullable: true),
                    UsesPrimeMeridianId = table.Column<int>(nullable: true),
                    UsesEllipsoidId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemGeodeticDatum", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGeodeticDatum_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                        column: x => x.IdentifierCodeSpace,
                        principalTable: "CoordinateReferenceSystemIdentifier",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGeodeticDatum_CoordinateReferenceSystemUsesEllipsoid_UsesEllipsoidId",
                        column: x => x.UsesEllipsoidId,
                        principalTable: "CoordinateReferenceSystemUsesEllipsoid",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGeodeticDatum_CoordinateReferenceSystemUsesPrimeMeridian_UsesPrimeMeridianId",
                        column: x => x.UsesPrimeMeridianId,
                        principalTable: "CoordinateReferenceSystemUsesPrimeMeridian",
                        principalColumn: "UsesPrimeMeridianId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemUsesGeodeticDatum",
                columns: table => new
                {
                    UsesGeodeticDatumId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GeodeticDatumId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemUsesGeodeticDatum", x => x.UsesGeodeticDatumId);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemUsesGeodeticDatum_CoordinateReferenceSystemGeodeticDatum_GeodeticDatumId",
                        column: x => x.GeodeticDatumId,
                        principalTable: "CoordinateReferenceSystemGeodeticDatum",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemGeographicCRS",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    IdentifierCodeSpace = table.Column<string>(nullable: true),
                    NameCodeSpace = table.Column<string>(nullable: true),
                    Scope = table.Column<string>(nullable: true),
                    UsesEllipsoidalCSEllipsId = table.Column<string>(nullable: true),
                    UsesGeodeticDatumId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemGeographicCRS", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGeographicCRS_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                        column: x => x.IdentifierCodeSpace,
                        principalTable: "CoordinateReferenceSystemIdentifier",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGeographicCRS_CoordinateReferenceSystemName_NameCodeSpace",
                        column: x => x.NameCodeSpace,
                        principalTable: "CoordinateReferenceSystemName",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGeographicCRS_CoordinateReferenceSystemUsesEllipsoidalCS_UsesEllipsoidalCSEllipsId",
                        column: x => x.UsesEllipsoidalCSEllipsId,
                        principalTable: "CoordinateReferenceSystemUsesEllipsoidalCS",
                        principalColumn: "EllipsId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGeographicCRS_CoordinateReferenceSystemUsesGeodeticDatum_UsesGeodeticDatumId",
                        column: x => x.UsesGeodeticDatumId,
                        principalTable: "CoordinateReferenceSystemUsesGeodeticDatum",
                        principalColumn: "UsesGeodeticDatumId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemGmlGeodeticCRS",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    IdentifierCodeSpace = table.Column<string>(nullable: true),
                    NameCodeSpace = table.Column<string>(nullable: true),
                    Scope = table.Column<string>(nullable: true),
                    EllipsoidalCSId = table.Column<string>(nullable: true),
                    UsesGeodeticDatumId = table.Column<int>(nullable: true),
                    SchemaLocation = table.Column<string>(nullable: true),
                    Xsi = table.Column<string>(nullable: true),
                    Gml = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemGmlGeodeticCRS", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGmlGeodeticCRS_CoordinateReferenceSystemEllipsoidalCS_EllipsoidalCSId",
                        column: x => x.EllipsoidalCSId,
                        principalTable: "CoordinateReferenceSystemEllipsoidalCS",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGmlGeodeticCRS_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                        column: x => x.IdentifierCodeSpace,
                        principalTable: "CoordinateReferenceSystemIdentifier",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGmlGeodeticCRS_CoordinateReferenceSystemName_NameCodeSpace",
                        column: x => x.NameCodeSpace,
                        principalTable: "CoordinateReferenceSystemName",
                        principalColumn: "CodeSpace",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGmlGeodeticCRS_CoordinateReferenceSystemUsesGeodeticDatum_UsesGeodeticDatumId",
                        column: x => x.UsesGeodeticDatumId,
                        principalTable: "CoordinateReferenceSystemUsesGeodeticDatum",
                        principalColumn: "UsesGeodeticDatumId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemBaseGeographicCRS",
                columns: table => new
                {
                    BaseGeographicCRSId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GeographicCRSId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemBaseGeographicCRS", x => x.BaseGeographicCRSId);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemBaseGeographicCRS_CoordinateReferenceSystemGeographicCRS_GeographicCRSId",
                        column: x => x.GeographicCRSId,
                        principalTable: "CoordinateReferenceSystemGeographicCRS",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystemGeodeticCRS",
                columns: table => new
                {
                    CoRefGeodeticCRSId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameCRSCode = table.Column<string>(nullable: true),
                    GmlGeodeticCRSId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystemGeodeticCRS", x => x.CoRefGeodeticCRSId);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGeodeticCRS_CoordinateReferenceSystemGmlGeodeticCRS_GmlGeodeticCRSId",
                        column: x => x.GmlGeodeticCRSId,
                        principalTable: "CoordinateReferenceSystemGmlGeodeticCRS",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystemGeodeticCRS_CoordinateReferenceSystemNameCRS_NameCRSCode",
                        column: x => x.NameCRSCode,
                        principalTable: "CoordinateReferenceSystemNameCRS",
                        principalColumn: "Code",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CoordinateReferenceSystem",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    GeodeticCRSCoRefGeodeticCRSId = table.Column<int>(nullable: true),
                    ProjectedCRSId = table.Column<string>(nullable: true),
                    VerticalCRSId = table.Column<int>(nullable: true),
                    Name2 = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoordinateReferenceSystem", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystem_CoordinateReferenceSystemGeodeticCRS_GeodeticCRSCoRefGeodeticCRSId",
                        column: x => x.GeodeticCRSCoRefGeodeticCRSId,
                        principalTable: "CoordinateReferenceSystemGeodeticCRS",
                        principalColumn: "CoRefGeodeticCRSId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystem_CoordinateReferenceSystemProjectedCRS_ProjectedCRSId",
                        column: x => x.ProjectedCRSId,
                        principalTable: "CoordinateReferenceSystemProjectedCRS",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CoordinateReferenceSystem_CoordinateReferenceSystemVerticalCRS_VerticalCRSId",
                        column: x => x.VerticalCRSId,
                        principalTable: "CoordinateReferenceSystemVerticalCRS",
                        principalColumn: "VerticalCRSId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReports",
                columns: table => new
                {
                    DrillReportId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameWell = table.Column<string>(nullable: true),
                    NameWellbore = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    DTimStart = table.Column<string>(nullable: true),
                    DTimEnd = table.Column<string>(nullable: true),
                    VersionKind = table.Column<string>(nullable: true),
                    CreateDate = table.Column<string>(nullable: true),
                    WellAliasId = table.Column<int>(nullable: true),
                    WellCRSUid = table.Column<string>(nullable: true),
                    WellboreInfoId = table.Column<int>(nullable: true),
                    StatusInfoId = table.Column<int>(nullable: true),
                    BitRecordId = table.Column<int>(nullable: true),
                    ExtendedReportId = table.Column<int>(nullable: true),
                    SurveyStationId = table.Column<int>(nullable: true),
                    CoreInfoId = table.Column<int>(nullable: true),
                    WellTestInfoId = table.Column<int>(nullable: true),
                    FormTestInfoId = table.Column<int>(nullable: true),
                    LithShowInfoId = table.Column<int>(nullable: true),
                    EquipFailureInfoId = table.Column<int>(nullable: true),
                    ControlIncidentInfoId = table.Column<int>(nullable: true),
                    StratInfoId = table.Column<int>(nullable: true),
                    PerfInfoId = table.Column<int>(nullable: true),
                    GasReadingInfoId = table.Column<int>(nullable: true),
                    CommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    UidWellbore = table.Column<string>(nullable: true),
                    UidWell = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReports", x => x.DrillReportId);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportBitRecord_BitRecordId",
                        column: x => x.BitRecordId,
                        principalTable: "DrillReportBitRecord",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportCommonData_CommonDataId",
                        column: x => x.CommonDataId,
                        principalTable: "DrillReportCommonData",
                        principalColumn: "CommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportCoreInfo_CoreInfoId",
                        column: x => x.CoreInfoId,
                        principalTable: "DrillReportCoreInfo",
                        principalColumn: "CoreInfoId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportEquipFailureInfo_EquipFailureInfoId",
                        column: x => x.EquipFailureInfoId,
                        principalTable: "DrillReportEquipFailureInfo",
                        principalColumn: "EquipFailureInfoId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportExtendedReport_ExtendedReportId",
                        column: x => x.ExtendedReportId,
                        principalTable: "DrillReportExtendedReport",
                        principalColumn: "ExtendedReportId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportFormTestInfo_FormTestInfoId",
                        column: x => x.FormTestInfoId,
                        principalTable: "DrillReportFormTestInfo",
                        principalColumn: "FormTestInfoId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportGasReadingInfo_GasReadingInfoId",
                        column: x => x.GasReadingInfoId,
                        principalTable: "DrillReportGasReadingInfo",
                        principalColumn: "GasReadingInfoId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportLithShowInfo_LithShowInfoId",
                        column: x => x.LithShowInfoId,
                        principalTable: "DrillReportLithShowInfo",
                        principalColumn: "LithShowInfoId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportPerfInfo_PerfInfoId",
                        column: x => x.PerfInfoId,
                        principalTable: "DrillReportPerfInfo",
                        principalColumn: "PerfInfoId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportStatusInfo_StatusInfoId",
                        column: x => x.StatusInfoId,
                        principalTable: "DrillReportStatusInfo",
                        principalColumn: "StatusInfoId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportStratInfo_StratInfoId",
                        column: x => x.StratInfoId,
                        principalTable: "DrillReportStratInfo",
                        principalColumn: "StratInfoId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportSurveyStation_SurveyStationId",
                        column: x => x.SurveyStationId,
                        principalTable: "DrillReportSurveyStation",
                        principalColumn: "SurveyStationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportWellAlias_WellAliasId",
                        column: x => x.WellAliasId,
                        principalTable: "DrillReportWellAlias",
                        principalColumn: "WellAliasId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportWellCR_WellCRSUid",
                        column: x => x.WellCRSUid,
                        principalTable: "DrillReportWellCR",
                        principalColumn: "Uid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportWellTestInfo_WellTestInfoId",
                        column: x => x.WellTestInfoId,
                        principalTable: "DrillReportWellTestInfo",
                        principalColumn: "WellTestInfoId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReports_DrillReportWellboreInfo_WellboreInfoId",
                        column: x => x.WellboreInfoId,
                        principalTable: "DrillReportWellboreInfo",
                        principalColumn: "WellboreInfoId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportActivity",
                columns: table => new
                {
                    ActivityId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTimStart = table.Column<string>(nullable: true),
                    DTimEnd = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    TvdId = table.Column<int>(nullable: true),
                    Phase = table.Column<string>(nullable: true),
                    ActivityCode = table.Column<string>(nullable: true),
                    DetailActivity = table.Column<string>(nullable: true),
                    State = table.Column<string>(nullable: true),
                    StateDetailActivity = table.Column<string>(nullable: true),
                    Comments = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    DrillReportId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportActivity", x => x.ActivityId);
                    table.ForeignKey(
                        name: "FK_DrillReportActivity_DrillReports_DrillReportId",
                        column: x => x.DrillReportId,
                        principalTable: "DrillReports",
                        principalColumn: "DrillReportId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportActivity_DrillReportMd_MdId",
                        column: x => x.MdId,
                        principalTable: "DrillReportMd",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportActivity_DrillReportTvd_TvdId",
                        column: x => x.TvdId,
                        principalTable: "DrillReportTvd",
                        principalColumn: "TvdId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportFluids",
                columns: table => new
                {
                    FluidId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<string>(nullable: true),
                    DTim = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    TvdId = table.Column<int>(nullable: true),
                    PresBopRatingId = table.Column<int>(nullable: true),
                    MudClass = table.Column<string>(nullable: true),
                    DensityId = table.Column<int>(nullable: true),
                    TempVisId = table.Column<int>(nullable: true),
                    PvId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    DrillReportId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportFluids", x => x.FluidId);
                    table.ForeignKey(
                        name: "FK_DrillReportFluids_DrillReportDensity_DensityId",
                        column: x => x.DensityId,
                        principalTable: "DrillReportDensity",
                        principalColumn: "DensityId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportFluids_DrillReports_DrillReportId",
                        column: x => x.DrillReportId,
                        principalTable: "DrillReports",
                        principalColumn: "DrillReportId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportFluids_DrillReportMd_MdId",
                        column: x => x.MdId,
                        principalTable: "DrillReportMd",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportFluids_DrillReportPresBopRating_PresBopRatingId",
                        column: x => x.PresBopRatingId,
                        principalTable: "DrillReportPresBopRating",
                        principalColumn: "PresBopRatingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportFluids_DrillReportPv_PvId",
                        column: x => x.PvId,
                        principalTable: "DrillReportPv",
                        principalColumn: "PvId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportFluids_DrillReportTempVis_TempVisId",
                        column: x => x.TempVisId,
                        principalTable: "DrillReportTempVis",
                        principalColumn: "TempVisId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportFluids_DrillReportTvd_TvdId",
                        column: x => x.TvdId,
                        principalTable: "DrillReportTvd",
                        principalColumn: "TvdId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportLogInfo",
                columns: table => new
                {
                    LogInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    RunNumber = table.Column<string>(nullable: true),
                    ServiceCompany = table.Column<string>(nullable: true),
                    MdTopId = table.Column<int>(nullable: true),
                    MdBottomDrillReportMdBottomId = table.Column<int>(nullable: true),
                    TvdTopDrillReportTvdTopId = table.Column<int>(nullable: true),
                    TvdBottomId = table.Column<int>(nullable: true),
                    Tool = table.Column<string>(nullable: true),
                    TempBHCTId = table.Column<int>(nullable: true),
                    MdTempToolId = table.Column<int>(nullable: true),
                    TvdTempToolId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    TempBHSTId = table.Column<int>(nullable: true),
                    ETimStaticId = table.Column<int>(nullable: true),
                    DrillReportId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportLogInfo", x => x.LogInfoId);
                    table.ForeignKey(
                        name: "FK_DrillReportLogInfo_DrillReports_DrillReportId",
                        column: x => x.DrillReportId,
                        principalTable: "DrillReports",
                        principalColumn: "DrillReportId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportLogInfo_DrillReportETimStatic_ETimStaticId",
                        column: x => x.ETimStaticId,
                        principalTable: "DrillReportETimStatic",
                        principalColumn: "ETimStaticId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportLogInfo_DrillReportMdBottom_MdBottomDrillReportMdBottomId",
                        column: x => x.MdBottomDrillReportMdBottomId,
                        principalTable: "DrillReportMdBottom",
                        principalColumn: "DrillReportMdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportLogInfo_DrillReportMdTempTool_MdTempToolId",
                        column: x => x.MdTempToolId,
                        principalTable: "DrillReportMdTempTool",
                        principalColumn: "MdTempToolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportLogInfo_DrillReportMdTop_MdTopId",
                        column: x => x.MdTopId,
                        principalTable: "DrillReportMdTop",
                        principalColumn: "MdTopId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportLogInfo_DrillReportTempBHCT_TempBHCTId",
                        column: x => x.TempBHCTId,
                        principalTable: "DrillReportTempBHCT",
                        principalColumn: "TempBHCTId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportLogInfo_DrillReportTempBHST_TempBHSTId",
                        column: x => x.TempBHSTId,
                        principalTable: "DrillReportTempBHST",
                        principalColumn: "TempBHSTId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportLogInfo_DrillReportTvdBottom_TvdBottomId",
                        column: x => x.TvdBottomId,
                        principalTable: "DrillReportTvdBottom",
                        principalColumn: "TvdBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportLogInfo_DrillReportTvdTempTool_TvdTempToolId",
                        column: x => x.TvdTempToolId,
                        principalTable: "DrillReportTvdTempTool",
                        principalColumn: "TvdTempToolId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportLogInfo_DrillReportTvdTop_TvdTopDrillReportTvdTopId",
                        column: x => x.TvdTopDrillReportTvdTopId,
                        principalTable: "DrillReportTvdTop",
                        principalColumn: "DrillReportTvdTopId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportPorePressure",
                columns: table => new
                {
                    PorePressureId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReadingKind = table.Column<string>(nullable: true),
                    EquivalentMudWeightId = table.Column<int>(nullable: true),
                    DTim = table.Column<string>(nullable: true),
                    MdId = table.Column<int>(nullable: true),
                    TvdId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    Uom = table.Column<string>(nullable: true),
                    Text = table.Column<string>(nullable: true),
                    DrillReportId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportPorePressure", x => x.PorePressureId);
                    table.ForeignKey(
                        name: "FK_DrillReportPorePressure_DrillReports_DrillReportId",
                        column: x => x.DrillReportId,
                        principalTable: "DrillReports",
                        principalColumn: "DrillReportId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportPorePressure_DrillReportEquivalentMudWeight_EquivalentMudWeightId",
                        column: x => x.EquivalentMudWeightId,
                        principalTable: "DrillReportEquivalentMudWeight",
                        principalColumn: "EquivalentMudWeightId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportPorePressure_DrillReportMd_MdId",
                        column: x => x.MdId,
                        principalTable: "DrillReportMd",
                        principalColumn: "MdId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportPorePressure_DrillReportTvd_TvdId",
                        column: x => x.TvdId,
                        principalTable: "DrillReportTvd",
                        principalColumn: "TvdId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportWellboreAlias",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    NamingSystem = table.Column<string>(nullable: true),
                    DrillReportId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportWellboreAlias", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_DrillReportWellboreAlias_DrillReports_DrillReportId",
                        column: x => x.DrillReportId,
                        principalTable: "DrillReports",
                        principalColumn: "DrillReportId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportWellDatum",
                columns: table => new
                {
                    Uid = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    Code = table.Column<string>(nullable: true),
                    ElevationId = table.Column<int>(nullable: true),
                    DrillReportId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportWellDatum", x => x.Uid);
                    table.ForeignKey(
                        name: "FK_DrillReportWellDatum_DrillReports_DrillReportId",
                        column: x => x.DrillReportId,
                        principalTable: "DrillReports",
                        principalColumn: "DrillReportId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportWellDatum_DrillReportElevation_ElevationId",
                        column: x => x.ElevationId,
                        principalTable: "DrillReportElevation",
                        principalColumn: "ElevationId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrillReportControlIncidentInfo",
                columns: table => new
                {
                    ControlIncidentInfoId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DTim = table.Column<string>(nullable: true),
                    MdInflowId = table.Column<int>(nullable: true),
                    TvdInflowId = table.Column<int>(nullable: true),
                    Phase = table.Column<string>(nullable: true),
                    ActivityCode = table.Column<string>(nullable: true),
                    DetailActivity = table.Column<string>(nullable: true),
                    ETimLostId = table.Column<int>(nullable: true),
                    DTimRegained = table.Column<string>(nullable: true),
                    DiaBitId = table.Column<int>(nullable: true),
                    MdBitId = table.Column<int>(nullable: true),
                    WtMudUom = table.Column<string>(nullable: true),
                    PorePressureId = table.Column<int>(nullable: true),
                    DiaCsgLastId = table.Column<int>(nullable: true),
                    MdCsgLastId = table.Column<int>(nullable: true),
                    VolMudGainedId = table.Column<int>(nullable: true),
                    PresShutInCasingId = table.Column<int>(nullable: true),
                    PresShutInDrillId = table.Column<int>(nullable: true),
                    IncidentType = table.Column<string>(nullable: true),
                    KillingType = table.Column<string>(nullable: true),
                    Formation = table.Column<string>(nullable: true),
                    TempBottomId = table.Column<int>(nullable: true),
                    PresMaxChokeId = table.Column<int>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrillReportControlIncidentInfo", x => x.ControlIncidentInfoId);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportDiaBit_DiaBitId",
                        column: x => x.DiaBitId,
                        principalTable: "DrillReportDiaBit",
                        principalColumn: "DiaBitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportDiaCsgLast_DiaCsgLastId",
                        column: x => x.DiaCsgLastId,
                        principalTable: "DrillReportDiaCsgLast",
                        principalColumn: "DiaCsgLastId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportETimLost_ETimLostId",
                        column: x => x.ETimLostId,
                        principalTable: "DrillReportETimLost",
                        principalColumn: "ETimLostId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportMdBit_MdBitId",
                        column: x => x.MdBitId,
                        principalTable: "DrillReportMdBit",
                        principalColumn: "MdBitId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportMdCsgLast_MdCsgLastId",
                        column: x => x.MdCsgLastId,
                        principalTable: "DrillReportMdCsgLast",
                        principalColumn: "MdCsgLastId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportMdInflow_MdInflowId",
                        column: x => x.MdInflowId,
                        principalTable: "DrillReportMdInflow",
                        principalColumn: "MdInflowId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportPorePressure_PorePressureId",
                        column: x => x.PorePressureId,
                        principalTable: "DrillReportPorePressure",
                        principalColumn: "PorePressureId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportPresMaxChoke_PresMaxChokeId",
                        column: x => x.PresMaxChokeId,
                        principalTable: "DrillReportPresMaxChoke",
                        principalColumn: "PresMaxChokeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportPresShutInCasing_PresShutInCasingId",
                        column: x => x.PresShutInCasingId,
                        principalTable: "DrillReportPresShutInCasing",
                        principalColumn: "PresShutInCasingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportPresShutInDrill_PresShutInDrillId",
                        column: x => x.PresShutInDrillId,
                        principalTable: "DrillReportPresShutInDrill",
                        principalColumn: "PresShutInDrillId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportTempBottom_TempBottomId",
                        column: x => x.TempBottomId,
                        principalTable: "DrillReportTempBottom",
                        principalColumn: "TempBottomId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportTvdInflow_TvdInflowId",
                        column: x => x.TvdInflowId,
                        principalTable: "DrillReportTvdInflow",
                        principalColumn: "TvdInflowId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportVolMudGained_VolMudGainedId",
                        column: x => x.VolMudGainedId,
                        principalTable: "DrillReportVolMudGained",
                        principalColumn: "VolMudGainedId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DrillReportControlIncidentInfo_DrillReportWtMuds_WtMudUom",
                        column: x => x.WtMudUom,
                        principalTable: "DrillReportWtMuds",
                        principalColumn: "Uom",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Wells",
                columns: table => new
                {
                    WellId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    NameLegal = table.Column<string>(nullable: true),
                    NumLicense = table.Column<string>(nullable: true),
                    NumGovt = table.Column<string>(nullable: true),
                    DTimLicense = table.Column<string>(nullable: true),
                    Field = table.Column<string>(nullable: true),
                    Country = table.Column<string>(nullable: true),
                    State = table.Column<string>(nullable: true),
                    County = table.Column<string>(nullable: true),
                    Region = table.Column<string>(nullable: true),
                    District = table.Column<string>(nullable: true),
                    Block = table.Column<string>(nullable: true),
                    TimeZone = table.Column<string>(nullable: true),
                    Operator = table.Column<string>(nullable: true),
                    OperatorDiv = table.Column<string>(nullable: true),
                    PcInterestId = table.Column<int>(nullable: true),
                    NumAPI = table.Column<string>(nullable: true),
                    StatusWell = table.Column<string>(nullable: true),
                    PurposeWell = table.Column<string>(nullable: true),
                    DTimSpud = table.Column<string>(nullable: true),
                    DTimPa = table.Column<string>(nullable: true),
                    WellheadElevationElevationId = table.Column<int>(nullable: true),
                    GroundElevationId = table.Column<int>(nullable: true),
                    WaterDepthId = table.Column<int>(nullable: true),
                    WellLocationLocationId = table.Column<int>(nullable: true),
                    CommonDataId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Wells", x => x.WellId);
                    table.ForeignKey(
                        name: "FK_Wells_WellCommonDatas_CommonDataId",
                        column: x => x.CommonDataId,
                        principalTable: "WellCommonDatas",
                        principalColumn: "CommonDataId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Wells_WellGroundElevations_GroundElevationId",
                        column: x => x.GroundElevationId,
                        principalTable: "WellGroundElevations",
                        principalColumn: "GroundElevationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Wells_WellPcInterests_PcInterestId",
                        column: x => x.PcInterestId,
                        principalTable: "WellPcInterests",
                        principalColumn: "PcInterestId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Wells_WellWaterDepths_WaterDepthId",
                        column: x => x.WaterDepthId,
                        principalTable: "WellWaterDepths",
                        principalColumn: "WaterDepthId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Wells_WellheadElevations_WellheadElevationElevationId",
                        column: x => x.WellheadElevationElevationId,
                        principalTable: "WellheadElevations",
                        principalColumn: "ElevationId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WellCRSs",
                columns: table => new
                {
                    WellCRSUid = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Uid = table.Column<string>(nullable: true),
                    UidRef = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    GeodeticCRSId = table.Column<int>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    MapProjectionCRSId = table.Column<int>(nullable: true),
                    LocalCRSId = table.Column<int>(nullable: true),
                    Text = table.Column<string>(nullable: true),
                    WellId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellCRSs", x => x.WellCRSUid);
                    table.ForeignKey(
                        name: "FK_WellCRSs_WellGeodeticCRSs_GeodeticCRSId",
                        column: x => x.GeodeticCRSId,
                        principalTable: "WellGeodeticCRSs",
                        principalColumn: "GeodeticCRSId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellCRSs_WellLocalCRSs_LocalCRSId",
                        column: x => x.LocalCRSId,
                        principalTable: "WellLocalCRSs",
                        principalColumn: "LocalCRSId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellCRSs_WellMapProjectionCRSs_MapProjectionCRSId",
                        column: x => x.MapProjectionCRSId,
                        principalTable: "WellMapProjectionCRSs",
                        principalColumn: "MapProjectionCRSId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellCRSs_Wells_WellId",
                        column: x => x.WellId,
                        principalTable: "Wells",
                        principalColumn: "WellId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WellDatums",
                columns: table => new
                {
                    DatumId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    Code = table.Column<string>(nullable: true),
                    ElevationId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    DatumNameId = table.Column<int>(nullable: true),
                    WellId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellDatums", x => x.DatumId);
                    table.ForeignKey(
                        name: "FK_WellDatums_WellDatumNames_DatumNameId",
                        column: x => x.DatumNameId,
                        principalTable: "WellDatumNames",
                        principalColumn: "DatumNameId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellDatums_WellElevations_ElevationId",
                        column: x => x.ElevationId,
                        principalTable: "WellElevations",
                        principalColumn: "ElevationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellDatums_Wells_WellId",
                        column: x => x.WellId,
                        principalTable: "Wells",
                        principalColumn: "WellId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WellReferencePoints",
                columns: table => new
                {
                    ReferencePointId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(nullable: true),
                    Type = table.Column<string>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    ElevationId = table.Column<int>(nullable: true),
                    MeasuredDepthId = table.Column<int>(nullable: true),
                    WellId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellReferencePoints", x => x.ReferencePointId);
                    table.ForeignKey(
                        name: "FK_WellReferencePoints_WellElevations_ElevationId",
                        column: x => x.ElevationId,
                        principalTable: "WellElevations",
                        principalColumn: "ElevationId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellReferencePoints_WellMeasuredDepths_MeasuredDepthId",
                        column: x => x.MeasuredDepthId,
                        principalTable: "WellMeasuredDepths",
                        principalColumn: "MeasuredDepthId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellReferencePoints_Wells_WellId",
                        column: x => x.WellId,
                        principalTable: "Wells",
                        principalColumn: "WellId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WellLocations",
                columns: table => new
                {
                    LocationId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WellCRSUid = table.Column<int>(nullable: true),
                    EastingId = table.Column<int>(nullable: true),
                    NorthingId = table.Column<int>(nullable: true),
                    Uid = table.Column<string>(nullable: true),
                    LocalXId = table.Column<int>(nullable: true),
                    LocalYId = table.Column<int>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    LatitudeId = table.Column<int>(nullable: true),
                    LongitudeId = table.Column<int>(nullable: true),
                    WellReferencePointReferencePointId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WellLocations", x => x.LocationId);
                    table.ForeignKey(
                        name: "FK_WellLocations_WellEastings_EastingId",
                        column: x => x.EastingId,
                        principalTable: "WellEastings",
                        principalColumn: "EastingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellLocations_WellLatitudes_LatitudeId",
                        column: x => x.LatitudeId,
                        principalTable: "WellLatitudes",
                        principalColumn: "LatitudeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellLocations_WellLocalXs_LocalXId",
                        column: x => x.LocalXId,
                        principalTable: "WellLocalXs",
                        principalColumn: "LocalXId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellLocations_WellLocalYs_LocalYId",
                        column: x => x.LocalYId,
                        principalTable: "WellLocalYs",
                        principalColumn: "LocalYId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellLocations_WellLongitudes_LongitudeId",
                        column: x => x.LongitudeId,
                        principalTable: "WellLongitudes",
                        principalColumn: "LongitudeId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellLocations_WellNorthings_NorthingId",
                        column: x => x.NorthingId,
                        principalTable: "WellNorthings",
                        principalColumn: "NorthingId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellLocations_WellCRSs_WellCRSUid",
                        column: x => x.WellCRSUid,
                        principalTable: "WellCRSs",
                        principalColumn: "WellCRSUid",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WellLocations_WellReferencePoints_WellReferencePointReferencePointId",
                        column: x => x.WellReferencePointReferencePointId,
                        principalTable: "WellReferencePoints",
                        principalColumn: "ReferencePointId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Attachments_CommonDataId",
                table: "Attachments",
                column: "CommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Attachments_objectReferenceuidRef",
                table: "Attachments",
                column: "objectReferenceuidRef");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_AziBottomUom",
                table: "BharunDrillingParamss",
                column: "AziBottomUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_AziTopUom",
                table: "BharunDrillingParamss",
                column: "AziTopUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_CTimCircUom",
                table: "BharunDrillingParamss",
                column: "CTimCircUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_CTimDrillRotUom",
                table: "BharunDrillingParamss",
                column: "CTimDrillRotUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_CTimDrillSlidUom",
                table: "BharunDrillingParamss",
                column: "CTimDrillSlidUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_CTimHoldUom",
                table: "BharunDrillingParamss",
                column: "CTimHoldUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_CTimReamUom",
                table: "BharunDrillingParamss",
                column: "CTimReamUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_CTimSteeringUom",
                table: "BharunDrillingParamss",
                column: "CTimSteeringUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_DistDrillRotUom",
                table: "BharunDrillingParamss",
                column: "DistDrillRotUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_DistDrillSlidUom",
                table: "BharunDrillingParamss",
                column: "DistDrillSlidUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_DistHoldUom",
                table: "BharunDrillingParamss",
                column: "DistHoldUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_DistReamUom",
                table: "BharunDrillingParamss",
                column: "DistReamUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_DistSteeringUom",
                table: "BharunDrillingParamss",
                column: "DistSteeringUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_ETimOpBitUom",
                table: "BharunDrillingParamss",
                column: "ETimOpBitUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_FlowrateBitUom",
                table: "BharunDrillingParamss",
                column: "FlowrateBitUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_FlowratePumpUom",
                table: "BharunDrillingParamss",
                column: "FlowratePumpUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_HkldDnUom",
                table: "BharunDrillingParamss",
                column: "HkldDnUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_HkldRotUom",
                table: "BharunDrillingParamss",
                column: "HkldRotUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_HkldUpUom",
                table: "BharunDrillingParamss",
                column: "HkldUpUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_InclMnUom",
                table: "BharunDrillingParamss",
                column: "InclMnUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_InclMxUom",
                table: "BharunDrillingParamss",
                column: "InclMxUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_InclStartUom",
                table: "BharunDrillingParamss",
                column: "InclStartUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_InclStopUom",
                table: "BharunDrillingParamss",
                column: "InclStopUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_MdHoleStartUom",
                table: "BharunDrillingParamss",
                column: "MdHoleStartUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_MdHoleStopUom",
                table: "BharunDrillingParamss",
                column: "MdHoleStopUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_OverPullUom",
                table: "BharunDrillingParamss",
                column: "OverPullUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_PowBitUom",
                table: "BharunDrillingParamss",
                column: "PowBitUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_PresDropBitUom",
                table: "BharunDrillingParamss",
                column: "PresDropBitUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_PresPumpAvUom",
                table: "BharunDrillingParamss",
                column: "PresPumpAvUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_RopAvBharunRopAvId",
                table: "BharunDrillingParamss",
                column: "RopAvBharunRopAvId");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_RopMnBharunRopMnId",
                table: "BharunDrillingParamss",
                column: "RopMnBharunRopMnId");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_RopMxBharunRopMxId",
                table: "BharunDrillingParamss",
                column: "RopMxBharunRopMxId");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_RpmAvBharunRpmAvId",
                table: "BharunDrillingParamss",
                column: "RpmAvBharunRpmAvId");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_RpmAvDhUom",
                table: "BharunDrillingParamss",
                column: "RpmAvDhUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_RpmMnUom",
                table: "BharunDrillingParamss",
                column: "RpmMnUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_RpmMxUom",
                table: "BharunDrillingParamss",
                column: "RpmMxUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_SlackOffUom",
                table: "BharunDrillingParamss",
                column: "SlackOffUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_TempMudDhMxUom",
                table: "BharunDrillingParamss",
                column: "TempMudDhMxUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_TqDhAvUom",
                table: "BharunDrillingParamss",
                column: "TqDhAvUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_TqOffBotAvUom",
                table: "BharunDrillingParamss",
                column: "TqOffBotAvUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_TqOnBotAvUom",
                table: "BharunDrillingParamss",
                column: "TqOnBotAvUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_TqOnBotMnUom",
                table: "BharunDrillingParamss",
                column: "TqOnBotMnUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_TqOnBotMxUom",
                table: "BharunDrillingParamss",
                column: "TqOnBotMxUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_TubularUidRef",
                table: "BharunDrillingParamss",
                column: "TubularUidRef");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_VelNozzleAvUom",
                table: "BharunDrillingParamss",
                column: "VelNozzleAvUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_WobAvBharunWobAvId",
                table: "BharunDrillingParamss",
                column: "WobAvBharunWobAvId");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_WobAvDhUom",
                table: "BharunDrillingParamss",
                column: "WobAvDhUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_WobMnUom",
                table: "BharunDrillingParamss",
                column: "WobMnUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_WobMxUom",
                table: "BharunDrillingParamss",
                column: "WobMxUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_WtAboveJarUom",
                table: "BharunDrillingParamss",
                column: "WtAboveJarUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_WtBelowJarUom",
                table: "BharunDrillingParamss",
                column: "WtBelowJarUom");

            migrationBuilder.CreateIndex(
                name: "IX_BharunDrillingParamss_WtMudUom",
                table: "BharunDrillingParamss",
                column: "WtMudUom");

            migrationBuilder.CreateIndex(
                name: "IX_Bharuns_ActDoglegMxUom",
                table: "Bharuns",
                column: "ActDoglegMxUom");

            migrationBuilder.CreateIndex(
                name: "IX_Bharuns_ActDoglegUom",
                table: "Bharuns",
                column: "ActDoglegUom");

            migrationBuilder.CreateIndex(
                name: "IX_Bharuns_CommonDataId",
                table: "Bharuns",
                column: "CommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Bharuns_DrillingParamsUid",
                table: "Bharuns",
                column: "DrillingParamsUid");

            migrationBuilder.CreateIndex(
                name: "IX_Bharuns_PlanDoglegUom",
                table: "Bharuns",
                column: "PlanDoglegUom");

            migrationBuilder.CreateIndex(
                name: "IX_Bharuns_TubularUidRef",
                table: "Bharuns",
                column: "TubularUidRef");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementAdditives_AdditiveId",
                table: "CementJobCementAdditives",
                column: "AdditiveId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementAdditives_ConcentrationId",
                table: "CementJobCementAdditives",
                column: "ConcentrationId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementAdditives_DensAddId",
                table: "CementJobCementAdditives",
                column: "DensAddId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_CementAdditiveId",
                table: "CementJobCementingFluids",
                column: "CementAdditiveId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_CementPumpScheduleId",
                table: "CementJobCementingFluids",
                column: "CementPumpScheduleId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_ConsTestThickeningId",
                table: "CementJobCementingFluids",
                column: "ConsTestThickeningId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_DensAtPresId",
                table: "CementJobCementingFluids",
                column: "DensAtPresId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_DensBaseFluidId",
                table: "CementJobCementingFluids",
                column: "DensBaseFluidId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_DensConstGasFoamId",
                table: "CementJobCementingFluids",
                column: "DensConstGasFoamId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_DensConstGasMethodId",
                table: "CementJobCementingFluids",
                column: "DensConstGasMethodId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_DensDryBlendId",
                table: "CementJobCementingFluids",
                column: "DensDryBlendId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_DensityId",
                table: "CementJobCementingFluids",
                column: "DensityId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_ETimComprStren1Id",
                table: "CementJobCementingFluids",
                column: "ETimComprStren1Id");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_ETimComprStren2Id",
                table: "CementJobCementingFluids",
                column: "ETimComprStren2Id");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_ETimThickeningId",
                table: "CementJobCementingFluids",
                column: "ETimThickeningId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_ExcessPcId",
                table: "CementJobCementingFluids",
                column: "ExcessPcId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_Gel10MinReadingId",
                table: "CementJobCementingFluids",
                column: "Gel10MinReadingId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_Gel10MinStrengthId",
                table: "CementJobCementingFluids",
                column: "Gel10MinStrengthId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_Gel10SecReadingId",
                table: "CementJobCementingFluids",
                column: "Gel10SecReadingId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_Gel10SecStrengthId",
                table: "CementJobCementingFluids",
                column: "Gel10SecStrengthId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_Gel1MinReadingId",
                table: "CementJobCementingFluids",
                column: "Gel1MinReadingId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_Gel1MinStrengthId",
                table: "CementJobCementingFluids",
                column: "Gel1MinStrengthId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_KId",
                table: "CementJobCementingFluids",
                column: "KId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_MassDryBlendId",
                table: "CementJobCementingFluids",
                column: "MassDryBlendId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_MassSackDryBlendId",
                table: "CementJobCementingFluids",
                column: "MassSackDryBlendId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_MdFluidBottomId",
                table: "CementJobCementingFluids",
                column: "MdFluidBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_MdFluidTopId",
                table: "CementJobCementingFluids",
                column: "MdFluidTopId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_NId",
                table: "CementJobCementingFluids",
                column: "NId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_PcFreeWaterId",
                table: "CementJobCementingFluids",
                column: "PcFreeWaterId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_PresComprStren1Id",
                table: "CementJobCementingFluids",
                column: "PresComprStren1Id");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_PresComprStren2Id",
                table: "CementJobCementingFluids",
                column: "PresComprStren2Id");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_PresTestFluidLossId",
                table: "CementJobCementingFluids",
                column: "PresTestFluidLossId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_PresTestThickeningId",
                table: "CementJobCementingFluids",
                column: "PresTestThickeningId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_RatioConstGasMethodAvId",
                table: "CementJobCementingFluids",
                column: "RatioConstGasMethodAvId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_RatioConstGasMethodEndId",
                table: "CementJobCementingFluids",
                column: "RatioConstGasMethodEndId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_RatioConstGasMethodStartId",
                table: "CementJobCementingFluids",
                column: "RatioConstGasMethodStartId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_RatioMixWaterId",
                table: "CementJobCementingFluids",
                column: "RatioMixWaterId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_SolidVolumeFractionId",
                table: "CementJobCementingFluids",
                column: "SolidVolumeFractionId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_TempComprStren1Id",
                table: "CementJobCementingFluids",
                column: "TempComprStren1Id");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_TempComprStren2Id",
                table: "CementJobCementingFluids",
                column: "TempComprStren2Id");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_TempFluidLossId",
                table: "CementJobCementingFluids",
                column: "TempFluidLossId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_TempFreeWaterId",
                table: "CementJobCementingFluids",
                column: "TempFreeWaterId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_TempThickeningId",
                table: "CementJobCementingFluids",
                column: "TempThickeningId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_TimeFluidLossId",
                table: "CementJobCementingFluids",
                column: "TimeFluidLossId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_VisId",
                table: "CementJobCementingFluids",
                column: "VisId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_VolAPIFluidLossId",
                table: "CementJobCementingFluids",
                column: "VolAPIFluidLossId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_VolCementId",
                table: "CementJobCementingFluids",
                column: "VolCementId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_VolFluidId",
                table: "CementJobCementingFluids",
                column: "VolFluidId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_VolGasFoamId",
                table: "CementJobCementingFluids",
                column: "VolGasFoamId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_VolOtherId",
                table: "CementJobCementingFluids",
                column: "VolOtherId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_VolPumpedId",
                table: "CementJobCementingFluids",
                column: "VolPumpedId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_VolReservedId",
                table: "CementJobCementingFluids",
                column: "VolReservedId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_VolTestFluidLossId",
                table: "CementJobCementingFluids",
                column: "VolTestFluidLossId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_VolTotSlurryId",
                table: "CementJobCementingFluids",
                column: "VolTotSlurryId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_VolWaterId",
                table: "CementJobCementingFluids",
                column: "VolWaterId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_VolYieldId",
                table: "CementJobCementingFluids",
                column: "VolYieldId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementingFluids_YpJobYpId",
                table: "CementJobCementingFluids",
                column: "YpJobYpId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementPumpSchedules_ETimPumpId",
                table: "CementJobCementPumpSchedules",
                column: "ETimPumpId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementPumpSchedules_ETimShutdownId",
                table: "CementJobCementPumpSchedules",
                column: "ETimShutdownId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementPumpSchedules_PresBackId",
                table: "CementJobCementPumpSchedules",
                column: "PresBackId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementPumpSchedules_RatePumpId",
                table: "CementJobCementPumpSchedules",
                column: "RatePumpId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementPumpSchedules_VolPumpId",
                table: "CementJobCementPumpSchedules",
                column: "VolPumpId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_CementingFluidId",
                table: "CementJobCementStages",
                column: "CementingFluidId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_DensDisplaceFluidId",
                table: "CementJobCementStages",
                column: "DensDisplaceFluidId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_DiaTailPipeId",
                table: "CementJobCementStages",
                column: "DiaTailPipeId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_ETimMudCirculationId",
                table: "CementJobCementStages",
                column: "ETimMudCirculationId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_ETimPresHeldId",
                table: "CementJobCementStages",
                column: "ETimPresHeldId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_FlowrateBreakDownId",
                table: "CementJobCementStages",
                column: "FlowrateBreakDownId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_FlowrateDisplaceAvId",
                table: "CementJobCementStages",
                column: "FlowrateDisplaceAvId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_FlowrateDisplaceMxId",
                table: "CementJobCementStages",
                column: "FlowrateDisplaceMxId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_FlowrateEndId",
                table: "CementJobCementStages",
                column: "FlowrateEndId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_FlowrateMudCircCementJobFlowrateMudCircId",
                table: "CementJobCementStages",
                column: "FlowrateMudCircCementJobFlowrateMudCircId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_FlowratePumpEndId",
                table: "CementJobCementStages",
                column: "FlowratePumpEndId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_FlowratePumpStartId",
                table: "CementJobCementStages",
                column: "FlowratePumpStartId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_FlowrateSqueezeAvId",
                table: "CementJobCementStages",
                column: "FlowrateSqueezeAvId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_FlowrateSqueezeMxId",
                table: "CementJobCementStages",
                column: "FlowrateSqueezeMxId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_Gel10MinId",
                table: "CementJobCementStages",
                column: "Gel10MinId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_Gel10SecId",
                table: "CementJobCementStages",
                column: "Gel10SecId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_MdBottomId",
                table: "CementJobCementStages",
                column: "MdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_MdCircOutId",
                table: "CementJobCementStages",
                column: "MdCircOutId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_MdCoilTbgId",
                table: "CementJobCementStages",
                column: "MdCoilTbgId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_MdStringId",
                table: "CementJobCementStages",
                column: "MdStringId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_MdToolId",
                table: "CementJobCementStages",
                column: "MdToolId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_MdTopId",
                table: "CementJobCementStages",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresBackPressureId",
                table: "CementJobCementStages",
                column: "PresBackPressureId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresBreakDownId",
                table: "CementJobCementStages",
                column: "PresBreakDownId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresBumpId",
                table: "CementJobCementStages",
                column: "PresBumpId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresCoilTbgEndId",
                table: "CementJobCementStages",
                column: "PresCoilTbgEndId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresCoilTbgStartId",
                table: "CementJobCementStages",
                column: "PresCoilTbgStartId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresCsgEndId",
                table: "CementJobCementStages",
                column: "PresCsgEndId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresCsgStartId",
                table: "CementJobCementStages",
                column: "PresCsgStartId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresDisplaceId",
                table: "CementJobCementStages",
                column: "PresDisplaceId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresHeldId",
                table: "CementJobCementStages",
                column: "PresHeldId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresMudCircId",
                table: "CementJobCementStages",
                column: "PresMudCircId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresPriorBumpId",
                table: "CementJobCementStages",
                column: "PresPriorBumpId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresSqueezeAvId",
                table: "CementJobCementStages",
                column: "PresSqueezeAvId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresSqueezeEndId",
                table: "CementJobCementStages",
                column: "PresSqueezeEndId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresSqueezeId",
                table: "CementJobCementStages",
                column: "PresSqueezeId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresTbgEndId",
                table: "CementJobCementStages",
                column: "PresTbgEndId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PresTbgStartPresTbgStId",
                table: "CementJobCementStages",
                column: "PresTbgStartPresTbgStId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_PvMudId",
                table: "CementJobCementStages",
                column: "PvMudId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_TempBHCTId",
                table: "CementJobCementStages",
                column: "TempBHCTId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_TempBHSTId",
                table: "CementJobCementStages",
                column: "TempBHSTId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_VisFunnelMudId",
                table: "CementJobCementStages",
                column: "VisFunnelMudId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_VolCircPriorId",
                table: "CementJobCementStages",
                column: "VolCircPriorId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_VolCsgInId",
                table: "CementJobCementStages",
                column: "VolCsgInId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_VolCsgOutId",
                table: "CementJobCementStages",
                column: "VolCsgOutId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_VolDisplaceFluidId",
                table: "CementJobCementStages",
                column: "VolDisplaceFluidId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_VolExcessId",
                table: "CementJobCementStages",
                column: "VolExcessId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_VolMudLostId",
                table: "CementJobCementStages",
                column: "VolMudLostId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_VolReturnsId",
                table: "CementJobCementStages",
                column: "VolReturnsId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_WtMudId",
                table: "CementJobCementStages",
                column: "WtMudId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementStages_YpMudId",
                table: "CementJobCementStages",
                column: "YpMudId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_CblPresId",
                table: "CementJobCementTests",
                column: "CblPresId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_ETimBeforeTestId",
                table: "CementJobCementTests",
                column: "ETimBeforeTestId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_ETimCementLogId",
                table: "CementJobCementTests",
                column: "ETimCementLogId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_ETimPitStartId",
                table: "CementJobCementTests",
                column: "ETimPitStartId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_ETimTestId",
                table: "CementJobCementTests",
                column: "ETimTestId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_FormPitId",
                table: "CementJobCementTests",
                column: "FormPitId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_LinerLapId",
                table: "CementJobCementTests",
                column: "LinerLapId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_LinerTopId",
                table: "CementJobCementTests",
                column: "LinerTopId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_MdCementTopId",
                table: "CementJobCementTests",
                column: "MdCementTopId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_MdDVToolJobMdDVToolId",
                table: "CementJobCementTests",
                column: "MdDVToolJobMdDVToolId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_PresTestId",
                table: "CementJobCementTests",
                column: "PresTestId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_TestNegativeEmwId",
                table: "CementJobCementTests",
                column: "TestNegativeEmwId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobCementTests_TestPositiveEmwId",
                table: "CementJobCementTests",
                column: "TestPositiveEmwId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_CementStageId",
                table: "CementJobs",
                column: "CementStageId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_CementTestId",
                table: "CementJobs",
                column: "CementTestId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_CommonDataId",
                table: "CementJobs",
                column: "CommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_LenPipeRecipStrokeId",
                table: "CementJobs",
                column: "LenPipeRecipStrokeId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_MdHoleId",
                table: "CementJobs",
                column: "MdHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_MdPlugBotId",
                table: "CementJobs",
                column: "MdPlugBotId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_MdPlugTopId",
                table: "CementJobs",
                column: "MdPlugTopId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_MdShoeId",
                table: "CementJobs",
                column: "MdShoeId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_MdSqueezeId",
                table: "CementJobs",
                column: "MdSqueezeId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_MdStringSetId",
                table: "CementJobs",
                column: "MdStringSetId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_MdWaterId",
                table: "CementJobs",
                column: "MdWaterId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_OverPullId",
                table: "CementJobs",
                column: "OverPullId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_RpmPipeId",
                table: "CementJobs",
                column: "RpmPipeId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_RpmPipeRecipId",
                table: "CementJobs",
                column: "RpmPipeRecipId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_SlackOffId",
                table: "CementJobs",
                column: "SlackOffId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_TqInitPipeRotId",
                table: "CementJobs",
                column: "TqInitPipeRotId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_TqPipeAvId",
                table: "CementJobs",
                column: "TqPipeAvId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_TqPipeMxId",
                table: "CementJobs",
                column: "TqPipeMxId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_TvdShoeId",
                table: "CementJobs",
                column: "TvdShoeId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_TvdStringSetId",
                table: "CementJobs",
                column: "TvdStringSetId");

            migrationBuilder.CreateIndex(
                name: "IX_CementJobs_WocId",
                table: "CementJobs",
                column: "WocId");

            migrationBuilder.CreateIndex(
                name: "IX_ChangeLogChangeHistory_ChangeLogUid",
                table: "ChangeLogChangeHistory",
                column: "ChangeLogUid");

            migrationBuilder.CreateIndex(
                name: "IX_ChangeLogChangeHistory_EndIndexUom",
                table: "ChangeLogChangeHistory",
                column: "EndIndexUom");

            migrationBuilder.CreateIndex(
                name: "IX_ChangeLogChangeHistory_StartIndexUom",
                table: "ChangeLogChangeHistory",
                column: "StartIndexUom");

            migrationBuilder.CreateIndex(
                name: "IX_ChangeLogs_CommonDataId",
                table: "ChangeLogs",
                column: "CommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_AcetyleneId",
                table: "ConvCoreChromatographs",
                column: "AcetyleneId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_Co2AvId",
                table: "ConvCoreChromatographs",
                column: "Co2AvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_Co2MnId",
                table: "ConvCoreChromatographs",
                column: "Co2MnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_Co2MxId",
                table: "ConvCoreChromatographs",
                column: "Co2MxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_ETimChromCycleId",
                table: "ConvCoreChromatographs",
                column: "ETimChromCycleId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_EpentAvId",
                table: "ConvCoreChromatographs",
                column: "EpentAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_EpentMnId",
                table: "ConvCoreChromatographs",
                column: "EpentMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_EpentMxId",
                table: "ConvCoreChromatographs",
                column: "EpentMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_EthAvId",
                table: "ConvCoreChromatographs",
                column: "EthAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_EthMnId",
                table: "ConvCoreChromatographs",
                column: "EthMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_EthMxId",
                table: "ConvCoreChromatographs",
                column: "EthMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_H2sAvId",
                table: "ConvCoreChromatographs",
                column: "H2sAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_H2sMnId",
                table: "ConvCoreChromatographs",
                column: "H2sMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_H2sMxId",
                table: "ConvCoreChromatographs",
                column: "H2sMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_IbutAvId",
                table: "ConvCoreChromatographs",
                column: "IbutAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_IbutMnId",
                table: "ConvCoreChromatographs",
                column: "IbutMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_IbutMxId",
                table: "ConvCoreChromatographs",
                column: "IbutMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_IhexAvId",
                table: "ConvCoreChromatographs",
                column: "IhexAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_IhexMnId",
                table: "ConvCoreChromatographs",
                column: "IhexMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_IhexMxId",
                table: "ConvCoreChromatographs",
                column: "IhexMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_IpentAvId",
                table: "ConvCoreChromatographs",
                column: "IpentAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_IpentMnId",
                table: "ConvCoreChromatographs",
                column: "IpentMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_IpentMxId",
                table: "ConvCoreChromatographs",
                column: "IpentMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_MdBottomId",
                table: "ConvCoreChromatographs",
                column: "MdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_MdTopId",
                table: "ConvCoreChromatographs",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_MethAvId",
                table: "ConvCoreChromatographs",
                column: "MethAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_MethMnId",
                table: "ConvCoreChromatographs",
                column: "MethMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_MethMxId",
                table: "ConvCoreChromatographs",
                column: "MethMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_NbutAvId",
                table: "ConvCoreChromatographs",
                column: "NbutAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_NbutMnId",
                table: "ConvCoreChromatographs",
                column: "NbutMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_NbutMxId",
                table: "ConvCoreChromatographs",
                column: "NbutMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_NhexAvId",
                table: "ConvCoreChromatographs",
                column: "NhexAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_NhexMnId",
                table: "ConvCoreChromatographs",
                column: "NhexMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_NhexMxId",
                table: "ConvCoreChromatographs",
                column: "NhexMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_NpentAvId",
                table: "ConvCoreChromatographs",
                column: "NpentAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_NpentMnId",
                table: "ConvCoreChromatographs",
                column: "NpentMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_NpentMxId",
                table: "ConvCoreChromatographs",
                column: "NpentMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_PropAvId",
                table: "ConvCoreChromatographs",
                column: "PropAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_PropMnId",
                table: "ConvCoreChromatographs",
                column: "PropMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_PropMxId",
                table: "ConvCoreChromatographs",
                column: "PropMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_WtMudInId",
                table: "ConvCoreChromatographs",
                column: "WtMudInId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreChromatographs_WtMudOutId",
                table: "ConvCoreChromatographs",
                column: "WtMudOutId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_CalcStabId",
                table: "ConvCoreGeologyIntervals",
                column: "CalcStabId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_CalciteId",
                table: "ConvCoreGeologyIntervals",
                column: "CalciteId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_CecId",
                table: "ConvCoreGeologyIntervals",
                column: "CecId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_ChromatographId",
                table: "ConvCoreGeologyIntervals",
                column: "ChromatographId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_DensBulkId",
                table: "ConvCoreGeologyIntervals",
                column: "DensBulkId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_DensShaleId",
                table: "ConvCoreGeologyIntervals",
                column: "DensShaleId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_DolomiteId",
                table: "ConvCoreGeologyIntervals",
                column: "DolomiteId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_EcdTdAvId",
                table: "ConvCoreGeologyIntervals",
                column: "EcdTdAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_LenPlugId",
                table: "ConvCoreGeologyIntervals",
                column: "LenPlugId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_LithologyId",
                table: "ConvCoreGeologyIntervals",
                column: "LithologyId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_MdBottomId",
                table: "ConvCoreGeologyIntervals",
                column: "MdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_MdTopId",
                table: "ConvCoreGeologyIntervals",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_MudGasId",
                table: "ConvCoreGeologyIntervals",
                column: "MudGasId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_RopAvId",
                table: "ConvCoreGeologyIntervals",
                column: "RopAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_RopMnId",
                table: "ConvCoreGeologyIntervals",
                column: "RopMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_RopMxId",
                table: "ConvCoreGeologyIntervals",
                column: "RopMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_RpmAvId",
                table: "ConvCoreGeologyIntervals",
                column: "RpmAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_ShowId",
                table: "ConvCoreGeologyIntervals",
                column: "ShowId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_SizeMnId",
                table: "ConvCoreGeologyIntervals",
                column: "SizeMnId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_SizeMxId",
                table: "ConvCoreGeologyIntervals",
                column: "SizeMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_TqAvId",
                table: "ConvCoreGeologyIntervals",
                column: "TqAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_TvdBaseId",
                table: "ConvCoreGeologyIntervals",
                column: "TvdBaseId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_TvdTopId",
                table: "ConvCoreGeologyIntervals",
                column: "TvdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_WobAvId",
                table: "ConvCoreGeologyIntervals",
                column: "WobAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreGeologyIntervals_WtMudAvId",
                table: "ConvCoreGeologyIntervals",
                column: "WtMudAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreLithologys_DensShaleId",
                table: "ConvCoreLithologys",
                column: "DensShaleId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreLithologys_LithPcId",
                table: "ConvCoreLithologys",
                column: "LithPcId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreMudGass_GasAvId",
                table: "ConvCoreMudGass",
                column: "GasAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreMudGass_GasBackgndId",
                table: "ConvCoreMudGass",
                column: "GasBackgndId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreMudGass_GasConAvId",
                table: "ConvCoreMudGass",
                column: "GasConAvId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreMudGass_GasConMxId",
                table: "ConvCoreMudGass",
                column: "GasConMxId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreMudGass_GasPeakId",
                table: "ConvCoreMudGass",
                column: "GasPeakId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreMudGass_GasTripGasConTripId",
                table: "ConvCoreMudGass",
                column: "GasTripGasConTripId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreQualifiers_ConvCoreLithologyLithologyId",
                table: "ConvCoreQualifiers",
                column: "ConvCoreLithologyLithologyId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCores_CommonDataId",
                table: "ConvCores",
                column: "CommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCores_DiaBitId",
                table: "ConvCores",
                column: "DiaBitId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCores_DiaCoreId",
                table: "ConvCores",
                column: "DiaCoreId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCores_GeologyIntervalId",
                table: "ConvCores",
                column: "GeologyIntervalId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCores_InclHoleId",
                table: "ConvCores",
                column: "InclHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCores_LenBarrelId",
                table: "ConvCores",
                column: "LenBarrelId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCores_LenCoredId",
                table: "ConvCores",
                column: "LenCoredId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCores_LenRecoveredId",
                table: "ConvCores",
                column: "LenRecoveredId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCores_MdCoreBottomId",
                table: "ConvCores",
                column: "MdCoreBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCores_MdCoreTopId",
                table: "ConvCores",
                column: "MdCoreTopId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCores_RecoverPcLenRecoveredId",
                table: "ConvCores",
                column: "RecoverPcLenRecoveredId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreShows_NatFlorPcId",
                table: "ConvCoreShows",
                column: "NatFlorPcId");

            migrationBuilder.CreateIndex(
                name: "IX_ConvCoreShows_StainPcId",
                table: "ConvCoreShows",
                column: "StainPcId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystem_GeodeticCRSCoRefGeodeticCRSId",
                table: "CoordinateReferenceSystem",
                column: "GeodeticCRSCoRefGeodeticCRSId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystem_ProjectedCRSId",
                table: "CoordinateReferenceSystem",
                column: "ProjectedCRSId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystem_VerticalCRSId",
                table: "CoordinateReferenceSystem",
                column: "VerticalCRSId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemBaseGeographicCRS_GeographicCRSId",
                table: "CoordinateReferenceSystemBaseGeographicCRS",
                column: "GeographicCRSId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemCartesianCS_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemCartesianCS",
                column: "IdentifierCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemCartesianCS_NameCodeSpace",
                table: "CoordinateReferenceSystemCartesianCS",
                column: "NameCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemConversion_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemConversion",
                column: "IdentifierCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemConversion_NameCodeSpace",
                table: "CoordinateReferenceSystemConversion",
                column: "NameCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemConversion_UsesMethodId",
                table: "CoordinateReferenceSystemConversion",
                column: "UsesMethodId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemCoordinateSystemAxis_AxisDirectionCodeSpace",
                table: "CoordinateReferenceSystemCoordinateSystemAxis",
                column: "AxisDirectionCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemCoordinateSystemAxis_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemCoordinateSystemAxis",
                column: "IdentifierCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemDefinedByConversion_ConversionId",
                table: "CoordinateReferenceSystemDefinedByConversion",
                column: "ConversionId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemEllipsoid_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemEllipsoid",
                column: "IdentifierCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemEllipsoid_SecondDefiningParameterId",
                table: "CoordinateReferenceSystemEllipsoid",
                column: "SecondDefiningParameterId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemEllipsoid_SemiMajorAxisUom",
                table: "CoordinateReferenceSystemEllipsoid",
                column: "SemiMajorAxisUom");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemEllipsoidalCS_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemEllipsoidalCS",
                column: "IdentifierCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemEllipsoidalCS_NameCodeSpace",
                table: "CoordinateReferenceSystemEllipsoidalCS",
                column: "NameCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGeodeticCRS_GmlGeodeticCRSId",
                table: "CoordinateReferenceSystemGeodeticCRS",
                column: "GmlGeodeticCRSId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGeodeticCRS_NameCRSCode",
                table: "CoordinateReferenceSystemGeodeticCRS",
                column: "NameCRSCode");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGeodeticDatum_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemGeodeticDatum",
                column: "IdentifierCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGeodeticDatum_UsesEllipsoidId",
                table: "CoordinateReferenceSystemGeodeticDatum",
                column: "UsesEllipsoidId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGeodeticDatum_UsesPrimeMeridianId",
                table: "CoordinateReferenceSystemGeodeticDatum",
                column: "UsesPrimeMeridianId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGeographicCRS_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemGeographicCRS",
                column: "IdentifierCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGeographicCRS_NameCodeSpace",
                table: "CoordinateReferenceSystemGeographicCRS",
                column: "NameCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGeographicCRS_UsesEllipsoidalCSEllipsId",
                table: "CoordinateReferenceSystemGeographicCRS",
                column: "UsesEllipsoidalCSEllipsId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGeographicCRS_UsesGeodeticDatumId",
                table: "CoordinateReferenceSystemGeographicCRS",
                column: "UsesGeodeticDatumId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGmlGeodeticCRS_EllipsoidalCSId",
                table: "CoordinateReferenceSystemGmlGeodeticCRS",
                column: "EllipsoidalCSId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGmlGeodeticCRS_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemGmlGeodeticCRS",
                column: "IdentifierCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGmlGeodeticCRS_NameCodeSpace",
                table: "CoordinateReferenceSystemGmlGeodeticCRS",
                column: "NameCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemGmlGeodeticCRS_UsesGeodeticDatumId",
                table: "CoordinateReferenceSystemGmlGeodeticCRS",
                column: "UsesGeodeticDatumId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemName_EllipsoidId",
                table: "CoordinateReferenceSystemName",
                column: "EllipsoidId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemName_GeodeticDatumId",
                table: "CoordinateReferenceSystemName",
                column: "GeodeticDatumId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemOperationMethod_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemOperationMethod",
                column: "IdentifierCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemOperationMethod_NameCodeSpace",
                table: "CoordinateReferenceSystemOperationMethod",
                column: "NameCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemOperationParameter_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemOperationParameter",
                column: "IdentifierCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemOperationParameter_NameCodeSpace",
                table: "CoordinateReferenceSystemOperationParameter",
                column: "NameCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemParameterValue_ValueId",
                table: "CoordinateReferenceSystemParameterValue",
                column: "ValueId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemParameterValue_ValueOfParameterId1",
                table: "CoordinateReferenceSystemParameterValue",
                column: "ValueOfParameterId1");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemPrimeMeridian_GreenwichLongitudeUom",
                table: "CoordinateReferenceSystemPrimeMeridian",
                column: "GreenwichLongitudeUom");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemPrimeMeridian_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemPrimeMeridian",
                column: "IdentifierCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemPrimeMeridian_NameCodeSpace",
                table: "CoordinateReferenceSystemPrimeMeridian",
                column: "NameCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemProjectedCRS_BaseGeographicCRSId",
                table: "CoordinateReferenceSystemProjectedCRS",
                column: "BaseGeographicCRSId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemProjectedCRS_DefinedByConversionId",
                table: "CoordinateReferenceSystemProjectedCRS",
                column: "DefinedByConversionId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemProjectedCRS_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemProjectedCRS",
                column: "IdentifierCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemProjectedCRS_NameCodeSpace",
                table: "CoordinateReferenceSystemProjectedCRS",
                column: "NameCodeSpace");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemProjectedCRS_UsesCartesianCSId",
                table: "CoordinateReferenceSystemProjectedCRS",
                column: "UsesCartesianCSId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemSecondDefiningParameter_InverseFlatteningUom",
                table: "CoordinateReferenceSystemSecondDefiningParameter",
                column: "InverseFlatteningUom");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesAxis_CartesianCSId",
                table: "CoordinateReferenceSystemUsesAxis",
                column: "CartesianCSId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesAxis_CoordinateSystemAxisId",
                table: "CoordinateReferenceSystemUsesAxis",
                column: "CoordinateSystemAxisId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesAxis_EllipsoidalCSId",
                table: "CoordinateReferenceSystemUsesAxis",
                column: "EllipsoidalCSId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesCartesianCS_CartesianCSId",
                table: "CoordinateReferenceSystemUsesCartesianCS",
                column: "CartesianCSId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesEllipsoid_EllipsoidId",
                table: "CoordinateReferenceSystemUsesEllipsoid",
                column: "EllipsoidId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesEllipsoidalCS_EllipsoidalCSId",
                table: "CoordinateReferenceSystemUsesEllipsoidalCS",
                column: "EllipsoidalCSId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesGeodeticDatum_GeodeticDatumId",
                table: "CoordinateReferenceSystemUsesGeodeticDatum",
                column: "GeodeticDatumId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesMethod_OperationMethodId",
                table: "CoordinateReferenceSystemUsesMethod",
                column: "OperationMethodId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesParameter_OperationMethodId",
                table: "CoordinateReferenceSystemUsesParameter",
                column: "OperationMethodId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesParameter_OperationParameterId",
                table: "CoordinateReferenceSystemUsesParameter",
                column: "OperationParameterId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesPrimeMeridian_PrimeMeridianId",
                table: "CoordinateReferenceSystemUsesPrimeMeridian",
                column: "PrimeMeridianId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesValue_ConversionId",
                table: "CoordinateReferenceSystemUsesValue",
                column: "ConversionId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemUsesValue_ParameterValueValueOfParameterId",
                table: "CoordinateReferenceSystemUsesValue",
                column: "ParameterValueValueOfParameterId");

            migrationBuilder.CreateIndex(
                name: "IX_CoordinateReferenceSystemVerticalCRS_NameCRSCode",
                table: "CoordinateReferenceSystemVerticalCRS",
                column: "NameCRSCode");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportActivity_DrillReportId",
                table: "DrillReportActivity",
                column: "DrillReportId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportActivity_MdId",
                table: "DrillReportActivity",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportActivity_TvdId",
                table: "DrillReportActivity",
                column: "TvdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportBitRecord_DiaBitId",
                table: "DrillReportBitRecord",
                column: "DiaBitId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportCommonData_DefaultDatumId",
                table: "DrillReportCommonData",
                column: "DefaultDatumId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_DiaBitId",
                table: "DrillReportControlIncidentInfo",
                column: "DiaBitId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_DiaCsgLastId",
                table: "DrillReportControlIncidentInfo",
                column: "DiaCsgLastId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_ETimLostId",
                table: "DrillReportControlIncidentInfo",
                column: "ETimLostId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_MdBitId",
                table: "DrillReportControlIncidentInfo",
                column: "MdBitId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_MdCsgLastId",
                table: "DrillReportControlIncidentInfo",
                column: "MdCsgLastId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_MdInflowId",
                table: "DrillReportControlIncidentInfo",
                column: "MdInflowId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_PorePressureId",
                table: "DrillReportControlIncidentInfo",
                column: "PorePressureId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_PresMaxChokeId",
                table: "DrillReportControlIncidentInfo",
                column: "PresMaxChokeId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_PresShutInCasingId",
                table: "DrillReportControlIncidentInfo",
                column: "PresShutInCasingId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_PresShutInDrillId",
                table: "DrillReportControlIncidentInfo",
                column: "PresShutInDrillId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_TempBottomId",
                table: "DrillReportControlIncidentInfo",
                column: "TempBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_TvdInflowId",
                table: "DrillReportControlIncidentInfo",
                column: "TvdInflowId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_VolMudGainedId",
                table: "DrillReportControlIncidentInfo",
                column: "VolMudGainedId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportControlIncidentInfo_WtMudUom",
                table: "DrillReportControlIncidentInfo",
                column: "WtMudUom");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportCoreInfo_LenBarrelId",
                table: "DrillReportCoreInfo",
                column: "LenBarrelId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportCoreInfo_LenRecoveredId",
                table: "DrillReportCoreInfo",
                column: "LenRecoveredId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportCoreInfo_MdBottomDrillReportMdBottomId",
                table: "DrillReportCoreInfo",
                column: "MdBottomDrillReportMdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportCoreInfo_MdTopId",
                table: "DrillReportCoreInfo",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportCoreInfo_RecoverPcId",
                table: "DrillReportCoreInfo",
                column: "RecoverPcId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportCoreInfo_TvdBottomId",
                table: "DrillReportCoreInfo",
                column: "TvdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportCoreInfo_TvdTopDrillReportTvdTopId",
                table: "DrillReportCoreInfo",
                column: "TvdTopDrillReportTvdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportEquipFailureInfo_ETimMissProductionId",
                table: "DrillReportEquipFailureInfo",
                column: "ETimMissProductionId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportEquipFailureInfo_MdId",
                table: "DrillReportEquipFailureInfo",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFluids_DensityId",
                table: "DrillReportFluids",
                column: "DensityId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFluids_DrillReportId",
                table: "DrillReportFluids",
                column: "DrillReportId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFluids_MdId",
                table: "DrillReportFluids",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFluids_PresBopRatingId",
                table: "DrillReportFluids",
                column: "PresBopRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFluids_PvId",
                table: "DrillReportFluids",
                column: "PvId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFluids_TempVisId",
                table: "DrillReportFluids",
                column: "TempVisId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFluids_TvdId",
                table: "DrillReportFluids",
                column: "TvdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFormTestInfo_DensityHCId",
                table: "DrillReportFormTestInfo",
                column: "DensityHCId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFormTestInfo_MdId",
                table: "DrillReportFormTestInfo",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFormTestInfo_MdSampleId",
                table: "DrillReportFormTestInfo",
                column: "MdSampleId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFormTestInfo_PresPoreId",
                table: "DrillReportFormTestInfo",
                column: "PresPoreId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFormTestInfo_TvdId",
                table: "DrillReportFormTestInfo",
                column: "TvdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportFormTestInfo_VolumeSampleId",
                table: "DrillReportFormTestInfo",
                column: "VolumeSampleId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportGasReadingInfo_EthId",
                table: "DrillReportGasReadingInfo",
                column: "EthId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportGasReadingInfo_GasHighId",
                table: "DrillReportGasReadingInfo",
                column: "GasHighId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportGasReadingInfo_GasLowId",
                table: "DrillReportGasReadingInfo",
                column: "GasLowId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportGasReadingInfo_IbutId",
                table: "DrillReportGasReadingInfo",
                column: "IbutId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportGasReadingInfo_IpentId",
                table: "DrillReportGasReadingInfo",
                column: "IpentId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportGasReadingInfo_MdBottomDrillReportMdBottomId",
                table: "DrillReportGasReadingInfo",
                column: "MdBottomDrillReportMdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportGasReadingInfo_MdTopId",
                table: "DrillReportGasReadingInfo",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportGasReadingInfo_MethId",
                table: "DrillReportGasReadingInfo",
                column: "MethId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportGasReadingInfo_NbutId",
                table: "DrillReportGasReadingInfo",
                column: "NbutId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportGasReadingInfo_PropId",
                table: "DrillReportGasReadingInfo",
                column: "PropId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportGasReadingInfo_TvdBottomId",
                table: "DrillReportGasReadingInfo",
                column: "TvdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportGasReadingInfo_TvdTopDrillReportTvdTopId",
                table: "DrillReportGasReadingInfo",
                column: "TvdTopDrillReportTvdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLithShowInfo_MdBottomDrillReportMdBottomId",
                table: "DrillReportLithShowInfo",
                column: "MdBottomDrillReportMdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLithShowInfo_MdTopId",
                table: "DrillReportLithShowInfo",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLithShowInfo_TvdBottomId",
                table: "DrillReportLithShowInfo",
                column: "TvdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLithShowInfo_TvdTopDrillReportTvdTopId",
                table: "DrillReportLithShowInfo",
                column: "TvdTopDrillReportTvdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLogInfo_DrillReportId",
                table: "DrillReportLogInfo",
                column: "DrillReportId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLogInfo_ETimStaticId",
                table: "DrillReportLogInfo",
                column: "ETimStaticId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLogInfo_MdBottomDrillReportMdBottomId",
                table: "DrillReportLogInfo",
                column: "MdBottomDrillReportMdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLogInfo_MdTempToolId",
                table: "DrillReportLogInfo",
                column: "MdTempToolId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLogInfo_MdTopId",
                table: "DrillReportLogInfo",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLogInfo_TempBHCTId",
                table: "DrillReportLogInfo",
                column: "TempBHCTId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLogInfo_TempBHSTId",
                table: "DrillReportLogInfo",
                column: "TempBHSTId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLogInfo_TvdBottomId",
                table: "DrillReportLogInfo",
                column: "TvdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLogInfo_TvdTempToolId",
                table: "DrillReportLogInfo",
                column: "TvdTempToolId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportLogInfo_TvdTopDrillReportTvdTopId",
                table: "DrillReportLogInfo",
                column: "TvdTopDrillReportTvdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportPerfInfo_MdBottomDrillReportMdBottomId",
                table: "DrillReportPerfInfo",
                column: "MdBottomDrillReportMdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportPerfInfo_MdTopId",
                table: "DrillReportPerfInfo",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportPerfInfo_TvdBottomId",
                table: "DrillReportPerfInfo",
                column: "TvdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportPerfInfo_TvdTopDrillReportTvdTopId",
                table: "DrillReportPerfInfo",
                column: "TvdTopDrillReportTvdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportPorePressure_DrillReportId",
                table: "DrillReportPorePressure",
                column: "DrillReportId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportPorePressure_EquivalentMudWeightId",
                table: "DrillReportPorePressure",
                column: "EquivalentMudWeightId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportPorePressure_MdId",
                table: "DrillReportPorePressure",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportPorePressure_TvdId",
                table: "DrillReportPorePressure",
                column: "TvdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportRigAlias_DrillReportWellboreInfoWellboreInfoId",
                table: "DrillReportRigAlias",
                column: "DrillReportWellboreInfoWellboreInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_BitRecordId",
                table: "DrillReports",
                column: "BitRecordId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_CommonDataId",
                table: "DrillReports",
                column: "CommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_ControlIncidentInfoId",
                table: "DrillReports",
                column: "ControlIncidentInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_CoreInfoId",
                table: "DrillReports",
                column: "CoreInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_EquipFailureInfoId",
                table: "DrillReports",
                column: "EquipFailureInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_ExtendedReportId",
                table: "DrillReports",
                column: "ExtendedReportId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_FormTestInfoId",
                table: "DrillReports",
                column: "FormTestInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_GasReadingInfoId",
                table: "DrillReports",
                column: "GasReadingInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_LithShowInfoId",
                table: "DrillReports",
                column: "LithShowInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_PerfInfoId",
                table: "DrillReports",
                column: "PerfInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_StatusInfoId",
                table: "DrillReports",
                column: "StatusInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_StratInfoId",
                table: "DrillReports",
                column: "StratInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_SurveyStationId",
                table: "DrillReports",
                column: "SurveyStationId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_WellAliasId",
                table: "DrillReports",
                column: "WellAliasId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_WellCRSUid",
                table: "DrillReports",
                column: "WellCRSUid");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_WellTestInfoId",
                table: "DrillReports",
                column: "WellTestInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReports_WellboreInfoId",
                table: "DrillReports",
                column: "WellboreInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_DiaCsgLastId",
                table: "DrillReportStatusInfo",
                column: "DiaCsgLastId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_DiaHoleId",
                table: "DrillReportStatusInfo",
                column: "DiaHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_DiaPilotId",
                table: "DrillReportStatusInfo",
                column: "DiaPilotId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_DistDrillId",
                table: "DrillReportStatusInfo",
                column: "DistDrillId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_MdCsgLastId",
                table: "DrillReportStatusInfo",
                column: "MdCsgLastId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_MdDiaHoleStartId",
                table: "DrillReportStatusInfo",
                column: "MdDiaHoleStartId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_MdDiaPilotPlanId",
                table: "DrillReportStatusInfo",
                column: "MdDiaPilotPlanId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_MdId",
                table: "DrillReportStatusInfo",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_MdKickoffId",
                table: "DrillReportStatusInfo",
                column: "MdKickoffId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_MdPlugTopId",
                table: "DrillReportStatusInfo",
                column: "MdPlugTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_MdStrengthFormId",
                table: "DrillReportStatusInfo",
                column: "MdStrengthFormId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_RopCurrentId",
                table: "DrillReportStatusInfo",
                column: "RopCurrentId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_StrengthFormId",
                table: "DrillReportStatusInfo",
                column: "StrengthFormId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStatusInfo_TvdId",
                table: "DrillReportStatusInfo",
                column: "TvdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStratInfo_MdTopId",
                table: "DrillReportStratInfo",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportStratInfo_TvdTopDrillReportTvdTopId",
                table: "DrillReportStratInfo",
                column: "TvdTopDrillReportTvdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportSurveyStation_AziId",
                table: "DrillReportSurveyStation",
                column: "AziId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportSurveyStation_InclId",
                table: "DrillReportSurveyStation",
                column: "InclId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportSurveyStation_MdId",
                table: "DrillReportSurveyStation",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportSurveyStation_TvdId",
                table: "DrillReportSurveyStation",
                column: "TvdId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellboreAlias_DrillReportId",
                table: "DrillReportWellboreAlias",
                column: "DrillReportId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellCR_GeodeticCRSId",
                table: "DrillReportWellCR",
                column: "GeodeticCRSId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellDatum_DrillReportId",
                table: "DrillReportWellDatum",
                column: "DrillReportId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellDatum_ElevationId",
                table: "DrillReportWellDatum",
                column: "ElevationId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_CarbonDioxideId",
                table: "DrillReportWellTestInfo",
                column: "CarbonDioxideId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_ChlorideId",
                table: "DrillReportWellTestInfo",
                column: "ChlorideId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_ChokeOrificeSizeId",
                table: "DrillReportWellTestInfo",
                column: "ChokeOrificeSizeId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_DensityGasId",
                table: "DrillReportWellTestInfo",
                column: "DensityGasId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_DensityOilId",
                table: "DrillReportWellTestInfo",
                column: "DensityOilId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_DensityWaterId",
                table: "DrillReportWellTestInfo",
                column: "DensityWaterId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_FlowRateGasId",
                table: "DrillReportWellTestInfo",
                column: "FlowRateGasId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_FlowRateOilId",
                table: "DrillReportWellTestInfo",
                column: "FlowRateOilId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_FlowRateWaterId",
                table: "DrillReportWellTestInfo",
                column: "FlowRateWaterId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_GasOilRatioId",
                table: "DrillReportWellTestInfo",
                column: "GasOilRatioId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_HydrogenSulfideId",
                table: "DrillReportWellTestInfo",
                column: "HydrogenSulfideId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_MdBottomDrillReportMdBottomId",
                table: "DrillReportWellTestInfo",
                column: "MdBottomDrillReportMdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_MdTopId",
                table: "DrillReportWellTestInfo",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_PresBottomId",
                table: "DrillReportWellTestInfo",
                column: "PresBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_PresFlowingId",
                table: "DrillReportWellTestInfo",
                column: "PresFlowingId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_PresShutInId",
                table: "DrillReportWellTestInfo",
                column: "PresShutInId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_TvdBottomId",
                table: "DrillReportWellTestInfo",
                column: "TvdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_TvdTopDrillReportTvdTopId",
                table: "DrillReportWellTestInfo",
                column: "TvdTopDrillReportTvdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_VolGasTotalId",
                table: "DrillReportWellTestInfo",
                column: "VolGasTotalId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_VolOilStoredId",
                table: "DrillReportWellTestInfo",
                column: "VolOilStoredId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_VolOilTotalId",
                table: "DrillReportWellTestInfo",
                column: "VolOilTotalId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_VolWaterTotalId",
                table: "DrillReportWellTestInfo",
                column: "VolWaterTotalId");

            migrationBuilder.CreateIndex(
                name: "IX_DrillReportWellTestInfo_WaterOilRatioId",
                table: "DrillReportWellTestInfo",
                column: "WaterOilRatioId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_AlkalinityP1Id",
                table: "FluidsReportFluid",
                column: "AlkalinityP1Id");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_AlkalinityP2Id",
                table: "FluidsReportFluid",
                column: "AlkalinityP2Id");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_BaritePcId",
                table: "FluidsReportFluid",
                column: "BaritePcId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_BrinePcId",
                table: "FluidsReportFluid",
                column: "BrinePcId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_CalciumChlorideId",
                table: "FluidsReportFluid",
                column: "CalciumChlorideId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_CalciumId",
                table: "FluidsReportFluid",
                column: "CalciumId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_ChlorideId",
                table: "FluidsReportFluid",
                column: "ChlorideId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_DensityId",
                table: "FluidsReportFluid",
                column: "DensityId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_ElectStabId",
                table: "FluidsReportFluid",
                column: "ElectStabId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_FilterCakeHthpId",
                table: "FluidsReportFluid",
                column: "FilterCakeHthpId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_FilterCakeLtlpId",
                table: "FluidsReportFluid",
                column: "FilterCakeLtlpId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_FiltrateHthpId",
                table: "FluidsReportFluid",
                column: "FiltrateHthpId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_FiltrateLtlpId",
                table: "FluidsReportFluid",
                column: "FiltrateLtlpId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_Gel10MinId",
                table: "FluidsReportFluid",
                column: "Gel10MinId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_Gel10SecId",
                table: "FluidsReportFluid",
                column: "Gel10SecId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_Gel30MinId",
                table: "FluidsReportFluid",
                column: "Gel30MinId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_HardnessCaId",
                table: "FluidsReportFluid",
                column: "HardnessCaId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_LcmId",
                table: "FluidsReportFluid",
                column: "LcmId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_LimeId",
                table: "FluidsReportFluid",
                column: "LimeId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_MagnesiumId",
                table: "FluidsReportFluid",
                column: "MagnesiumId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_MbtId",
                table: "FluidsReportFluid",
                column: "MbtId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_MfId",
                table: "FluidsReportFluid",
                column: "MfId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_OilCtgId",
                table: "FluidsReportFluid",
                column: "OilCtgId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_OilPcId",
                table: "FluidsReportFluid",
                column: "OilPcId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_PmFiltrateId",
                table: "FluidsReportFluid",
                column: "PmFiltrateId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_PmId",
                table: "FluidsReportFluid",
                column: "PmId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_PolymerId",
                table: "FluidsReportFluid",
                column: "PolymerId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_PotassiumId",
                table: "FluidsReportFluid",
                column: "PotassiumId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_PresHthpId",
                table: "FluidsReportFluid",
                column: "PresHthpId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_PvReportPvId",
                table: "FluidsReportFluid",
                column: "PvReportPvId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_SandPcId",
                table: "FluidsReportFluid",
                column: "SandPcId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_SolCorPcId",
                table: "FluidsReportFluid",
                column: "SolCorPcId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_SolidsCalcPcId",
                table: "FluidsReportFluid",
                column: "SolidsCalcPcId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_SolidsHiGravPcId",
                table: "FluidsReportFluid",
                column: "SolidsHiGravPcId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_SolidsLowGravPcId",
                table: "FluidsReportFluid",
                column: "SolidsLowGravPcId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_SolidsPcId",
                table: "FluidsReportFluid",
                column: "SolidsPcId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_SulfideId",
                table: "FluidsReportFluid",
                column: "SulfideId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_TempHthpId",
                table: "FluidsReportFluid",
                column: "TempHthpId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_TempPhId",
                table: "FluidsReportFluid",
                column: "TempPhId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_TempVisId",
                table: "FluidsReportFluid",
                column: "TempVisId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_VisFunnelId",
                table: "FluidsReportFluid",
                column: "VisFunnelId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_WaterPcId",
                table: "FluidsReportFluid",
                column: "WaterPcId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportFluid_YpReportYpId",
                table: "FluidsReportFluid",
                column: "YpReportYpId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportRheometer_FluidsReportFluidUid",
                table: "FluidsReportRheometer",
                column: "FluidsReportFluidUid");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportRheometer_PresRheomId",
                table: "FluidsReportRheometer",
                column: "PresRheomId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReportRheometer_TempRheomId",
                table: "FluidsReportRheometer",
                column: "TempRheomId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReports_CommonDataId",
                table: "FluidsReports",
                column: "CommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReports_FluidUid",
                table: "FluidsReports",
                column: "FluidUid");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReports_MdId",
                table: "FluidsReports",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_FluidsReports_TvdId",
                table: "FluidsReports",
                column: "TvdId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_ChronostratigraphicId",
                table: "FormationMarkers",
                column: "ChronostratigraphicId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_CommonDataFormationMarkerCommonDataId",
                table: "FormationMarkers",
                column: "CommonDataFormationMarkerCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_DipDirectionId",
                table: "FormationMarkers",
                column: "DipDirectionId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_DipId",
                table: "FormationMarkers",
                column: "DipId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_LithostratigraphicId",
                table: "FormationMarkers",
                column: "LithostratigraphicId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_MdLogSampleId",
                table: "FormationMarkers",
                column: "MdLogSampleId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_MdPrognosedId",
                table: "FormationMarkers",
                column: "MdPrognosedId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_MdTopSampleId",
                table: "FormationMarkers",
                column: "MdTopSampleId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_ThicknessApparentId",
                table: "FormationMarkers",
                column: "ThicknessApparentId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_ThicknessBedId",
                table: "FormationMarkers",
                column: "ThicknessBedId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_ThicknessPerpenId",
                table: "FormationMarkers",
                column: "ThicknessPerpenId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_TvdLogSampleId",
                table: "FormationMarkers",
                column: "TvdLogSampleId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_TvdPrognosedId",
                table: "FormationMarkers",
                column: "TvdPrognosedId");

            migrationBuilder.CreateIndex(
                name: "IX_FormationMarkers_TvdTopSampleId",
                table: "FormationMarkers",
                column: "TvdTopSampleId");

            migrationBuilder.CreateIndex(
                name: "IX_LogCurveInfos_LogId",
                table: "LogCurveInfos",
                column: "LogId");

            migrationBuilder.CreateIndex(
                name: "IX_LogCurveInfos_MaxIndexId",
                table: "LogCurveInfos",
                column: "MaxIndexId");

            migrationBuilder.CreateIndex(
                name: "IX_LogCurveInfos_MinIndexId",
                table: "LogCurveInfos",
                column: "MinIndexId");

            migrationBuilder.CreateIndex(
                name: "IX_LogCurveInfos_SensorOffsetId",
                table: "LogCurveInfos",
                column: "SensorOffsetId");

            migrationBuilder.CreateIndex(
                name: "IX_LogParams_LogId",
                table: "LogParams",
                column: "LogId");

            migrationBuilder.CreateIndex(
                name: "IX_Logs_CommonDataLogCommonDataId",
                table: "Logs",
                column: "CommonDataLogCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Logs_EndIndexLogEndIndexId",
                table: "Logs",
                column: "EndIndexLogEndIndexId");

            migrationBuilder.CreateIndex(
                name: "IX_Logs_LogDataId",
                table: "Logs",
                column: "LogDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Logs_StartIndexLogStartIndexId",
                table: "Logs",
                column: "StartIndexLogStartIndexId");

            migrationBuilder.CreateIndex(
                name: "IX_Logs_StepIncrementId",
                table: "Logs",
                column: "StepIncrementId");

            migrationBuilder.CreateIndex(
                name: "IX_Messages_CommonDataMessageCommonDataId",
                table: "Messages",
                column: "CommonDataMessageCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Messages_MdBitId",
                table: "Messages",
                column: "MdBitId");

            migrationBuilder.CreateIndex(
                name: "IX_Messages_MdId",
                table: "Messages",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_Messages_ParamIndex",
                table: "Messages",
                column: "ParamIndex");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_AcetyleneId",
                table: "MudLogChromatograph",
                column: "AcetyleneId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_Co2AvId",
                table: "MudLogChromatograph",
                column: "Co2AvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_Co2MnId",
                table: "MudLogChromatograph",
                column: "Co2MnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_Co2MxId",
                table: "MudLogChromatograph",
                column: "Co2MxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_ETimChromCycleId",
                table: "MudLogChromatograph",
                column: "ETimChromCycleId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_EpentAvId",
                table: "MudLogChromatograph",
                column: "EpentAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_EpentMnId",
                table: "MudLogChromatograph",
                column: "EpentMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_EpentMxId",
                table: "MudLogChromatograph",
                column: "EpentMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_EthAvId",
                table: "MudLogChromatograph",
                column: "EthAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_EthMnId",
                table: "MudLogChromatograph",
                column: "EthMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_EthMxId",
                table: "MudLogChromatograph",
                column: "EthMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_H2sAvId",
                table: "MudLogChromatograph",
                column: "H2sAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_H2sMnId",
                table: "MudLogChromatograph",
                column: "H2sMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_H2sMxId",
                table: "MudLogChromatograph",
                column: "H2sMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_IbutAvId",
                table: "MudLogChromatograph",
                column: "IbutAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_IbutMnId",
                table: "MudLogChromatograph",
                column: "IbutMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_IbutMxId",
                table: "MudLogChromatograph",
                column: "IbutMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_IhexAvId",
                table: "MudLogChromatograph",
                column: "IhexAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_IhexMnId",
                table: "MudLogChromatograph",
                column: "IhexMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_IhexMxId",
                table: "MudLogChromatograph",
                column: "IhexMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_IpentAvId",
                table: "MudLogChromatograph",
                column: "IpentAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_IpentMnId",
                table: "MudLogChromatograph",
                column: "IpentMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_IpentMxId",
                table: "MudLogChromatograph",
                column: "IpentMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_MdBottomId",
                table: "MudLogChromatograph",
                column: "MdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_MdTopId",
                table: "MudLogChromatograph",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_MethAvId",
                table: "MudLogChromatograph",
                column: "MethAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_MethMnId",
                table: "MudLogChromatograph",
                column: "MethMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_MethMxId",
                table: "MudLogChromatograph",
                column: "MethMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_NbutAvId",
                table: "MudLogChromatograph",
                column: "NbutAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_NbutMnId",
                table: "MudLogChromatograph",
                column: "NbutMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_NbutMxId",
                table: "MudLogChromatograph",
                column: "NbutMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_NhexAvId",
                table: "MudLogChromatograph",
                column: "NhexAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_NhexMnId",
                table: "MudLogChromatograph",
                column: "NhexMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_NhexMxId",
                table: "MudLogChromatograph",
                column: "NhexMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_NpentAvId",
                table: "MudLogChromatograph",
                column: "NpentAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_NpentMnId",
                table: "MudLogChromatograph",
                column: "NpentMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_NpentMxId",
                table: "MudLogChromatograph",
                column: "NpentMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_PropAvId",
                table: "MudLogChromatograph",
                column: "PropAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_PropMnId",
                table: "MudLogChromatograph",
                column: "PropMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_PropMxId",
                table: "MudLogChromatograph",
                column: "PropMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_WtMudInId",
                table: "MudLogChromatograph",
                column: "WtMudInId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChromatograph_WtMudOutId",
                table: "MudLogChromatograph",
                column: "WtMudOutId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogChronostratigraphic_MudLogGeologyIntervalGeologyIntervalId",
                table: "MudLogChronostratigraphic",
                column: "MudLogGeologyIntervalGeologyIntervalId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_CalcStabId",
                table: "MudLogGeologyInterval",
                column: "CalcStabId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_CalciteId",
                table: "MudLogGeologyInterval",
                column: "CalciteId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_CecId",
                table: "MudLogGeologyInterval",
                column: "CecId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_ChromatographId",
                table: "MudLogGeologyInterval",
                column: "ChromatographId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_CommonTimeId",
                table: "MudLogGeologyInterval",
                column: "CommonTimeId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_DensBulkId",
                table: "MudLogGeologyInterval",
                column: "DensBulkId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_DensShaleId",
                table: "MudLogGeologyInterval",
                column: "DensShaleId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_DolomiteId",
                table: "MudLogGeologyInterval",
                column: "DolomiteId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_EcdTdAvId",
                table: "MudLogGeologyInterval",
                column: "EcdTdAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_LenPlugId",
                table: "MudLogGeologyInterval",
                column: "LenPlugId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_LithologyId",
                table: "MudLogGeologyInterval",
                column: "LithologyId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_LithostratigraphicId",
                table: "MudLogGeologyInterval",
                column: "LithostratigraphicId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_MdBottomId",
                table: "MudLogGeologyInterval",
                column: "MdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_MdTopId",
                table: "MudLogGeologyInterval",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_MudGasId",
                table: "MudLogGeologyInterval",
                column: "MudGasId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_RopAvId",
                table: "MudLogGeologyInterval",
                column: "RopAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_RopMnId",
                table: "MudLogGeologyInterval",
                column: "RopMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_RopMxId",
                table: "MudLogGeologyInterval",
                column: "RopMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_RpmAvId",
                table: "MudLogGeologyInterval",
                column: "RpmAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_ShowId",
                table: "MudLogGeologyInterval",
                column: "ShowId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_SizeMnId",
                table: "MudLogGeologyInterval",
                column: "SizeMnId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_SizeMxId",
                table: "MudLogGeologyInterval",
                column: "SizeMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_TqAvId",
                table: "MudLogGeologyInterval",
                column: "TqAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_TvdBaseId",
                table: "MudLogGeologyInterval",
                column: "TvdBaseId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_TvdTopId",
                table: "MudLogGeologyInterval",
                column: "TvdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_WobAvId",
                table: "MudLogGeologyInterval",
                column: "WobAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogGeologyInterval_WtMudAvId",
                table: "MudLogGeologyInterval",
                column: "WtMudAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogLithology_DensShaleId",
                table: "MudLogLithology",
                column: "DensShaleId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogLithology_QualifierId",
                table: "MudLogLithology",
                column: "QualifierId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogMudGas_GasAvId",
                table: "MudLogMudGas",
                column: "GasAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogMudGas_GasBackgndId",
                table: "MudLogMudGas",
                column: "GasBackgndId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogMudGas_GasConAvId",
                table: "MudLogMudGas",
                column: "GasConAvId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogMudGas_GasConMxId",
                table: "MudLogMudGas",
                column: "GasConMxId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogMudGas_GasPeakId",
                table: "MudLogMudGas",
                column: "GasPeakId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogMudGas_GasTripId",
                table: "MudLogMudGas",
                column: "GasTripId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogParameter_CommonTimeId",
                table: "MudLogParameter",
                column: "CommonTimeId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogParameter_ForceId",
                table: "MudLogParameter",
                column: "ForceId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogParameter_MdBottomId",
                table: "MudLogParameter",
                column: "MdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogParameter_MdTopId",
                table: "MudLogParameter",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogParameter_MudLogId",
                table: "MudLogParameter",
                column: "MudLogId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogQualifier_AbundanceId",
                table: "MudLogQualifier",
                column: "AbundanceId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogs_CommonDataMudLogCommonDataId",
                table: "MudLogs",
                column: "CommonDataMudLogCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogs_EndMdId",
                table: "MudLogs",
                column: "EndMdId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogs_GeologyIntervalId",
                table: "MudLogs",
                column: "GeologyIntervalId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogs_StartMdId",
                table: "MudLogs",
                column: "StartMdId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogShow_NatFlorPcId",
                table: "MudLogShow",
                column: "NatFlorPcId");

            migrationBuilder.CreateIndex(
                name: "IX_MudLogShow_StainPcId",
                table: "MudLogShow",
                column: "StainPcId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupCommonDatas_AcquisitionTimeZoneId",
                table: "ObjectGroupCommonDatas",
                column: "AcquisitionTimeZoneId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupCommonDatas_DefaultDatumId",
                table: "ObjectGroupCommonDatas",
                column: "DefaultDatumId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupCommonDatas_ExtensionNameValueId",
                table: "ObjectGroupCommonDatas",
                column: "ExtensionNameValueId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupExtensionNameValues_MdId",
                table: "ObjectGroupExtensionNameValues",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupExtensionNameValues_ValueId",
                table: "ObjectGroupExtensionNameValues",
                column: "ValueId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupMemberObjects_ExtensionNameValueId",
                table: "ObjectGroupMemberObjects",
                column: "ExtensionNameValueId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupMemberObjects_ObjectReferenceId",
                table: "ObjectGroupMemberObjects",
                column: "ObjectReferenceId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupMemberObjects_ParamId",
                table: "ObjectGroupMemberObjects",
                column: "ParamId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupMemberObjects_RangeMaxId",
                table: "ObjectGroupMemberObjects",
                column: "RangeMaxId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupMemberObjects_RangeMinId",
                table: "ObjectGroupMemberObjects",
                column: "RangeMinId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupMemberObjects_ReferenceDepthId",
                table: "ObjectGroupMemberObjects",
                column: "ReferenceDepthId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupMemberObjects_Sequence1Id",
                table: "ObjectGroupMemberObjects",
                column: "Sequence1Id");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupMemberObjects_Sequence2Id",
                table: "ObjectGroupMemberObjects",
                column: "Sequence2Id");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroupMemberObjects_Sequence3Id",
                table: "ObjectGroupMemberObjects",
                column: "Sequence3Id");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroups_CommonDataObjectGroupCommonDataId",
                table: "ObjectGroups",
                column: "CommonDataObjectGroupCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroups_MemberObjectId",
                table: "ObjectGroups",
                column: "MemberObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_ObjectGroups_ParamId",
                table: "ObjectGroups",
                column: "ParamId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportActivitys_DurationId",
                table: "OpsReportActivitys",
                column: "DurationId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportActivitys_MdBitEndId",
                table: "OpsReportActivitys",
                column: "MdBitEndId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportActivitys_MdBitStartId",
                table: "OpsReportActivitys",
                column: "MdBitStartId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportActivitys_MdHoleEndId",
                table: "OpsReportActivitys",
                column: "MdHoleEndId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportActivitys_MdHoleStartId",
                table: "OpsReportActivitys",
                column: "MdHoleStartId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportActivitys_TvdHoleEndId",
                table: "OpsReportActivitys",
                column: "TvdHoleEndId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportActivitys_TvdHoleStartId",
                table: "OpsReportActivitys",
                column: "TvdHoleStartId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportAnchorAngles_OpsReportRigResponseRigResponseId",
                table: "OpsReportAnchorAngles",
                column: "OpsReportRigResponseRigResponseId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportAnchorTensions_OpsReportRigResponseRigResponseId",
                table: "OpsReportAnchorTensions",
                column: "OpsReportRigResponseRigResponseId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportBulks_CostItemId",
                table: "OpsReportBulks",
                column: "CostItemId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportBulks_ItemVolPerUnitId",
                table: "OpsReportBulks",
                column: "ItemVolPerUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportBulks_PricePerUnitId",
                table: "OpsReportBulks",
                column: "PricePerUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportCorUseds_DirSensorOffsetId",
                table: "OpsReportCorUseds",
                column: "DirSensorOffsetId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportCorUseds_GravAxialAccelCorId",
                table: "OpsReportCorUseds",
                column: "GravAxialAccelCorId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportCorUseds_GravTran1AccelCorId",
                table: "OpsReportCorUseds",
                column: "GravTran1AccelCorId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportCorUseds_GravTran2AccelCorId",
                table: "OpsReportCorUseds",
                column: "GravTran2AccelCorId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportCorUseds_MagAxialDrlstrCorId",
                table: "OpsReportCorUseds",
                column: "MagAxialDrlstrCorId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportCorUseds_MagTran1DrlstrCorId",
                table: "OpsReportCorUseds",
                column: "MagTran1DrlstrCorId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportCorUseds_MagTran2DrlstrCorId",
                table: "OpsReportCorUseds",
                column: "MagTran2DrlstrCorId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportCorUseds_SagAziCorId",
                table: "OpsReportCorUseds",
                column: "SagAziCorId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportCorUseds_SagIncCorId",
                table: "OpsReportCorUseds",
                column: "SagIncCorId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportCorUseds_StnGridCorUsedId",
                table: "OpsReportCorUseds",
                column: "StnGridCorUsedId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportCorUseds_StnMagDeclUsedId",
                table: "OpsReportCorUseds",
                column: "StnMagDeclUsedId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDayCosts_CostAmountId",
                table: "OpsReportDayCosts",
                column: "CostAmountId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDayCosts_CostPerItemId",
                table: "OpsReportDayCosts",
                column: "CostPerItemId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDayCosts_OpsReportId",
                table: "OpsReportDayCosts",
                column: "OpsReportId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_AziBottomId",
                table: "OpsReportDrillingParams",
                column: "AziBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_AziTopId",
                table: "OpsReportDrillingParams",
                column: "AziTopId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_CTimCircId",
                table: "OpsReportDrillingParams",
                column: "CTimCircId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_CTimDrillRotId",
                table: "OpsReportDrillingParams",
                column: "CTimDrillRotId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_CTimDrillSlidId",
                table: "OpsReportDrillingParams",
                column: "CTimDrillSlidId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_CTimHoldId",
                table: "OpsReportDrillingParams",
                column: "CTimHoldId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_CTimReamId",
                table: "OpsReportDrillingParams",
                column: "CTimReamId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_CTimSteeringId",
                table: "OpsReportDrillingParams",
                column: "CTimSteeringId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_DistDrillRotId",
                table: "OpsReportDrillingParams",
                column: "DistDrillRotId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_DistDrillSlidId",
                table: "OpsReportDrillingParams",
                column: "DistDrillSlidId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_DistHoldId",
                table: "OpsReportDrillingParams",
                column: "DistHoldId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_DistReamId",
                table: "OpsReportDrillingParams",
                column: "DistReamId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_DistSteeringId",
                table: "OpsReportDrillingParams",
                column: "DistSteeringId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_ETimOpBitId",
                table: "OpsReportDrillingParams",
                column: "ETimOpBitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_FlowrateBitId",
                table: "OpsReportDrillingParams",
                column: "FlowrateBitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_FlowratePumpId",
                table: "OpsReportDrillingParams",
                column: "FlowratePumpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_HkldDnId",
                table: "OpsReportDrillingParams",
                column: "HkldDnId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_HkldRotId",
                table: "OpsReportDrillingParams",
                column: "HkldRotId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_HkldUpId",
                table: "OpsReportDrillingParams",
                column: "HkldUpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_InclMnId",
                table: "OpsReportDrillingParams",
                column: "InclMnId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_InclMxId",
                table: "OpsReportDrillingParams",
                column: "InclMxId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_InclStartId",
                table: "OpsReportDrillingParams",
                column: "InclStartId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_InclStopId",
                table: "OpsReportDrillingParams",
                column: "InclStopId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_MdHoleStartId",
                table: "OpsReportDrillingParams",
                column: "MdHoleStartId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_MdHoleStopId",
                table: "OpsReportDrillingParams",
                column: "MdHoleStopId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_OverPullId",
                table: "OpsReportDrillingParams",
                column: "OverPullId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_PowBitId",
                table: "OpsReportDrillingParams",
                column: "PowBitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_PresDropBitId",
                table: "OpsReportDrillingParams",
                column: "PresDropBitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_PresPumpAvId",
                table: "OpsReportDrillingParams",
                column: "PresPumpAvId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_RopAvId",
                table: "OpsReportDrillingParams",
                column: "RopAvId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_RopMnId",
                table: "OpsReportDrillingParams",
                column: "RopMnId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_RopMxId",
                table: "OpsReportDrillingParams",
                column: "RopMxId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_RpmAvDhId",
                table: "OpsReportDrillingParams",
                column: "RpmAvDhId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_RpmAvId",
                table: "OpsReportDrillingParams",
                column: "RpmAvId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_RpmMnId",
                table: "OpsReportDrillingParams",
                column: "RpmMnId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_RpmMxId",
                table: "OpsReportDrillingParams",
                column: "RpmMxId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_SlackOffId",
                table: "OpsReportDrillingParams",
                column: "SlackOffId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_TempMudDhMxId",
                table: "OpsReportDrillingParams",
                column: "TempMudDhMxId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_TqDhAvId",
                table: "OpsReportDrillingParams",
                column: "TqDhAvId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_TqOffBotAvId",
                table: "OpsReportDrillingParams",
                column: "TqOffBotAvId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_TqOnBotAvId",
                table: "OpsReportDrillingParams",
                column: "TqOnBotAvId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_TqOnBotMnId",
                table: "OpsReportDrillingParams",
                column: "TqOnBotMnId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_TqOnBotMxId",
                table: "OpsReportDrillingParams",
                column: "TqOnBotMxId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_TubularUidRef",
                table: "OpsReportDrillingParams",
                column: "TubularUidRef");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_VelNozzleAvId",
                table: "OpsReportDrillingParams",
                column: "VelNozzleAvId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_WobAvDhId",
                table: "OpsReportDrillingParams",
                column: "WobAvDhId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_WobAvId",
                table: "OpsReportDrillingParams",
                column: "WobAvId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_WobMnId",
                table: "OpsReportDrillingParams",
                column: "WobMnId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_WobMxId",
                table: "OpsReportDrillingParams",
                column: "WobMxId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_WtAboveJarId",
                table: "OpsReportDrillingParams",
                column: "WtAboveJarId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_WtBelowJarId",
                table: "OpsReportDrillingParams",
                column: "WtBelowJarId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportDrillingParams_WtMudUom",
                table: "OpsReportDrillingParams",
                column: "WtMudUom");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_AlkalinityP1Id",
                table: "OpsReportFluids",
                column: "AlkalinityP1Id");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_AlkalinityP2Id",
                table: "OpsReportFluids",
                column: "AlkalinityP2Id");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_BaritePcId",
                table: "OpsReportFluids",
                column: "BaritePcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_BrinePcId",
                table: "OpsReportFluids",
                column: "BrinePcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_CalciumChlorideId",
                table: "OpsReportFluids",
                column: "CalciumChlorideId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_CalciumMagnesiumId",
                table: "OpsReportFluids",
                column: "CalciumMagnesiumId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_ChlorideId",
                table: "OpsReportFluids",
                column: "ChlorideId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_DensityId",
                table: "OpsReportFluids",
                column: "DensityId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_ElectStabId",
                table: "OpsReportFluids",
                column: "ElectStabId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_FilterCakeHthpId",
                table: "OpsReportFluids",
                column: "FilterCakeHthpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_FilterCakeLtlpId",
                table: "OpsReportFluids",
                column: "FilterCakeLtlpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_FiltrateHthpId",
                table: "OpsReportFluids",
                column: "FiltrateHthpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_FiltrateLtlpId",
                table: "OpsReportFluids",
                column: "FiltrateLtlpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_Gel10MinId",
                table: "OpsReportFluids",
                column: "Gel10MinId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_Gel10SecId",
                table: "OpsReportFluids",
                column: "Gel10SecId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_Gel30MinId",
                table: "OpsReportFluids",
                column: "Gel30MinId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_HardnessCaId",
                table: "OpsReportFluids",
                column: "HardnessCaId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_LcmId",
                table: "OpsReportFluids",
                column: "LcmId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_LimeId",
                table: "OpsReportFluids",
                column: "LimeId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_MagnesiumId",
                table: "OpsReportFluids",
                column: "MagnesiumId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_MbtId",
                table: "OpsReportFluids",
                column: "MbtId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_MfId",
                table: "OpsReportFluids",
                column: "MfId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_OilCtgId",
                table: "OpsReportFluids",
                column: "OilCtgId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_OilPcId",
                table: "OpsReportFluids",
                column: "OilPcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_PmFiltrateId",
                table: "OpsReportFluids",
                column: "PmFiltrateId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_PmId",
                table: "OpsReportFluids",
                column: "PmId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_PolymerId",
                table: "OpsReportFluids",
                column: "PolymerId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_PresHthpId",
                table: "OpsReportFluids",
                column: "PresHthpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_PvReportPvId",
                table: "OpsReportFluids",
                column: "PvReportPvId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_SandPcId",
                table: "OpsReportFluids",
                column: "SandPcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_SolCorPcId",
                table: "OpsReportFluids",
                column: "SolCorPcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_SolidsCalcPcId",
                table: "OpsReportFluids",
                column: "SolidsCalcPcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_SolidsHiGravPcId",
                table: "OpsReportFluids",
                column: "SolidsHiGravPcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_SolidsLowGravPcId",
                table: "OpsReportFluids",
                column: "SolidsLowGravPcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_SolidsPcId",
                table: "OpsReportFluids",
                column: "SolidsPcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_SulfideId",
                table: "OpsReportFluids",
                column: "SulfideId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_TempHthpId",
                table: "OpsReportFluids",
                column: "TempHthpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_TempPhId",
                table: "OpsReportFluids",
                column: "TempPhId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_TempVisId",
                table: "OpsReportFluids",
                column: "TempVisId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_VisFunnelId",
                table: "OpsReportFluids",
                column: "VisFunnelId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_WaterPcId",
                table: "OpsReportFluids",
                column: "WaterPcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportFluids_YpId",
                table: "OpsReportFluids",
                column: "YpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_DaysIncFreeId",
                table: "OpsReportHses",
                column: "DaysIncFreeId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_FluidDischargedId",
                table: "OpsReportHses",
                column: "FluidDischargedId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_IncidentId",
                table: "OpsReportHses",
                column: "IncidentId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_PresAnnularId",
                table: "OpsReportHses",
                column: "PresAnnularId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_PresChokeLineId",
                table: "OpsReportHses",
                column: "PresChokeLineId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_PresChokeManId",
                table: "OpsReportHses",
                column: "PresChokeManId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_PresDiverterId",
                table: "OpsReportHses",
                column: "PresDiverterId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_PresKellyHoseId",
                table: "OpsReportHses",
                column: "PresKellyHoseId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_PresLastCsgId",
                table: "OpsReportHses",
                column: "PresLastCsgId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_PresRamsId",
                table: "OpsReportHses",
                column: "PresRamsId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_PresStdPipeId",
                table: "OpsReportHses",
                column: "PresStdPipeId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_VolCtgDischargedId",
                table: "OpsReportHses",
                column: "VolCtgDischargedId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_VolOilCtgDischargeId",
                table: "OpsReportHses",
                column: "VolOilCtgDischargeId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportHses_WasteDischargedId",
                table: "OpsReportHses",
                column: "WasteDischargedId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportIncidents_CostLostGrossId",
                table: "OpsReportIncidents",
                column: "CostLostGrossId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportIncidents_ETimLostGrossId",
                table: "OpsReportIncidents",
                column: "ETimLostGrossId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportLocations_LatitudeId",
                table: "OpsReportLocations",
                column: "LatitudeId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportLocations_LongitudeId",
                table: "OpsReportLocations",
                column: "LongitudeId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportLocations_OpsReportTrajectoryStationUid",
                table: "OpsReportLocations",
                column: "OpsReportTrajectoryStationUid");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportLocations_ProjectedXId",
                table: "OpsReportLocations",
                column: "ProjectedXId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportLocations_ProjectedYId",
                table: "OpsReportLocations",
                column: "ProjectedYId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportLocations_WellCRSId",
                table: "OpsReportLocations",
                column: "WellCRSId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMatrixCovs_BiasEId",
                table: "OpsReportMatrixCovs",
                column: "BiasEId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMatrixCovs_BiasNId",
                table: "OpsReportMatrixCovs",
                column: "BiasNId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMatrixCovs_BiasVertId",
                table: "OpsReportMatrixCovs",
                column: "BiasVertId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMatrixCovs_VarianceEEId",
                table: "OpsReportMatrixCovs",
                column: "VarianceEEId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMatrixCovs_VarianceEVertId",
                table: "OpsReportMatrixCovs",
                column: "VarianceEVertId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMatrixCovs_VarianceNEOpsReportsId",
                table: "OpsReportMatrixCovs",
                column: "VarianceNEOpsReportsId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMatrixCovs_VarianceNNId",
                table: "OpsReportMatrixCovs",
                column: "VarianceNNId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMatrixCovs_VarianceNVertId",
                table: "OpsReportMatrixCovs",
                column: "VarianceNVertId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMatrixCovs_VarianceVertVertId",
                table: "OpsReportMatrixCovs",
                column: "VarianceVertVertId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudInventorys_CostItemId",
                table: "OpsReportMudInventorys",
                column: "CostItemId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudInventorys_ItemWtPerUnitId",
                table: "OpsReportMudInventorys",
                column: "ItemWtPerUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudInventorys_PricePerUnitId",
                table: "OpsReportMudInventorys",
                column: "PricePerUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolLostAbandonHoleId",
                table: "OpsReportMudLossess",
                column: "VolLostAbandonHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolLostBhdCsgHoleId",
                table: "OpsReportMudLossess",
                column: "VolLostBhdCsgHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolLostCircHoleId",
                table: "OpsReportMudLossess",
                column: "VolLostCircHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolLostCmtHoleId",
                table: "OpsReportMudLossess",
                column: "VolLostCmtHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolLostCsgHoleId",
                table: "OpsReportMudLossess",
                column: "VolLostCsgHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolLostMudCleanerSurfId",
                table: "OpsReportMudLossess",
                column: "VolLostMudCleanerSurfId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolLostOtherHoleId",
                table: "OpsReportMudLossess",
                column: "VolLostOtherHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolLostOtherSurfId",
                table: "OpsReportMudLossess",
                column: "VolLostOtherSurfId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolLostPitsSurfId",
                table: "OpsReportMudLossess",
                column: "VolLostPitsSurfId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolLostShakerSurfId",
                table: "OpsReportMudLossess",
                column: "VolLostShakerSurfId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolLostTrippingSurfId",
                table: "OpsReportMudLossess",
                column: "VolLostTrippingSurfId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolTotMudLostHoleId",
                table: "OpsReportMudLossess",
                column: "VolTotMudLostHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudLossess_VolTotMudLostSurfId",
                table: "OpsReportMudLossess",
                column: "VolTotMudLostSurfId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudVolumes_MudLossesId",
                table: "OpsReportMudVolumes",
                column: "MudLossesId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudVolumes_VolMudBuiltId",
                table: "OpsReportMudVolumes",
                column: "VolMudBuiltId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudVolumes_VolMudCasingId",
                table: "OpsReportMudVolumes",
                column: "VolMudCasingId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudVolumes_VolMudDumpedId",
                table: "OpsReportMudVolumes",
                column: "VolMudDumpedId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudVolumes_VolMudHoleId",
                table: "OpsReportMudVolumes",
                column: "VolMudHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudVolumes_VolMudReceivedId",
                table: "OpsReportMudVolumes",
                column: "VolMudReceivedId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudVolumes_VolMudReturnedId",
                table: "OpsReportMudVolumes",
                column: "VolMudReturnedId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudVolumes_VolMudRiserId",
                table: "OpsReportMudVolumes",
                column: "VolMudRiserId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudVolumes_VolMudStringId",
                table: "OpsReportMudVolumes",
                column: "VolMudStringId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudVolumes_VolTotMudEndId",
                table: "OpsReportMudVolumes",
                column: "VolTotMudEndId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportMudVolumes_VolTotMudStartId",
                table: "OpsReportMudVolumes",
                column: "VolTotMudStartId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPersonnels_OpsReportId",
                table: "OpsReportPersonnels",
                column: "OpsReportId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPersonnels_TotalTimeId",
                table: "OpsReportPersonnels",
                column: "TotalTimeId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPitVolumes_DensFluidId",
                table: "OpsReportPitVolumes",
                column: "DensFluidId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPitVolumes_OpsReportId",
                table: "OpsReportPitVolumes",
                column: "OpsReportId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPitVolumes_PitId",
                table: "OpsReportPitVolumes",
                column: "PitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPitVolumes_VisFunnelId",
                table: "OpsReportPitVolumes",
                column: "VisFunnelId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPitVolumes_VolPitId",
                table: "OpsReportPitVolumes",
                column: "VolPitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPumpOps_IdLinerId",
                table: "OpsReportPumpOps",
                column: "IdLinerId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPumpOps_LenStrokeId",
                table: "OpsReportPumpOps",
                column: "LenStrokeId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPumpOps_MdBitId",
                table: "OpsReportPumpOps",
                column: "MdBitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPumpOps_PcEfficiencyId",
                table: "OpsReportPumpOps",
                column: "PcEfficiencyId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPumpOps_PressureId",
                table: "OpsReportPumpOps",
                column: "PressureId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPumpOps_PumpId",
                table: "OpsReportPumpOps",
                column: "PumpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPumpOps_PumpOutputId",
                table: "OpsReportPumpOps",
                column: "PumpOutputId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportPumpOps_RateStrokeId",
                table: "OpsReportPumpOps",
                column: "RateStrokeId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRawDatas_GravAxialRawId",
                table: "OpsReportRawDatas",
                column: "GravAxialRawId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRawDatas_GravTran1RawId",
                table: "OpsReportRawDatas",
                column: "GravTran1RawId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRawDatas_GravTran2RawId",
                table: "OpsReportRawDatas",
                column: "GravTran2RawId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRawDatas_MagAxialRawId",
                table: "OpsReportRawDatas",
                column: "MagAxialRawId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRawDatas_MagTran1RawId",
                table: "OpsReportRawDatas",
                column: "MagTran1RawId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRawDatas_MagTran2RawId",
                table: "OpsReportRawDatas",
                column: "MagTran2RawId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRheometers_OpsReportFluidUid",
                table: "OpsReportRheometers",
                column: "OpsReportFluidUid");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRheometers_PresRheomId",
                table: "OpsReportRheometers",
                column: "PresRheomId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRheometers_TempRheomId",
                table: "OpsReportRheometers",
                column: "TempRheomId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_BallJointAngleId",
                table: "OpsReportRigResponses",
                column: "BallJointAngleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_BallJointDirectionId",
                table: "OpsReportRigResponses",
                column: "BallJointDirectionId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_DispRigId",
                table: "OpsReportRigResponses",
                column: "DispRigId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_GuideBaseAngleId",
                table: "OpsReportRigResponses",
                column: "GuideBaseAngleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_LoadLeg1Id",
                table: "OpsReportRigResponses",
                column: "LoadLeg1Id");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_LoadLeg2Id",
                table: "OpsReportRigResponses",
                column: "LoadLeg2Id");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_LoadLeg3Id",
                table: "OpsReportRigResponses",
                column: "LoadLeg3Id");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_LoadLeg4Id",
                table: "OpsReportRigResponses",
                column: "LoadLeg4Id");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_MeanDraftId",
                table: "OpsReportRigResponses",
                column: "MeanDraftId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_OffsetRigId",
                table: "OpsReportRigResponses",
                column: "OffsetRigId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_PenetrationLeg1Id",
                table: "OpsReportRigResponses",
                column: "PenetrationLeg1Id");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_PenetrationLeg2Id",
                table: "OpsReportRigResponses",
                column: "PenetrationLeg2Id");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_PenetrationLeg3Id",
                table: "OpsReportRigResponses",
                column: "PenetrationLeg3Id");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_PenetrationLeg4Id",
                table: "OpsReportRigResponses",
                column: "PenetrationLeg4Id");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_RigHeadingId",
                table: "OpsReportRigResponses",
                column: "RigHeadingId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_RigHeaveId",
                table: "OpsReportRigResponses",
                column: "RigHeaveId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_RigPitchAngleId",
                table: "OpsReportRigResponses",
                column: "RigPitchAngleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_RigRollAngleId",
                table: "OpsReportRigResponses",
                column: "RigRollAngleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_RiserAngleId",
                table: "OpsReportRigResponses",
                column: "RiserAngleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_RiserDirectionId",
                table: "OpsReportRigResponses",
                column: "RiserDirectionId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_RiserTensionId",
                table: "OpsReportRigResponses",
                column: "RiserTensionId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_TotalDeckLoadId",
                table: "OpsReportRigResponses",
                column: "TotalDeckLoadId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportRigResponses_VariableDeckLoadId",
                table: "OpsReportRigResponses",
                column: "VariableDeckLoadId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_ActivityUid",
                table: "OpsReports",
                column: "ActivityUid");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_BulkId",
                table: "OpsReports",
                column: "BulkId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_CommonDataOpsReportsCommonDataid",
                table: "OpsReports",
                column: "CommonDataOpsReportsCommonDataid");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_CostDayId",
                table: "OpsReports",
                column: "CostDayId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_CostDayMudId",
                table: "OpsReports",
                column: "CostDayMudId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_DiaCsgLastId",
                table: "OpsReports",
                column: "DiaCsgLastId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_DiaHoleId",
                table: "OpsReports",
                column: "DiaHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_DistDrillId",
                table: "OpsReports",
                column: "DistDrillId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_DistDrillRotId",
                table: "OpsReports",
                column: "DistDrillRotId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_DistDrillSlidId",
                table: "OpsReports",
                column: "DistDrillSlidId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_DistHoldId",
                table: "OpsReports",
                column: "DistHoldId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_DistReamId",
                table: "OpsReports",
                column: "DistReamId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_DistSteeringId",
                table: "OpsReports",
                column: "DistSteeringId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_DrillingParamsUid",
                table: "OpsReports",
                column: "DrillingParamsUid");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_ETimCircId",
                table: "OpsReports",
                column: "ETimCircId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_ETimDrillId",
                table: "OpsReports",
                column: "ETimDrillId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_ETimDrillRotId",
                table: "OpsReports",
                column: "ETimDrillRotId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_ETimDrillSlidId",
                table: "OpsReports",
                column: "ETimDrillSlidId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_ETimHoldId",
                table: "OpsReports",
                column: "ETimHoldId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_ETimLocId",
                table: "OpsReports",
                column: "ETimLocId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_ETimReamId",
                table: "OpsReports",
                column: "ETimReamId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_ETimSpudId",
                table: "OpsReports",
                column: "ETimSpudId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_ETimStartId",
                table: "OpsReports",
                column: "ETimStartId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_ETimSteeringId",
                table: "OpsReports",
                column: "ETimSteeringId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_FluidUid",
                table: "OpsReports",
                column: "FluidUid");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_HseId",
                table: "OpsReports",
                column: "HseId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_MaaspId",
                table: "OpsReports",
                column: "MaaspId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_MdCsgLastId",
                table: "OpsReports",
                column: "MdCsgLastId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_MdPlannedId",
                table: "OpsReports",
                column: "MdPlannedId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_MdReportId",
                table: "OpsReports",
                column: "MdReportId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_MudInventoryId",
                table: "OpsReports",
                column: "MudInventoryId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_MudVolumeId",
                table: "OpsReports",
                column: "MudVolumeId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_PresKickTolId",
                table: "OpsReports",
                column: "PresKickTolId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_PresLotEmwId",
                table: "OpsReports",
                column: "PresLotEmwId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_PumpOpId",
                table: "OpsReports",
                column: "PumpOpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_RigOpsReportRigId",
                table: "OpsReports",
                column: "RigOpsReportRigId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_RigResponseId",
                table: "OpsReports",
                column: "RigResponseId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_RopAvId",
                table: "OpsReports",
                column: "RopAvId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_RopCurrentId",
                table: "OpsReports",
                column: "RopCurrentId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_ShakerOpId",
                table: "OpsReports",
                column: "ShakerOpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_SupportCraftId",
                table: "OpsReports",
                column: "SupportCraftId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_TrajectoryStationUid",
                table: "OpsReports",
                column: "TrajectoryStationUid");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_TubularId",
                table: "OpsReports",
                column: "TubularId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_TvdCsgLastId",
                table: "OpsReports",
                column: "TvdCsgLastId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_TvdLotId",
                table: "OpsReports",
                column: "TvdLotId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_TvdReportId",
                table: "OpsReports",
                column: "TvdReportId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_VolKickTolId",
                table: "OpsReports",
                column: "VolKickTolId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReports_WeatherId",
                table: "OpsReports",
                column: "WeatherId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportScrs_MdBitId",
                table: "OpsReportScrs",
                column: "MdBitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportScrs_OpsReportId",
                table: "OpsReportScrs",
                column: "OpsReportId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportScrs_PresRecordedId",
                table: "OpsReportScrs",
                column: "PresRecordedId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportScrs_PumpId",
                table: "OpsReportScrs",
                column: "PumpId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportScrs_RateStrokeId",
                table: "OpsReportScrs",
                column: "RateStrokeId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportShakerOps_HoursRunId",
                table: "OpsReportShakerOps",
                column: "HoursRunId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportShakerOps_MdHoleId",
                table: "OpsReportShakerOps",
                column: "MdHoleId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportShakerOps_PcScreenCoveredId",
                table: "OpsReportShakerOps",
                column: "PcScreenCoveredId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportShakerOps_ShakerId",
                table: "OpsReportShakerOps",
                column: "ShakerId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportShakerOps_ShakerScreenId",
                table: "OpsReportShakerOps",
                column: "ShakerScreenId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportShakerScreens_CutPointId",
                table: "OpsReportShakerScreens",
                column: "CutPointId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportShakerScreens_MeshXId",
                table: "OpsReportShakerScreens",
                column: "MeshXId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportShakerScreens_MeshYId",
                table: "OpsReportShakerScreens",
                column: "MeshYId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_AziId",
                table: "OpsReportTrajectoryStations",
                column: "AziId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_CorUsedId",
                table: "OpsReportTrajectoryStations",
                column: "CorUsedId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_DipAngleUncertId",
                table: "OpsReportTrajectoryStations",
                column: "DipAngleUncertId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_DispEwId",
                table: "OpsReportTrajectoryStations",
                column: "DispEwId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_DispNsId",
                table: "OpsReportTrajectoryStations",
                column: "DispNsId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_DlsId",
                table: "OpsReportTrajectoryStations",
                column: "DlsId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_GravTotalUncertId",
                table: "OpsReportTrajectoryStations",
                column: "GravTotalUncertId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_GtfId",
                table: "OpsReportTrajectoryStations",
                column: "GtfId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_InclId",
                table: "OpsReportTrajectoryStations",
                column: "InclId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_MagTotalUncertId",
                table: "OpsReportTrajectoryStations",
                column: "MagTotalUncertId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_MatrixCovId",
                table: "OpsReportTrajectoryStations",
                column: "MatrixCovId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_MdDeltaId",
                table: "OpsReportTrajectoryStations",
                column: "MdDeltaId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_MdId",
                table: "OpsReportTrajectoryStations",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_MtfId",
                table: "OpsReportTrajectoryStations",
                column: "MtfId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_RateBuildId",
                table: "OpsReportTrajectoryStations",
                column: "RateBuildId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_RateTurnId",
                table: "OpsReportTrajectoryStations",
                column: "RateTurnId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_RawDataId",
                table: "OpsReportTrajectoryStations",
                column: "RawDataId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_TvdDeltaId",
                table: "OpsReportTrajectoryStations",
                column: "TvdDeltaId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_TvdId",
                table: "OpsReportTrajectoryStations",
                column: "TvdId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_ValidId",
                table: "OpsReportTrajectoryStations",
                column: "ValidId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportTrajectoryStations_VertSectId",
                table: "OpsReportTrajectoryStations",
                column: "VertSectId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportValids_GravTotalFieldCalcId",
                table: "OpsReportValids",
                column: "GravTotalFieldCalcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportValids_MagDipAngleCalcId",
                table: "OpsReportValids",
                column: "MagDipAngleCalcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportValids_MagTotalFieldCalcId",
                table: "OpsReportValids",
                column: "MagTotalFieldCalcId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_AmtPrecipId",
                table: "OpsReportWeathers",
                column: "AmtPrecipId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_AziCurrentSeaId",
                table: "OpsReportWeathers",
                column: "AziCurrentSeaId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_AziWaveId",
                table: "OpsReportWeathers",
                column: "AziWaveId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_AziWindId",
                table: "OpsReportWeathers",
                column: "AziWindId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_BarometricPressureId",
                table: "OpsReportWeathers",
                column: "BarometricPressureId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_CeilingCloudId",
                table: "OpsReportWeathers",
                column: "CeilingCloudId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_CurrentSeaId",
                table: "OpsReportWeathers",
                column: "CurrentSeaId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_HtWaveId",
                table: "OpsReportWeathers",
                column: "HtWaveId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_PeriodWaveId",
                table: "OpsReportWeathers",
                column: "PeriodWaveId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_TempSurfaceMnId",
                table: "OpsReportWeathers",
                column: "TempSurfaceMnId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_TempSurfaceMxId",
                table: "OpsReportWeathers",
                column: "TempSurfaceMxId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_TempWindChillId",
                table: "OpsReportWeathers",
                column: "TempWindChillId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_TempseaId",
                table: "OpsReportWeathers",
                column: "TempseaId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_VelWindId",
                table: "OpsReportWeathers",
                column: "VelWindId");

            migrationBuilder.CreateIndex(
                name: "IX_OpsReportWeathers_VisibilityId",
                table: "OpsReportWeathers",
                column: "VisibilityId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBopComponents_DiaCloseMnId",
                table: "RigBopComponents",
                column: "DiaCloseMnId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBopComponents_DiaCloseMxId",
                table: "RigBopComponents",
                column: "DiaCloseMxId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBopComponents_IdPassThruId",
                table: "RigBopComponents",
                column: "IdPassThruId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBopComponents_PresWorkId",
                table: "RigBopComponents",
                column: "PresWorkId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBopComponents_RigBopBopId",
                table: "RigBopComponents",
                column: "RigBopBopId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_CapAccFluidId",
                table: "RigBops",
                column: "CapAccFluidId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_DiaDiverterId",
                table: "RigBops",
                column: "DiaDiverterId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_IdBoosterLineId",
                table: "RigBops",
                column: "IdBoosterLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_IdChkLineId",
                table: "RigBops",
                column: "IdChkLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_IdKillLineId",
                table: "RigBops",
                column: "IdKillLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_IdSurfLineId",
                table: "RigBops",
                column: "IdSurfLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_LenBoosterLineId",
                table: "RigBops",
                column: "LenBoosterLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_LenChkLineId",
                table: "RigBops",
                column: "LenChkLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_LenKillLineId",
                table: "RigBops",
                column: "LenKillLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_LenSurfLineId",
                table: "RigBops",
                column: "LenSurfLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_OdBoosterLineId",
                table: "RigBops",
                column: "OdBoosterLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_OdChkLineId",
                table: "RigBops",
                column: "OdChkLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_OdKillLineId",
                table: "RigBops",
                column: "OdKillLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_OdSurfLineId",
                table: "RigBops",
                column: "OdSurfLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_PresAccOpRatingId",
                table: "RigBops",
                column: "PresAccOpRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_PresAccPreChargeId",
                table: "RigBops",
                column: "PresAccPreChargeId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_PresBopRatingId",
                table: "RigBops",
                column: "PresBopRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_PresChokeManifoldId",
                table: "RigBops",
                column: "PresChokeManifoldId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_PresWorkDiverterId",
                table: "RigBops",
                column: "PresWorkDiverterId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_SizeBopSysId",
                table: "RigBops",
                column: "SizeBopSysId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_SizeConnectionBopId",
                table: "RigBops",
                column: "SizeConnectionBopId");

            migrationBuilder.CreateIndex(
                name: "IX_RigBops_VolAccPreChargeId",
                table: "RigBops",
                column: "VolAccPreChargeId");

            migrationBuilder.CreateIndex(
                name: "IX_RigCentrifuges_CapFlowId",
                table: "RigCentrifuges",
                column: "CapFlowId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_AreaSeparatorFlowId",
                table: "RigDegassers",
                column: "AreaSeparatorFlowId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_CapBlowdownId",
                table: "RigDegassers",
                column: "CapBlowdownId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_CapFlowId",
                table: "RigDegassers",
                column: "CapFlowId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_CapGasSepId",
                table: "RigDegassers",
                column: "CapGasSepId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_HeightId",
                table: "RigDegassers",
                column: "HeightId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_HtMudSealId",
                table: "RigDegassers",
                column: "HtMudSealId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_IdInletId",
                table: "RigDegassers",
                column: "IdInletId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_IdUniqueId",
                table: "RigDegassers",
                column: "IdUniqueId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_IdVentLineId",
                table: "RigDegassers",
                column: "IdVentLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_LenId",
                table: "RigDegassers",
                column: "LenId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_LenVentLineId",
                table: "RigDegassers",
                column: "LenVentLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_PresRatingId",
                table: "RigDegassers",
                column: "PresRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_RigDegassers_TempRatingId",
                table: "RigDegassers",
                column: "TempRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_RigPits_CapMxId",
                table: "RigPits",
                column: "CapMxId");

            migrationBuilder.CreateIndex(
                name: "IX_RigPumps_DisplacementId",
                table: "RigPumps",
                column: "DisplacementId");

            migrationBuilder.CreateIndex(
                name: "IX_RigPumps_EffId",
                table: "RigPumps",
                column: "EffId");

            migrationBuilder.CreateIndex(
                name: "IX_RigPumps_IdLinerId",
                table: "RigPumps",
                column: "IdLinerId");

            migrationBuilder.CreateIndex(
                name: "IX_RigPumps_LenStrokeId",
                table: "RigPumps",
                column: "LenStrokeId");

            migrationBuilder.CreateIndex(
                name: "IX_RigPumps_OdRodId",
                table: "RigPumps",
                column: "OdRodId");

            migrationBuilder.CreateIndex(
                name: "IX_RigPumps_PowHydMxId",
                table: "RigPumps",
                column: "PowHydMxId");

            migrationBuilder.CreateIndex(
                name: "IX_RigPumps_PowMechMxId",
                table: "RigPumps",
                column: "PowMechMxId");

            migrationBuilder.CreateIndex(
                name: "IX_RigPumps_PresDampId",
                table: "RigPumps",
                column: "PresDampId");

            migrationBuilder.CreateIndex(
                name: "IX_RigPumps_PresMxId",
                table: "RigPumps",
                column: "PresMxId");

            migrationBuilder.CreateIndex(
                name: "IX_RigPumps_SpmMxId",
                table: "RigPumps",
                column: "SpmMxId");

            migrationBuilder.CreateIndex(
                name: "IX_RigPumps_VolDampId",
                table: "RigPumps",
                column: "VolDampId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_AirGapId",
                table: "Rigs",
                column: "AirGapId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_BopId",
                table: "Rigs",
                column: "BopId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_CapBulkCementId",
                table: "Rigs",
                column: "CapBulkCementId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_CapBulkMudId",
                table: "Rigs",
                column: "CapBulkMudId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_CapDrillWaterId",
                table: "Rigs",
                column: "CapDrillWaterId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_CapFuelId",
                table: "Rigs",
                column: "CapFuelId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_CapLiquidMudId",
                table: "Rigs",
                column: "CapLiquidMudId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_CapPotableWaterId",
                table: "Rigs",
                column: "CapPotableWaterId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_CapWindDerrickId",
                table: "Rigs",
                column: "CapWindDerrickId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_CentrifugeId",
                table: "Rigs",
                column: "CentrifugeId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_CommonDataRigCommonDataId",
                table: "Rigs",
                column: "CommonDataRigCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_DegasserId",
                table: "Rigs",
                column: "DegasserId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_HeaveMxId",
                table: "Rigs",
                column: "HeaveMxId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_HtDerrickId",
                table: "Rigs",
                column: "HtDerrickId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_HydrocycloneId",
                table: "Rigs",
                column: "HydrocycloneId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_MotionCompensationMnId",
                table: "Rigs",
                column: "MotionCompensationMnId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_MotionCompensationMxId",
                table: "Rigs",
                column: "MotionCompensationMxId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_PitUid",
                table: "Rigs",
                column: "PitUid");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_PowerDrawWorksId",
                table: "Rigs",
                column: "PowerDrawWorksId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_PumpUid",
                table: "Rigs",
                column: "PumpUid");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_RatingBlockId",
                table: "Rigs",
                column: "RatingBlockId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_RatingDerrickId",
                table: "Rigs",
                column: "RatingDerrickId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_RatingDrawWorksId",
                table: "Rigs",
                column: "RatingDrawWorksId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_RatingDrillDepthId",
                table: "Rigs",
                column: "RatingDrillDepthId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_RatingHkldId",
                table: "Rigs",
                column: "RatingHkldId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_RatingHookId",
                table: "Rigs",
                column: "RatingHookId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_RatingRotSystemId",
                table: "Rigs",
                column: "RatingRotSystemId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_RatingSwivelId",
                table: "Rigs",
                column: "RatingSwivelId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_RatingTqRotSysId",
                table: "Rigs",
                column: "RatingTqRotSysId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_RatingWaterDepthId",
                table: "Rigs",
                column: "RatingWaterDepthId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_RiserAngleLimitId",
                table: "Rigs",
                column: "RiserAngleLimitId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_RotSizeOpeningId",
                table: "Rigs",
                column: "RotSizeOpeningId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_ShakerUid",
                table: "Rigs",
                column: "ShakerUid");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_SizeDrillLineId",
                table: "Rigs",
                column: "SizeDrillLineId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_StrokeMotionCompensationId",
                table: "Rigs",
                column: "StrokeMotionCompensationId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_SurfaceEquipmentId",
                table: "Rigs",
                column: "SurfaceEquipmentId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_VarDeckLdMxId",
                table: "Rigs",
                column: "VarDeckLdMxId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_VdlStormId",
                table: "Rigs",
                column: "VdlStormId");

            migrationBuilder.CreateIndex(
                name: "IX_Rigs_WtBlockId",
                table: "Rigs",
                column: "WtBlockId");

            migrationBuilder.CreateIndex(
                name: "IX_RigShakers_CapFlowId",
                table: "RigShakers",
                column: "CapFlowId");

            migrationBuilder.CreateIndex(
                name: "IX_RigShakers_SizeMeshMnId",
                table: "RigShakers",
                column: "SizeMeshMnId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_HtFlangeId",
                table: "RigSurfaceEquipments",
                column: "HtFlangeId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_HtInjStkId",
                table: "RigSurfaceEquipments",
                column: "HtInjStkId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_HtTopStkId",
                table: "RigSurfaceEquipments",
                column: "HtTopStkId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_IdDischargeLineId",
                table: "RigSurfaceEquipments",
                column: "IdDischargeLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_IdHoseId",
                table: "RigSurfaceEquipments",
                column: "IdHoseId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_IdKellyId",
                table: "RigSurfaceEquipments",
                column: "IdKellyId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_IdStandpipeId",
                table: "RigSurfaceEquipments",
                column: "IdStandpipeId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_IdSwivelId",
                table: "RigSurfaceEquipments",
                column: "IdSwivelId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_IdTopStkId",
                table: "RigSurfaceEquipments",
                column: "IdTopStkId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_LenDischargeLineId",
                table: "RigSurfaceEquipments",
                column: "LenDischargeLineId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_LenHoseId",
                table: "RigSurfaceEquipments",
                column: "LenHoseId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_LenKellyId",
                table: "RigSurfaceEquipments",
                column: "LenKellyId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_LenReelId",
                table: "RigSurfaceEquipments",
                column: "LenReelId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_LenStandpipeId",
                table: "RigSurfaceEquipments",
                column: "LenStandpipeId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_LenSwivelId",
                table: "RigSurfaceEquipments",
                column: "LenSwivelId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_LenUmbilicalId",
                table: "RigSurfaceEquipments",
                column: "LenUmbilicalId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_OdCoreId",
                table: "RigSurfaceEquipments",
                column: "OdCoreId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_OdReelId",
                table: "RigSurfaceEquipments",
                column: "OdReelId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_OdUmbilicalId",
                table: "RigSurfaceEquipments",
                column: "OdUmbilicalId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_PresRatingId",
                table: "RigSurfaceEquipments",
                column: "PresRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_RigSurfaceEquipments_WidReelWrapId",
                table: "RigSurfaceEquipments",
                column: "WidReelWrapId");

            migrationBuilder.CreateIndex(
                name: "IX_Risks_DiaHoleUom",
                table: "Risks",
                column: "DiaHoleUom");

            migrationBuilder.CreateIndex(
                name: "IX_Risks_MdHoleEndId",
                table: "Risks",
                column: "MdHoleEndId");

            migrationBuilder.CreateIndex(
                name: "IX_Risks_MdHoleStartId",
                table: "Risks",
                column: "MdHoleStartId");

            migrationBuilder.CreateIndex(
                name: "IX_Risks_ObjectReferenceId",
                table: "Risks",
                column: "ObjectReferenceId");

            migrationBuilder.CreateIndex(
                name: "IX_Risks_TvdHoleEndId",
                table: "Risks",
                column: "TvdHoleEndId");

            migrationBuilder.CreateIndex(
                name: "IX_Risks_TvdHoleStartId",
                table: "Risks",
                column: "TvdHoleStartId");

            migrationBuilder.CreateIndex(
                name: "IX_SideWallCoreLithology_DensShaleUom",
                table: "SideWallCoreLithology",
                column: "DensShaleUom");

            migrationBuilder.CreateIndex(
                name: "IX_SideWallCoreLithology_LithPcUom",
                table: "SideWallCoreLithology",
                column: "LithPcUom");

            migrationBuilder.CreateIndex(
                name: "IX_SideWallCoreLithology_QualifierUid",
                table: "SideWallCoreLithology",
                column: "QualifierUid");

            migrationBuilder.CreateIndex(
                name: "IX_SideWallCoreQualifier_AbundanceUom",
                table: "SideWallCoreQualifier",
                column: "AbundanceUom");

            migrationBuilder.CreateIndex(
                name: "IX_SidewallCores_CommonDataSidewallCoresCommonDataid",
                table: "SidewallCores",
                column: "CommonDataSidewallCoresCommonDataid");

            migrationBuilder.CreateIndex(
                name: "IX_SidewallCores_DiaHoleUom",
                table: "SidewallCores",
                column: "DiaHoleUom");

            migrationBuilder.CreateIndex(
                name: "IX_SidewallCores_DiaPlugUom",
                table: "SidewallCores",
                column: "DiaPlugUom");

            migrationBuilder.CreateIndex(
                name: "IX_SidewallCores_MdCoreUom",
                table: "SidewallCores",
                column: "MdCoreUom");

            migrationBuilder.CreateIndex(
                name: "IX_SidewallCores_MdToolReferenceUom",
                table: "SidewallCores",
                column: "MdToolReferenceUom");

            migrationBuilder.CreateIndex(
                name: "IX_SidewallCores_SwcSampleUid",
                table: "SidewallCores",
                column: "SwcSampleUid");

            migrationBuilder.CreateIndex(
                name: "IX_SideWallCoreShow_NatFlorPcUom",
                table: "SideWallCoreShow",
                column: "NatFlorPcUom");

            migrationBuilder.CreateIndex(
                name: "IX_SideWallCoreShow_StainPcUom",
                table: "SideWallCoreShow",
                column: "StainPcUom");

            migrationBuilder.CreateIndex(
                name: "IX_SideWallCoreSwcSample_LithologyUid",
                table: "SideWallCoreSwcSample",
                column: "LithologyUid");

            migrationBuilder.CreateIndex(
                name: "IX_SideWallCoreSwcSample_MdUom",
                table: "SideWallCoreSwcSample",
                column: "MdUom");

            migrationBuilder.CreateIndex(
                name: "IX_SideWallCoreSwcSample_ShowSideWallCoreId",
                table: "SideWallCoreSwcSample",
                column: "ShowSideWallCoreId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobAdditives_MassId",
                table: "StimJobAdditives",
                column: "MassId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobAdditives_StageFluidId",
                table: "StimJobAdditives",
                column: "StageFluidId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobAdditives_VolumeId",
                table: "StimJobAdditives",
                column: "VolumeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AcidVolId",
                table: "StimJobFlowPaths",
                column: "AcidVolId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgAcidRateId",
                table: "StimJobFlowPaths",
                column: "AvgAcidRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgBaseFluidQualityId",
                table: "StimJobFlowPaths",
                column: "AvgBaseFluidQualityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgBaseFluidRateId",
                table: "StimJobFlowPaths",
                column: "AvgBaseFluidRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgCO2BaseFluidQualityId",
                table: "StimJobFlowPaths",
                column: "AvgCO2BaseFluidQualityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgCO2LiquidRateId",
                table: "StimJobFlowPaths",
                column: "AvgCO2LiquidRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgGelRateId",
                table: "StimJobFlowPaths",
                column: "AvgGelRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgHydraulicPowerId",
                table: "StimJobFlowPaths",
                column: "AvgHydraulicPowerId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgN2BaseFluidQualityId",
                table: "StimJobFlowPaths",
                column: "AvgN2BaseFluidQualityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgN2StdRateId",
                table: "StimJobFlowPaths",
                column: "AvgN2StdRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgOilRateId",
                table: "StimJobFlowPaths",
                column: "AvgOilRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgPmaxPacPresId",
                table: "StimJobFlowPaths",
                column: "AvgPmaxPacPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgPmaxWeaklinkPresId",
                table: "StimJobFlowPaths",
                column: "AvgPmaxWeaklinkPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgPropConcId",
                table: "StimJobFlowPaths",
                column: "AvgPropConcId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgSlurryPropConcId",
                table: "StimJobFlowPaths",
                column: "AvgSlurryPropConcId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgSlurryRateId",
                table: "StimJobFlowPaths",
                column: "AvgSlurryRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgTemperatureId",
                table: "StimJobFlowPaths",
                column: "AvgTemperatureId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgTreatPresId",
                table: "StimJobFlowPaths",
                column: "AvgTreatPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_AvgWellheadRateId",
                table: "StimJobFlowPaths",
                column: "AvgWellheadRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_BaseFluidBypassVolId",
                table: "StimJobFlowPaths",
                column: "BaseFluidBypassVolId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_BaseFluidVolId",
                table: "StimJobFlowPaths",
                column: "BaseFluidVolId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_BreakDownPresId",
                table: "StimJobFlowPaths",
                column: "BreakDownPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_FractureGradientId",
                table: "StimJobFlowPaths",
                column: "FractureGradientId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_GelVolId",
                table: "StimJobFlowPaths",
                column: "GelVolId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MassCO2Id",
                table: "StimJobFlowPaths",
                column: "MassCO2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MaxAcidRateId",
                table: "StimJobFlowPaths",
                column: "MaxAcidRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MaxCO2LiquidRateId",
                table: "StimJobFlowPaths",
                column: "MaxCO2LiquidRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MaxGelRateId",
                table: "StimJobFlowPaths",
                column: "MaxGelRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MaxN2StdRateId",
                table: "StimJobFlowPaths",
                column: "MaxN2StdRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MaxOilRateId",
                table: "StimJobFlowPaths",
                column: "MaxOilRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MaxPmaxPacPresId",
                table: "StimJobFlowPaths",
                column: "MaxPmaxPacPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MaxPmaxWeaklinkPresId",
                table: "StimJobFlowPaths",
                column: "MaxPmaxWeaklinkPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MaxPropConcId",
                table: "StimJobFlowPaths",
                column: "MaxPropConcId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MaxSlurryPropConcId",
                table: "StimJobFlowPaths",
                column: "MaxSlurryPropConcId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MaxSlurryRateId",
                table: "StimJobFlowPaths",
                column: "MaxSlurryRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MaxTreatmentPresId",
                table: "StimJobFlowPaths",
                column: "MaxTreatmentPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_MaxWellheadRateId",
                table: "StimJobFlowPaths",
                column: "MaxWellheadRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_OilVolId",
                table: "StimJobFlowPaths",
                column: "OilVolId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_PercentPadId",
                table: "StimJobFlowPaths",
                column: "PercentPadId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_PropMassId",
                table: "StimJobFlowPaths",
                column: "PropMassId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_ShutinPres10MinId",
                table: "StimJobFlowPaths",
                column: "ShutinPres10MinId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_ShutinPres15MinId",
                table: "StimJobFlowPaths",
                column: "ShutinPres15MinId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_ShutinPres5MinId",
                table: "StimJobFlowPaths",
                column: "ShutinPres5MinId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_SlurryVolId",
                table: "StimJobFlowPaths",
                column: "SlurryVolId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_StdVolN2Id",
                table: "StimJobFlowPaths",
                column: "StdVolN2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFlowPaths_WellheadVolStdVolN2Id",
                table: "StimJobFlowPaths",
                column: "WellheadVolStdVolN2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFluidEfficiencyTests_EndPdlDurationId",
                table: "StimJobFluidEfficiencyTests",
                column: "EndPdlDurationId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFluidEfficiencyTests_FluidEfficiencyId",
                table: "StimJobFluidEfficiencyTests",
                column: "FluidEfficiencyId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFluidEfficiencyTests_FractureCloseDurationId",
                table: "StimJobFluidEfficiencyTests",
                column: "FractureCloseDurationId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFluidEfficiencyTests_FractureClosePresId",
                table: "StimJobFluidEfficiencyTests",
                column: "FractureClosePresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFluidEfficiencyTests_FractureExtensionPresId",
                table: "StimJobFluidEfficiencyTests",
                column: "FractureExtensionPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFluidEfficiencyTests_FractureLengthId",
                table: "StimJobFluidEfficiencyTests",
                column: "FractureLengthId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFluidEfficiencyTests_FractureWidthId",
                table: "StimJobFluidEfficiencyTests",
                column: "FractureWidthId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFluidEfficiencyTests_NetPresId",
                table: "StimJobFluidEfficiencyTests",
                column: "NetPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFluidEfficiencyTests_PorePresId",
                table: "StimJobFluidEfficiencyTests",
                column: "PorePresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFluidEfficiencyTests_PseudoRadialPresId",
                table: "StimJobFluidEfficiencyTests",
                column: "PseudoRadialPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobFluidEfficiencyTests_ResidualPermeabilityId",
                table: "StimJobFluidEfficiencyTests",
                column: "ResidualPermeabilityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobEvents_FlowPathId",
                table: "StimJobJobEvents",
                column: "FlowPathId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_AveragePresId",
                table: "StimJobJobIntervals",
                column: "AveragePresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_AvgBaseFluidReturnRateId",
                table: "StimJobJobIntervals",
                column: "AvgBaseFluidReturnRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_AvgBottomholeRateId",
                table: "StimJobJobIntervals",
                column: "AvgBottomholeRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_AvgConductivityId",
                table: "StimJobJobIntervals",
                column: "AvgConductivityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_AvgFractureWidthId",
                table: "StimJobJobIntervals",
                column: "AvgFractureWidthId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_AvgPresCasingId",
                table: "StimJobJobIntervals",
                column: "AvgPresCasingId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_AvgPresTubingId",
                table: "StimJobJobIntervals",
                column: "AvgPresTubingId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_AvgProppantConcBottomholeId",
                table: "StimJobJobIntervals",
                column: "AvgProppantConcBottomholeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_AvgProppantConcSurfaceId",
                table: "StimJobJobIntervals",
                column: "AvgProppantConcSurfaceId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_AvgSlurryReturnRateId",
                table: "StimJobJobIntervals",
                column: "AvgSlurryReturnRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_BreakDownPresId",
                table: "StimJobJobIntervals",
                column: "BreakDownPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_ClosureDurationId",
                table: "StimJobJobIntervals",
                column: "ClosureDurationId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_ClosurePresId",
                table: "StimJobJobIntervals",
                column: "ClosurePresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_FinalFractureGradientId",
                table: "StimJobJobIntervals",
                column: "FinalFractureGradientId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_FormationProppantMassId",
                table: "StimJobJobIntervals",
                column: "FormationProppantMassId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_FractureGradientId",
                table: "StimJobJobIntervals",
                column: "FractureGradientId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_HhpOrderedCO2Id",
                table: "StimJobJobIntervals",
                column: "HhpOrderedCO2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_HhpOrderedFluidId",
                table: "StimJobJobIntervals",
                column: "HhpOrderedFluidId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_HhpUsedCO2Id",
                table: "StimJobJobIntervals",
                column: "HhpUsedCO2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_HhpUsedFluidId",
                table: "StimJobJobIntervals",
                column: "HhpUsedFluidId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_InitialShutinPresId",
                table: "StimJobJobIntervals",
                column: "InitialShutinPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_MaxFluidRateAnnulusId",
                table: "StimJobJobIntervals",
                column: "MaxFluidRateAnnulusId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_MaxFluidRateTubingId",
                table: "StimJobJobIntervals",
                column: "MaxFluidRateTubingId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_MaxPresAnnulusId",
                table: "StimJobJobIntervals",
                column: "MaxPresAnnulusId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_MaxPresTubingId",
                table: "StimJobJobIntervals",
                column: "MaxPresTubingId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_MaxProppantConcBottomholeId",
                table: "StimJobJobIntervals",
                column: "MaxProppantConcBottomholeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_MaxProppantConcSurfaceId",
                table: "StimJobJobIntervals",
                column: "MaxProppantConcSurfaceId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_MdFormationBottomId",
                table: "StimJobJobIntervals",
                column: "MdFormationBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_MdFormationTopId",
                table: "StimJobJobIntervals",
                column: "MdFormationTopId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_MdOpenHoleBottomId",
                table: "StimJobJobIntervals",
                column: "MdOpenHoleBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_MdOpenHoleTopId",
                table: "StimJobJobIntervals",
                column: "MdOpenHoleTopId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_NetPresId",
                table: "StimJobJobIntervals",
                column: "NetPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_OpenHoleDiameterId",
                table: "StimJobJobIntervals",
                column: "OpenHoleDiameterId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_PdatSessionId",
                table: "StimJobJobIntervals",
                column: "PdatSessionId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_PercentProppantPumpedId",
                table: "StimJobJobIntervals",
                column: "PercentProppantPumpedId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_PerfBallSizeId",
                table: "StimJobJobIntervals",
                column: "PerfBallSizeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_PerforationIntervalId",
                table: "StimJobJobIntervals",
                column: "PerforationIntervalId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_PerfproppantConcId",
                table: "StimJobJobIntervals",
                column: "PerfproppantConcId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_ReservoirIntervalId",
                table: "StimJobJobIntervals",
                column: "ReservoirIntervalId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_ScreenOutPresId",
                table: "StimJobJobIntervals",
                column: "ScreenOutPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_TotalCO2MassId",
                table: "StimJobJobIntervals",
                column: "TotalCO2MassId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_TotalFrictionPresLossId",
                table: "StimJobJobIntervals",
                column: "TotalFrictionPresLossId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_TotalN2StdVolumeId",
                table: "StimJobJobIntervals",
                column: "TotalN2StdVolumeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_TotalProppantMassId",
                table: "StimJobJobIntervals",
                column: "TotalProppantMassId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_TotalPumpTimeId",
                table: "StimJobJobIntervals",
                column: "TotalPumpTimeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_TotalVolumeId",
                table: "StimJobJobIntervals",
                column: "TotalVolumeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_TvdFormationBottomId",
                table: "StimJobJobIntervals",
                column: "TvdFormationBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_TvdFormationTopId",
                table: "StimJobJobIntervals",
                column: "TvdFormationTopId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_TvdOpenHoleBottomId",
                table: "StimJobJobIntervals",
                column: "TvdOpenHoleBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_TvdOpenHoleTopId",
                table: "StimJobJobIntervals",
                column: "TvdOpenHoleTopId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobIntervals_WellboreProppantMassId",
                table: "StimJobJobIntervals",
                column: "WellboreProppantMassId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AcidVolumeId",
                table: "StimJobJobStages",
                column: "AcidVolumeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AveragePresBottomholeId",
                table: "StimJobJobStages",
                column: "AveragePresBottomholeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AveragePresSurfaceId",
                table: "StimJobJobStages",
                column: "AveragePresSurfaceId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgAcidRateId",
                table: "StimJobJobStages",
                column: "AvgAcidRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgBaseFluidQualityId",
                table: "StimJobJobStages",
                column: "AvgBaseFluidQualityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgBaseFluidRateId",
                table: "StimJobJobStages",
                column: "AvgBaseFluidRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgCO2BaseFluidQualityId",
                table: "StimJobJobStages",
                column: "AvgCO2BaseFluidQualityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgCO2RateId",
                table: "StimJobJobStages",
                column: "AvgCO2RateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgGelRateId",
                table: "StimJobJobStages",
                column: "AvgGelRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgHydraulicPowerId",
                table: "StimJobJobStages",
                column: "AvgHydraulicPowerId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgInternalPhaseFractionId",
                table: "StimJobJobStages",
                column: "AvgInternalPhaseFractionId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgN2BaseFluidQualityId",
                table: "StimJobJobStages",
                column: "AvgN2BaseFluidQualityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgN2StdRateId",
                table: "StimJobJobStages",
                column: "AvgN2StdRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgOilRateId",
                table: "StimJobJobStages",
                column: "AvgOilRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgPropConcId",
                table: "StimJobJobStages",
                column: "AvgPropConcId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgProppantConcBottomholeId",
                table: "StimJobJobStages",
                column: "AvgProppantConcBottomholeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgProppantConcSurfaceId",
                table: "StimJobJobStages",
                column: "AvgProppantConcSurfaceId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgPumpRateBottomholeId",
                table: "StimJobJobStages",
                column: "AvgPumpRateBottomholeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgRateSurfaceCO2Id",
                table: "StimJobJobStages",
                column: "AvgRateSurfaceCO2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgRateSurfaceLiquidId",
                table: "StimJobJobStages",
                column: "AvgRateSurfaceLiquidId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgSlurryPropConcId",
                table: "StimJobJobStages",
                column: "AvgSlurryPropConcId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgSlurryRateId",
                table: "StimJobJobStages",
                column: "AvgSlurryRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgStdRateSurfaceN2Id",
                table: "StimJobJobStages",
                column: "AvgStdRateSurfaceN2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgTemperatureId",
                table: "StimJobJobStages",
                column: "AvgTemperatureId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_AvgWellheadRateId",
                table: "StimJobJobStages",
                column: "AvgWellheadRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_BaseFluidBypassVolId",
                table: "StimJobJobStages",
                column: "BaseFluidBypassVolId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_BaseFluidVolId",
                table: "StimJobJobStages",
                column: "BaseFluidVolId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_EndFoamRateCO2Id",
                table: "StimJobJobStages",
                column: "EndFoamRateCO2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_EndFoamRateN2Id",
                table: "StimJobJobStages",
                column: "EndFoamRateN2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_EndPresBottomholeId",
                table: "StimJobJobStages",
                column: "EndPresBottomholeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_EndPresSurfaceId",
                table: "StimJobJobStages",
                column: "EndPresSurfaceId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_EndProppantConcBottomholeId",
                table: "StimJobJobStages",
                column: "EndProppantConcBottomholeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_EndProppantConcSurfaceId",
                table: "StimJobJobStages",
                column: "EndProppantConcSurfaceId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_EndPumpRateBottomholeId",
                table: "StimJobJobStages",
                column: "EndPumpRateBottomholeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_EndRateSurfaceCO2Id",
                table: "StimJobJobStages",
                column: "EndRateSurfaceCO2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_EndRateSurfaceLiquidId",
                table: "StimJobJobStages",
                column: "EndRateSurfaceLiquidId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_EndStdRateSurfaceN2Id",
                table: "StimJobJobStages",
                column: "EndStdRateSurfaceN2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_FlowPathId",
                table: "StimJobJobStages",
                column: "FlowPathId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_FluidVolBaseId",
                table: "StimJobJobStages",
                column: "FluidVolBaseId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_FluidVolSlurryId",
                table: "StimJobJobStages",
                column: "FluidVolSlurryId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_GelVolumeId",
                table: "StimJobJobStages",
                column: "GelVolumeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_MaxAcidRateId",
                table: "StimJobJobStages",
                column: "MaxAcidRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_MaxCO2LiquidRateId",
                table: "StimJobJobStages",
                column: "MaxCO2LiquidRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_MaxGelRateId",
                table: "StimJobJobStages",
                column: "MaxGelRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_MaxN2StdRateId",
                table: "StimJobJobStages",
                column: "MaxN2StdRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_MaxOilRateId",
                table: "StimJobJobStages",
                column: "MaxOilRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_MaxPmaxPacPresId",
                table: "StimJobJobStages",
                column: "MaxPmaxPacPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_MaxPmaxWeaklinkPresId",
                table: "StimJobJobStages",
                column: "MaxPmaxWeaklinkPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_MaxPresId",
                table: "StimJobJobStages",
                column: "MaxPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_MaxPropConcId",
                table: "StimJobJobStages",
                column: "MaxPropConcId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_MaxSlurryPropConcId",
                table: "StimJobJobStages",
                column: "MaxSlurryPropConcId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_MaxSlurryRateId",
                table: "StimJobJobStages",
                column: "MaxSlurryRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_MaxWellheadRateId",
                table: "StimJobJobStages",
                column: "MaxWellheadRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_OilVolumeId",
                table: "StimJobJobStages",
                column: "OilVolumeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_ProppantMassId",
                table: "StimJobJobStages",
                column: "ProppantMassId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_ProppantMassWellHeadId",
                table: "StimJobJobStages",
                column: "ProppantMassWellHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_PumpTimeId",
                table: "StimJobJobStages",
                column: "PumpTimeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_SlurryRateBeginId",
                table: "StimJobJobStages",
                column: "SlurryRateBeginId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_SlurryRateEndId",
                table: "StimJobJobStages",
                column: "SlurryRateEndId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_SlurryVolId",
                table: "StimJobJobStages",
                column: "SlurryVolId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_StageFluidId",
                table: "StimJobJobStages",
                column: "StageFluidId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_StartFoamRateCO2Id",
                table: "StimJobJobStages",
                column: "StartFoamRateCO2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_StartFoamRateN2Id",
                table: "StimJobJobStages",
                column: "StartFoamRateN2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_StartPresBottomholeId",
                table: "StimJobJobStages",
                column: "StartPresBottomholeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_StartPresSurfaceId",
                table: "StimJobJobStages",
                column: "StartPresSurfaceId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_StartProppantConcBottomholeId",
                table: "StimJobJobStages",
                column: "StartProppantConcBottomholeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_StartProppantConcSurfaceId",
                table: "StimJobJobStages",
                column: "StartProppantConcSurfaceId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_StartPumpRateBottomholeId",
                table: "StimJobJobStages",
                column: "StartPumpRateBottomholeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_StartRateSurfaceCO2Id",
                table: "StimJobJobStages",
                column: "StartRateSurfaceCO2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_StartRateSurfaceLiquidId",
                table: "StimJobJobStages",
                column: "StartRateSurfaceLiquidId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_StartStdRateSurfaceN2Id",
                table: "StimJobJobStages",
                column: "StartStdRateSurfaceN2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobJobStages_WellheadVolStdVolN2Id",
                table: "StimJobJobStages",
                column: "WellheadVolStdVolN2Id");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_AvgBottomholeTreatmentPresId",
                table: "StimJobPdatSessions",
                column: "AvgBottomholeTreatmentPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_AvgBottomholeTreatmentRateId",
                table: "StimJobPdatSessions",
                column: "AvgBottomholeTreatmentRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_BaseFluidVolId",
                table: "StimJobPdatSessions",
                column: "BaseFluidVolId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_BottomholeHydrostaticPresId",
                table: "StimJobPdatSessions",
                column: "BottomholeHydrostaticPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_BottomholeTemperatureId",
                table: "StimJobPdatSessions",
                column: "BottomholeTemperatureId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_BubblePointPresId",
                table: "StimJobPdatSessions",
                column: "BubblePointPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_FluidCompressibilityId",
                table: "StimJobPdatSessions",
                column: "FluidCompressibilityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_FluidDensityId",
                table: "StimJobPdatSessions",
                column: "FluidDensityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_FluidEfficiencyId",
                table: "StimJobPdatSessions",
                column: "FluidEfficiencyId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_FluidEfficiencyTestId",
                table: "StimJobPdatSessions",
                column: "FluidEfficiencyTestId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_FluidSpecificHeatId",
                table: "StimJobPdatSessions",
                column: "FluidSpecificHeatId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_FluidThermalConductivityId",
                table: "StimJobPdatSessions",
                column: "FluidThermalConductivityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_FluidThermalExpansionCoefficientId",
                table: "StimJobPdatSessions",
                column: "FluidThermalExpansionCoefficientId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_FoamQualityId",
                table: "StimJobPdatSessions",
                column: "FoamQualityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_FractureClosePresId",
                table: "StimJobPdatSessions",
                column: "FractureClosePresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_FrictionPresId",
                table: "StimJobPdatSessions",
                column: "FrictionPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_InitialShutinPresId",
                table: "StimJobPdatSessions",
                column: "InitialShutinPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_MdBottomholeId",
                table: "StimJobPdatSessions",
                column: "MdBottomholeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_MdMidPerforationId",
                table: "StimJobPdatSessions",
                column: "MdMidPerforationId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_MdSurfaceId",
                table: "StimJobPdatSessions",
                column: "MdSurfaceId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_PercentPadId",
                table: "StimJobPdatSessions",
                column: "PercentPadId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_PorePresId",
                table: "StimJobPdatSessions",
                column: "PorePresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_PumpDurationId",
                table: "StimJobPdatSessions",
                column: "PumpDurationId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_PumpFlowBackTestId",
                table: "StimJobPdatSessions",
                column: "PumpFlowBackTestId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_ReservoirTotalCompressibilityId",
                table: "StimJobPdatSessions",
                column: "ReservoirTotalCompressibilityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_StepDownTestId",
                table: "StimJobPdatSessions",
                column: "StepDownTestId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_StepRateTestId",
                table: "StimJobPdatSessions",
                column: "StepRateTestId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_SurfaceFluidTemperatureId",
                table: "StimJobPdatSessions",
                column: "SurfaceFluidTemperatureId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_SurfaceTemperatureId",
                table: "StimJobPdatSessions",
                column: "SurfaceTemperatureId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_TvdMidPerforationId",
                table: "StimJobPdatSessions",
                column: "TvdMidPerforationId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPdatSessions_WellboreVolumeId",
                table: "StimJobPdatSessions",
                column: "WellboreVolumeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPerforationIntervals_DensityPerforationId",
                table: "StimJobPerforationIntervals",
                column: "DensityPerforationId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPerforationIntervals_FrictionPresId",
                table: "StimJobPerforationIntervals",
                column: "FrictionPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPerforationIntervals_MdPerforationsBottomId",
                table: "StimJobPerforationIntervals",
                column: "MdPerforationsBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPerforationIntervals_MdPerforationsTopId",
                table: "StimJobPerforationIntervals",
                column: "MdPerforationsTopId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPerforationIntervals_PhasingPerforationId",
                table: "StimJobPerforationIntervals",
                column: "PhasingPerforationId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPerforationIntervals_SizeId",
                table: "StimJobPerforationIntervals",
                column: "SizeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPerforationIntervals_TvdPerforationsBottomId",
                table: "StimJobPerforationIntervals",
                column: "TvdPerforationsBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPerforationIntervals_TvdPerforationsTopId",
                table: "StimJobPerforationIntervals",
                column: "TvdPerforationsTopId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPresMeasurements_BottomholeRateId",
                table: "StimJobPresMeasurements",
                column: "BottomholeRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPresMeasurements_PresId",
                table: "StimJobPresMeasurements",
                column: "PresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPresMeasurements_StepRateTestId",
                table: "StimJobPresMeasurements",
                column: "StepRateTestId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobProppants_WeightId",
                table: "StimJobProppants",
                column: "WeightId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPumpFlowBackTests_FractureCloseDurationId",
                table: "StimJobPumpFlowBackTests",
                column: "FractureCloseDurationId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobPumpFlowBackTests_FractureClosePresId",
                table: "StimJobPumpFlowBackTests",
                column: "FractureClosePresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_FormationPermeabilityId",
                table: "StimJobReservoirIntervals",
                column: "FormationPermeabilityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_FormationPorosityId",
                table: "StimJobReservoirIntervals",
                column: "FormationPorosityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_GrossPayThicknessId",
                table: "StimJobReservoirIntervals",
                column: "GrossPayThicknessId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_LithFormationPermeabilityId",
                table: "StimJobReservoirIntervals",
                column: "LithFormationPermeabilityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_LithNetPayThicknessId",
                table: "StimJobReservoirIntervals",
                column: "LithNetPayThicknessId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_LithPoissonsRatioId",
                table: "StimJobReservoirIntervals",
                column: "LithPoissonsRatioId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_LithPorePresId",
                table: "StimJobReservoirIntervals",
                column: "LithPorePresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_LithYoungsModulusId",
                table: "StimJobReservoirIntervals",
                column: "LithYoungsModulusId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_MdGrossPayBottomId",
                table: "StimJobReservoirIntervals",
                column: "MdGrossPayBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_MdGrossPayTopId",
                table: "StimJobReservoirIntervals",
                column: "MdGrossPayTopId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_MdLithBottomId",
                table: "StimJobReservoirIntervals",
                column: "MdLithBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_MdLithTopId",
                table: "StimJobReservoirIntervals",
                column: "MdLithTopId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_NetPayFluidCompressibilityId",
                table: "StimJobReservoirIntervals",
                column: "NetPayFluidCompressibilityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_NetPayFluidViscosityId",
                table: "StimJobReservoirIntervals",
                column: "NetPayFluidViscosityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_NetPayFormationPermeabilityId",
                table: "StimJobReservoirIntervals",
                column: "NetPayFormationPermeabilityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_NetPayFormationPorosityId",
                table: "StimJobReservoirIntervals",
                column: "NetPayFormationPorosityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_NetPayPorePresId",
                table: "StimJobReservoirIntervals",
                column: "NetPayPorePresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobReservoirIntervals_NetPayThicknessId",
                table: "StimJobReservoirIntervals",
                column: "NetPayThicknessId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_AvgJobPresId",
                table: "StimJobs",
                column: "AvgJobPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_BottomholeStaticTemperatureId",
                table: "StimJobs",
                column: "BottomholeStaticTemperatureId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_FlowBackPresId",
                table: "StimJobs",
                column: "FlowBackPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_FlowBackRateId",
                table: "StimJobs",
                column: "FlowBackRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_FlowBackVolumeId",
                table: "StimJobs",
                column: "FlowBackVolumeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_FluidEfficiencyId",
                table: "StimJobs",
                column: "FluidEfficiencyId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_HhpOrderedId",
                table: "StimJobs",
                column: "HhpOrderedId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_HhpUsedId",
                table: "StimJobs",
                column: "HhpUsedId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_JobIntervalId",
                table: "StimJobs",
                column: "JobIntervalId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_MaxFluidRateId",
                table: "StimJobs",
                column: "MaxFluidRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_MaxJobPresId",
                table: "StimJobs",
                column: "MaxJobPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_TotalCO2MassId",
                table: "StimJobs",
                column: "TotalCO2MassId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_TotalJobVolumeId",
                table: "StimJobs",
                column: "TotalJobVolumeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_TotalN2StdVolumeId",
                table: "StimJobs",
                column: "TotalN2StdVolumeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_TotalProppantWtId",
                table: "StimJobs",
                column: "TotalProppantWtId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_TotalPumpTimeId",
                table: "StimJobs",
                column: "TotalPumpTimeId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobs_TreatingBottomholeTemperatureId",
                table: "StimJobs",
                column: "TreatingBottomholeTemperatureId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobShutinPress_PresId",
                table: "StimJobShutinPress",
                column: "PresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobShutinPress_TimeAfterShutinId",
                table: "StimJobShutinPress",
                column: "TimeAfterShutinId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobStageFluids_FluidVolId",
                table: "StimJobStageFluids",
                column: "FluidVolId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobStageFluids_ProppantId",
                table: "StimJobStageFluids",
                column: "ProppantId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobStepDownTests_BottomholeFluidDensityId",
                table: "StimJobStepDownTests",
                column: "BottomholeFluidDensityId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobStepDownTests_DiameterEntryHolePipeFrictionId",
                table: "StimJobStepDownTests",
                column: "DiameterEntryHolePipeFrictionId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobStepDownTests_InitialShutinPresId",
                table: "StimJobStepDownTests",
                column: "InitialShutinPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobStepRateTests_FractureExtensionPresId",
                table: "StimJobStepRateTests",
                column: "FractureExtensionPresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobSteps_BottomholeRateId",
                table: "StimJobSteps",
                column: "BottomholeRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobSteps_EntryFrictionId",
                table: "StimJobSteps",
                column: "EntryFrictionId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobSteps_NearWellboreFrictionId",
                table: "StimJobSteps",
                column: "NearWellboreFrictionId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobSteps_PerfFrictionId",
                table: "StimJobSteps",
                column: "PerfFrictionId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobSteps_PipeFrictionId",
                table: "StimJobSteps",
                column: "PipeFrictionId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobSteps_PresId",
                table: "StimJobSteps",
                column: "PresId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobSteps_StepDownTestId",
                table: "StimJobSteps",
                column: "StepDownTestId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobTotalProppantUsages_JobIntervalId",
                table: "StimJobTotalProppantUsages",
                column: "JobIntervalId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobTotalProppantUsages_MassId",
                table: "StimJobTotalProppantUsages",
                column: "MassId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobTubulars_FlowPathId",
                table: "StimJobTubulars",
                column: "FlowPathId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobTubulars_IdId",
                table: "StimJobTubulars",
                column: "IdId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobTubulars_MdBottomId",
                table: "StimJobTubulars",
                column: "MdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobTubulars_MdTopId",
                table: "StimJobTubulars",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobTubulars_OdId",
                table: "StimJobTubulars",
                column: "OdId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobTubulars_VolumeFactorId",
                table: "StimJobTubulars",
                column: "VolumeFactorId");

            migrationBuilder.CreateIndex(
                name: "IX_StimJobTubulars_WeightId",
                table: "StimJobTubulars",
                column: "WeightId");

            migrationBuilder.CreateIndex(
                name: "IX_SurveyPrograms_CommonDataSurveyProgramCommonDataId",
                table: "SurveyPrograms",
                column: "CommonDataSurveyProgramCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_SurveyProgramSurveySection_FrequencyMxId",
                table: "SurveyProgramSurveySection",
                column: "FrequencyMxId");

            migrationBuilder.CreateIndex(
                name: "IX_SurveyProgramSurveySection_MdEndId",
                table: "SurveyProgramSurveySection",
                column: "MdEndId");

            migrationBuilder.CreateIndex(
                name: "IX_SurveyProgramSurveySection_MdStartId",
                table: "SurveyProgramSurveySection",
                column: "MdStartId");

            migrationBuilder.CreateIndex(
                name: "IX_SurveyProgramSurveySection_SurveyProgramId",
                table: "SurveyProgramSurveySection",
                column: "SurveyProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_TargetLocations_LatitudeId",
                table: "TargetLocations",
                column: "LatitudeId");

            migrationBuilder.CreateIndex(
                name: "IX_TargetLocations_LongitudeId",
                table: "TargetLocations",
                column: "LongitudeId");

            migrationBuilder.CreateIndex(
                name: "IX_TargetLocations_ProjectedXId",
                table: "TargetLocations",
                column: "ProjectedXId");

            migrationBuilder.CreateIndex(
                name: "IX_TargetLocations_ProjectedYId",
                table: "TargetLocations",
                column: "ProjectedYId");

            migrationBuilder.CreateIndex(
                name: "IX_TargetLocations_TargetId",
                table: "TargetLocations",
                column: "TargetId");

            migrationBuilder.CreateIndex(
                name: "IX_TargetLocations_TargetSectionId",
                table: "TargetLocations",
                column: "TargetSectionId");

            migrationBuilder.CreateIndex(
                name: "IX_TargetLocations_WellCRSId",
                table: "TargetLocations",
                column: "WellCRSId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_CommonDataTargetCommonDataId",
                table: "Targets",
                column: "CommonDataTargetCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_DipId",
                table: "Targets",
                column: "DipId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_DispEwCenterId",
                table: "Targets",
                column: "DispEwCenterId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_DispEwOffsetId",
                table: "Targets",
                column: "DispEwOffsetId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_DispEwSectOrigId",
                table: "Targets",
                column: "DispEwSectOrigId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_DispNsCenterId",
                table: "Targets",
                column: "DispNsCenterId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_DispNsOffsetId",
                table: "Targets",
                column: "DispNsOffsetId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_DispNsSectOrigId",
                table: "Targets",
                column: "DispNsSectOrigId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_LenMajorAxisId",
                table: "Targets",
                column: "LenMajorAxisId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_RotationId",
                table: "Targets",
                column: "RotationId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_StrikeId",
                table: "Targets",
                column: "StrikeId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_ThickAboveId",
                table: "Targets",
                column: "ThickAboveId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_ThickBelowId",
                table: "Targets",
                column: "ThickBelowId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_TvdId",
                table: "Targets",
                column: "TvdId");

            migrationBuilder.CreateIndex(
                name: "IX_Targets_WidMinorAxisId",
                table: "Targets",
                column: "WidMinorAxisId");

            migrationBuilder.CreateIndex(
                name: "IX_TargetSections_AngleArcId",
                table: "TargetSections",
                column: "AngleArcId");

            migrationBuilder.CreateIndex(
                name: "IX_TargetSections_LenRadiusId",
                table: "TargetSections",
                column: "LenRadiusId");

            migrationBuilder.CreateIndex(
                name: "IX_TargetSections_TargetId",
                table: "TargetSections",
                column: "TargetId");

            migrationBuilder.CreateIndex(
                name: "IX_TargetSections_ThickAboveId",
                table: "TargetSections",
                column: "ThickAboveId");

            migrationBuilder.CreateIndex(
                name: "IX_TargetSections_ThickBelowId",
                table: "TargetSections",
                column: "ThickBelowId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModelErrorTermValues_TermId",
                table: "ToolErrorModelErrorTermValues",
                column: "TermId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModelErrorTermValues_ToolErrorModelId",
                table: "ToolErrorModelErrorTermValues",
                column: "ToolErrorModelId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModelErrorTermValues_ValueId",
                table: "ToolErrorModelErrorTermValues",
                column: "ValueId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModelModelParameter_GyroInitializationId",
                table: "ToolErrorModelModelParameter",
                column: "GyroInitializationId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModelModelParameter_GyroReinitializationDistanceId",
                table: "ToolErrorModelModelParameter",
                column: "GyroReinitializationDistanceId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModelOperatingConditions_MaxId",
                table: "ToolErrorModelOperatingConditions",
                column: "MaxId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModelOperatingConditions_MinId",
                table: "ToolErrorModelOperatingConditions",
                column: "MinId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModelOperatingIntervals_EndId",
                table: "ToolErrorModelOperatingIntervals",
                column: "EndId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModelOperatingIntervals_SpeedId",
                table: "ToolErrorModelOperatingIntervals",
                column: "SpeedId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModelOperatingIntervals_StartId",
                table: "ToolErrorModelOperatingIntervals",
                column: "StartId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModelOperatingIntervals_ToolErrorModelId",
                table: "ToolErrorModelOperatingIntervals",
                column: "ToolErrorModelId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModels_AuthorizationId",
                table: "ToolErrorModels",
                column: "AuthorizationId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModels_CommonDataToolErrorModelCommonDataId",
                table: "ToolErrorModels",
                column: "CommonDataToolErrorModelCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModels_ModelParametersId",
                table: "ToolErrorModels",
                column: "ModelParametersId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModels_OperatingConditionId",
                table: "ToolErrorModels",
                column: "OperatingConditionId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorModels_UseErrorTermSetId",
                table: "ToolErrorModels",
                column: "UseErrorTermSetId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorTermSetErrorCoefficients_ErrorTermId",
                table: "ToolErrorTermSetErrorCoefficients",
                column: "ErrorTermId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorTermSetErrorTerms_ToolErrorTermSetId",
                table: "ToolErrorTermSetErrorTerms",
                column: "ToolErrorTermSetId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorTermSetFunctions_NomenclatureId",
                table: "ToolErrorTermSetFunctions",
                column: "NomenclatureId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorTermSetNomenclatures_ConstantId",
                table: "ToolErrorTermSetNomenclatures",
                column: "ConstantId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorTermSetParameters_NomenclatureId",
                table: "ToolErrorTermSetParameters",
                column: "NomenclatureId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorTermSets_AuthorizationId",
                table: "ToolErrorTermSets",
                column: "AuthorizationId");

            migrationBuilder.CreateIndex(
                name: "IX_ToolErrorTermSets_NomenclatureId",
                table: "ToolErrorTermSets",
                column: "NomenclatureId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryCorUseds_DirSensorOffsetId",
                table: "TrajectoryCorUseds",
                column: "DirSensorOffsetId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryCorUseds_GravAxialAccelCorId",
                table: "TrajectoryCorUseds",
                column: "GravAxialAccelCorId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryCorUseds_GravTran1AccelCorId",
                table: "TrajectoryCorUseds",
                column: "GravTran1AccelCorId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryCorUseds_GravTran2AccelCorId",
                table: "TrajectoryCorUseds",
                column: "GravTran2AccelCorId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryCorUseds_MagAxialDrlstrCorId",
                table: "TrajectoryCorUseds",
                column: "MagAxialDrlstrCorId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryCorUseds_MagTran1DrlstrCorId",
                table: "TrajectoryCorUseds",
                column: "MagTran1DrlstrCorId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryCorUseds_MagTran2DrlstrCorId",
                table: "TrajectoryCorUseds",
                column: "MagTran2DrlstrCorId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryCorUseds_SagAziCorId",
                table: "TrajectoryCorUseds",
                column: "SagAziCorId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryCorUseds_SagIncCorId",
                table: "TrajectoryCorUseds",
                column: "SagIncCorId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryCorUseds_StnGridCorUsedId",
                table: "TrajectoryCorUseds",
                column: "StnGridCorUsedId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryCorUseds_StnMagDeclUsedId",
                table: "TrajectoryCorUseds",
                column: "StnMagDeclUsedId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryLocations_EastingId",
                table: "TrajectoryLocations",
                column: "EastingId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryLocations_LatitudeId",
                table: "TrajectoryLocations",
                column: "LatitudeId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryLocations_LongitudeId",
                table: "TrajectoryLocations",
                column: "LongitudeId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryLocations_NorthingId",
                table: "TrajectoryLocations",
                column: "NorthingId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryLocations_TrajectoryStationId",
                table: "TrajectoryLocations",
                column: "TrajectoryStationId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryLocations_WellCRSUidRef",
                table: "TrajectoryLocations",
                column: "WellCRSUidRef");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryMatrixCovs_BiasEId",
                table: "TrajectoryMatrixCovs",
                column: "BiasEId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryMatrixCovs_BiasNDtId",
                table: "TrajectoryMatrixCovs",
                column: "BiasNDtId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryMatrixCovs_BiasVertId",
                table: "TrajectoryMatrixCovs",
                column: "BiasVertId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryMatrixCovs_VarianceEEId",
                table: "TrajectoryMatrixCovs",
                column: "VarianceEEId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryMatrixCovs_VarianceEVertId",
                table: "TrajectoryMatrixCovs",
                column: "VarianceEVertId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryMatrixCovs_VarianceNEId",
                table: "TrajectoryMatrixCovs",
                column: "VarianceNEId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryMatrixCovs_VarianceNNId",
                table: "TrajectoryMatrixCovs",
                column: "VarianceNNId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryMatrixCovs_VarianceNVertId",
                table: "TrajectoryMatrixCovs",
                column: "VarianceNVertId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryMatrixCovs_VarianceVertVertId",
                table: "TrajectoryMatrixCovs",
                column: "VarianceVertVertId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryRawDatas_GravAxialRawId",
                table: "TrajectoryRawDatas",
                column: "GravAxialRawId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryRawDatas_GravTran1RawId",
                table: "TrajectoryRawDatas",
                column: "GravTran1RawId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryRawDatas_GravTran2RawId",
                table: "TrajectoryRawDatas",
                column: "GravTran2RawId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryRawDatas_MagAxialRawId",
                table: "TrajectoryRawDatas",
                column: "MagAxialRawId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryRawDatas_MagTran1RawId",
                table: "TrajectoryRawDatas",
                column: "MagTran1RawId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryRawDatas_MagTran2RawId",
                table: "TrajectoryRawDatas",
                column: "MagTran2RawId");

            migrationBuilder.CreateIndex(
                name: "IX_Trajectorys_AziVertSectId",
                table: "Trajectorys",
                column: "AziVertSectId");

            migrationBuilder.CreateIndex(
                name: "IX_Trajectorys_CommonDataTrajectoryCommonDataId",
                table: "Trajectorys",
                column: "CommonDataTrajectoryCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Trajectorys_DispEwVertSectOrigId",
                table: "Trajectorys",
                column: "DispEwVertSectOrigId");

            migrationBuilder.CreateIndex(
                name: "IX_Trajectorys_DispNsVertSectOrigId",
                table: "Trajectorys",
                column: "DispNsVertSectOrigId");

            migrationBuilder.CreateIndex(
                name: "IX_Trajectorys_GridCorUsedId",
                table: "Trajectorys",
                column: "GridCorUsedId");

            migrationBuilder.CreateIndex(
                name: "IX_Trajectorys_MagDeclUsedId",
                table: "Trajectorys",
                column: "MagDeclUsedId");

            migrationBuilder.CreateIndex(
                name: "IX_Trajectorys_MdMnId",
                table: "Trajectorys",
                column: "MdMnId");

            migrationBuilder.CreateIndex(
                name: "IX_Trajectorys_MdMxId",
                table: "Trajectorys",
                column: "MdMxId");

            migrationBuilder.CreateIndex(
                name: "IX_Trajectorys_TrajectoryStationId",
                table: "Trajectorys",
                column: "TrajectoryStationId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_AziId",
                table: "TrajectoryStations",
                column: "AziId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_CorUsedTrajectoryCorUsedId",
                table: "TrajectoryStations",
                column: "CorUsedTrajectoryCorUsedId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_DipAngleUncertId",
                table: "TrajectoryStations",
                column: "DipAngleUncertId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_DispEwId",
                table: "TrajectoryStations",
                column: "DispEwId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_DispNsId",
                table: "TrajectoryStations",
                column: "DispNsId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_DlsId",
                table: "TrajectoryStations",
                column: "DlsId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_GravTotalUncertId",
                table: "TrajectoryStations",
                column: "GravTotalUncertId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_GtfId",
                table: "TrajectoryStations",
                column: "GtfId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_InclId",
                table: "TrajectoryStations",
                column: "InclId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_MagTotalUncertId",
                table: "TrajectoryStations",
                column: "MagTotalUncertId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_MatrixCovId",
                table: "TrajectoryStations",
                column: "MatrixCovId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_MdDeltaId",
                table: "TrajectoryStations",
                column: "MdDeltaId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_MdId",
                table: "TrajectoryStations",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_MtfId",
                table: "TrajectoryStations",
                column: "MtfId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_RateBuildId",
                table: "TrajectoryStations",
                column: "RateBuildId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_RateTurnId",
                table: "TrajectoryStations",
                column: "RateTurnId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_RawDataId",
                table: "TrajectoryStations",
                column: "RawDataId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_TvdDeltaId",
                table: "TrajectoryStations",
                column: "TvdDeltaId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_TvdId",
                table: "TrajectoryStations",
                column: "TvdId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_ValidId",
                table: "TrajectoryStations",
                column: "ValidId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryStations_VertSectId",
                table: "TrajectoryStations",
                column: "VertSectId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryValids_GravTotalFieldCalcId",
                table: "TrajectoryValids",
                column: "GravTotalFieldCalcId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryValids_MagDipAngleCalcId",
                table: "TrajectoryValids",
                column: "MagDipAngleCalcId");

            migrationBuilder.CreateIndex(
                name: "IX_TrajectoryValids_MagTotalFieldCalcId",
                table: "TrajectoryValids",
                column: "MagTotalFieldCalcId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularBend_AngleId",
                table: "TubularBend",
                column: "AngleId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularBend_DistBendBotId",
                table: "TubularBend",
                column: "DistBendBotId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularBitRecord_CostId",
                table: "TubularBitRecord",
                column: "CostId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularBitRecord_DiaBitId",
                table: "TubularBitRecord",
                column: "DiaBitId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularBitRecord_DiaPassThruId",
                table: "TubularBitRecord",
                column: "DiaPassThruId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularBitRecord_DiaPilotId",
                table: "TubularBitRecord",
                column: "DiaPilotId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_AreaNozzleFlowId",
                table: "TubularComponent",
                column: "AreaNozzleFlowId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_AxialStiffnessId",
                table: "TubularComponent",
                column: "AxialStiffnessId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_BendId",
                table: "TubularComponent",
                column: "BendId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_BendStiffnessId",
                table: "TubularComponent",
                column: "BendStiffnessId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_BitRecordBitId",
                table: "TubularComponent",
                column: "BitRecordBitId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_ConnectionId",
                table: "TubularComponent",
                column: "ConnectionId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_DispId",
                table: "TubularComponent",
                column: "DispId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_DoglegMxId",
                table: "TubularComponent",
                column: "DoglegMxId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_HoleOpenerId",
                table: "TubularComponent",
                column: "HoleOpenerId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_IdFishneckId",
                table: "TubularComponent",
                column: "IdFishneckId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_IdTubularIdId",
                table: "TubularComponent",
                column: "IdTubularIdId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_JarId",
                table: "TubularComponent",
                column: "JarId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_LenFishneckId",
                table: "TubularComponent",
                column: "LenFishneckId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_LenId",
                table: "TubularComponent",
                column: "LenId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_LenJointAvId",
                table: "TubularComponent",
                column: "LenJointAvId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_MotorId",
                table: "TubularComponent",
                column: "MotorId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_MwdToolId",
                table: "TubularComponent",
                column: "MwdToolId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_NameTagId",
                table: "TubularComponent",
                column: "NameTagId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_OdDriftId",
                table: "TubularComponent",
                column: "OdDriftId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_OdFishneckId",
                table: "TubularComponent",
                column: "OdFishneckId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_OdId",
                table: "TubularComponent",
                column: "OdId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_PresBurstId",
                table: "TubularComponent",
                column: "PresBurstId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_PresCollapseId",
                table: "TubularComponent",
                column: "PresCollapseId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_StabilizerId",
                table: "TubularComponent",
                column: "StabilizerId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_StressFatigId",
                table: "TubularComponent",
                column: "StressFatigId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_TensYieldId",
                table: "TubularComponent",
                column: "TensYieldId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_ThickWallId",
                table: "TubularComponent",
                column: "ThickWallId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_TorsionalStiffnessId",
                table: "TubularComponent",
                column: "TorsionalStiffnessId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_TqYieldId",
                table: "TubularComponent",
                column: "TqYieldId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_TubularId",
                table: "TubularComponent",
                column: "TubularId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_WearWallId",
                table: "TubularComponent",
                column: "WearWallId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularComponent_WtPerLenId",
                table: "TubularComponent",
                column: "WtPerLenId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularConnection_CriticalCrossSectionId",
                table: "TubularConnection",
                column: "CriticalCrossSectionId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularConnection_IdTubularIdId",
                table: "TubularConnection",
                column: "IdTubularIdId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularConnection_LenId",
                table: "TubularConnection",
                column: "LenId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularConnection_OdId",
                table: "TubularConnection",
                column: "OdId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularConnection_PresLeakId",
                table: "TubularConnection",
                column: "PresLeakId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularConnection_SizeThreadId",
                table: "TubularConnection",
                column: "SizeThreadId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularConnection_TensYieldId",
                table: "TubularConnection",
                column: "TensYieldId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularConnection_TqMakeupId",
                table: "TubularConnection",
                column: "TqMakeupId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularConnection_TqYieldId",
                table: "TubularConnection",
                column: "TqYieldId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularHoleOpener_DiaHoleOpenerId",
                table: "TubularHoleOpener",
                column: "DiaHoleOpenerId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularJar_ForDownSetId",
                table: "TubularJar",
                column: "ForDownSetId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularJar_ForDownTripId",
                table: "TubularJar",
                column: "ForDownTripId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularJar_ForPmpOpenId",
                table: "TubularJar",
                column: "ForPmpOpenId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularJar_ForSealFricId",
                table: "TubularJar",
                column: "ForSealFricId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularJar_ForUpSetId",
                table: "TubularJar",
                column: "ForUpSetId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularJar_ForUpTripId",
                table: "TubularJar",
                column: "ForUpTripId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMotor_BendSettingsMnId",
                table: "TubularMotor",
                column: "BendSettingsMnId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMotor_BendSettingsMxId",
                table: "TubularMotor",
                column: "BendSettingsMxId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMotor_ClearanceBearBoxId",
                table: "TubularMotor",
                column: "ClearanceBearBoxId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMotor_DiaNozzleId",
                table: "TubularMotor",
                column: "DiaNozzleId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMotor_DiaRotorNozzleId",
                table: "TubularMotor",
                column: "DiaRotorNozzleId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMotor_FlowrateMnId",
                table: "TubularMotor",
                column: "FlowrateMnId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMotor_FlowrateMxId",
                table: "TubularMotor",
                column: "FlowrateMxId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMotor_OffsetToolId",
                table: "TubularMotor",
                column: "OffsetToolId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMotor_TempOpMxId",
                table: "TubularMotor",
                column: "TempOpMxId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMwdTool_FlowrateMnId",
                table: "TubularMwdTool",
                column: "FlowrateMnId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMwdTool_FlowrateMxId",
                table: "TubularMwdTool",
                column: "FlowrateMxId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMwdTool_IdEquvId",
                table: "TubularMwdTool",
                column: "IdEquvId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularMwdTool_TempMxId",
                table: "TubularMwdTool",
                column: "TempMxId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularNozzle_DiaNozzleId",
                table: "TubularNozzle",
                column: "DiaNozzleId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularNozzle_LenId",
                table: "TubularNozzle",
                column: "LenId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularNozzle_TubularComponentId",
                table: "TubularNozzle",
                column: "TubularComponentId");

            migrationBuilder.CreateIndex(
                name: "IX_Tubulars_CommonDataTubularyCommonDataId",
                table: "Tubulars",
                column: "CommonDataTubularyCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Tubulars_DiaHoleAssyId",
                table: "Tubulars",
                column: "DiaHoleAssyId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularSensor_OffsetBotId",
                table: "TubularSensor",
                column: "OffsetBotId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularSensor_TubularMwdToolMwdToolId",
                table: "TubularSensor",
                column: "TubularMwdToolMwdToolId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularStabilizer_DistBladeBotId",
                table: "TubularStabilizer",
                column: "DistBladeBotId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularStabilizer_LenBladeId",
                table: "TubularStabilizer",
                column: "LenBladeId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularStabilizer_OdBladeMnId",
                table: "TubularStabilizer",
                column: "OdBladeMnId");

            migrationBuilder.CreateIndex(
                name: "IX_TubularStabilizer_OdBladeMxId",
                table: "TubularStabilizer",
                column: "OdBladeMxId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrys_CommonDataWbGeometryCommonDataId",
                table: "WbGeometrys",
                column: "CommonDataWbGeometryCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrys_DepthWaterMeanId",
                table: "WbGeometrys",
                column: "DepthWaterMeanId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrys_GapAirId",
                table: "WbGeometrys",
                column: "GapAirId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrys_MdBottomDiaDriftId",
                table: "WbGeometrys",
                column: "MdBottomDiaDriftId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrys_WbGeometrySectionId",
                table: "WbGeometrys",
                column: "WbGeometrySectionId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrySection_DiaDriftId",
                table: "WbGeometrySection",
                column: "DiaDriftId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrySection_IdSectionId",
                table: "WbGeometrySection",
                column: "IdSectionId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrySection_MdBottomDiaDriftId",
                table: "WbGeometrySection",
                column: "MdBottomDiaDriftId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrySection_MdTopId",
                table: "WbGeometrySection",
                column: "MdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrySection_OdSectionId",
                table: "WbGeometrySection",
                column: "OdSectionId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrySection_TvdBottomId",
                table: "WbGeometrySection",
                column: "TvdBottomId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrySection_TvdTopId",
                table: "WbGeometrySection",
                column: "TvdTopId");

            migrationBuilder.CreateIndex(
                name: "IX_WbGeometrySection_WtPerLenId",
                table: "WbGeometrySection",
                column: "WtPerLenId");

            migrationBuilder.CreateIndex(
                name: "IX_WellBores_CommonDataWellBoreCommonDataId",
                table: "WellBores",
                column: "CommonDataWellBoreCommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_WellBores_DayTargetId",
                table: "WellBores",
                column: "DayTargetId");

            migrationBuilder.CreateIndex(
                name: "IX_WellBores_MdId",
                table: "WellBores",
                column: "MdId");

            migrationBuilder.CreateIndex(
                name: "IX_WellBores_MdKickoffId",
                table: "WellBores",
                column: "MdKickoffId");

            migrationBuilder.CreateIndex(
                name: "IX_WellBores_MdPlannedId",
                table: "WellBores",
                column: "MdPlannedId");

            migrationBuilder.CreateIndex(
                name: "IX_WellBores_MdSubSeaPlannedId",
                table: "WellBores",
                column: "MdSubSeaPlannedId");

            migrationBuilder.CreateIndex(
                name: "IX_WellBores_TvdId",
                table: "WellBores",
                column: "TvdId");

            migrationBuilder.CreateIndex(
                name: "IX_WellBores_TvdKickoffId",
                table: "WellBores",
                column: "TvdKickoffId");

            migrationBuilder.CreateIndex(
                name: "IX_WellBores_TvdPlannedId",
                table: "WellBores",
                column: "TvdPlannedId");

            migrationBuilder.CreateIndex(
                name: "IX_WellBores_TvdSubSeaPlannedId",
                table: "WellBores",
                column: "TvdSubSeaPlannedId");

            migrationBuilder.CreateIndex(
                name: "IX_WellCommonDatas_DefaultDatumId",
                table: "WellCommonDatas",
                column: "DefaultDatumId");

            migrationBuilder.CreateIndex(
                name: "IX_WellCRSs_GeodeticCRSId",
                table: "WellCRSs",
                column: "GeodeticCRSId");

            migrationBuilder.CreateIndex(
                name: "IX_WellCRSs_LocalCRSId",
                table: "WellCRSs",
                column: "LocalCRSId");

            migrationBuilder.CreateIndex(
                name: "IX_WellCRSs_MapProjectionCRSId",
                table: "WellCRSs",
                column: "MapProjectionCRSId");

            migrationBuilder.CreateIndex(
                name: "IX_WellCRSs_WellId",
                table: "WellCRSs",
                column: "WellId");

            migrationBuilder.CreateIndex(
                name: "IX_WellDatums_DatumNameId",
                table: "WellDatums",
                column: "DatumNameId");

            migrationBuilder.CreateIndex(
                name: "IX_WellDatums_ElevationId",
                table: "WellDatums",
                column: "ElevationId");

            migrationBuilder.CreateIndex(
                name: "IX_WellDatums_WellId",
                table: "WellDatums",
                column: "WellId");

            migrationBuilder.CreateIndex(
                name: "IX_WellLocalCRSs_YAxisAzimuthId",
                table: "WellLocalCRSs",
                column: "YAxisAzimuthId");

            migrationBuilder.CreateIndex(
                name: "IX_WellLocations_EastingId",
                table: "WellLocations",
                column: "EastingId");

            migrationBuilder.CreateIndex(
                name: "IX_WellLocations_LatitudeId",
                table: "WellLocations",
                column: "LatitudeId");

            migrationBuilder.CreateIndex(
                name: "IX_WellLocations_LocalXId",
                table: "WellLocations",
                column: "LocalXId");

            migrationBuilder.CreateIndex(
                name: "IX_WellLocations_LocalYId",
                table: "WellLocations",
                column: "LocalYId");

            migrationBuilder.CreateIndex(
                name: "IX_WellLocations_LongitudeId",
                table: "WellLocations",
                column: "LongitudeId");

            migrationBuilder.CreateIndex(
                name: "IX_WellLocations_NorthingId",
                table: "WellLocations",
                column: "NorthingId");

            migrationBuilder.CreateIndex(
                name: "IX_WellLocations_WellCRSUid",
                table: "WellLocations",
                column: "WellCRSUid");

            migrationBuilder.CreateIndex(
                name: "IX_WellLocations_WellReferencePointReferencePointId",
                table: "WellLocations",
                column: "WellReferencePointReferencePointId");

            migrationBuilder.CreateIndex(
                name: "IX_WellReferencePoints_ElevationId",
                table: "WellReferencePoints",
                column: "ElevationId");

            migrationBuilder.CreateIndex(
                name: "IX_WellReferencePoints_MeasuredDepthId",
                table: "WellReferencePoints",
                column: "MeasuredDepthId");

            migrationBuilder.CreateIndex(
                name: "IX_WellReferencePoints_WellId",
                table: "WellReferencePoints",
                column: "WellId");

            migrationBuilder.CreateIndex(
                name: "IX_Wells_CommonDataId",
                table: "Wells",
                column: "CommonDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Wells_GroundElevationId",
                table: "Wells",
                column: "GroundElevationId");

            migrationBuilder.CreateIndex(
                name: "IX_Wells_PcInterestId",
                table: "Wells",
                column: "PcInterestId");

            migrationBuilder.CreateIndex(
                name: "IX_Wells_WaterDepthId",
                table: "Wells",
                column: "WaterDepthId");

            migrationBuilder.CreateIndex(
                name: "IX_Wells_WellLocationLocationId",
                table: "Wells",
                column: "WellLocationLocationId");

            migrationBuilder.CreateIndex(
                name: "IX_Wells_WellheadElevationElevationId",
                table: "Wells",
                column: "WellheadElevationElevationId");

            migrationBuilder.AddForeignKey(
                name: "FK_CoordinateReferenceSystemProjectedCRS_CoordinateReferenceSystemName_NameCodeSpace",
                table: "CoordinateReferenceSystemProjectedCRS",
                column: "NameCodeSpace",
                principalTable: "CoordinateReferenceSystemName",
                principalColumn: "CodeSpace",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_CoordinateReferenceSystemProjectedCRS_CoordinateReferenceSystemBaseGeographicCRS_BaseGeographicCRSId",
                table: "CoordinateReferenceSystemProjectedCRS",
                column: "BaseGeographicCRSId",
                principalTable: "CoordinateReferenceSystemBaseGeographicCRS",
                principalColumn: "BaseGeographicCRSId",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_CoordinateReferenceSystemProjectedCRS_CoordinateReferenceSystemDefinedByConversion_DefinedByConversionId",
                table: "CoordinateReferenceSystemProjectedCRS",
                column: "DefinedByConversionId",
                principalTable: "CoordinateReferenceSystemDefinedByConversion",
                principalColumn: "DefinedByConversionId",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_CoordinateReferenceSystemProjectedCRS_CoordinateReferenceSystemUsesCartesianCS_UsesCartesianCSId",
                table: "CoordinateReferenceSystemProjectedCRS",
                column: "UsesCartesianCSId",
                principalTable: "CoordinateReferenceSystemUsesCartesianCS",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_CoordinateReferenceSystemUsesAxis_CoordinateReferenceSystemEllipsoidalCS_EllipsoidalCSId",
                table: "CoordinateReferenceSystemUsesAxis",
                column: "EllipsoidalCSId",
                principalTable: "CoordinateReferenceSystemEllipsoidalCS",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_CoordinateReferenceSystemUsesAxis_CoordinateReferenceSystemCartesianCS_CartesianCSId",
                table: "CoordinateReferenceSystemUsesAxis",
                column: "CartesianCSId",
                principalTable: "CoordinateReferenceSystemCartesianCS",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_CoordinateReferenceSystemUsesCartesianCS_CoordinateReferenceSystemCartesianCS_CartesianCSId",
                table: "CoordinateReferenceSystemUsesCartesianCS",
                column: "CartesianCSId",
                principalTable: "CoordinateReferenceSystemCartesianCS",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_CoordinateReferenceSystemDefinedByConversion_CoordinateReferenceSystemConversion_ConversionId",
                table: "CoordinateReferenceSystemDefinedByConversion",
                column: "ConversionId",
                principalTable: "CoordinateReferenceSystemConversion",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_CoordinateReferenceSystemUsesValue_CoordinateReferenceSystemConversion_ConversionId",
                table: "CoordinateReferenceSystemUsesValue",
                column: "ConversionId",
                principalTable: "CoordinateReferenceSystemConversion",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_CoordinateReferenceSystemName_CoordinateReferenceSystemGeodeticDatum_GeodeticDatumId",
                table: "CoordinateReferenceSystemName",
                column: "GeodeticDatumId",
                principalTable: "CoordinateReferenceSystemGeodeticDatum",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_DrillReports_DrillReportControlIncidentInfo_ControlIncidentInfoId",
                table: "DrillReports",
                column: "ControlIncidentInfoId",
                principalTable: "DrillReportControlIncidentInfo",
                principalColumn: "ControlIncidentInfoId",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Wells_WellLocations_WellLocationLocationId",
                table: "Wells",
                column: "WellLocationLocationId",
                principalTable: "WellLocations",
                principalColumn: "LocationId",
                onDelete: ReferentialAction.Restrict);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_CoordinateReferenceSystemEllipsoid_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemEllipsoid");

            migrationBuilder.DropForeignKey(
                name: "FK_CoordinateReferenceSystemGeodeticDatum_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemGeodeticDatum");

            migrationBuilder.DropForeignKey(
                name: "FK_CoordinateReferenceSystemPrimeMeridian_CoordinateReferenceSystemIdentifier_IdentifierCodeSpace",
                table: "CoordinateReferenceSystemPrimeMeridian");

            migrationBuilder.DropForeignKey(
                name: "FK_CoordinateReferenceSystemPrimeMeridian_CoordinateReferenceSystemName_NameCodeSpace",
                table: "CoordinateReferenceSystemPrimeMeridian");

            migrationBuilder.DropForeignKey(
                name: "FK_DrillReportPorePressure_DrillReports_DrillReportId",
                table: "DrillReportPorePressure");

            migrationBuilder.DropForeignKey(
                name: "FK_WellCommonDatas_WellDefaultDatums_DefaultDatumId",
                table: "WellCommonDatas");

            migrationBuilder.DropForeignKey(
                name: "FK_WellCRSs_WellGeodeticCRSs_GeodeticCRSId",
                table: "WellCRSs");

            migrationBuilder.DropForeignKey(
                name: "FK_WellCRSs_WellLocalCRSs_LocalCRSId",
                table: "WellCRSs");

            migrationBuilder.DropForeignKey(
                name: "FK_WellCRSs_WellMapProjectionCRSs_MapProjectionCRSId",
                table: "WellCRSs");

            migrationBuilder.DropForeignKey(
                name: "FK_WellCRSs_Wells_WellId",
                table: "WellCRSs");

            migrationBuilder.DropForeignKey(
                name: "FK_WellReferencePoints_Wells_WellId",
                table: "WellReferencePoints");

            migrationBuilder.DropTable(
                name: "Attachments");

            migrationBuilder.DropTable(
                name: "Bharuns");

            migrationBuilder.DropTable(
                name: "CementJobs");

            migrationBuilder.DropTable(
                name: "ChangeLogChangeHistory");

            migrationBuilder.DropTable(
                name: "Configuration");

            migrationBuilder.DropTable(
                name: "ConvCoreQualifiers");

            migrationBuilder.DropTable(
                name: "ConvCores");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystem");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemUsesAxis");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemUsesParameter");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemUsesValue");

            migrationBuilder.DropTable(
                name: "DrillReportActivity");

            migrationBuilder.DropTable(
                name: "DrillReportFluids");

            migrationBuilder.DropTable(
                name: "DrillReportLogInfo");

            migrationBuilder.DropTable(
                name: "DrillReportRigAlias");

            migrationBuilder.DropTable(
                name: "DrillReportWellboreAlias");

            migrationBuilder.DropTable(
                name: "DrillReportWellDatum");

            migrationBuilder.DropTable(
                name: "erdos_DrillingConnections");

            migrationBuilder.DropTable(
                name: "erdos_DrillingDepthBased");

            migrationBuilder.DropTable(
                name: "erdos_GeneralTimeBased");

            migrationBuilder.DropTable(
                name: "FluidsReportRheometer");

            migrationBuilder.DropTable(
                name: "FluidsReports");

            migrationBuilder.DropTable(
                name: "FormationMarkers");

            migrationBuilder.DropTable(
                name: "LogCurveInfos");

            migrationBuilder.DropTable(
                name: "LogParams");

            migrationBuilder.DropTable(
                name: "Messages");

            migrationBuilder.DropTable(
                name: "MudLogChronostratigraphic");

            migrationBuilder.DropTable(
                name: "MudLogParameter");

            migrationBuilder.DropTable(
                name: "ObjectGroups");

            migrationBuilder.DropTable(
                name: "OpsReportAnchorAngles");

            migrationBuilder.DropTable(
                name: "OpsReportAnchorTensions");

            migrationBuilder.DropTable(
                name: "OpsReportDayCosts");

            migrationBuilder.DropTable(
                name: "OpsReportLocations");

            migrationBuilder.DropTable(
                name: "OpsReportPersonnels");

            migrationBuilder.DropTable(
                name: "OpsReportPitVolumes");

            migrationBuilder.DropTable(
                name: "OpsReportRheometers");

            migrationBuilder.DropTable(
                name: "OpsReportScrs");

            migrationBuilder.DropTable(
                name: "RigBopComponents");

            migrationBuilder.DropTable(
                name: "Rigs");

            migrationBuilder.DropTable(
                name: "RigWorkstationRegister");

            migrationBuilder.DropTable(
                name: "Risks");

            migrationBuilder.DropTable(
                name: "SidewallCores");

            migrationBuilder.DropTable(
                name: "StimJobAdditives");

            migrationBuilder.DropTable(
                name: "StimJobJobEvents");

            migrationBuilder.DropTable(
                name: "StimJobJobStages");

            migrationBuilder.DropTable(
                name: "StimJobPresMeasurements");

            migrationBuilder.DropTable(
                name: "StimJobs");

            migrationBuilder.DropTable(
                name: "StimJobShutinPress");

            migrationBuilder.DropTable(
                name: "StimJobSteps");

            migrationBuilder.DropTable(
                name: "StimJobTotalProppantUsages");

            migrationBuilder.DropTable(
                name: "StimJobTubulars");

            migrationBuilder.DropTable(
                name: "SurveyProgramSurveySection");

            migrationBuilder.DropTable(
                name: "TargetLocations");

            migrationBuilder.DropTable(
                name: "ToolErrorModelErrorTermValues");

            migrationBuilder.DropTable(
                name: "ToolErrorModelOperatingIntervals");

            migrationBuilder.DropTable(
                name: "ToolErrorTermSetErrorCoefficients");

            migrationBuilder.DropTable(
                name: "ToolErrorTermSetFunctions");

            migrationBuilder.DropTable(
                name: "ToolErrorTermSetParameters");

            migrationBuilder.DropTable(
                name: "TrajectoryLocations");

            migrationBuilder.DropTable(
                name: "Trajectorys");

            migrationBuilder.DropTable(
                name: "TubularNozzle");

            migrationBuilder.DropTable(
                name: "TubularSensor");

            migrationBuilder.DropTable(
                name: "WbGeometrys");

            migrationBuilder.DropTable(
                name: "WellboreParentWellbore");

            migrationBuilder.DropTable(
                name: "WellBores");

            migrationBuilder.DropTable(
                name: "WellDatums");

            migrationBuilder.DropTable(
                name: "AttchmentCommonDatas");

            migrationBuilder.DropTable(
                name: "AttachmentObjectReferences");

            migrationBuilder.DropTable(
                name: "BharunActDoglegMxs");

            migrationBuilder.DropTable(
                name: "BharunActDoglegs");

            migrationBuilder.DropTable(
                name: "BharunCommonDatas");

            migrationBuilder.DropTable(
                name: "BharunDrillingParamss");

            migrationBuilder.DropTable(
                name: "BharunPlanDoglegs");

            migrationBuilder.DropTable(
                name: "CementJobCementStages");

            migrationBuilder.DropTable(
                name: "CementJobCementTests");

            migrationBuilder.DropTable(
                name: "CementJobCommonDatas");

            migrationBuilder.DropTable(
                name: "CementJobLenPipeRecipStrokes");

            migrationBuilder.DropTable(
                name: "CementJobMdHoles");

            migrationBuilder.DropTable(
                name: "CementJobMdPlugBots");

            migrationBuilder.DropTable(
                name: "CementJobMdPlugTops");

            migrationBuilder.DropTable(
                name: "CementJobMdShoes");

            migrationBuilder.DropTable(
                name: "CementJobMdSqueezes");

            migrationBuilder.DropTable(
                name: "CementJobMdStringSets");

            migrationBuilder.DropTable(
                name: "CementJobMdWaters");

            migrationBuilder.DropTable(
                name: "CementJobOverPulls");

            migrationBuilder.DropTable(
                name: "CementJobRpmPipes");

            migrationBuilder.DropTable(
                name: "CementJobRpmPipeRecips");

            migrationBuilder.DropTable(
                name: "CementJobSlackOffs");

            migrationBuilder.DropTable(
                name: "CementJobTqInitPipeRots");

            migrationBuilder.DropTable(
                name: "CementJobTqPipeAvs");

            migrationBuilder.DropTable(
                name: "CementJobTqPipeMxs");

            migrationBuilder.DropTable(
                name: "CementJobTvdShoes");

            migrationBuilder.DropTable(
                name: "CementJobTvdStringSets");

            migrationBuilder.DropTable(
                name: "CementJobWocs");

            migrationBuilder.DropTable(
                name: "ChangeLogs");

            migrationBuilder.DropTable(
                name: "ChangeLogEndIndexs");

            migrationBuilder.DropTable(
                name: "ChangeLogStartIndexs");

            migrationBuilder.DropTable(
                name: "ConvCoreCommonDatas");

            migrationBuilder.DropTable(
                name: "ConvCoreDiaBits");

            migrationBuilder.DropTable(
                name: "ConvCoreDiaCores");

            migrationBuilder.DropTable(
                name: "ConvCoreGeologyIntervals");

            migrationBuilder.DropTable(
                name: "ConvCoreInclHoles");

            migrationBuilder.DropTable(
                name: "ConvCoreLenBarrels");

            migrationBuilder.DropTable(
                name: "ConvCoreLenCoreds");

            migrationBuilder.DropTable(
                name: "ConvCoreLenRecovereds");

            migrationBuilder.DropTable(
                name: "ConvCoreMdCoreBottoms");

            migrationBuilder.DropTable(
                name: "ConvCoreMdCoreTops");

            migrationBuilder.DropTable(
                name: "ConvCoreRecoverPcs");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemGeodeticCRS");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemProjectedCRS");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemVerticalCRS");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemCoordinateSystemAxis");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemOperationParameter");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemParameterValue");

            migrationBuilder.DropTable(
                name: "DrillReportDensity");

            migrationBuilder.DropTable(
                name: "DrillReportPresBopRating");

            migrationBuilder.DropTable(
                name: "DrillReportPv");

            migrationBuilder.DropTable(
                name: "DrillReportTempVis");

            migrationBuilder.DropTable(
                name: "DrillReportETimStatic");

            migrationBuilder.DropTable(
                name: "DrillReportMdTempTool");

            migrationBuilder.DropTable(
                name: "DrillReportTempBHCT");

            migrationBuilder.DropTable(
                name: "DrillReportTempBHST");

            migrationBuilder.DropTable(
                name: "DrillReportTvdTempTool");

            migrationBuilder.DropTable(
                name: "DrillReportElevation");

            migrationBuilder.DropTable(
                name: "FluidsReportPresRheom");

            migrationBuilder.DropTable(
                name: "FluidsReportTempRheom");

            migrationBuilder.DropTable(
                name: "FluidsReportCommonDatas");

            migrationBuilder.DropTable(
                name: "FluidsReportFluid");

            migrationBuilder.DropTable(
                name: "FluidsReportMd");

            migrationBuilder.DropTable(
                name: "FluidsReportTvd");

            migrationBuilder.DropTable(
                name: "FormationMarkerChronostratigraphics");

            migrationBuilder.DropTable(
                name: "FormationMarkerCommonDatas");

            migrationBuilder.DropTable(
                name: "FormationMarkerDipDirections");

            migrationBuilder.DropTable(
                name: "FormationMarkerDips");

            migrationBuilder.DropTable(
                name: "FormationMarkerLithostratigraphics");

            migrationBuilder.DropTable(
                name: "FormationMarkerMdLogSamples");

            migrationBuilder.DropTable(
                name: "FormationMarkerMdPrognoseds");

            migrationBuilder.DropTable(
                name: "FormationMarkerMdTopSamples");

            migrationBuilder.DropTable(
                name: "FormationMarkerThicknessApparents");

            migrationBuilder.DropTable(
                name: "FormationMarkerThicknessBeds");

            migrationBuilder.DropTable(
                name: "FormationMarkerThicknessPerpens");

            migrationBuilder.DropTable(
                name: "FormationMarkerTvdLogSamples");

            migrationBuilder.DropTable(
                name: "FormationMarkerTvdPrognoseds");

            migrationBuilder.DropTable(
                name: "FormationMarkerTvdTopSamples");

            migrationBuilder.DropTable(
                name: "LogMaxIndexs");

            migrationBuilder.DropTable(
                name: "LogMinIndexs");

            migrationBuilder.DropTable(
                name: "LogSensorOffsets");

            migrationBuilder.DropTable(
                name: "Logs");

            migrationBuilder.DropTable(
                name: "MessageCommonDatas");

            migrationBuilder.DropTable(
                name: "MessageMdBit");

            migrationBuilder.DropTable(
                name: "MessageMd");

            migrationBuilder.DropTable(
                name: "MessageParam");

            migrationBuilder.DropTable(
                name: "MudLogForce");

            migrationBuilder.DropTable(
                name: "MudLogs");

            migrationBuilder.DropTable(
                name: "ObjectGroupCommonDatas");

            migrationBuilder.DropTable(
                name: "ObjectGroupMemberObjects");

            migrationBuilder.DropTable(
                name: "OpsReportCostAmounts");

            migrationBuilder.DropTable(
                name: "OpsReportCostPerItems");

            migrationBuilder.DropTable(
                name: "OpsReportLatitudes");

            migrationBuilder.DropTable(
                name: "OpsReportLongitudes");

            migrationBuilder.DropTable(
                name: "OpsReportProjectedXs");

            migrationBuilder.DropTable(
                name: "OpsReportProjectedYs");

            migrationBuilder.DropTable(
                name: "OpsReportWellCRSs");

            migrationBuilder.DropTable(
                name: "OpsReportTotalTimes");

            migrationBuilder.DropTable(
                name: "OpsReportDensFluids");

            migrationBuilder.DropTable(
                name: "OpsReportPits");

            migrationBuilder.DropTable(
                name: "OpsReportVolPits");

            migrationBuilder.DropTable(
                name: "OpsReportPresRheoms");

            migrationBuilder.DropTable(
                name: "OpsReportTempRheoms");

            migrationBuilder.DropTable(
                name: "OpsReports");

            migrationBuilder.DropTable(
                name: "OpsReportPresRecordeds");

            migrationBuilder.DropTable(
                name: "RigDiaCloseMns");

            migrationBuilder.DropTable(
                name: "RigDiaCloseMxs");

            migrationBuilder.DropTable(
                name: "RigIdPassThrus");

            migrationBuilder.DropTable(
                name: "RigPresWorks");

            migrationBuilder.DropTable(
                name: "RigAirGaps");

            migrationBuilder.DropTable(
                name: "RigBops");

            migrationBuilder.DropTable(
                name: "RigCapBulkCements");

            migrationBuilder.DropTable(
                name: "RigCapBulkMuds");

            migrationBuilder.DropTable(
                name: "RigCapDrillWaters");

            migrationBuilder.DropTable(
                name: "RigCapFuels");

            migrationBuilder.DropTable(
                name: "RigCapLiquidMuds");

            migrationBuilder.DropTable(
                name: "RigCapPotableWaters");

            migrationBuilder.DropTable(
                name: "RigCapWindDerricks");

            migrationBuilder.DropTable(
                name: "RigCentrifuges");

            migrationBuilder.DropTable(
                name: "RigCommonDatas");

            migrationBuilder.DropTable(
                name: "RigDegassers");

            migrationBuilder.DropTable(
                name: "RigHeaveMxs");

            migrationBuilder.DropTable(
                name: "RigHtDerricks");

            migrationBuilder.DropTable(
                name: "RigHydrocyclones");

            migrationBuilder.DropTable(
                name: "RigMotionCompensationMns");

            migrationBuilder.DropTable(
                name: "RigMotionCompensationMxs");

            migrationBuilder.DropTable(
                name: "RigPits");

            migrationBuilder.DropTable(
                name: "RigPowerDrawWork");

            migrationBuilder.DropTable(
                name: "RigPumps");

            migrationBuilder.DropTable(
                name: "RigRatingBlocks");

            migrationBuilder.DropTable(
                name: "RigRatingDerricks");

            migrationBuilder.DropTable(
                name: "RigRatingDrawWork");

            migrationBuilder.DropTable(
                name: "RigRatingDrillDepths");

            migrationBuilder.DropTable(
                name: "RigRatingHklds");

            migrationBuilder.DropTable(
                name: "RigRatingHooks");

            migrationBuilder.DropTable(
                name: "RigRatingRotSystems");

            migrationBuilder.DropTable(
                name: "RigRatingSwivels");

            migrationBuilder.DropTable(
                name: "RigRatingTqRotSy");

            migrationBuilder.DropTable(
                name: "RigRatingWaterDepths");

            migrationBuilder.DropTable(
                name: "RigRiserAngleLimits");

            migrationBuilder.DropTable(
                name: "RigRotSizeOpenings");

            migrationBuilder.DropTable(
                name: "RigShakers");

            migrationBuilder.DropTable(
                name: "RigSizeDrillLines");

            migrationBuilder.DropTable(
                name: "RigStrokeMotionCompensations");

            migrationBuilder.DropTable(
                name: "RigSurfaceEquipments");

            migrationBuilder.DropTable(
                name: "RigVarDeckLdMxs");

            migrationBuilder.DropTable(
                name: "RigVdlStorms");

            migrationBuilder.DropTable(
                name: "RigWtBlocks");

            migrationBuilder.DropTable(
                name: "RiskDiaHole");

            migrationBuilder.DropTable(
                name: "RiskMdHoleEnds");

            migrationBuilder.DropTable(
                name: "RiskMdHoleStarts");

            migrationBuilder.DropTable(
                name: "RiskObjectReferences");

            migrationBuilder.DropTable(
                name: "RiskTvdHoleEnds");

            migrationBuilder.DropTable(
                name: "RiskTvdHoleStarts");

            migrationBuilder.DropTable(
                name: "SideWallCoreCommonData");

            migrationBuilder.DropTable(
                name: "SideWallCoreDiaHole");

            migrationBuilder.DropTable(
                name: "DiaPlug");

            migrationBuilder.DropTable(
                name: "SideWallMdCore");

            migrationBuilder.DropTable(
                name: "SideWallMdToolReference");

            migrationBuilder.DropTable(
                name: "SideWallCoreSwcSample");

            migrationBuilder.DropTable(
                name: "StimJobVolumes");

            migrationBuilder.DropTable(
                name: "StimJobAcidVolumes");

            migrationBuilder.DropTable(
                name: "StimJobAveragePresBottomholes");

            migrationBuilder.DropTable(
                name: "StimJobAveragePresSurfaces");

            migrationBuilder.DropTable(
                name: "StimJobAvgCO2Rates");

            migrationBuilder.DropTable(
                name: "StimJobAvgInternalPhaseFractions");

            migrationBuilder.DropTable(
                name: "StimJobAvgPumpRateBottomholes");

            migrationBuilder.DropTable(
                name: "StimJobAvgRateSurfaceCO2s");

            migrationBuilder.DropTable(
                name: "StimJobAvgRateSurfaceLiquids");

            migrationBuilder.DropTable(
                name: "StimJobAvgStdRateSurfaceN2s");

            migrationBuilder.DropTable(
                name: "StimJobEndFoamRateCO2s");

            migrationBuilder.DropTable(
                name: "StimJobEndFoamRateN2s");

            migrationBuilder.DropTable(
                name: "StimJobEndPresBottomholes");

            migrationBuilder.DropTable(
                name: "StimJobEndPresSurfaces");

            migrationBuilder.DropTable(
                name: "StimJobEndProppantConcBottomholes");

            migrationBuilder.DropTable(
                name: "StimJobEndProppantConcSurfaces");

            migrationBuilder.DropTable(
                name: "StimJobEndPumpRateBottomholes");

            migrationBuilder.DropTable(
                name: "StimJobEndRateSurfaceCO2s");

            migrationBuilder.DropTable(
                name: "StimJobEndRateSurfaceLiquids");

            migrationBuilder.DropTable(
                name: "StimJobEndStdRateSurfaceN2s");

            migrationBuilder.DropTable(
                name: "StimJobFluidVolBases");

            migrationBuilder.DropTable(
                name: "StimJobFluidVolSlurrys");

            migrationBuilder.DropTable(
                name: "StimJobGelVolumes");

            migrationBuilder.DropTable(
                name: "StimJobMaxPress");

            migrationBuilder.DropTable(
                name: "StimJobOilVolumes");

            migrationBuilder.DropTable(
                name: "StimJobProppantMasss");

            migrationBuilder.DropTable(
                name: "StimJobProppantMassWellHeads");

            migrationBuilder.DropTable(
                name: "StimJobPumpTimes");

            migrationBuilder.DropTable(
                name: "StimJobSlurryRateBegins");

            migrationBuilder.DropTable(
                name: "StimJobSlurryRateEnds");

            migrationBuilder.DropTable(
                name: "StimJobStageFluids");

            migrationBuilder.DropTable(
                name: "StimJobStartFoamRateCO2s");

            migrationBuilder.DropTable(
                name: "StimJobStartFoamRateN2s");

            migrationBuilder.DropTable(
                name: "StimJobStartPresBottomholes");

            migrationBuilder.DropTable(
                name: "StimJobStartPresSurfaces");

            migrationBuilder.DropTable(
                name: "StimJobStartProppantConcBottomholes");

            migrationBuilder.DropTable(
                name: "StimJobStartProppantConcSurfaces");

            migrationBuilder.DropTable(
                name: "StimJobStartPumpRateBottomholes");

            migrationBuilder.DropTable(
                name: "StimJobStartRateSurfaceCO2s");

            migrationBuilder.DropTable(
                name: "StimJobStartRateSurfaceLiquids");

            migrationBuilder.DropTable(
                name: "StimJobStartStdRateSurfaceN2s");

            migrationBuilder.DropTable(
                name: "StimJobAvgJobPress");

            migrationBuilder.DropTable(
                name: "StimJobBottomholeStaticTemperatures");

            migrationBuilder.DropTable(
                name: "StimJobFlowBackPress");

            migrationBuilder.DropTable(
                name: "StimJobFlowBackRates");

            migrationBuilder.DropTable(
                name: "StimJobFlowBackVolumes");

            migrationBuilder.DropTable(
                name: "StimJobHhpOrdereds");

            migrationBuilder.DropTable(
                name: "StimJobHhpUseds");

            migrationBuilder.DropTable(
                name: "StimJobMaxFluidRates");

            migrationBuilder.DropTable(
                name: "StimJobMaxJobPress");

            migrationBuilder.DropTable(
                name: "StimJobTotalJobVolumes");

            migrationBuilder.DropTable(
                name: "StimJobTotalProppantWts");

            migrationBuilder.DropTable(
                name: "StimJobTreatingBottomholeTemperatures");

            migrationBuilder.DropTable(
                name: "StimJobTimeAfterShutins");

            migrationBuilder.DropTable(
                name: "StimJobBottomholeRates");

            migrationBuilder.DropTable(
                name: "StimJobEntryFrictions");

            migrationBuilder.DropTable(
                name: "StimJobNearWellboreFrictions");

            migrationBuilder.DropTable(
                name: "StimJobPerfFrictions");

            migrationBuilder.DropTable(
                name: "StimJobPipeFrictions");

            migrationBuilder.DropTable(
                name: "StimJobPress");

            migrationBuilder.DropTable(
                name: "StimJobJobIntervals");

            migrationBuilder.DropTable(
                name: "StimJobMasss");

            migrationBuilder.DropTable(
                name: "StimJobFlowPaths");

            migrationBuilder.DropTable(
                name: "StimJobIds");

            migrationBuilder.DropTable(
                name: "StimJobMdBottoms");

            migrationBuilder.DropTable(
                name: "StimJobMdTops");

            migrationBuilder.DropTable(
                name: "StimJobOds");

            migrationBuilder.DropTable(
                name: "StimJobVolumeFactors");

            migrationBuilder.DropTable(
                name: "SurveyProgramFrequencyMx");

            migrationBuilder.DropTable(
                name: "SurveyProgramMdEnd");

            migrationBuilder.DropTable(
                name: "SurveyProgramMdStart");

            migrationBuilder.DropTable(
                name: "SurveyPrograms");

            migrationBuilder.DropTable(
                name: "TargetLatitudes");

            migrationBuilder.DropTable(
                name: "TargetLongitudes");

            migrationBuilder.DropTable(
                name: "TargetProjectedXs");

            migrationBuilder.DropTable(
                name: "TargetProjectedYs");

            migrationBuilder.DropTable(
                name: "TargetSections");

            migrationBuilder.DropTable(
                name: "TargetWellCRSs");

            migrationBuilder.DropTable(
                name: "ToolErrorModelTerms");

            migrationBuilder.DropTable(
                name: "ToolErrorModelValues");

            migrationBuilder.DropTable(
                name: "ToolErrorModelEnds");

            migrationBuilder.DropTable(
                name: "ToolErrorModelSpeeds");

            migrationBuilder.DropTable(
                name: "ToolErrorModelStarts");

            migrationBuilder.DropTable(
                name: "ToolErrorModels");

            migrationBuilder.DropTable(
                name: "ToolErrorTermSetErrorTerms");

            migrationBuilder.DropTable(
                name: "TrajectoryEastings");

            migrationBuilder.DropTable(
                name: "TrajectoryLatitudes");

            migrationBuilder.DropTable(
                name: "TrajectoryLongitudes");

            migrationBuilder.DropTable(
                name: "TrajectoryNorthings");

            migrationBuilder.DropTable(
                name: "TrajectoryWellCRSs");

            migrationBuilder.DropTable(
                name: "TrajectoryAziVertSects");

            migrationBuilder.DropTable(
                name: "TrajectoryCommonDatas");

            migrationBuilder.DropTable(
                name: "TrajectoryDispEwVertSectOrigs");

            migrationBuilder.DropTable(
                name: "TrajectoryDispNsVertSectOrigs");

            migrationBuilder.DropTable(
                name: "TrajectoryGridCorUseds");

            migrationBuilder.DropTable(
                name: "TrajectoryMagDeclUseds");

            migrationBuilder.DropTable(
                name: "TrajectoryMdMns");

            migrationBuilder.DropTable(
                name: "TrajectoryMdMxs");

            migrationBuilder.DropTable(
                name: "TrajectoryStations");

            migrationBuilder.DropTable(
                name: "TubularComponent");

            migrationBuilder.DropTable(
                name: "TubularOffsetBot");

            migrationBuilder.DropTable(
                name: "WbGeometryCommonData");

            migrationBuilder.DropTable(
                name: "WbGeometryDepthWaterMean");

            migrationBuilder.DropTable(
                name: "WbGeometryGapAir");

            migrationBuilder.DropTable(
                name: "WbGeometrySection");

            migrationBuilder.DropTable(
                name: "WellBoreCommonData");

            migrationBuilder.DropTable(
                name: "WellboreDayTarget");

            migrationBuilder.DropTable(
                name: "WellboreMd");

            migrationBuilder.DropTable(
                name: "WellboreMdKickoff");

            migrationBuilder.DropTable(
                name: "WellboreMdPlanned");

            migrationBuilder.DropTable(
                name: "WellboreMdSubSeaPlanned");

            migrationBuilder.DropTable(
                name: "WellboreTvd");

            migrationBuilder.DropTable(
                name: "WellboreTvdKickoff");

            migrationBuilder.DropTable(
                name: "WellboreTvdPlanned");

            migrationBuilder.DropTable(
                name: "WellboreTvdSubSeaPlanned");

            migrationBuilder.DropTable(
                name: "WellDatumNames");

            migrationBuilder.DropTable(
                name: "BharunAziBottoms");

            migrationBuilder.DropTable(
                name: "BharunAziTops");

            migrationBuilder.DropTable(
                name: "BharunCTimCircs");

            migrationBuilder.DropTable(
                name: "BharunCTimDrillRots");

            migrationBuilder.DropTable(
                name: "BharunCTimDrillSlids");

            migrationBuilder.DropTable(
                name: "BharunCTimHolds");

            migrationBuilder.DropTable(
                name: "BharunCTimReams");

            migrationBuilder.DropTable(
                name: "BharunCTimSteerings");

            migrationBuilder.DropTable(
                name: "BharunDistDrillRots");

            migrationBuilder.DropTable(
                name: "BharunDistDrillSlids");

            migrationBuilder.DropTable(
                name: "BharunDistHolds");

            migrationBuilder.DropTable(
                name: "BharunDistReams");

            migrationBuilder.DropTable(
                name: "BharunDistSteerings");

            migrationBuilder.DropTable(
                name: "BharunETimOpBits");

            migrationBuilder.DropTable(
                name: "BharunFlowrateBits");

            migrationBuilder.DropTable(
                name: "BharunFlowratePumps");

            migrationBuilder.DropTable(
                name: "BharunHkldDns");

            migrationBuilder.DropTable(
                name: "BharunHkldRots");

            migrationBuilder.DropTable(
                name: "BharunHkldUps");

            migrationBuilder.DropTable(
                name: "BharunInclMns");

            migrationBuilder.DropTable(
                name: "BharunInclMxs");

            migrationBuilder.DropTable(
                name: "BharunInclStarts");

            migrationBuilder.DropTable(
                name: "BharunInclStops");

            migrationBuilder.DropTable(
                name: "BharunMdHoleStarts");

            migrationBuilder.DropTable(
                name: "BharunMdHoleStops");

            migrationBuilder.DropTable(
                name: "BharunOverPulls");

            migrationBuilder.DropTable(
                name: "BharunPowBits");

            migrationBuilder.DropTable(
                name: "BharunPresDropBits");

            migrationBuilder.DropTable(
                name: "BharunPresPumpAvs");

            migrationBuilder.DropTable(
                name: "BharunRopAvs");

            migrationBuilder.DropTable(
                name: "BharunRopMns");

            migrationBuilder.DropTable(
                name: "BharunRopMxs");

            migrationBuilder.DropTable(
                name: "BharunRpmAvs");

            migrationBuilder.DropTable(
                name: "BharunRpmAvDhs");

            migrationBuilder.DropTable(
                name: "BharunRpmMns");

            migrationBuilder.DropTable(
                name: "BharunRpmMxs");

            migrationBuilder.DropTable(
                name: "BharunSlackOff");

            migrationBuilder.DropTable(
                name: "BharunTempMudDhMxs");

            migrationBuilder.DropTable(
                name: "BharunTqDhAvs");

            migrationBuilder.DropTable(
                name: "BharunTqOffBotAvs");

            migrationBuilder.DropTable(
                name: "BharunTqOnBotAvs");

            migrationBuilder.DropTable(
                name: "BharunTqOnBotMns");

            migrationBuilder.DropTable(
                name: "BharunTqOnBotMxs");

            migrationBuilder.DropTable(
                name: "BharunTubulars");

            migrationBuilder.DropTable(
                name: "BharunVelNozzleAvs");

            migrationBuilder.DropTable(
                name: "BharunWobAvs");

            migrationBuilder.DropTable(
                name: "BharunWobAvDhs");

            migrationBuilder.DropTable(
                name: "BharunWobMns");

            migrationBuilder.DropTable(
                name: "BharunWobMxs");

            migrationBuilder.DropTable(
                name: "BharunWtAboveJars");

            migrationBuilder.DropTable(
                name: "BharunWtBelowJars");

            migrationBuilder.DropTable(
                name: "BharunWtMuds");

            migrationBuilder.DropTable(
                name: "CementJobCementingFluids");

            migrationBuilder.DropTable(
                name: "CementJobDensDisplaceFluids");

            migrationBuilder.DropTable(
                name: "CementJobDiaTailPipes");

            migrationBuilder.DropTable(
                name: "CementJobETimMudCirculations");

            migrationBuilder.DropTable(
                name: "CementJobETimPresHelds");

            migrationBuilder.DropTable(
                name: "CementJobFlowrateBreakDowns");

            migrationBuilder.DropTable(
                name: "CementJobFlowrateDisplaceAvs");

            migrationBuilder.DropTable(
                name: "CementJobFlowrateDisplaceMxs");

            migrationBuilder.DropTable(
                name: "CementJobFlowrateEnds");

            migrationBuilder.DropTable(
                name: "CementJobFlowrateMudCircs");

            migrationBuilder.DropTable(
                name: "CementJobFlowratePumpEnds");

            migrationBuilder.DropTable(
                name: "CementJobFlowratePumpStarts");

            migrationBuilder.DropTable(
                name: "CementJobFlowrateSqueezeAvs");

            migrationBuilder.DropTable(
                name: "CementJobFlowrateSqueezeMxs");

            migrationBuilder.DropTable(
                name: "CementJobGel10Mins");

            migrationBuilder.DropTable(
                name: "CementJobGel10Secs");

            migrationBuilder.DropTable(
                name: "CementJobMdBottoms");

            migrationBuilder.DropTable(
                name: "CementJobMdCircOuts");

            migrationBuilder.DropTable(
                name: "CementJobMdCoilTbgs");

            migrationBuilder.DropTable(
                name: "CementJobMdStrings");

            migrationBuilder.DropTable(
                name: "CementJobMdTools");

            migrationBuilder.DropTable(
                name: "CementJobMdTops");

            migrationBuilder.DropTable(
                name: "CementJobPresBackPressures");

            migrationBuilder.DropTable(
                name: "CementJobPresBreakDowns");

            migrationBuilder.DropTable(
                name: "CementJobPresBumps");

            migrationBuilder.DropTable(
                name: "CementJobPresCoilTbgEnds");

            migrationBuilder.DropTable(
                name: "CementJobPresCoilTbgStarts");

            migrationBuilder.DropTable(
                name: "CementJobPresCsgEnds");

            migrationBuilder.DropTable(
                name: "CementJobPresCsgStarts");

            migrationBuilder.DropTable(
                name: "CementJobPresDisplaces");

            migrationBuilder.DropTable(
                name: "CementJobPresHelds");

            migrationBuilder.DropTable(
                name: "CementJobPresMudCircs");

            migrationBuilder.DropTable(
                name: "CementJobPresPriorBumps");

            migrationBuilder.DropTable(
                name: "CementJobPresSqueezeAvs");

            migrationBuilder.DropTable(
                name: "CementJobPresSqueezeEnds");

            migrationBuilder.DropTable(
                name: "CementJobPresSqueezes");

            migrationBuilder.DropTable(
                name: "CementJobPresTbgEnds");

            migrationBuilder.DropTable(
                name: "CementJobPresTbgStarts");

            migrationBuilder.DropTable(
                name: "CementJobPvMuds");

            migrationBuilder.DropTable(
                name: "CementJobTempBHCTs");

            migrationBuilder.DropTable(
                name: "CementJobTempBHSTs");

            migrationBuilder.DropTable(
                name: "CementJobVisFunnelMuds");

            migrationBuilder.DropTable(
                name: "CementJobVolCircPriors");

            migrationBuilder.DropTable(
                name: "CementJobVolCsgIns");

            migrationBuilder.DropTable(
                name: "CementJobVolCsgOuts");

            migrationBuilder.DropTable(
                name: "CementJobVolDisplaceFluids");

            migrationBuilder.DropTable(
                name: "CementJobVolExcesss");

            migrationBuilder.DropTable(
                name: "CementJobVolMudLosts");

            migrationBuilder.DropTable(
                name: "CementJobVolReturnss");

            migrationBuilder.DropTable(
                name: "CementJobWtMuds");

            migrationBuilder.DropTable(
                name: "CementJobYpMuds");

            migrationBuilder.DropTable(
                name: "CementJobCblPress");

            migrationBuilder.DropTable(
                name: "CementJobETimBeforeTests");

            migrationBuilder.DropTable(
                name: "CementJobETimCementLogs");

            migrationBuilder.DropTable(
                name: "CementJobETimPitStarts");

            migrationBuilder.DropTable(
                name: "CementJobETimTests");

            migrationBuilder.DropTable(
                name: "CementJobFormPits");

            migrationBuilder.DropTable(
                name: "CementJobLinerLaps");

            migrationBuilder.DropTable(
                name: "CementJobLinerTops");

            migrationBuilder.DropTable(
                name: "CementJobMdCementTops");

            migrationBuilder.DropTable(
                name: "CementJobMdDVTools");

            migrationBuilder.DropTable(
                name: "CementJobPresTests");

            migrationBuilder.DropTable(
                name: "CementJobTestNegativeEmws");

            migrationBuilder.DropTable(
                name: "CementJobTestPositiveEmws");

            migrationBuilder.DropTable(
                name: "ChangeLogCommonData");

            migrationBuilder.DropTable(
                name: "ConvCoreCalcStabs");

            migrationBuilder.DropTable(
                name: "ConvCoreCalcites");

            migrationBuilder.DropTable(
                name: "ConvCoreCecs");

            migrationBuilder.DropTable(
                name: "ConvCoreChromatographs");

            migrationBuilder.DropTable(
                name: "ConvCoreDensBulks");

            migrationBuilder.DropTable(
                name: "ConvCoreDolomites");

            migrationBuilder.DropTable(
                name: "ConvCoreEcdTdAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreLenPlugs");

            migrationBuilder.DropTable(
                name: "ConvCoreLithologys");

            migrationBuilder.DropTable(
                name: "ConvCoreMudGass");

            migrationBuilder.DropTable(
                name: "ConvCoreRopAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreRopMns");

            migrationBuilder.DropTable(
                name: "ConvCoreRopMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreRpmAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreShows");

            migrationBuilder.DropTable(
                name: "ConvCoreSizeMns");

            migrationBuilder.DropTable(
                name: "ConvCoreSizeMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreTqAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreTvdBases");

            migrationBuilder.DropTable(
                name: "ConvCoreTvdTops");

            migrationBuilder.DropTable(
                name: "ConvCoreWobAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreWtMudAvs");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemGmlGeodeticCRS");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemBaseGeographicCRS");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemDefinedByConversion");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemUsesCartesianCS");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemNameCRS");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemAxisDirection");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemValues");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemValueOfParameter");

            migrationBuilder.DropTable(
                name: "FluidsReportAlkalinityP1");

            migrationBuilder.DropTable(
                name: "FluidsReportAlkalinityP2");

            migrationBuilder.DropTable(
                name: "FluidsReportBaritePc");

            migrationBuilder.DropTable(
                name: "FluidsReportBrinePc");

            migrationBuilder.DropTable(
                name: "FluidsReportCalciumChloride");

            migrationBuilder.DropTable(
                name: "FluidsReportCalcium");

            migrationBuilder.DropTable(
                name: "FluidsReportChloride");

            migrationBuilder.DropTable(
                name: "FluidsReportDensity");

            migrationBuilder.DropTable(
                name: "FluidsReportElectStab");

            migrationBuilder.DropTable(
                name: "FluidsReportFilterCakeHthp");

            migrationBuilder.DropTable(
                name: "FluidsReportFilterCakeLtlp");

            migrationBuilder.DropTable(
                name: "FluidsReportFiltrateHthp");

            migrationBuilder.DropTable(
                name: "FluidsReportFiltrateLtlp");

            migrationBuilder.DropTable(
                name: "FluidsReportGel10Min");

            migrationBuilder.DropTable(
                name: "FluidsReportGel10Sec");

            migrationBuilder.DropTable(
                name: "FluidsReportGel30Min");

            migrationBuilder.DropTable(
                name: "FluidsReportHardnessCa");

            migrationBuilder.DropTable(
                name: "FluidsReportLcm");

            migrationBuilder.DropTable(
                name: "FluidsReportLime");

            migrationBuilder.DropTable(
                name: "FluidsReportMagnesium");

            migrationBuilder.DropTable(
                name: "FluidsReportMbt");

            migrationBuilder.DropTable(
                name: "FluidsReportMf");

            migrationBuilder.DropTable(
                name: "FluidsReportOilCtg");

            migrationBuilder.DropTable(
                name: "FluidsReportOilPc");

            migrationBuilder.DropTable(
                name: "FluidsReportPmFiltrate");

            migrationBuilder.DropTable(
                name: "FluidsReportPm");

            migrationBuilder.DropTable(
                name: "FluidsReportPolymer");

            migrationBuilder.DropTable(
                name: "FluidsReportPotassium");

            migrationBuilder.DropTable(
                name: "FluidsReportPresHthp");

            migrationBuilder.DropTable(
                name: "FluidsReportPv");

            migrationBuilder.DropTable(
                name: "FluidsReportSandPc");

            migrationBuilder.DropTable(
                name: "FluidsReportSolCorPc");

            migrationBuilder.DropTable(
                name: "FluidsReportSolidsCalcPc");

            migrationBuilder.DropTable(
                name: "FluidsReportSolidsHiGravPc");

            migrationBuilder.DropTable(
                name: "FluidsReportSolidsLowGravPc");

            migrationBuilder.DropTable(
                name: "FluidsReportSolidsPc");

            migrationBuilder.DropTable(
                name: "FluidsReportSulfide");

            migrationBuilder.DropTable(
                name: "FluidsReportTempHthp");

            migrationBuilder.DropTable(
                name: "FluidsReportTempPh");

            migrationBuilder.DropTable(
                name: "FluidsReportTempVis");

            migrationBuilder.DropTable(
                name: "FluidsReportVisFunnel");

            migrationBuilder.DropTable(
                name: "FluidsReportWaterPc");

            migrationBuilder.DropTable(
                name: "FluidsReportYp");

            migrationBuilder.DropTable(
                name: "LogCommonDatas");

            migrationBuilder.DropTable(
                name: "LogEndIndex");

            migrationBuilder.DropTable(
                name: "LogDatas");

            migrationBuilder.DropTable(
                name: "LogStartIndex");

            migrationBuilder.DropTable(
                name: "LogStepIncrements");

            migrationBuilder.DropTable(
                name: "MudLogCommonDatas");

            migrationBuilder.DropTable(
                name: "MudLogEndMd");

            migrationBuilder.DropTable(
                name: "MudLogGeologyInterval");

            migrationBuilder.DropTable(
                name: "MudLogStartMd");

            migrationBuilder.DropTable(
                name: "ObjectGroupAcquisitionTimeZones");

            migrationBuilder.DropTable(
                name: "ObjectGroupDefaultDatum");

            migrationBuilder.DropTable(
                name: "ObjectGroupExtensionNameValues");

            migrationBuilder.DropTable(
                name: "ObjectGroupObjectReference");

            migrationBuilder.DropTable(
                name: "ObjectGroupParam");

            migrationBuilder.DropTable(
                name: "ObjectGroupRangeMaxs");

            migrationBuilder.DropTable(
                name: "ObjectGroupRangeMins");

            migrationBuilder.DropTable(
                name: "ObjectGroupReferenceDepths");

            migrationBuilder.DropTable(
                name: "ObjectGroupSequence1s");

            migrationBuilder.DropTable(
                name: "ObjectGroupSequence2s");

            migrationBuilder.DropTable(
                name: "ObjectGroupSequence3s");

            migrationBuilder.DropTable(
                name: "OpsReportActivitys");

            migrationBuilder.DropTable(
                name: "OpsReportBulks");

            migrationBuilder.DropTable(
                name: "OpsReportsCommonDatas");

            migrationBuilder.DropTable(
                name: "OpsReportCostDays");

            migrationBuilder.DropTable(
                name: "OpsReportCostDayMuds");

            migrationBuilder.DropTable(
                name: "OpsReportDiaCsgLasts");

            migrationBuilder.DropTable(
                name: "OpsReportDiaHoles");

            migrationBuilder.DropTable(
                name: "OpsReportDistDrills");

            migrationBuilder.DropTable(
                name: "OpsReportDrillingParams");

            migrationBuilder.DropTable(
                name: "OpsReportETimCircs");

            migrationBuilder.DropTable(
                name: "OpsReportETimDrills");

            migrationBuilder.DropTable(
                name: "OpsReportETimDrillRots");

            migrationBuilder.DropTable(
                name: "OpsReportETimDrillSlids");

            migrationBuilder.DropTable(
                name: "OpsReportETimHolds");

            migrationBuilder.DropTable(
                name: "OpsReportETimLocs");

            migrationBuilder.DropTable(
                name: "OpsReportETimReams");

            migrationBuilder.DropTable(
                name: "OpsReportETimSpuds");

            migrationBuilder.DropTable(
                name: "OpsReportETimStarts");

            migrationBuilder.DropTable(
                name: "OpsReportETimSteerings");

            migrationBuilder.DropTable(
                name: "OpsReportFluids");

            migrationBuilder.DropTable(
                name: "OpsReportHses");

            migrationBuilder.DropTable(
                name: "OpsReportMaasps");

            migrationBuilder.DropTable(
                name: "OpsReportMdCsgLasts");

            migrationBuilder.DropTable(
                name: "OpsReportMdPlanneds");

            migrationBuilder.DropTable(
                name: "OpsReportMdReports");

            migrationBuilder.DropTable(
                name: "OpsReportMudInventorys");

            migrationBuilder.DropTable(
                name: "OpsReportMudVolumes");

            migrationBuilder.DropTable(
                name: "OpsReportPresKickTols");

            migrationBuilder.DropTable(
                name: "OpsReportPresLotEmws");

            migrationBuilder.DropTable(
                name: "OpsReportPumpOps");

            migrationBuilder.DropTable(
                name: "OpsReportRigs");

            migrationBuilder.DropTable(
                name: "OpsReportRigResponses");

            migrationBuilder.DropTable(
                name: "OpsReportRopCurrents");

            migrationBuilder.DropTable(
                name: "OpsReportShakerOps");

            migrationBuilder.DropTable(
                name: "OpsReportSupportCrafts");

            migrationBuilder.DropTable(
                name: "OpsReportTrajectoryStations");

            migrationBuilder.DropTable(
                name: "OpsReportTvdCsgLasts");

            migrationBuilder.DropTable(
                name: "OpsReportTvdLots");

            migrationBuilder.DropTable(
                name: "OpsReportTvdReports");

            migrationBuilder.DropTable(
                name: "OpsReportVolKickTols");

            migrationBuilder.DropTable(
                name: "OpsReportWeathers");

            migrationBuilder.DropTable(
                name: "RigCapAccFluids");

            migrationBuilder.DropTable(
                name: "RigDiaDiverters");

            migrationBuilder.DropTable(
                name: "RigIdBoosterLines");

            migrationBuilder.DropTable(
                name: "RigIdChkLines");

            migrationBuilder.DropTable(
                name: "RigIdKillLines");

            migrationBuilder.DropTable(
                name: "RigIdSurfLines");

            migrationBuilder.DropTable(
                name: "RigLenBoosterLines");

            migrationBuilder.DropTable(
                name: "RigLenChkLines");

            migrationBuilder.DropTable(
                name: "RigLenKillLines");

            migrationBuilder.DropTable(
                name: "RigLenSurfLines");

            migrationBuilder.DropTable(
                name: "RigOdBoosterLines");

            migrationBuilder.DropTable(
                name: "RigOdChkLines");

            migrationBuilder.DropTable(
                name: "RigOdKillLines");

            migrationBuilder.DropTable(
                name: "RigOdSurfLines");

            migrationBuilder.DropTable(
                name: "RigPresAccOpRatings");

            migrationBuilder.DropTable(
                name: "RigPresAccPreCharges");

            migrationBuilder.DropTable(
                name: "RigPresBopRatings");

            migrationBuilder.DropTable(
                name: "RigPresChokeManifolds");

            migrationBuilder.DropTable(
                name: "RigPresWorkDiverters");

            migrationBuilder.DropTable(
                name: "RigSizeBopSyss");

            migrationBuilder.DropTable(
                name: "RigSizeConnectionBops");

            migrationBuilder.DropTable(
                name: "RigVolAccPreCharges");

            migrationBuilder.DropTable(
                name: "RigAreaSeparatorFlows");

            migrationBuilder.DropTable(
                name: "RigCapBlowdowns");

            migrationBuilder.DropTable(
                name: "RigCapGasSeps");

            migrationBuilder.DropTable(
                name: "RigHeights");

            migrationBuilder.DropTable(
                name: "RigHtMudSeals");

            migrationBuilder.DropTable(
                name: "RigIdInlets");

            migrationBuilder.DropTable(
                name: "RigIds");

            migrationBuilder.DropTable(
                name: "RigIdVentLines");

            migrationBuilder.DropTable(
                name: "RigLens");

            migrationBuilder.DropTable(
                name: "RigLenVentLines");

            migrationBuilder.DropTable(
                name: "RigTempRatings");

            migrationBuilder.DropTable(
                name: "RigCapMxs");

            migrationBuilder.DropTable(
                name: "RigDisplacements");

            migrationBuilder.DropTable(
                name: "RigEffs");

            migrationBuilder.DropTable(
                name: "RigIdLiners");

            migrationBuilder.DropTable(
                name: "RigLenStrokes");

            migrationBuilder.DropTable(
                name: "RigOdRods");

            migrationBuilder.DropTable(
                name: "RigPowHydMxs");

            migrationBuilder.DropTable(
                name: "RigPowMechMxs");

            migrationBuilder.DropTable(
                name: "RigPresDamps");

            migrationBuilder.DropTable(
                name: "RigPresMxs");

            migrationBuilder.DropTable(
                name: "RigSpmMxs");

            migrationBuilder.DropTable(
                name: "RigVolDamps");

            migrationBuilder.DropTable(
                name: "RigCapFlows");

            migrationBuilder.DropTable(
                name: "RigSizeMeshMns");

            migrationBuilder.DropTable(
                name: "RigHtFlanges");

            migrationBuilder.DropTable(
                name: "RigHtInjStks");

            migrationBuilder.DropTable(
                name: "RigHtTopStks");

            migrationBuilder.DropTable(
                name: "RigIdDischargeLines");

            migrationBuilder.DropTable(
                name: "RigIdHoses");

            migrationBuilder.DropTable(
                name: "RigIdKellys");

            migrationBuilder.DropTable(
                name: "RigIdStandpipes");

            migrationBuilder.DropTable(
                name: "RigIdSwivels");

            migrationBuilder.DropTable(
                name: "RigIdTopStks");

            migrationBuilder.DropTable(
                name: "RigLenDischargeLines");

            migrationBuilder.DropTable(
                name: "RigLenHoses");

            migrationBuilder.DropTable(
                name: "RigLenKellys");

            migrationBuilder.DropTable(
                name: "RigLenReels");

            migrationBuilder.DropTable(
                name: "RigLenStandpipes");

            migrationBuilder.DropTable(
                name: "RigLenSwivels");

            migrationBuilder.DropTable(
                name: "RigLenUmbilicals");

            migrationBuilder.DropTable(
                name: "RigOdCores");

            migrationBuilder.DropTable(
                name: "RigOdReels");

            migrationBuilder.DropTable(
                name: "RigOdUmbilicals");

            migrationBuilder.DropTable(
                name: "RigPresRatings");

            migrationBuilder.DropTable(
                name: "RigWidReelWraps");

            migrationBuilder.DropTable(
                name: "SideWallCoreLithology");

            migrationBuilder.DropTable(
                name: "SideWallMd");

            migrationBuilder.DropTable(
                name: "SideWallCoreShow");

            migrationBuilder.DropTable(
                name: "StimJobFluidVols");

            migrationBuilder.DropTable(
                name: "StimJobProppants");

            migrationBuilder.DropTable(
                name: "StimJobAveragePress");

            migrationBuilder.DropTable(
                name: "StimJobAvgBaseFluidReturnRates");

            migrationBuilder.DropTable(
                name: "StimJobAvgBottomholeRates");

            migrationBuilder.DropTable(
                name: "StimJobAvgConductivitys");

            migrationBuilder.DropTable(
                name: "StimJobAvgFractureWidths");

            migrationBuilder.DropTable(
                name: "StimJobAvgPresCasings");

            migrationBuilder.DropTable(
                name: "StimJobAvgPresTubings");

            migrationBuilder.DropTable(
                name: "StimJobAvgProppantConcBottomholes");

            migrationBuilder.DropTable(
                name: "StimJobAvgProppantConcSurfaces");

            migrationBuilder.DropTable(
                name: "StimJobAvgSlurryReturnRates");

            migrationBuilder.DropTable(
                name: "StimJobClosureDurations");

            migrationBuilder.DropTable(
                name: "StimJobClosurePress");

            migrationBuilder.DropTable(
                name: "StimJobFinalFractureGradients");

            migrationBuilder.DropTable(
                name: "StimJobFormationProppantMasss");

            migrationBuilder.DropTable(
                name: "StimJobHhpOrderedCO2s");

            migrationBuilder.DropTable(
                name: "StimJobHhpOrderedFluids");

            migrationBuilder.DropTable(
                name: "StimJobHhpUsedCO2s");

            migrationBuilder.DropTable(
                name: "StimJobHhpUsedFluids");

            migrationBuilder.DropTable(
                name: "StimJobMaxFluidRateAnnuluss");

            migrationBuilder.DropTable(
                name: "StimJobMaxFluidRateTubings");

            migrationBuilder.DropTable(
                name: "StimJobMaxPresAnnuluss");

            migrationBuilder.DropTable(
                name: "StimJobMaxPresTubings");

            migrationBuilder.DropTable(
                name: "StimJobMaxProppantConcBottomholes");

            migrationBuilder.DropTable(
                name: "StimJobMaxProppantConcSurfaces");

            migrationBuilder.DropTable(
                name: "StimJobMdFormationBottoms");

            migrationBuilder.DropTable(
                name: "StimJobMdFormationTops");

            migrationBuilder.DropTable(
                name: "StimJobMdOpenHoleBottoms");

            migrationBuilder.DropTable(
                name: "StimJobMdOpenHoleTops");

            migrationBuilder.DropTable(
                name: "StimJobOpenHoleDiameters");

            migrationBuilder.DropTable(
                name: "StimJobPdatSessions");

            migrationBuilder.DropTable(
                name: "StimJobPercentProppantPumpeds");

            migrationBuilder.DropTable(
                name: "StimJobPerfBallSizes");

            migrationBuilder.DropTable(
                name: "StimJobPerforationIntervals");

            migrationBuilder.DropTable(
                name: "StimJobPerfproppantConcs");

            migrationBuilder.DropTable(
                name: "StimJobReservoirIntervals");

            migrationBuilder.DropTable(
                name: "StimJobScreenOutPress");

            migrationBuilder.DropTable(
                name: "StimJobTotalCO2Masss");

            migrationBuilder.DropTable(
                name: "StimJobTotalFrictionPresLosss");

            migrationBuilder.DropTable(
                name: "StimJobTotalN2StdVolumes");

            migrationBuilder.DropTable(
                name: "StimJobTotalProppantMasss");

            migrationBuilder.DropTable(
                name: "StimJobTotalPumpTimes");

            migrationBuilder.DropTable(
                name: "StimJobTotalVolumes");

            migrationBuilder.DropTable(
                name: "StimJobTvdFormationBottoms");

            migrationBuilder.DropTable(
                name: "StimJobTvdFormationTops");

            migrationBuilder.DropTable(
                name: "StimJobTvdOpenHoleBottoms");

            migrationBuilder.DropTable(
                name: "StimJobTvdOpenHoleTops");

            migrationBuilder.DropTable(
                name: "StimJobWellboreProppantMasss");

            migrationBuilder.DropTable(
                name: "StimJobAcidVols");

            migrationBuilder.DropTable(
                name: "StimJobAvgAcidRates");

            migrationBuilder.DropTable(
                name: "StimJobAvgBaseFluidQualitys");

            migrationBuilder.DropTable(
                name: "StimJobAvgBaseFluidRates");

            migrationBuilder.DropTable(
                name: "StimJobAvgCO2BaseFluidQualitys");

            migrationBuilder.DropTable(
                name: "StimJobAvgCO2LiquidRates");

            migrationBuilder.DropTable(
                name: "StimJobAvgGelRates");

            migrationBuilder.DropTable(
                name: "StimJobAvgHydraulicPowers");

            migrationBuilder.DropTable(
                name: "StimJobAvgN2BaseFluidQualitys");

            migrationBuilder.DropTable(
                name: "StimJobAvgN2StdRates");

            migrationBuilder.DropTable(
                name: "StimJobAvgOilRates");

            migrationBuilder.DropTable(
                name: "StimJobAvgPmaxPacPress");

            migrationBuilder.DropTable(
                name: "StimJobAvgPmaxWeaklinkPress");

            migrationBuilder.DropTable(
                name: "StimJobAvgPropConcs");

            migrationBuilder.DropTable(
                name: "StimJobAvgSlurryPropConcs");

            migrationBuilder.DropTable(
                name: "StimJobAvgSlurryRates");

            migrationBuilder.DropTable(
                name: "StimJobAvgTemperatures");

            migrationBuilder.DropTable(
                name: "StimJobAvgTreatPress");

            migrationBuilder.DropTable(
                name: "StimJobAvgWellheadRates");

            migrationBuilder.DropTable(
                name: "StimJobBaseFluidBypassVols");

            migrationBuilder.DropTable(
                name: "StimJobBreakDownPress");

            migrationBuilder.DropTable(
                name: "StimJobFractureGradients");

            migrationBuilder.DropTable(
                name: "StimJobGelVols");

            migrationBuilder.DropTable(
                name: "StimJobMassCO2s");

            migrationBuilder.DropTable(
                name: "StimJobMaxAcidRates");

            migrationBuilder.DropTable(
                name: "StimJobMaxCO2LiquidRates");

            migrationBuilder.DropTable(
                name: "StimJobMaxGelRates");

            migrationBuilder.DropTable(
                name: "StimJobMaxN2StdRates");

            migrationBuilder.DropTable(
                name: "StimJobMaxOilRates");

            migrationBuilder.DropTable(
                name: "StimJobMaxPmaxPacPress");

            migrationBuilder.DropTable(
                name: "StimJobMaxPmaxWeaklinkPress");

            migrationBuilder.DropTable(
                name: "StimJobMaxPropConcs");

            migrationBuilder.DropTable(
                name: "StimJobMaxSlurryPropConcs");

            migrationBuilder.DropTable(
                name: "StimJobMaxSlurryRates");

            migrationBuilder.DropTable(
                name: "StimJobMaxTreatmentPress");

            migrationBuilder.DropTable(
                name: "StimJobMaxWellheadRates");

            migrationBuilder.DropTable(
                name: "StimJobOilVols");

            migrationBuilder.DropTable(
                name: "StimJobPropMasss");

            migrationBuilder.DropTable(
                name: "StimJobShutinPres10Mins");

            migrationBuilder.DropTable(
                name: "StimJobShutinPres15Mins");

            migrationBuilder.DropTable(
                name: "StimJobShutinPres5Mins");

            migrationBuilder.DropTable(
                name: "StimJobSlurryVols");

            migrationBuilder.DropTable(
                name: "StimJobStdVolN2s");

            migrationBuilder.DropTable(
                name: "StimJobWellheadVols");

            migrationBuilder.DropTable(
                name: "SurveyProgramCommonData");

            migrationBuilder.DropTable(
                name: "TargetAngleArcs");

            migrationBuilder.DropTable(
                name: "TargetLenRadiuss");

            migrationBuilder.DropTable(
                name: "Targets");

            migrationBuilder.DropTable(
                name: "ToolErrorModelAuthorizations");

            migrationBuilder.DropTable(
                name: "ToolErrorModelCommonDatas");

            migrationBuilder.DropTable(
                name: "ToolErrorModelModelParameter");

            migrationBuilder.DropTable(
                name: "ToolErrorModelOperatingConditions");

            migrationBuilder.DropTable(
                name: "ToolErrorModelUseErrorTermSets");

            migrationBuilder.DropTable(
                name: "ToolErrorTermSets");

            migrationBuilder.DropTable(
                name: "TrajectoryAzis");

            migrationBuilder.DropTable(
                name: "TrajectoryCorUseds");

            migrationBuilder.DropTable(
                name: "TrajectoryDipAngleUncerts");

            migrationBuilder.DropTable(
                name: "TrajectoryDispEws");

            migrationBuilder.DropTable(
                name: "TrajectoryDispNss");

            migrationBuilder.DropTable(
                name: "TrajectoryDlss");

            migrationBuilder.DropTable(
                name: "TrajectoryGravTotalUncerts");

            migrationBuilder.DropTable(
                name: "TrajectoryGtfs");

            migrationBuilder.DropTable(
                name: "TrajectoryIncls");

            migrationBuilder.DropTable(
                name: "TrajectoryMagTotalUncerts");

            migrationBuilder.DropTable(
                name: "TrajectoryMatrixCovs");

            migrationBuilder.DropTable(
                name: "TrajectoryMdDeltas");

            migrationBuilder.DropTable(
                name: "TrajectoryMds");

            migrationBuilder.DropTable(
                name: "TrajectoryMtfs");

            migrationBuilder.DropTable(
                name: "TrajectoryRateBuilds");

            migrationBuilder.DropTable(
                name: "TrajectoryRateTurns");

            migrationBuilder.DropTable(
                name: "TrajectoryRawDatas");

            migrationBuilder.DropTable(
                name: "TrajectoryTvdDeltas");

            migrationBuilder.DropTable(
                name: "TrajectoryTvds");

            migrationBuilder.DropTable(
                name: "TrajectoryValids");

            migrationBuilder.DropTable(
                name: "TrajectoryVertSects");

            migrationBuilder.DropTable(
                name: "TubularAreaNozzleFlow");

            migrationBuilder.DropTable(
                name: "TubularAxialStiffness");

            migrationBuilder.DropTable(
                name: "TubularBend");

            migrationBuilder.DropTable(
                name: "TubularBendStiffness");

            migrationBuilder.DropTable(
                name: "TubularBitRecord");

            migrationBuilder.DropTable(
                name: "TubularConnection");

            migrationBuilder.DropTable(
                name: "TubularDisp");

            migrationBuilder.DropTable(
                name: "TubularDoglegMx");

            migrationBuilder.DropTable(
                name: "TubularHoleOpener");

            migrationBuilder.DropTable(
                name: "TubularIdFishneck");

            migrationBuilder.DropTable(
                name: "TubularJar");

            migrationBuilder.DropTable(
                name: "TubularLenFishneck");

            migrationBuilder.DropTable(
                name: "TubularLenJointAv");

            migrationBuilder.DropTable(
                name: "TubularMotor");

            migrationBuilder.DropTable(
                name: "TubularMwdTool");

            migrationBuilder.DropTable(
                name: "TubularNameTag");

            migrationBuilder.DropTable(
                name: "TubularOdDrifts");

            migrationBuilder.DropTable(
                name: "TubularOdFishneck");

            migrationBuilder.DropTable(
                name: "TubularPresBurst");

            migrationBuilder.DropTable(
                name: "TubularPresCollapse");

            migrationBuilder.DropTable(
                name: "TubularStabilizer");

            migrationBuilder.DropTable(
                name: "TubularStressFatig");

            migrationBuilder.DropTable(
                name: "TubularThickWall");

            migrationBuilder.DropTable(
                name: "TubularTorsionalStiffness");

            migrationBuilder.DropTable(
                name: "Tubulars");

            migrationBuilder.DropTable(
                name: "TubularWearWall");

            migrationBuilder.DropTable(
                name: "TubularWtPerLen");

            migrationBuilder.DropTable(
                name: "WbGeometryDiaDrift");

            migrationBuilder.DropTable(
                name: "WbGeometryIdSection");

            migrationBuilder.DropTable(
                name: "WbGeometryMdBottom");

            migrationBuilder.DropTable(
                name: "WbGeometryMdTop");

            migrationBuilder.DropTable(
                name: "WbGeometryOdSection");

            migrationBuilder.DropTable(
                name: "WbGeometryTvdBottom");

            migrationBuilder.DropTable(
                name: "WbGeometryTvdTop");

            migrationBuilder.DropTable(
                name: "WbGeometryWtPerLen");

            migrationBuilder.DropTable(
                name: "CementJobCementAdditives");

            migrationBuilder.DropTable(
                name: "CementJobCementPumpSchedules");

            migrationBuilder.DropTable(
                name: "CementJobConsTestThickenings");

            migrationBuilder.DropTable(
                name: "CementJobDensAtPress");

            migrationBuilder.DropTable(
                name: "CementJobDensBaseFluids");

            migrationBuilder.DropTable(
                name: "CementJobDensConstGasFoams");

            migrationBuilder.DropTable(
                name: "CementJobDensConstGasMethods");

            migrationBuilder.DropTable(
                name: "CementJobDensDryBlends");

            migrationBuilder.DropTable(
                name: "CementJobDensitys");

            migrationBuilder.DropTable(
                name: "CementJobETimComprStren1s");

            migrationBuilder.DropTable(
                name: "CementJobETimComprStren2s");

            migrationBuilder.DropTable(
                name: "CementJobETimThickenings");

            migrationBuilder.DropTable(
                name: "CementJobExcessPcs");

            migrationBuilder.DropTable(
                name: "CementJobGel10MinReadings");

            migrationBuilder.DropTable(
                name: "CementJobGel10MinStrengths");

            migrationBuilder.DropTable(
                name: "CementJobGel10SecReadings");

            migrationBuilder.DropTable(
                name: "CementJobGel10SecStrengths");

            migrationBuilder.DropTable(
                name: "CementJobGel1MinReadings");

            migrationBuilder.DropTable(
                name: "CementJobGel1MinStrengths");

            migrationBuilder.DropTable(
                name: "CementJobKs");

            migrationBuilder.DropTable(
                name: "CementJobMassDryBlends");

            migrationBuilder.DropTable(
                name: "CementJobMassSackDryBlends");

            migrationBuilder.DropTable(
                name: "CementJobMdFluidBottoms");

            migrationBuilder.DropTable(
                name: "CementJobMdFluidTops");

            migrationBuilder.DropTable(
                name: "CementJobNs");

            migrationBuilder.DropTable(
                name: "CementJobPcFreeWaters");

            migrationBuilder.DropTable(
                name: "CementJobPresComprStren1s");

            migrationBuilder.DropTable(
                name: "CementJobPresComprStren2s");

            migrationBuilder.DropTable(
                name: "CementJobPresTestFluidLosss");

            migrationBuilder.DropTable(
                name: "CementJobPresTestThickenings");

            migrationBuilder.DropTable(
                name: "CementJobRatioConstGasMethodAvs");

            migrationBuilder.DropTable(
                name: "CementJobRatioConstGasMethodEnds");

            migrationBuilder.DropTable(
                name: "CementJobRatioConstGasMethodStarts");

            migrationBuilder.DropTable(
                name: "CementJobRatioMixWaters");

            migrationBuilder.DropTable(
                name: "CementJobSolidVolumeFractions");

            migrationBuilder.DropTable(
                name: "CementJobTempComprStren1s");

            migrationBuilder.DropTable(
                name: "CementJobTempComprStren2s");

            migrationBuilder.DropTable(
                name: "CementJobTempFluidLosss");

            migrationBuilder.DropTable(
                name: "CementJobTempFreeWaters");

            migrationBuilder.DropTable(
                name: "CementJobTempThickenings");

            migrationBuilder.DropTable(
                name: "CementJobTimeFluidLosss");

            migrationBuilder.DropTable(
                name: "CementJobViss");

            migrationBuilder.DropTable(
                name: "CementJobVolAPIFluidLosss");

            migrationBuilder.DropTable(
                name: "CementJobVolCements");

            migrationBuilder.DropTable(
                name: "CementJobVolFluids");

            migrationBuilder.DropTable(
                name: "CementJobVolGasFoams");

            migrationBuilder.DropTable(
                name: "CementJobVolOthers");

            migrationBuilder.DropTable(
                name: "CementJobVolPumpeds");

            migrationBuilder.DropTable(
                name: "CementJobVolReserveds");

            migrationBuilder.DropTable(
                name: "CementJobVolTestFluidLosss");

            migrationBuilder.DropTable(
                name: "CementJobVolTotSlurrys");

            migrationBuilder.DropTable(
                name: "CementJobVolWaters");

            migrationBuilder.DropTable(
                name: "CementJobVolYields");

            migrationBuilder.DropTable(
                name: "CementJobYps");

            migrationBuilder.DropTable(
                name: "ConvCoreAcetylenes");

            migrationBuilder.DropTable(
                name: "ConvCoreCo2Avs");

            migrationBuilder.DropTable(
                name: "ConvCoreCo2Mns");

            migrationBuilder.DropTable(
                name: "ConvCoreCo2Mxs");

            migrationBuilder.DropTable(
                name: "ConvCoreETimChromCycles");

            migrationBuilder.DropTable(
                name: "ConvCoreEpentAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreEpentMns");

            migrationBuilder.DropTable(
                name: "ConvCoreEpentMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreEthAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreEthMns");

            migrationBuilder.DropTable(
                name: "ConvCoreEthMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreH2sAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreH2sMns");

            migrationBuilder.DropTable(
                name: "ConvCoreH2sMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreIbutAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreIbutMns");

            migrationBuilder.DropTable(
                name: "ConvCoreIbutMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreIhexAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreIhexMns");

            migrationBuilder.DropTable(
                name: "ConvCoreIhexMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreIpentAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreIpentMns");

            migrationBuilder.DropTable(
                name: "ConvCoreIpentMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreMdBottoms");

            migrationBuilder.DropTable(
                name: "ConvCoreMdTops");

            migrationBuilder.DropTable(
                name: "ConvCoreMethAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreMethMns");

            migrationBuilder.DropTable(
                name: "ConvCoreMethMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreNbutAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreNbutMns");

            migrationBuilder.DropTable(
                name: "ConvCoreNbutMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreNhexAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreNhexMns");

            migrationBuilder.DropTable(
                name: "ConvCoreNhexMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreNpentAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreNpentMns");

            migrationBuilder.DropTable(
                name: "ConvCoreNpentMxs");

            migrationBuilder.DropTable(
                name: "ConvCorePropAvs");

            migrationBuilder.DropTable(
                name: "ConvCorePropMns");

            migrationBuilder.DropTable(
                name: "ConvCorePropMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreWtMudIns");

            migrationBuilder.DropTable(
                name: "ConvCoreWtMudOuts");

            migrationBuilder.DropTable(
                name: "ConvCoreDensShales");

            migrationBuilder.DropTable(
                name: "ConvCoreLithPcs");

            migrationBuilder.DropTable(
                name: "ConvCoreGasAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreGasBackgnds");

            migrationBuilder.DropTable(
                name: "ConvCoreGasConAvs");

            migrationBuilder.DropTable(
                name: "ConvCoreGasConMxs");

            migrationBuilder.DropTable(
                name: "ConvCoreGasPeaks");

            migrationBuilder.DropTable(
                name: "ConvCoreGasTrips");

            migrationBuilder.DropTable(
                name: "ConvCoreNatFlorPcs");

            migrationBuilder.DropTable(
                name: "ConvCoreStainPcs");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemGeographicCRS");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemConversion");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemCartesianCS");

            migrationBuilder.DropTable(
                name: "MudLogCalcStab");

            migrationBuilder.DropTable(
                name: "MudLogCalcite");

            migrationBuilder.DropTable(
                name: "MudLogCec");

            migrationBuilder.DropTable(
                name: "MudLogChromatograph");

            migrationBuilder.DropTable(
                name: "MudLogCommonTime");

            migrationBuilder.DropTable(
                name: "MudLogDensBulk");

            migrationBuilder.DropTable(
                name: "MudLogDolomite");

            migrationBuilder.DropTable(
                name: "MudLogEcdTdAv");

            migrationBuilder.DropTable(
                name: "MudLogLenPlug");

            migrationBuilder.DropTable(
                name: "MudLogLithology");

            migrationBuilder.DropTable(
                name: "MudLogLithostratigraphic");

            migrationBuilder.DropTable(
                name: "MudLogMudGas");

            migrationBuilder.DropTable(
                name: "MudLogRopAv");

            migrationBuilder.DropTable(
                name: "MudLogRopMn");

            migrationBuilder.DropTable(
                name: "MudLogRopMx");

            migrationBuilder.DropTable(
                name: "MudLogRpmAv");

            migrationBuilder.DropTable(
                name: "MudLogShow");

            migrationBuilder.DropTable(
                name: "MudLogSizeMn");

            migrationBuilder.DropTable(
                name: "MudLogSizeMx");

            migrationBuilder.DropTable(
                name: "MudLogTqAv");

            migrationBuilder.DropTable(
                name: "MudLogTvdBase");

            migrationBuilder.DropTable(
                name: "MudLogTvdTop");

            migrationBuilder.DropTable(
                name: "MudLogWobAv");

            migrationBuilder.DropTable(
                name: "MudLogWtMudAv");

            migrationBuilder.DropTable(
                name: "ObjectGroupMd");

            migrationBuilder.DropTable(
                name: "ObjectGroupValue");

            migrationBuilder.DropTable(
                name: "OpsReportDurations");

            migrationBuilder.DropTable(
                name: "OpsReportMdBitEnds");

            migrationBuilder.DropTable(
                name: "OpsReportMdBitStarts");

            migrationBuilder.DropTable(
                name: "OpsReportMdHoleEnds");

            migrationBuilder.DropTable(
                name: "OpsReportTvdHoleEnds");

            migrationBuilder.DropTable(
                name: "OpsReportTvdHoleStarts");

            migrationBuilder.DropTable(
                name: "OpsReportItemVolPerUnits");

            migrationBuilder.DropTable(
                name: "OpsReportAziBottoms");

            migrationBuilder.DropTable(
                name: "OpsReportAziTops");

            migrationBuilder.DropTable(
                name: "OpsReportCTimCircs");

            migrationBuilder.DropTable(
                name: "OpsReportCTimDrillRots");

            migrationBuilder.DropTable(
                name: "OpsReportCTimDrillSlids");

            migrationBuilder.DropTable(
                name: "OpsReportCTimHolds");

            migrationBuilder.DropTable(
                name: "OpsReportCTimReams");

            migrationBuilder.DropTable(
                name: "OpsReportCTimSteerings");

            migrationBuilder.DropTable(
                name: "OpsReportDistDrillRots");

            migrationBuilder.DropTable(
                name: "OpsReportDistDrillSlids");

            migrationBuilder.DropTable(
                name: "OpsReportDistHolds");

            migrationBuilder.DropTable(
                name: "OpsReportDistReams");

            migrationBuilder.DropTable(
                name: "OpsReportDistSteerings");

            migrationBuilder.DropTable(
                name: "OpsReportETimOpBits");

            migrationBuilder.DropTable(
                name: "OpsReportFlowrateBits");

            migrationBuilder.DropTable(
                name: "OpsReportFlowratePumps");

            migrationBuilder.DropTable(
                name: "OpsReportHkldDns");

            migrationBuilder.DropTable(
                name: "OpsReportHkldRots");

            migrationBuilder.DropTable(
                name: "OpsReportHkldUps");

            migrationBuilder.DropTable(
                name: "OpsReportInclMns");

            migrationBuilder.DropTable(
                name: "OpsReportInclMxs");

            migrationBuilder.DropTable(
                name: "OpsReportInclStarts");

            migrationBuilder.DropTable(
                name: "OpsReportInclStops");

            migrationBuilder.DropTable(
                name: "OpsReportMdHoleStarts");

            migrationBuilder.DropTable(
                name: "OpsReportMdHoleStops");

            migrationBuilder.DropTable(
                name: "OpsReportOverPulls");

            migrationBuilder.DropTable(
                name: "OpsReportPowBits");

            migrationBuilder.DropTable(
                name: "OpsReportPresDropBits");

            migrationBuilder.DropTable(
                name: "OpsReportPresPumpAvs");

            migrationBuilder.DropTable(
                name: "OpsReportRopAvs");

            migrationBuilder.DropTable(
                name: "OpsReportRopMns");

            migrationBuilder.DropTable(
                name: "OpsReportRopMxs");

            migrationBuilder.DropTable(
                name: "OpsReportRpmAvDhs");

            migrationBuilder.DropTable(
                name: "OpsReportRpmAvs");

            migrationBuilder.DropTable(
                name: "OpsReportRpmMns");

            migrationBuilder.DropTable(
                name: "OpsReportRpmMxs");

            migrationBuilder.DropTable(
                name: "OpsReportSlackOffs");

            migrationBuilder.DropTable(
                name: "OpsReportTempMudDhMxs");

            migrationBuilder.DropTable(
                name: "OpsReportTqDhAvs");

            migrationBuilder.DropTable(
                name: "OpsReportTqOffBotAvs");

            migrationBuilder.DropTable(
                name: "OpsReportTqOnBotAvs");

            migrationBuilder.DropTable(
                name: "OpsReportTqOnBotMns");

            migrationBuilder.DropTable(
                name: "OpsReportTqOnBotMxs");

            migrationBuilder.DropTable(
                name: "OpsReportTubulars");

            migrationBuilder.DropTable(
                name: "OpsReportVelNozzleAvs");

            migrationBuilder.DropTable(
                name: "OpsReportWobAvDhs");

            migrationBuilder.DropTable(
                name: "OpsReportWobAvs");

            migrationBuilder.DropTable(
                name: "OpsReportWobMns");

            migrationBuilder.DropTable(
                name: "OpsReportWobMxs");

            migrationBuilder.DropTable(
                name: "OpsReportWtAboveJars");

            migrationBuilder.DropTable(
                name: "OpsReportWtBelowJars");

            migrationBuilder.DropTable(
                name: "OpsReportWtMuds");

            migrationBuilder.DropTable(
                name: "OpsReportAlkalinityP1s");

            migrationBuilder.DropTable(
                name: "OpsReportAlkalinityP2s");

            migrationBuilder.DropTable(
                name: "OpsReportBaritePcs");

            migrationBuilder.DropTable(
                name: "OpsReportBrinePcs");

            migrationBuilder.DropTable(
                name: "OpsReportCalciumChlorides");

            migrationBuilder.DropTable(
                name: "OpsReportCalciums");

            migrationBuilder.DropTable(
                name: "OpsReportChlorides");

            migrationBuilder.DropTable(
                name: "OpsReportDensitys");

            migrationBuilder.DropTable(
                name: "OpsReportElectStabs");

            migrationBuilder.DropTable(
                name: "OpsReportFilterCakeHthps");

            migrationBuilder.DropTable(
                name: "OpsReportFilterCakeLtlps");

            migrationBuilder.DropTable(
                name: "OpsReportFiltrateHthps");

            migrationBuilder.DropTable(
                name: "OpsReportFiltrateLtlps");

            migrationBuilder.DropTable(
                name: "OpsReportGel10Mins");

            migrationBuilder.DropTable(
                name: "OpsReportGel10Secs");

            migrationBuilder.DropTable(
                name: "OpsReportGel30Mins");

            migrationBuilder.DropTable(
                name: "OpsReportHardnessCas");

            migrationBuilder.DropTable(
                name: "OpsReportLcms");

            migrationBuilder.DropTable(
                name: "OpsReportLimes");

            migrationBuilder.DropTable(
                name: "OpsReportMagnesiums");

            migrationBuilder.DropTable(
                name: "OpsReportMbts");

            migrationBuilder.DropTable(
                name: "OpsReportMfs");

            migrationBuilder.DropTable(
                name: "OpsReportOilCtgs");

            migrationBuilder.DropTable(
                name: "OpsReportOilPcs");

            migrationBuilder.DropTable(
                name: "OpsReportPmFiltrates");

            migrationBuilder.DropTable(
                name: "OpsReportPms");

            migrationBuilder.DropTable(
                name: "OpsReportPolymers");

            migrationBuilder.DropTable(
                name: "OpsReportPresHthps");

            migrationBuilder.DropTable(
                name: "OpsReportPvs");

            migrationBuilder.DropTable(
                name: "OpsReportSandPcs");

            migrationBuilder.DropTable(
                name: "OpsReportSolCorPcs");

            migrationBuilder.DropTable(
                name: "OpsReportSolidsCalcPcs");

            migrationBuilder.DropTable(
                name: "OpsReportSolidsHiGravPcs");

            migrationBuilder.DropTable(
                name: "OpsReportSolidsLowGravPcs");

            migrationBuilder.DropTable(
                name: "OpsReportSolidsPcs");

            migrationBuilder.DropTable(
                name: "OpsReportSulfides");

            migrationBuilder.DropTable(
                name: "OpsReportTempHthps");

            migrationBuilder.DropTable(
                name: "OpsReportTempPhs");

            migrationBuilder.DropTable(
                name: "OpsReportTempViss");

            migrationBuilder.DropTable(
                name: "OpsReportVisFunnels");

            migrationBuilder.DropTable(
                name: "OpsReportWaterPcs");

            migrationBuilder.DropTable(
                name: "OpsReportYps");

            migrationBuilder.DropTable(
                name: "OpsReportDaysIncFrees");

            migrationBuilder.DropTable(
                name: "OpsReportFluidDischargeds");

            migrationBuilder.DropTable(
                name: "OpsReportIncidents");

            migrationBuilder.DropTable(
                name: "OpsReportPresAnnulars");

            migrationBuilder.DropTable(
                name: "OpsReportPresChokeLines");

            migrationBuilder.DropTable(
                name: "OpsReportPresChokeMans");

            migrationBuilder.DropTable(
                name: "OpsReportPresDiverters");

            migrationBuilder.DropTable(
                name: "OpsReportPresKellyHoses");

            migrationBuilder.DropTable(
                name: "OpsReportPresLastCsgs");

            migrationBuilder.DropTable(
                name: "OpsReportPresRamss");

            migrationBuilder.DropTable(
                name: "OpsReportPresStdPipes");

            migrationBuilder.DropTable(
                name: "OpsReportVolCtgDischargeds");

            migrationBuilder.DropTable(
                name: "OpsReportVolOilCtgDischarges");

            migrationBuilder.DropTable(
                name: "OpsReportWasteDischargeds");

            migrationBuilder.DropTable(
                name: "OpsReportCostItems");

            migrationBuilder.DropTable(
                name: "OpsReportItemWtPerUnits");

            migrationBuilder.DropTable(
                name: "OpsReportPricePerUnits");

            migrationBuilder.DropTable(
                name: "OpsReportMudLossess");

            migrationBuilder.DropTable(
                name: "OpsReportVolMudBuilts");

            migrationBuilder.DropTable(
                name: "OpsReportVolMudCasings");

            migrationBuilder.DropTable(
                name: "OpsReportVolMudDumpeds");

            migrationBuilder.DropTable(
                name: "OpsReportVolMudHoles");

            migrationBuilder.DropTable(
                name: "OpsReportVolMudReceiveds");

            migrationBuilder.DropTable(
                name: "OpsReportVolMudReturneds");

            migrationBuilder.DropTable(
                name: "OpsReportVolMudRisers");

            migrationBuilder.DropTable(
                name: "OpsReportVolMudStrings");

            migrationBuilder.DropTable(
                name: "OpsReportVolTotMudEnds");

            migrationBuilder.DropTable(
                name: "OpsReportVolTotMudStarts");

            migrationBuilder.DropTable(
                name: "OpsReportIdLiners");

            migrationBuilder.DropTable(
                name: "OpsReportLenStrokes");

            migrationBuilder.DropTable(
                name: "OpsReportMdBits");

            migrationBuilder.DropTable(
                name: "OpsReportPcEfficiencys");

            migrationBuilder.DropTable(
                name: "OpsReportPressures");

            migrationBuilder.DropTable(
                name: "OpsReportPumps");

            migrationBuilder.DropTable(
                name: "OpsReportPumpOutputs");

            migrationBuilder.DropTable(
                name: "OpsReportRateStrokes");

            migrationBuilder.DropTable(
                name: "OpsReportBallJointAngles");

            migrationBuilder.DropTable(
                name: "OpsReportBallJointDirections");

            migrationBuilder.DropTable(
                name: "OpsReportDispRigs");

            migrationBuilder.DropTable(
                name: "OpsReportGuideBaseAngles");

            migrationBuilder.DropTable(
                name: "OpsReportLoadLeg1s");

            migrationBuilder.DropTable(
                name: "OpsReportLoadLeg2s");

            migrationBuilder.DropTable(
                name: "OpsReportLoadLeg3s");

            migrationBuilder.DropTable(
                name: "OpsReportLoadLeg4s");

            migrationBuilder.DropTable(
                name: "OpsReportMeanDrafts");

            migrationBuilder.DropTable(
                name: "OpsReportOffsetRigs");

            migrationBuilder.DropTable(
                name: "OpsReportPenetrationLeg1s");

            migrationBuilder.DropTable(
                name: "OpsReportPenetrationLeg2s");

            migrationBuilder.DropTable(
                name: "OpsReportPenetrationLeg3s");

            migrationBuilder.DropTable(
                name: "OpsReportPenetrationLeg4s");

            migrationBuilder.DropTable(
                name: "OpsReportRigHeadings");

            migrationBuilder.DropTable(
                name: "OpsReportRigHeaves");

            migrationBuilder.DropTable(
                name: "OpsReportRigPitchAngles");

            migrationBuilder.DropTable(
                name: "OpsReportRigRollAngles");

            migrationBuilder.DropTable(
                name: "OpsReportRiserAngles");

            migrationBuilder.DropTable(
                name: "OpsReportRiserDirections");

            migrationBuilder.DropTable(
                name: "OpsReportRiserTensions");

            migrationBuilder.DropTable(
                name: "OpsReportTotalDeckLoads");

            migrationBuilder.DropTable(
                name: "OpsReportVariableDeckLoads");

            migrationBuilder.DropTable(
                name: "OpsReportHoursRuns");

            migrationBuilder.DropTable(
                name: "OpsReportMdHoles");

            migrationBuilder.DropTable(
                name: "OpsReportPcScreenCovereds");

            migrationBuilder.DropTable(
                name: "OpsReportShakers");

            migrationBuilder.DropTable(
                name: "OpsReportShakerScreens");

            migrationBuilder.DropTable(
                name: "OpsReportAzis");

            migrationBuilder.DropTable(
                name: "OpsReportCorUseds");

            migrationBuilder.DropTable(
                name: "OpsReportDipAngleUncerts");

            migrationBuilder.DropTable(
                name: "OpsReportDispEws");

            migrationBuilder.DropTable(
                name: "OpsReportDispNss");

            migrationBuilder.DropTable(
                name: "OpsReportDlss");

            migrationBuilder.DropTable(
                name: "OpsReportGravTotalUncerts");

            migrationBuilder.DropTable(
                name: "OpsReportGtfs");

            migrationBuilder.DropTable(
                name: "OpsReportIncls");

            migrationBuilder.DropTable(
                name: "OpsReportMagTotalUncerts");

            migrationBuilder.DropTable(
                name: "OpsReportMatrixCovs");

            migrationBuilder.DropTable(
                name: "OpsReportMdDeltas");

            migrationBuilder.DropTable(
                name: "OpsReportMds");

            migrationBuilder.DropTable(
                name: "OpsReportMtfs");

            migrationBuilder.DropTable(
                name: "OpsReportRateBuilds");

            migrationBuilder.DropTable(
                name: "OpsReportRateTurns");

            migrationBuilder.DropTable(
                name: "OpsReportRawDatas");

            migrationBuilder.DropTable(
                name: "OpsReportTvdDeltas");

            migrationBuilder.DropTable(
                name: "OpsReportTvds");

            migrationBuilder.DropTable(
                name: "OpsReportValids");

            migrationBuilder.DropTable(
                name: "OpsReportVertSects");

            migrationBuilder.DropTable(
                name: "OpsReportAmtPrecips");

            migrationBuilder.DropTable(
                name: "OpsReportAziCurrentSeas");

            migrationBuilder.DropTable(
                name: "OpsReportAziWaves");

            migrationBuilder.DropTable(
                name: "OpsReportAziWinds");

            migrationBuilder.DropTable(
                name: "OpsReportBarometricPressures");

            migrationBuilder.DropTable(
                name: "OpsReportCeilingClouds");

            migrationBuilder.DropTable(
                name: "OpsReportCurrentSeas");

            migrationBuilder.DropTable(
                name: "OpsReportHtWaves");

            migrationBuilder.DropTable(
                name: "OpsReportPeriodWaves");

            migrationBuilder.DropTable(
                name: "OpsReportTempSurfaceMns");

            migrationBuilder.DropTable(
                name: "OpsReportTempSurfaceMxs");

            migrationBuilder.DropTable(
                name: "OpsReportTempWindChills");

            migrationBuilder.DropTable(
                name: "OpsReportTempseas");

            migrationBuilder.DropTable(
                name: "OpsReportVelWinds");

            migrationBuilder.DropTable(
                name: "OpsReportVisibilitys");

            migrationBuilder.DropTable(
                name: "SideWallCoreDensShale");

            migrationBuilder.DropTable(
                name: "SideWallLithPcs");

            migrationBuilder.DropTable(
                name: "SideWallCoreQualifier");

            migrationBuilder.DropTable(
                name: "SideWallCoreNatFlorPc");

            migrationBuilder.DropTable(
                name: "SideWallCoreStainPc");

            migrationBuilder.DropTable(
                name: "StimJobWeights");

            migrationBuilder.DropTable(
                name: "StimJobAvgBottomholeTreatmentPress");

            migrationBuilder.DropTable(
                name: "StimJobAvgBottomholeTreatmentRates");

            migrationBuilder.DropTable(
                name: "StimJobBaseFluidVols");

            migrationBuilder.DropTable(
                name: "StimJobBottomholeHydrostaticPress");

            migrationBuilder.DropTable(
                name: "StimJobBottomholeTemperatures");

            migrationBuilder.DropTable(
                name: "StimJobBubblePointPress");

            migrationBuilder.DropTable(
                name: "StimJobFluidCompressibilitys");

            migrationBuilder.DropTable(
                name: "StimJobFluidDensitys");

            migrationBuilder.DropTable(
                name: "StimJobFluidEfficiencyTests");

            migrationBuilder.DropTable(
                name: "StimJobFluidSpecificHeats");

            migrationBuilder.DropTable(
                name: "StimJobFluidThermalConductivitys");

            migrationBuilder.DropTable(
                name: "StimJobFluidThermalExpansionCoefficients");

            migrationBuilder.DropTable(
                name: "StimJobFoamQualitys");

            migrationBuilder.DropTable(
                name: "StimJobMdBottomholes");

            migrationBuilder.DropTable(
                name: "StimJobMdMidPerforations");

            migrationBuilder.DropTable(
                name: "StimJobMdSurfaces");

            migrationBuilder.DropTable(
                name: "StimJobPercentPads");

            migrationBuilder.DropTable(
                name: "StimJobPumpDurations");

            migrationBuilder.DropTable(
                name: "StimJobPumpFlowBackTests");

            migrationBuilder.DropTable(
                name: "StimJobReservoirTotalCompressibilitys");

            migrationBuilder.DropTable(
                name: "StimJobStepDownTests");

            migrationBuilder.DropTable(
                name: "StimJobStepRateTests");

            migrationBuilder.DropTable(
                name: "StimJobSurfaceFluidTemperatures");

            migrationBuilder.DropTable(
                name: "StimJobSurfaceTemperatures");

            migrationBuilder.DropTable(
                name: "StimJobTvdMidPerforations");

            migrationBuilder.DropTable(
                name: "StimJobWellboreVolumes");

            migrationBuilder.DropTable(
                name: "StimJobDensityPerforations");

            migrationBuilder.DropTable(
                name: "StimJobFrictionPress");

            migrationBuilder.DropTable(
                name: "StimJobMdPerforationsBottoms");

            migrationBuilder.DropTable(
                name: "StimJobMdPerforationsTops");

            migrationBuilder.DropTable(
                name: "StimJobPhasingPerforations");

            migrationBuilder.DropTable(
                name: "StimJobSizes");

            migrationBuilder.DropTable(
                name: "StimJobTvdPerforationsBottoms");

            migrationBuilder.DropTable(
                name: "StimJobTvdPerforationsTops");

            migrationBuilder.DropTable(
                name: "StimJobFormationPermeabilitys");

            migrationBuilder.DropTable(
                name: "StimJobFormationPorositys");

            migrationBuilder.DropTable(
                name: "StimJobGrossPayThicknesss");

            migrationBuilder.DropTable(
                name: "StimJobLithFormationPermeabilitys");

            migrationBuilder.DropTable(
                name: "StimJobLithNetPayThicknesss");

            migrationBuilder.DropTable(
                name: "StimJobLithPoissonsRatios");

            migrationBuilder.DropTable(
                name: "StimJobLithPorePress");

            migrationBuilder.DropTable(
                name: "StimJobLithYoungsModuluss");

            migrationBuilder.DropTable(
                name: "StimJobMdGrossPayBottoms");

            migrationBuilder.DropTable(
                name: "StimJobMdGrossPayTops");

            migrationBuilder.DropTable(
                name: "StimJobMdLithBottoms");

            migrationBuilder.DropTable(
                name: "StimJobMdLithTops");

            migrationBuilder.DropTable(
                name: "StimJobNetPayFluidCompressibilitys");

            migrationBuilder.DropTable(
                name: "StimJobNetPayFluidViscositys");

            migrationBuilder.DropTable(
                name: "StimJobNetPayFormationPermeabilitys");

            migrationBuilder.DropTable(
                name: "StimJobNetPayFormationPorositys");

            migrationBuilder.DropTable(
                name: "StimJobNetPayPorePress");

            migrationBuilder.DropTable(
                name: "StimJobNetPayThicknesss");

            migrationBuilder.DropTable(
                name: "TargetCommonDatas");

            migrationBuilder.DropTable(
                name: "TargetDips");

            migrationBuilder.DropTable(
                name: "TargetDispEwCenters");

            migrationBuilder.DropTable(
                name: "TargetDispEwOffsets");

            migrationBuilder.DropTable(
                name: "TargetDispEwSectOrigs");

            migrationBuilder.DropTable(
                name: "TargetDispNsCenters");

            migrationBuilder.DropTable(
                name: "TargetDispNsOffsets");

            migrationBuilder.DropTable(
                name: "TargetDispNsSectOrigs");

            migrationBuilder.DropTable(
                name: "TargetLenMajorAxiss");

            migrationBuilder.DropTable(
                name: "TargetRotations");

            migrationBuilder.DropTable(
                name: "TargetStrikes");

            migrationBuilder.DropTable(
                name: "TargetThickAboves");

            migrationBuilder.DropTable(
                name: "TargetThickBelows");

            migrationBuilder.DropTable(
                name: "TargetTvds");

            migrationBuilder.DropTable(
                name: "TargetWidMinorAxiss");

            migrationBuilder.DropTable(
                name: "ToolErrorModelGyroInitializations");

            migrationBuilder.DropTable(
                name: "ToolErrorModelGyroReinitializationDistances");

            migrationBuilder.DropTable(
                name: "ToolErrorModelMaxs");

            migrationBuilder.DropTable(
                name: "ToolErrorModelMins");

            migrationBuilder.DropTable(
                name: "ToolErrorTermSetAuthorizations");

            migrationBuilder.DropTable(
                name: "ToolErrorTermSetNomenclatures");

            migrationBuilder.DropTable(
                name: "TrajectoryDirSensorOffsets");

            migrationBuilder.DropTable(
                name: "TrajectoryGravAxialAccelCors");

            migrationBuilder.DropTable(
                name: "TrajectoryGravTran1AccelCors");

            migrationBuilder.DropTable(
                name: "TrajectoryGravTran2AccelCors");

            migrationBuilder.DropTable(
                name: "TrajectoryMagAxialDrlstrCors");

            migrationBuilder.DropTable(
                name: "TrajectoryMagTran1DrlstrCors");

            migrationBuilder.DropTable(
                name: "TrajectoryMagTran2DrlstrCors");

            migrationBuilder.DropTable(
                name: "TrajectorySagAziCors");

            migrationBuilder.DropTable(
                name: "TrajectorySagIncCors");

            migrationBuilder.DropTable(
                name: "TrajectoryStnGridCorUseds");

            migrationBuilder.DropTable(
                name: "TrajectoryStnMagDeclUseds");

            migrationBuilder.DropTable(
                name: "TrajectoryBiasEs");

            migrationBuilder.DropTable(
                name: "TrajectoryBiasNs");

            migrationBuilder.DropTable(
                name: "TrajectoryBiasVerts");

            migrationBuilder.DropTable(
                name: "TrajectoryVarianceEEs");

            migrationBuilder.DropTable(
                name: "TrajectoryVarianceEVerts");

            migrationBuilder.DropTable(
                name: "TrajectoryVarianceNEs");

            migrationBuilder.DropTable(
                name: "TrajectoryVarianceNNs");

            migrationBuilder.DropTable(
                name: "TrajectoryVarianceNVerts");

            migrationBuilder.DropTable(
                name: "TrajectoryVarianceVertVerts");

            migrationBuilder.DropTable(
                name: "TrajectoryGravAxialRaws");

            migrationBuilder.DropTable(
                name: "TrajectoryGravTran1Raws");

            migrationBuilder.DropTable(
                name: "TrajectoryGravTran2Raws");

            migrationBuilder.DropTable(
                name: "TrajectoryMagAxialRaws");

            migrationBuilder.DropTable(
                name: "TrajectoryMagTran1Raws");

            migrationBuilder.DropTable(
                name: "TrajectoryMagTran2Raws");

            migrationBuilder.DropTable(
                name: "TrajectoryGravTotalFieldCalcs");

            migrationBuilder.DropTable(
                name: "TrajectoryMagDipAngleCalcs");

            migrationBuilder.DropTable(
                name: "TrajectoryMagTotalFieldCalcs");

            migrationBuilder.DropTable(
                name: "TubularAngle");

            migrationBuilder.DropTable(
                name: "TubularDistBendBot");

            migrationBuilder.DropTable(
                name: "TubularCosts");

            migrationBuilder.DropTable(
                name: "TubularDiaBits");

            migrationBuilder.DropTable(
                name: "TubularDiaPassThrus");

            migrationBuilder.DropTable(
                name: "TubularDiaPilot");

            migrationBuilder.DropTable(
                name: "TubularCriticalCrossSection");

            migrationBuilder.DropTable(
                name: "TubularId");

            migrationBuilder.DropTable(
                name: "TubularLen");

            migrationBuilder.DropTable(
                name: "TubularOd");

            migrationBuilder.DropTable(
                name: "TubularPresLeak");

            migrationBuilder.DropTable(
                name: "TubularSizeThread");

            migrationBuilder.DropTable(
                name: "TubularTensYield");

            migrationBuilder.DropTable(
                name: "TubularTqMakeup");

            migrationBuilder.DropTable(
                name: "TubularTqYield");

            migrationBuilder.DropTable(
                name: "TubularDiaHoleOpener");

            migrationBuilder.DropTable(
                name: "TubularForDownSet");

            migrationBuilder.DropTable(
                name: "TubularForDownTrip");

            migrationBuilder.DropTable(
                name: "TubularForPmpOpen");

            migrationBuilder.DropTable(
                name: "TubularForSealFric");

            migrationBuilder.DropTable(
                name: "TubularForUpSet");

            migrationBuilder.DropTable(
                name: "TubularForUpTrip");

            migrationBuilder.DropTable(
                name: "TubularBendSettingsMn");

            migrationBuilder.DropTable(
                name: "TubularBendSettingsMx");

            migrationBuilder.DropTable(
                name: "TubularClearanceBearBox");

            migrationBuilder.DropTable(
                name: "TubularDiaNozzle");

            migrationBuilder.DropTable(
                name: "TubularDiaRotorNozzle");

            migrationBuilder.DropTable(
                name: "TubularOffsetTool");

            migrationBuilder.DropTable(
                name: "TubularTempOpMx");

            migrationBuilder.DropTable(
                name: "TubularFlowrateMn");

            migrationBuilder.DropTable(
                name: "TubularFlowrateMx");

            migrationBuilder.DropTable(
                name: "TubularIdEquv");

            migrationBuilder.DropTable(
                name: "TubularTempMx");

            migrationBuilder.DropTable(
                name: "TubularDistBladeBot");

            migrationBuilder.DropTable(
                name: "TubularLenBlade");

            migrationBuilder.DropTable(
                name: "TubularOdBladeMn");

            migrationBuilder.DropTable(
                name: "TubularOdBladeMx");

            migrationBuilder.DropTable(
                name: "TubularCommonDatas");

            migrationBuilder.DropTable(
                name: "TubularDiaHoleAssy");

            migrationBuilder.DropTable(
                name: "CementJobAdditives");

            migrationBuilder.DropTable(
                name: "CementJobConcentrations");

            migrationBuilder.DropTable(
                name: "CementJobDensAdds");

            migrationBuilder.DropTable(
                name: "CementJobETimPumps");

            migrationBuilder.DropTable(
                name: "CementJobETimShutdowns");

            migrationBuilder.DropTable(
                name: "CementJobPresBacks");

            migrationBuilder.DropTable(
                name: "CementJobRatePumps");

            migrationBuilder.DropTable(
                name: "CementJobVolPumps");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemUsesEllipsoidalCS");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemUsesGeodeticDatum");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemUsesMethod");

            migrationBuilder.DropTable(
                name: "MudLogAcetylene");

            migrationBuilder.DropTable(
                name: "MudLogCo2Av");

            migrationBuilder.DropTable(
                name: "MudLogCo2Mn");

            migrationBuilder.DropTable(
                name: "MudLogCo2Mx");

            migrationBuilder.DropTable(
                name: "MudLogETimChromCycle");

            migrationBuilder.DropTable(
                name: "MudLogEpentAv");

            migrationBuilder.DropTable(
                name: "MudLogEpentMn");

            migrationBuilder.DropTable(
                name: "MudLogEpentMx");

            migrationBuilder.DropTable(
                name: "MudLogEthAv");

            migrationBuilder.DropTable(
                name: "MudLogEthMn");

            migrationBuilder.DropTable(
                name: "MudLogEthMx");

            migrationBuilder.DropTable(
                name: "MudLogH2sAv");

            migrationBuilder.DropTable(
                name: "MudLogH2sMn");

            migrationBuilder.DropTable(
                name: "MudLogH2sMx");

            migrationBuilder.DropTable(
                name: "MudLogIbutAv");

            migrationBuilder.DropTable(
                name: "MudLogIbutMn");

            migrationBuilder.DropTable(
                name: "MudLogIbutMx");

            migrationBuilder.DropTable(
                name: "MudLogIhexAv");

            migrationBuilder.DropTable(
                name: "MudLogIhexMn");

            migrationBuilder.DropTable(
                name: "MudLogIhexMx");

            migrationBuilder.DropTable(
                name: "MudLogIpentAv");

            migrationBuilder.DropTable(
                name: "MudLogIpentMn");

            migrationBuilder.DropTable(
                name: "MudLogIpentMx");

            migrationBuilder.DropTable(
                name: "MudLogMdBottom");

            migrationBuilder.DropTable(
                name: "MudLogMdTop");

            migrationBuilder.DropTable(
                name: "MudLogMethAv");

            migrationBuilder.DropTable(
                name: "MudLogMethMn");

            migrationBuilder.DropTable(
                name: "MudLogMethMx");

            migrationBuilder.DropTable(
                name: "MudLogNbutAv");

            migrationBuilder.DropTable(
                name: "MudLogNbutMn");

            migrationBuilder.DropTable(
                name: "MudLogNbutMx");

            migrationBuilder.DropTable(
                name: "MudLogNhexAv");

            migrationBuilder.DropTable(
                name: "MudLogNhexMn");

            migrationBuilder.DropTable(
                name: "MudLogNhexMx");

            migrationBuilder.DropTable(
                name: "MudLogNpentAv");

            migrationBuilder.DropTable(
                name: "MudLogNpentMn");

            migrationBuilder.DropTable(
                name: "MudLogNpentMx");

            migrationBuilder.DropTable(
                name: "MudLogPropAv");

            migrationBuilder.DropTable(
                name: "MudLogPropMn");

            migrationBuilder.DropTable(
                name: "MudLogPropMx");

            migrationBuilder.DropTable(
                name: "MudLogWtMudIn");

            migrationBuilder.DropTable(
                name: "MudLogWtMudOut");

            migrationBuilder.DropTable(
                name: "MudLogDensShale");

            migrationBuilder.DropTable(
                name: "MudLogQualifier");

            migrationBuilder.DropTable(
                name: "MudLogGasAv");

            migrationBuilder.DropTable(
                name: "MudLogGasBackgnd");

            migrationBuilder.DropTable(
                name: "MudLogGasConAv");

            migrationBuilder.DropTable(
                name: "MudLogGasConMx");

            migrationBuilder.DropTable(
                name: "MudLogGasPeak");

            migrationBuilder.DropTable(
                name: "MudLogGasTrip");

            migrationBuilder.DropTable(
                name: "MudLogNatFlorPc");

            migrationBuilder.DropTable(
                name: "MudLogStainPc");

            migrationBuilder.DropTable(
                name: "OpsReportCostLostGrosss");

            migrationBuilder.DropTable(
                name: "OpsReportETimLostGrosss");

            migrationBuilder.DropTable(
                name: "OpsReportVolLostAbandonHoles");

            migrationBuilder.DropTable(
                name: "OpsReportVolLostBhdCsgHoles");

            migrationBuilder.DropTable(
                name: "OpsReportVolLostCircHoles");

            migrationBuilder.DropTable(
                name: "OpsReportVolLostCmtHoles");

            migrationBuilder.DropTable(
                name: "OpsReportVolLostCsgHoles");

            migrationBuilder.DropTable(
                name: "OpsReportVolLostMudCleanerSurfs");

            migrationBuilder.DropTable(
                name: "OpsReportVolLostOtherHoles");

            migrationBuilder.DropTable(
                name: "OpsReportVolLostOtherSurfs");

            migrationBuilder.DropTable(
                name: "OpsReportVolLostPitsSurfs");

            migrationBuilder.DropTable(
                name: "OpsReportVolLostShakerSurfs");

            migrationBuilder.DropTable(
                name: "OpsReportVolLostTrippingSurfs");

            migrationBuilder.DropTable(
                name: "OpsReportVolTotMudLostHoles");

            migrationBuilder.DropTable(
                name: "OpsReportVolTotMudLostSurfs");

            migrationBuilder.DropTable(
                name: "OpsReportCutPoints");

            migrationBuilder.DropTable(
                name: "OpsReportMeshXs");

            migrationBuilder.DropTable(
                name: "OpsReportMeshYs");

            migrationBuilder.DropTable(
                name: "OpsReportDirSensorOffsets");

            migrationBuilder.DropTable(
                name: "OpsReportGravAxialAccelCors");

            migrationBuilder.DropTable(
                name: "OpsReportGravTran1AccelCors");

            migrationBuilder.DropTable(
                name: "OpsReportGravTran2AccelCors");

            migrationBuilder.DropTable(
                name: "OpsReportMagAxialDrlstrCors");

            migrationBuilder.DropTable(
                name: "OpsReportMagTran1DrlstrCors");

            migrationBuilder.DropTable(
                name: "OpsReportMagTran2DrlstrCors");

            migrationBuilder.DropTable(
                name: "OpsReportSagAziCors");

            migrationBuilder.DropTable(
                name: "OpsReportSagIncCors");

            migrationBuilder.DropTable(
                name: "OpsReportStnGridCorUseds");

            migrationBuilder.DropTable(
                name: "OpsReportStnMagDeclUseds");

            migrationBuilder.DropTable(
                name: "OpsReportBiasEs");

            migrationBuilder.DropTable(
                name: "OpsReportBiasNs");

            migrationBuilder.DropTable(
                name: "OpsReportBiasVerts");

            migrationBuilder.DropTable(
                name: "OpsReportVarianceEEs");

            migrationBuilder.DropTable(
                name: "OpsReportVarianceEVerts");

            migrationBuilder.DropTable(
                name: "OpsReportVarianceNEs");

            migrationBuilder.DropTable(
                name: "OpsReportVarianceNNs");

            migrationBuilder.DropTable(
                name: "OpsReportVarianceNVerts");

            migrationBuilder.DropTable(
                name: "OpsReportVarianceVertVerts");

            migrationBuilder.DropTable(
                name: "OpsReportGravAxialRaws");

            migrationBuilder.DropTable(
                name: "OpsReportGravTran1Raws");

            migrationBuilder.DropTable(
                name: "OpsReportGravTran2Raws");

            migrationBuilder.DropTable(
                name: "OpsReportMagAxialRaws");

            migrationBuilder.DropTable(
                name: "OpsReportMagTran1Raws");

            migrationBuilder.DropTable(
                name: "OpsReportMagTran2Raws");

            migrationBuilder.DropTable(
                name: "OpsReportGravTotalFieldCalcs");

            migrationBuilder.DropTable(
                name: "OpsReportMagDipAngleCalcs");

            migrationBuilder.DropTable(
                name: "OpsReportMagTotalFieldCalcs");

            migrationBuilder.DropTable(
                name: "SideWallCoreAbundance");

            migrationBuilder.DropTable(
                name: "StimJobEndPdlDurations");

            migrationBuilder.DropTable(
                name: "StimJobFluidEfficiencys");

            migrationBuilder.DropTable(
                name: "StimJobFractureLengths");

            migrationBuilder.DropTable(
                name: "StimJobFractureWidths");

            migrationBuilder.DropTable(
                name: "StimJobNetPress");

            migrationBuilder.DropTable(
                name: "StimJobPorePress");

            migrationBuilder.DropTable(
                name: "StimJobPseudoRadialPress");

            migrationBuilder.DropTable(
                name: "StimJobResidualPermeabilitys");

            migrationBuilder.DropTable(
                name: "StimJobFractureCloseDurations");

            migrationBuilder.DropTable(
                name: "StimJobFractureClosePress");

            migrationBuilder.DropTable(
                name: "StimJobBottomholeFluidDensitys");

            migrationBuilder.DropTable(
                name: "StimJobDiameterEntryHoles");

            migrationBuilder.DropTable(
                name: "StimJobInitialShutinPress");

            migrationBuilder.DropTable(
                name: "StimJobFractureExtensionPress");

            migrationBuilder.DropTable(
                name: "ToolErrorTermSetConstants");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemEllipsoidalCS");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemOperationMethod");

            migrationBuilder.DropTable(
                name: "MudLogAbundance");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemIdentifier");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemName");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemGeodeticDatum");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemUsesEllipsoid");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemUsesPrimeMeridian");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemEllipsoid");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemPrimeMeridian");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemSecondDefiningParameter");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemSemiMajorAxis");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemGreenwichLongitude");

            migrationBuilder.DropTable(
                name: "CoordinateReferenceSystemInverseFlattening");

            migrationBuilder.DropTable(
                name: "DrillReports");

            migrationBuilder.DropTable(
                name: "DrillReportBitRecord");

            migrationBuilder.DropTable(
                name: "DrillReportCommonData");

            migrationBuilder.DropTable(
                name: "DrillReportControlIncidentInfo");

            migrationBuilder.DropTable(
                name: "DrillReportCoreInfo");

            migrationBuilder.DropTable(
                name: "DrillReportEquipFailureInfo");

            migrationBuilder.DropTable(
                name: "DrillReportExtendedReport");

            migrationBuilder.DropTable(
                name: "DrillReportFormTestInfo");

            migrationBuilder.DropTable(
                name: "DrillReportGasReadingInfo");

            migrationBuilder.DropTable(
                name: "DrillReportLithShowInfo");

            migrationBuilder.DropTable(
                name: "DrillReportPerfInfo");

            migrationBuilder.DropTable(
                name: "DrillReportStatusInfo");

            migrationBuilder.DropTable(
                name: "DrillReportStratInfo");

            migrationBuilder.DropTable(
                name: "DrillReportSurveyStation");

            migrationBuilder.DropTable(
                name: "DrillReportWellAlias");

            migrationBuilder.DropTable(
                name: "DrillReportWellCR");

            migrationBuilder.DropTable(
                name: "DrillReportWellTestInfo");

            migrationBuilder.DropTable(
                name: "DrillReportWellboreInfo");

            migrationBuilder.DropTable(
                name: "DrillReportDefaultDatum");

            migrationBuilder.DropTable(
                name: "DrillReportDiaBit");

            migrationBuilder.DropTable(
                name: "DrillReportETimLost");

            migrationBuilder.DropTable(
                name: "DrillReportMdBit");

            migrationBuilder.DropTable(
                name: "DrillReportMdInflow");

            migrationBuilder.DropTable(
                name: "DrillReportPorePressure");

            migrationBuilder.DropTable(
                name: "DrillReportPresMaxChoke");

            migrationBuilder.DropTable(
                name: "DrillReportPresShutInCasing");

            migrationBuilder.DropTable(
                name: "DrillReportPresShutInDrill");

            migrationBuilder.DropTable(
                name: "DrillReportTempBottom");

            migrationBuilder.DropTable(
                name: "DrillReportTvdInflow");

            migrationBuilder.DropTable(
                name: "DrillReportVolMudGained");

            migrationBuilder.DropTable(
                name: "DrillReportWtMuds");

            migrationBuilder.DropTable(
                name: "DrillReportLenBarrel");

            migrationBuilder.DropTable(
                name: "DrillReportLenRecovered");

            migrationBuilder.DropTable(
                name: "DrillReportRecoverPc");

            migrationBuilder.DropTable(
                name: "DrillReportETimMissProduction");

            migrationBuilder.DropTable(
                name: "DrillReportDensityHC");

            migrationBuilder.DropTable(
                name: "DrillReportMdSample");

            migrationBuilder.DropTable(
                name: "DrillReportPresPore");

            migrationBuilder.DropTable(
                name: "DrillReportVolumeSample");

            migrationBuilder.DropTable(
                name: "DrillReportEth");

            migrationBuilder.DropTable(
                name: "DrillReportGasHigh");

            migrationBuilder.DropTable(
                name: "DrillReportGasLow");

            migrationBuilder.DropTable(
                name: "DrillReportIbut");

            migrationBuilder.DropTable(
                name: "DrillReportIpent");

            migrationBuilder.DropTable(
                name: "DrillReportMeth");

            migrationBuilder.DropTable(
                name: "DrillReportNbut");

            migrationBuilder.DropTable(
                name: "DrillReportProp");

            migrationBuilder.DropTable(
                name: "DrillReportDiaCsgLast");

            migrationBuilder.DropTable(
                name: "DrillReportDiaHole");

            migrationBuilder.DropTable(
                name: "DrillReportDiaPilot");

            migrationBuilder.DropTable(
                name: "DrillReportDistDrill");

            migrationBuilder.DropTable(
                name: "DrillReportMdCsgLast");

            migrationBuilder.DropTable(
                name: "DrillReportMdDiaHoleStart");

            migrationBuilder.DropTable(
                name: "DrillReportMdDiaPilotPlan");

            migrationBuilder.DropTable(
                name: "DrillReportMdKickoff");

            migrationBuilder.DropTable(
                name: "DrillReportMdPlugTop");

            migrationBuilder.DropTable(
                name: "DrillReportMdStrengthForm");

            migrationBuilder.DropTable(
                name: "DrillReportRopCurrent");

            migrationBuilder.DropTable(
                name: "DrillReportStrengthForm");

            migrationBuilder.DropTable(
                name: "DrillReportAzi");

            migrationBuilder.DropTable(
                name: "DrillReportIncl");

            migrationBuilder.DropTable(
                name: "DrillReportGeodeticCRS");

            migrationBuilder.DropTable(
                name: "DrillReportCarbonDioxide");

            migrationBuilder.DropTable(
                name: "DrillReportChloride");

            migrationBuilder.DropTable(
                name: "DrillReportChokeOrificeSize");

            migrationBuilder.DropTable(
                name: "DrillReportDensityGas");

            migrationBuilder.DropTable(
                name: "DrillReportDensityOil");

            migrationBuilder.DropTable(
                name: "DrillReportDensityWater");

            migrationBuilder.DropTable(
                name: "DrillReportFlowRateGas");

            migrationBuilder.DropTable(
                name: "DrillReportFlowRateOil");

            migrationBuilder.DropTable(
                name: "DrillReportFlowRateWater");

            migrationBuilder.DropTable(
                name: "DrillReportGasOilRatio");

            migrationBuilder.DropTable(
                name: "DrillReportHydrogenSulfide");

            migrationBuilder.DropTable(
                name: "DrillReportMdBottom");

            migrationBuilder.DropTable(
                name: "DrillReportMdTop");

            migrationBuilder.DropTable(
                name: "DrillReportPresBottom");

            migrationBuilder.DropTable(
                name: "DrillReportPresFlowing");

            migrationBuilder.DropTable(
                name: "DrillReportPresShutIn");

            migrationBuilder.DropTable(
                name: "DrillReportTvdBottom");

            migrationBuilder.DropTable(
                name: "DrillReportTvdTop");

            migrationBuilder.DropTable(
                name: "DrillReportVolGasTotal");

            migrationBuilder.DropTable(
                name: "DrillReportVolOilStored");

            migrationBuilder.DropTable(
                name: "DrillReportVolOilTotal");

            migrationBuilder.DropTable(
                name: "DrillReportVolWaterTotal");

            migrationBuilder.DropTable(
                name: "DrillReportWaterOilRatio");

            migrationBuilder.DropTable(
                name: "DrillReportEquivalentMudWeight");

            migrationBuilder.DropTable(
                name: "DrillReportMd");

            migrationBuilder.DropTable(
                name: "DrillReportTvd");

            migrationBuilder.DropTable(
                name: "WellDefaultDatums");

            migrationBuilder.DropTable(
                name: "WellGeodeticCRSs");

            migrationBuilder.DropTable(
                name: "WellLocalCRSs");

            migrationBuilder.DropTable(
                name: "WellYAxisAzimuths");

            migrationBuilder.DropTable(
                name: "WellMapProjectionCRSs");

            migrationBuilder.DropTable(
                name: "Wells");

            migrationBuilder.DropTable(
                name: "WellCommonDatas");

            migrationBuilder.DropTable(
                name: "WellGroundElevations");

            migrationBuilder.DropTable(
                name: "WellPcInterests");

            migrationBuilder.DropTable(
                name: "WellWaterDepths");

            migrationBuilder.DropTable(
                name: "WellLocations");

            migrationBuilder.DropTable(
                name: "WellheadElevations");

            migrationBuilder.DropTable(
                name: "WellEastings");

            migrationBuilder.DropTable(
                name: "WellLatitudes");

            migrationBuilder.DropTable(
                name: "WellLocalXs");

            migrationBuilder.DropTable(
                name: "WellLocalYs");

            migrationBuilder.DropTable(
                name: "WellLongitudes");

            migrationBuilder.DropTable(
                name: "WellNorthings");

            migrationBuilder.DropTable(
                name: "WellCRSs");

            migrationBuilder.DropTable(
                name: "WellReferencePoints");

            migrationBuilder.DropTable(
                name: "WellElevations");

            migrationBuilder.DropTable(
                name: "WellMeasuredDepths");
        }
    }
}
