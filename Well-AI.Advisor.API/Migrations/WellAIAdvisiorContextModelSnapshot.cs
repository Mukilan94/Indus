// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Well_AI.Advisor.API.Data;

namespace WellAI.Advisor.API.Migrations
{
    [DbContext(typeof(WellAIAdvisiorContext))]
    partial class WellAIAdvisiorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WellAI.Advisor.API.Models.Attachment", b =>
                {
                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("objectReferenceuidRef")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("uidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("uid");

                    b.HasIndex("CommonDataId");

                    b.HasIndex("objectReferenceuidRef");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("WellAI.Advisor.API.Models.AttachmentObjectReference", b =>
                {
                    b.Property<string>("uidRef")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Objects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("uidRef");

                    b.ToTable("AttachmentObjectReferences");
                });

            modelBuilder.Entity("WellAI.Advisor.API.Models.AttchmentCommonData", b =>
                {
                    b.Property<int>("CommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("dTimCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dTimLastChange")
                        .HasColumnType("datetime2");

                    b.Property<string>("itemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommonDataId");

                    b.ToTable("AttchmentCommonDatas");
                });

            modelBuilder.Entity("WellAI.Advisor.API.Models.DRILLINGDEPTHBASED", b =>
                {
                    b.Property<int>("DRILLINGDEPTHBASEDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ACTCOD")
                        .HasColumnName("ACTC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("BTDDIST")
                        .HasColumnName("BDDI")
                        .HasColumnType("real");

                    b.Property<float>("BTDTIME")
                        .HasColumnName("BDTI")
                        .HasColumnType("real");

                    b.Property<long>("BTREVC")
                        .HasColumnName("BRVC")
                        .HasColumnType("bigint");

                    b.Property<float>("CPDC")
                        .HasColumnName("CPDC")
                        .HasColumnType("real");

                    b.Property<float>("CPDI")
                        .HasColumnName("CPDI")
                        .HasColumnType("real");

                    b.Property<long>("DATE")
                        .HasColumnName("DATE")
                        .HasColumnType("bigint");

                    b.Property<float>("DEPTMEAS")
                        .HasColumnName("DMEA")
                        .HasColumnType("real");

                    b.Property<float>("DEPTVERT")
                        .HasColumnName("DVER")
                        .HasColumnType("real");

                    b.Property<float>("DXC")
                        .HasColumnName("DXC")
                        .HasColumnType("real");

                    b.Property<float>("ECDTD")
                        .HasColumnName("ECDT")
                        .HasColumnType("real");

                    b.Property<float>("HKLA")
                        .HasColumnName("HKLA")
                        .HasColumnType("real");

                    b.Property<float>("MDIA")
                        .HasColumnName("MDIA")
                        .HasColumnType("real");

                    b.Property<float>("MFIA")
                        .HasColumnName("MFIA")
                        .HasColumnType("real");

                    b.Property<float>("MFOA")
                        .HasColumnName("MFOA")
                        .HasColumnType("real");

                    b.Property<string>("MFOP")
                        .HasColumnName("MFOP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RECID")
                        .HasColumnName("RID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ROPA")
                        .HasColumnName("ROPA")
                        .HasColumnType("real");

                    b.Property<string>("RPMA")
                        .HasColumnName("RPMA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SEQID")
                        .HasColumnName("SQID")
                        .HasColumnType("bigint");

                    b.Property<float>("SPARE1")
                        .HasColumnName("SPR1")
                        .HasColumnType("real");

                    b.Property<float>("SPARE2")
                        .HasColumnName("SPR2")
                        .HasColumnType("real");

                    b.Property<float>("SPARE3")
                        .HasColumnName("SPR3")
                        .HasColumnType("real");

                    b.Property<float>("SPARE4")
                        .HasColumnName("SPR4")
                        .HasColumnType("real");

                    b.Property<float>("SPARE5")
                        .HasColumnName("SPR5")
                        .HasColumnType("real");

                    b.Property<float>("SPARE6")
                        .HasColumnName("SPR6")
                        .HasColumnType("real");

                    b.Property<float>("SPARE7")
                        .HasColumnName("SPR7")
                        .HasColumnType("real");

                    b.Property<float>("SPARE8")
                        .HasColumnName("SPR8")
                        .HasColumnType("real");

                    b.Property<float>("SPARE9")
                        .HasColumnName("SPR9")
                        .HasColumnType("real");

                    b.Property<float>("SPPA")
                        .HasColumnName("SPPA")
                        .HasColumnType("real");

                    b.Property<string>("STKNUM")
                        .HasColumnName("SKNO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TIME")
                        .HasColumnName("TIME")
                        .HasColumnType("bigint");

                    b.Property<float>("TORQA")
                        .HasColumnName("TQA")
                        .HasColumnType("real");

                    b.Property<float>("TVOLACT")
                        .HasColumnName("TVA")
                        .HasColumnType("real");

                    b.Property<string>("WELLID")
                        .HasColumnName("WID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WOBA")
                        .HasColumnName("WOBA")
                        .HasColumnType("real");

                    b.HasKey("DRILLINGDEPTHBASEDId");

                    b.ToTable("erdos_DrillingDepthBased");
                });

            modelBuilder.Entity("WellAI.Advisor.API.Models.DrillingConnection", b =>
                {
                    b.Property<int>("DrillingConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("ACTCOD")
                        .HasColumnName("ACTC")
                        .HasColumnType("real");

                    b.Property<long>("DATE")
                        .HasColumnName("DATE")
                        .HasColumnType("bigint");

                    b.Property<float>("DEPTCONM")
                        .HasColumnName("DCNM")
                        .HasColumnType("real");

                    b.Property<float>("DEPTCONV")
                        .HasColumnName("DCNV")
                        .HasColumnType("real");

                    b.Property<float>("DEPTMEAS")
                        .HasColumnName("DMEA")
                        .HasColumnType("real");

                    b.Property<string>("DEPTVERT")
                        .HasColumnName("DVER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ETIMEBTS")
                        .HasColumnName("ETBS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ETIMEPOF")
                        .HasColumnName("ETPO")
                        .HasColumnType("real");

                    b.Property<string>("ETIMESLP")
                        .HasColumnName("ETSL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ETIMESTB")
                        .HasColumnName("ETSB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("HKLX")
                        .HasColumnName("HKLX")
                        .HasColumnType("real");

                    b.Property<long>("RECID")
                        .HasColumnName("RID")
                        .HasColumnType("bigint");

                    b.Property<float>("RSDX")
                        .HasColumnName("RSDX")
                        .HasColumnType("real");

                    b.Property<float>("RSUX")
                        .HasColumnName("RSUX")
                        .HasColumnType("real");

                    b.Property<long>("SEQID")
                        .HasColumnName("SQID")
                        .HasColumnType("bigint");

                    b.Property<float>("SPARE1")
                        .HasColumnName("SPR1")
                        .HasColumnType("real");

                    b.Property<float>("SPARE2")
                        .HasColumnName("SPR2")
                        .HasColumnType("real");

                    b.Property<float>("SPARE3")
                        .HasColumnName("SPR3")
                        .HasColumnType("real");

                    b.Property<float>("SPARE4")
                        .HasColumnName("SPR4")
                        .HasColumnType("real");

                    b.Property<float>("SPARE5")
                        .HasColumnName("SPR5")
                        .HasColumnType("real");

                    b.Property<string>("STKNUM")
                        .HasColumnName("SKNO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("STRGWT")
                        .HasColumnName("STWT")
                        .HasColumnType("real");

                    b.Property<string>("TIME")
                        .HasColumnName("TIME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TORQBOX")
                        .HasColumnName("TQBX")
                        .HasColumnType("real");

                    b.Property<float>("TORQMUX")
                        .HasColumnName("TQMX")
                        .HasColumnType("real");

                    b.Property<string>("WELLID")
                        .HasColumnName("WID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrillingConnectionId");

                    b.ToTable("erdos_DrillingConnections");
                });

            modelBuilder.Entity("WellAI.Advisor.API.Models.GeneralTimeBased", b =>
                {
                    b.Property<int>("GeneralTimeBasedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ACTCOD")
                        .HasColumnName("ACTC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("BLKPOS")
                        .HasColumnName("BPOS")
                        .HasColumnType("real");

                    b.Property<float>("CHKP")
                        .HasColumnName("CHKP")
                        .HasColumnType("real");

                    b.Property<long>("DATE")
                        .HasColumnName("DATE")
                        .HasColumnType("bigint");

                    b.Property<float>("DEPTBITM")
                        .HasColumnName("DBTM")
                        .HasColumnType("real");

                    b.Property<float>("DEPTBITV")
                        .HasColumnName("DBTV")
                        .HasColumnType("real");

                    b.Property<float>("DEPTMEAS")
                        .HasColumnName("DMEA")
                        .HasColumnType("real");

                    b.Property<float>("DEPTRETM")
                        .HasColumnName("DRTM")
                        .HasColumnType("real");

                    b.Property<float>("DEPTVERT")
                        .HasColumnName("DVER")
                        .HasColumnType("real");

                    b.Property<float>("GASA")
                        .HasColumnName("GASA")
                        .HasColumnType("real");

                    b.Property<float>("HKLA")
                        .HasColumnName("HKLA")
                        .HasColumnType("real");

                    b.Property<float>("HKLX")
                        .HasColumnName("HKLX")
                        .HasColumnType("real");

                    b.Property<string>("LAGSTKS")
                        .HasColumnName("LSTK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MCIA")
                        .HasColumnName("MCIA")
                        .HasColumnType("real");

                    b.Property<float>("MCOA")
                        .HasColumnName("MCOA")
                        .HasColumnType("real");

                    b.Property<float>("MDIA")
                        .HasColumnName("MDIA")
                        .HasColumnType("real");

                    b.Property<float>("MDOA")
                        .HasColumnName("MDOA")
                        .HasColumnType("real");

                    b.Property<float>("MFIA")
                        .HasColumnName("MFIA")
                        .HasColumnType("real");

                    b.Property<float>("MFOA")
                        .HasColumnName("MFOA")
                        .HasColumnType("real");

                    b.Property<string>("MFOP")
                        .HasColumnName("MFOP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MTIA")
                        .HasColumnName("MTIA")
                        .HasColumnType("real");

                    b.Property<float>("MTOA")
                        .HasColumnName("MTOA")
                        .HasColumnType("real");

                    b.Property<string>("RECID")
                        .HasColumnName("RID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ROPA")
                        .HasColumnName("ROPA")
                        .HasColumnType("real");

                    b.Property<string>("RPMA")
                        .HasColumnName("RPMA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SEQID")
                        .HasColumnName("SQID")
                        .HasColumnType("bigint");

                    b.Property<float>("SPARE1")
                        .HasColumnName("SPR1")
                        .HasColumnType("real");

                    b.Property<float>("SPARE2")
                        .HasColumnName("SPR2")
                        .HasColumnType("real");

                    b.Property<float>("SPARE3")
                        .HasColumnName("SPR3")
                        .HasColumnType("real");

                    b.Property<float>("SPARE4")
                        .HasColumnName("SPR4")
                        .HasColumnType("real");

                    b.Property<float>("SPARE5")
                        .HasColumnName("SPR5")
                        .HasColumnType("real");

                    b.Property<string>("SPM1")
                        .HasColumnName("SPM1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SPM2")
                        .HasColumnName("SPM2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SPM3")
                        .HasColumnName("SPM3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SPPA")
                        .HasColumnName("SPPA")
                        .HasColumnType("real");

                    b.Property<long>("STKC")
                        .HasColumnName("STKC")
                        .HasColumnType("bigint");

                    b.Property<string>("STKNUM")
                        .HasColumnName("SKNO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TIME")
                        .HasColumnName("TIME")
                        .HasColumnType("bigint");

                    b.Property<float>("TORQA")
                        .HasColumnName("TQA")
                        .HasColumnType("real");

                    b.Property<float>("TORQX")
                        .HasColumnName("TQX")
                        .HasColumnType("real");

                    b.Property<float>("TVOLACT")
                        .HasColumnName("TVA")
                        .HasColumnType("real");

                    b.Property<float>("TVOLCACT")
                        .HasColumnName("TVCA")
                        .HasColumnType("real");

                    b.Property<string>("WELLID")
                        .HasColumnName("WID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WOBA")
                        .HasColumnName("WOBA")
                        .HasColumnType("real");

                    b.Property<float>("WOBX")
                        .HasColumnName("WOBX")
                        .HasColumnType("real");

                    b.HasKey("GeneralTimeBasedId");

                    b.ToTable("erdos_GeneralTimeBased");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AcidVol", b =>
                {
                    b.Property<int>("AcidVolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcidVolId");

                    b.ToTable("StimJobAcidVols");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AcidVolume", b =>
                {
                    b.Property<int>("AcidVolumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcidVolumeId");

                    b.ToTable("StimJobAcidVolumes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AngleArc", b =>
                {
                    b.Property<int>("AngleArcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AngleArcId");

                    b.ToTable("TargetAngleArcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Authorization", b =>
                {
                    b.Property<int>("AuthorizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Authority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorizationId");

                    b.ToTable("ToolErrorTermSetAuthorizations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AveragePres", b =>
                {
                    b.Property<int>("AveragePresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AveragePresId");

                    b.ToTable("StimJobAveragePress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AveragePresBottomhole", b =>
                {
                    b.Property<int>("AveragePresBottomholeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AveragePresBottomholeId");

                    b.ToTable("StimJobAveragePresBottomholes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AveragePresSurface", b =>
                {
                    b.Property<int>("AveragePresSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AveragePresSurfaceId");

                    b.ToTable("StimJobAveragePresSurfaces");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgAcidRate", b =>
                {
                    b.Property<int>("AvgAcidRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgAcidRateId");

                    b.ToTable("StimJobAvgAcidRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgBaseFluidQuality", b =>
                {
                    b.Property<int>("AvgBaseFluidQualityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgBaseFluidQualityId");

                    b.ToTable("StimJobAvgBaseFluidQualitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgBaseFluidRate", b =>
                {
                    b.Property<int>("AvgBaseFluidRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgBaseFluidRateId");

                    b.ToTable("StimJobAvgBaseFluidRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgBaseFluidReturnRate", b =>
                {
                    b.Property<int>("AvgBaseFluidReturnRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgBaseFluidReturnRateId");

                    b.ToTable("StimJobAvgBaseFluidReturnRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgBottomholeRate", b =>
                {
                    b.Property<int>("AvgBottomholeRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgBottomholeRateId");

                    b.ToTable("StimJobAvgBottomholeRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgBottomholeTreatmentPres", b =>
                {
                    b.Property<int>("AvgBottomholeTreatmentPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgBottomholeTreatmentPresId");

                    b.ToTable("StimJobAvgBottomholeTreatmentPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgBottomholeTreatmentRate", b =>
                {
                    b.Property<int>("AvgBottomholeTreatmentRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgBottomholeTreatmentRateId");

                    b.ToTable("StimJobAvgBottomholeTreatmentRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgCO2BaseFluidQuality", b =>
                {
                    b.Property<int>("AvgCO2BaseFluidQualityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgCO2BaseFluidQualityId");

                    b.ToTable("StimJobAvgCO2BaseFluidQualitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgCO2LiquidRate", b =>
                {
                    b.Property<int>("AvgCO2LiquidRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgCO2LiquidRateId");

                    b.ToTable("StimJobAvgCO2LiquidRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgCO2Rate", b =>
                {
                    b.Property<int>("AvgCO2RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgCO2RateId");

                    b.ToTable("StimJobAvgCO2Rates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgConductivity", b =>
                {
                    b.Property<int>("AvgConductivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgConductivityId");

                    b.ToTable("StimJobAvgConductivitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgFractureWidth", b =>
                {
                    b.Property<int>("AvgFractureWidthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgFractureWidthId");

                    b.ToTable("StimJobAvgFractureWidths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgGelRate", b =>
                {
                    b.Property<int>("AvgGelRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgGelRateId");

                    b.ToTable("StimJobAvgGelRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgHydraulicPower", b =>
                {
                    b.Property<int>("AvgHydraulicPowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgHydraulicPowerId");

                    b.ToTable("StimJobAvgHydraulicPowers");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgInternalPhaseFraction", b =>
                {
                    b.Property<int>("AvgInternalPhaseFractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgInternalPhaseFractionId");

                    b.ToTable("StimJobAvgInternalPhaseFractions");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgJobPres", b =>
                {
                    b.Property<int>("AvgJobPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgJobPresId");

                    b.ToTable("StimJobAvgJobPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgN2BaseFluidQuality", b =>
                {
                    b.Property<int>("AvgN2BaseFluidQualityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgN2BaseFluidQualityId");

                    b.ToTable("StimJobAvgN2BaseFluidQualitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgN2StdRate", b =>
                {
                    b.Property<int>("AvgN2StdRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgN2StdRateId");

                    b.ToTable("StimJobAvgN2StdRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgOilRate", b =>
                {
                    b.Property<int>("AvgOilRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgOilRateId");

                    b.ToTable("StimJobAvgOilRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgPmaxPacPres", b =>
                {
                    b.Property<int>("AvgPmaxPacPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgPmaxPacPresId");

                    b.ToTable("StimJobAvgPmaxPacPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgPmaxWeaklinkPres", b =>
                {
                    b.Property<int>("AvgPmaxWeaklinkPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgPmaxWeaklinkPresId");

                    b.ToTable("StimJobAvgPmaxWeaklinkPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgPresCasing", b =>
                {
                    b.Property<int>("AvgPresCasingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgPresCasingId");

                    b.ToTable("StimJobAvgPresCasings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgPresTubing", b =>
                {
                    b.Property<int>("AvgPresTubingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgPresTubingId");

                    b.ToTable("StimJobAvgPresTubings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgPropConc", b =>
                {
                    b.Property<int>("AvgPropConcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgPropConcId");

                    b.ToTable("StimJobAvgPropConcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgProppantConcBottomhole", b =>
                {
                    b.Property<int>("AvgProppantConcBottomholeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgProppantConcBottomholeId");

                    b.ToTable("StimJobAvgProppantConcBottomholes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgProppantConcSurface", b =>
                {
                    b.Property<int>("AvgProppantConcSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgProppantConcSurfaceId");

                    b.ToTable("StimJobAvgProppantConcSurfaces");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgPumpRateBottomhole", b =>
                {
                    b.Property<int>("AvgPumpRateBottomholeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgPumpRateBottomholeId");

                    b.ToTable("StimJobAvgPumpRateBottomholes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgRateSurfaceCO2", b =>
                {
                    b.Property<int>("AvgRateSurfaceCO2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgRateSurfaceCO2Id");

                    b.ToTable("StimJobAvgRateSurfaceCO2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgRateSurfaceLiquid", b =>
                {
                    b.Property<int>("AvgRateSurfaceLiquidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgRateSurfaceLiquidId");

                    b.ToTable("StimJobAvgRateSurfaceLiquids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgSlurryPropConc", b =>
                {
                    b.Property<int>("AvgSlurryPropConcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgSlurryPropConcId");

                    b.ToTable("StimJobAvgSlurryPropConcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgSlurryRate", b =>
                {
                    b.Property<int>("AvgSlurryRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgSlurryRateId");

                    b.ToTable("StimJobAvgSlurryRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgSlurryReturnRate", b =>
                {
                    b.Property<int>("AvgSlurryReturnRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgSlurryReturnRateId");

                    b.ToTable("StimJobAvgSlurryReturnRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgStdRateSurfaceN2", b =>
                {
                    b.Property<int>("AvgStdRateSurfaceN2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgStdRateSurfaceN2Id");

                    b.ToTable("StimJobAvgStdRateSurfaceN2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgTemperature", b =>
                {
                    b.Property<int>("AvgTemperatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgTemperatureId");

                    b.ToTable("StimJobAvgTemperatures");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgTreatPres", b =>
                {
                    b.Property<int>("AvgTreatPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgTreatPresId");

                    b.ToTable("StimJobAvgTreatPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AvgWellheadRate", b =>
                {
                    b.Property<int>("AvgWellheadRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvgWellheadRateId");

                    b.ToTable("StimJobAvgWellheadRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AxisDirection", b =>
                {
                    b.Property<string>("CodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodeSpace");

                    b.ToTable("CoordinateReferenceSystemAxisDirection");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.AziVertSect", b =>
                {
                    b.Property<int>("AziVertSectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AziVertSectId");

                    b.ToTable("TrajectoryAziVertSects");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BaseFluidBypassVol", b =>
                {
                    b.Property<int>("BaseFluidBypassVolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BaseFluidBypassVolId");

                    b.ToTable("StimJobBaseFluidBypassVols");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BaseFluidVol", b =>
                {
                    b.Property<int>("BaseFluidVolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BaseFluidVolId");

                    b.ToTable("StimJobBaseFluidVols");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BaseGeographicCRS", b =>
                {
                    b.Property<int>("BaseGeographicCRSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GeographicCRSId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BaseGeographicCRSId");

                    b.HasIndex("GeographicCRSId");

                    b.ToTable("CoordinateReferenceSystemBaseGeographicCRS");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Bharun", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActDoglegMxUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActDoglegUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CommonDataId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DTimStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DTimStartDrilling")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DTimStop")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DTimStopDrilling")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrillingParamsUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumBitRun")
                        .HasColumnType("int");

                    b.Property<int>("NumStringRun")
                        .HasColumnType("int");

                    b.Property<string>("ObjectiveBha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanDoglegUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReasonTrip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusBha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TubularUidRef")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("ActDoglegMxUom");

                    b.HasIndex("ActDoglegUom");

                    b.HasIndex("CommonDataId");

                    b.HasIndex("DrillingParamsUid");

                    b.HasIndex("PlanDoglegUom");

                    b.HasIndex("TubularUidRef");

                    b.ToTable("Bharuns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunActDogleg", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunActDoglegs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunActDoglegMx", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunActDoglegMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunAziBottom", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunAziBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunAziTop", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunAziTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunCTimCirc", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunCTimCircs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunCTimDrillRot", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunCTimDrillRots");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunCTimDrillSlid", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunCTimDrillSlids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunCTimHold", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunCTimHolds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunCTimReam", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunCTimReams");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunCTimSteering", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunCTimSteerings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunCommonData", b =>
                {
                    b.Property<int>("CommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommonDataId");

                    b.ToTable("BharunCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunDistDrillRot", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunDistDrillRots");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunDistDrillSlid", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunDistDrillSlids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunDistHold", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunDistHolds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunDistReam", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunDistReams");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunDistSteering", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunDistSteerings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunDrillingParams", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AziBottomUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AziTopUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CTimCircUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CTimDrillRotUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CTimDrillSlidUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CTimHoldUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CTimReamUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CTimSteeringUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistDrillRotUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DistDrillSlidUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DistHoldUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DistReamUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DistSteeringUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ETimOpBitUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FlowrateBitUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FlowratePumpUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HkldDnUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HkldRotUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HkldUpUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InclMnUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InclMxUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InclStartUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InclStopUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MdHoleStartUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MdHoleStopUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ObjectiveBha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverPullUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PowBitUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PresDropBitUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PresPumpAvUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReasonTrip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RopAvBharunRopAvId")
                        .HasColumnType("int");

                    b.Property<int?>("RopMnBharunRopMnId")
                        .HasColumnType("int");

                    b.Property<int?>("RopMxBharunRopMxId")
                        .HasColumnType("int");

                    b.Property<int?>("RpmAvBharunRpmAvId")
                        .HasColumnType("int");

                    b.Property<string>("RpmAvDhUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RpmMnUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RpmMxUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SlackOffUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TempMudDhMxUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TqDhAvUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TqOffBotAvUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TqOnBotAvUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TqOnBotMnUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TqOnBotMxUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TubularUidRef")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VelNozzleAvUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WobAvBharunWobAvId")
                        .HasColumnType("int");

                    b.Property<string>("WobAvDhUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WobMnUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WobMxUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WtAboveJarUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WtBelowJarUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WtMudUom")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Uid");

                    b.HasIndex("AziBottomUom");

                    b.HasIndex("AziTopUom");

                    b.HasIndex("CTimCircUom");

                    b.HasIndex("CTimDrillRotUom");

                    b.HasIndex("CTimDrillSlidUom");

                    b.HasIndex("CTimHoldUom");

                    b.HasIndex("CTimReamUom");

                    b.HasIndex("CTimSteeringUom");

                    b.HasIndex("DistDrillRotUom");

                    b.HasIndex("DistDrillSlidUom");

                    b.HasIndex("DistHoldUom");

                    b.HasIndex("DistReamUom");

                    b.HasIndex("DistSteeringUom");

                    b.HasIndex("ETimOpBitUom");

                    b.HasIndex("FlowrateBitUom");

                    b.HasIndex("FlowratePumpUom");

                    b.HasIndex("HkldDnUom");

                    b.HasIndex("HkldRotUom");

                    b.HasIndex("HkldUpUom");

                    b.HasIndex("InclMnUom");

                    b.HasIndex("InclMxUom");

                    b.HasIndex("InclStartUom");

                    b.HasIndex("InclStopUom");

                    b.HasIndex("MdHoleStartUom");

                    b.HasIndex("MdHoleStopUom");

                    b.HasIndex("OverPullUom");

                    b.HasIndex("PowBitUom");

                    b.HasIndex("PresDropBitUom");

                    b.HasIndex("PresPumpAvUom");

                    b.HasIndex("RopAvBharunRopAvId");

                    b.HasIndex("RopMnBharunRopMnId");

                    b.HasIndex("RopMxBharunRopMxId");

                    b.HasIndex("RpmAvBharunRpmAvId");

                    b.HasIndex("RpmAvDhUom");

                    b.HasIndex("RpmMnUom");

                    b.HasIndex("RpmMxUom");

                    b.HasIndex("SlackOffUom");

                    b.HasIndex("TempMudDhMxUom");

                    b.HasIndex("TqDhAvUom");

                    b.HasIndex("TqOffBotAvUom");

                    b.HasIndex("TqOnBotAvUom");

                    b.HasIndex("TqOnBotMnUom");

                    b.HasIndex("TqOnBotMxUom");

                    b.HasIndex("TubularUidRef");

                    b.HasIndex("VelNozzleAvUom");

                    b.HasIndex("WobAvBharunWobAvId");

                    b.HasIndex("WobAvDhUom");

                    b.HasIndex("WobMnUom");

                    b.HasIndex("WobMxUom");

                    b.HasIndex("WtAboveJarUom");

                    b.HasIndex("WtBelowJarUom");

                    b.HasIndex("WtMudUom");

                    b.ToTable("BharunDrillingParamss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunETimOpBit", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunETimOpBits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunFlowrateBit", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunFlowrateBits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunFlowratePump", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunFlowratePumps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunHkldDn", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunHkldDns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunHkldRot", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunHkldRots");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunHkldUp", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunHkldUps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunInclMn", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunInclMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunInclMx", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunInclMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunInclStart", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunInclStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunInclStop", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunInclStops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunMdHoleStart", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunMdHoleStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunMdHoleStop", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunMdHoleStops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunOverPull", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunOverPulls");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunPlanDogleg", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunPlanDoglegs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunPowBit", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunPowBits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunPresDropBit", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunPresDropBits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunPresPumpAv", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunPresPumpAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunRopAv", b =>
                {
                    b.Property<int>("BharunRopAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BharunRopAvId");

                    b.ToTable("BharunRopAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunRopMn", b =>
                {
                    b.Property<int>("BharunRopMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BharunRopMnId");

                    b.ToTable("BharunRopMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunRopMx", b =>
                {
                    b.Property<int>("BharunRopMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BharunRopMxId");

                    b.ToTable("BharunRopMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunRpmAv", b =>
                {
                    b.Property<int>("BharunRpmAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BharunRpmAvId");

                    b.ToTable("BharunRpmAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunRpmAvDh", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunRpmAvDhs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunRpmMn", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunRpmMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunRpmMx", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunRpmMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunSlackOff", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunSlackOff");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunTempMudDhMx", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunTempMudDhMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunTqDhAv", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunTqDhAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunTqOffBotAv", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunTqOffBotAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunTqOnBotAv", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunTqOnBotAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunTqOnBotMn", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunTqOnBotMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunTqOnBotMx", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunTqOnBotMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunTubular", b =>
                {
                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UidRef");

                    b.ToTable("BharunTubulars");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunVelNozzleAv", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunVelNozzleAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunWobAv", b =>
                {
                    b.Property<int>("BharunWobAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BharunWobAvId");

                    b.ToTable("BharunWobAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunWobAvDh", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunWobAvDhs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunWobMn", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunWobMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunWobMx", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunWobMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunWtAboveJar", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunWtAboveJars");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunWtBelowJar", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunWtBelowJars");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunWtMud", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("BharunWtMuds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BottomholeFluidDensity", b =>
                {
                    b.Property<int>("BottomholeFluidDensityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BottomholeFluidDensityId");

                    b.ToTable("StimJobBottomholeFluidDensitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BottomholeHydrostaticPres", b =>
                {
                    b.Property<int>("BottomholeHydrostaticPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BottomholeHydrostaticPresId");

                    b.ToTable("StimJobBottomholeHydrostaticPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BottomholeRate", b =>
                {
                    b.Property<int>("BottomholeRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BottomholeRateId");

                    b.ToTable("StimJobBottomholeRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BottomholeStaticTemperature", b =>
                {
                    b.Property<int>("BottomholeStaticTemperatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BottomholeStaticTemperatureId");

                    b.ToTable("StimJobBottomholeStaticTemperatures");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BottomholeTemperature", b =>
                {
                    b.Property<int>("BottomholeTemperatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BottomholeTemperatureId");

                    b.ToTable("StimJobBottomholeTemperatures");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BreakDownPres", b =>
                {
                    b.Property<int>("BreakDownPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BreakDownPresId");

                    b.ToTable("StimJobBreakDownPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BubblePointPres", b =>
                {
                    b.Property<int>("BubblePointPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BubblePointPresId");

                    b.ToTable("StimJobBubblePointPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CartesianCS", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdentifierCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdentifierCodeSpace");

                    b.HasIndex("NameCodeSpace");

                    b.ToTable("CoordinateReferenceSystemCartesianCS");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJob", b =>
                {
                    b.Property<int>("CementJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CementDrillOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CementEngr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CementStageId")
                        .HasColumnType("int");

                    b.Property<int?>("CementTestId")
                        .HasColumnType("int");

                    b.Property<string>("CoilTubing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("Contractor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimCementDrillOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimPipeRotEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimPipeRotStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimPlugSet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimRecipEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimRecipStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimSqueeze")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LenPipeRecipStrokeId")
                        .HasColumnType("int");

                    b.Property<int?>("MdHoleId")
                        .HasColumnType("int");

                    b.Property<int?>("MdPlugBotId")
                        .HasColumnType("int");

                    b.Property<int?>("MdPlugTopId")
                        .HasColumnType("int");

                    b.Property<int?>("MdShoeId")
                        .HasColumnType("int");

                    b.Property<int?>("MdSqueezeId")
                        .HasColumnType("int");

                    b.Property<int?>("MdStringSetId")
                        .HasColumnType("int");

                    b.Property<int?>("MdWaterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCementString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCementedString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWorkString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OffshoreJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OverPullId")
                        .HasColumnType("int");

                    b.Property<string>("Reciprocating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnsToSeabed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RpmPipeId")
                        .HasColumnType("int");

                    b.Property<int?>("RpmPipeRecipId")
                        .HasColumnType("int");

                    b.Property<int?>("SlackOffId")
                        .HasColumnType("int");

                    b.Property<string>("ToolCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TqInitPipeRotId")
                        .HasColumnType("int");

                    b.Property<int?>("TqPipeAvId")
                        .HasColumnType("int");

                    b.Property<int?>("TqPipeMxId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdShoeId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdStringSetId")
                        .HasColumnType("int");

                    b.Property<string>("TypePlug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeSqueeze")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeTool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WocId")
                        .HasColumnType("int");

                    b.HasKey("CementJobId");

                    b.HasIndex("CementStageId");

                    b.HasIndex("CementTestId");

                    b.HasIndex("CommonDataId");

                    b.HasIndex("LenPipeRecipStrokeId");

                    b.HasIndex("MdHoleId");

                    b.HasIndex("MdPlugBotId");

                    b.HasIndex("MdPlugTopId");

                    b.HasIndex("MdShoeId");

                    b.HasIndex("MdSqueezeId");

                    b.HasIndex("MdStringSetId");

                    b.HasIndex("MdWaterId");

                    b.HasIndex("OverPullId");

                    b.HasIndex("RpmPipeId");

                    b.HasIndex("RpmPipeRecipId");

                    b.HasIndex("SlackOffId");

                    b.HasIndex("TqInitPipeRotId");

                    b.HasIndex("TqPipeAvId");

                    b.HasIndex("TqPipeMxId");

                    b.HasIndex("TvdShoeId");

                    b.HasIndex("TvdStringSetId");

                    b.HasIndex("WocId");

                    b.ToTable("CementJobs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobAdditive", b =>
                {
                    b.Property<int>("AdditiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdditiveId");

                    b.ToTable("CementJobAdditives");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobCblPres", b =>
                {
                    b.Property<int>("CblPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CblPresId");

                    b.ToTable("CementJobCblPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobCementAdditive", b =>
                {
                    b.Property<int>("CementAdditiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdditiveId")
                        .HasColumnType("int");

                    b.Property<int?>("ConcentrationId")
                        .HasColumnType("int");

                    b.Property<int?>("DensAddId")
                        .HasColumnType("int");

                    b.Property<string>("FormAdd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAdd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeAdd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeConc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CementAdditiveId");

                    b.HasIndex("AdditiveId");

                    b.HasIndex("ConcentrationId");

                    b.HasIndex("DensAddId");

                    b.ToTable("CementJobCementAdditives");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobCementPumpSchedule", b =>
                {
                    b.Property<int>("CementPumpScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ETimPumpId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimShutdownId")
                        .HasColumnType("int");

                    b.Property<int?>("PresBackId")
                        .HasColumnType("int");

                    b.Property<int?>("RatePumpId")
                        .HasColumnType("int");

                    b.Property<string>("StrokePump")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VolPumpId")
                        .HasColumnType("int");

                    b.HasKey("CementPumpScheduleId");

                    b.HasIndex("ETimPumpId");

                    b.HasIndex("ETimShutdownId");

                    b.HasIndex("PresBackId");

                    b.HasIndex("RatePumpId");

                    b.HasIndex("VolPumpId");

                    b.ToTable("CementJobCementPumpSchedules");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobCementStage", b =>
                {
                    b.Property<int>("CementStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AfterFlowAnn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnnFlowAfter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BotPlug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BotPlugNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CementingFluidId")
                        .HasColumnType("int");

                    b.Property<string>("DTimDisplaceStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimMixStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimPumpEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimPumpStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DensDisplaceFluidId")
                        .HasColumnType("int");

                    b.Property<string>("DensMeasBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiaTailPipeId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimMudCirculationId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimPresHeldId")
                        .HasColumnType("int");

                    b.Property<string>("FloatHeld")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlowrateBreakDownId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowrateDisplaceAvId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowrateDisplaceMxId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowrateEndId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowrateMudCircCementJobFlowrateMudCircId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowratePumpEndId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowratePumpStartId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowrateSqueezeAvId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowrateSqueezeMxId")
                        .HasColumnType("int");

                    b.Property<string>("FluidDisplace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gel10MinId")
                        .HasColumnType("int");

                    b.Property<int?>("Gel10SecId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdCircOutId")
                        .HasColumnType("int");

                    b.Property<int?>("MdCoilTbgId")
                        .HasColumnType("int");

                    b.Property<int?>("MdStringId")
                        .HasColumnType("int");

                    b.Property<int?>("MdToolId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<string>("MixMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PillBelowPlug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlugBumped")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlugCatcher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PresBackPressureId")
                        .HasColumnType("int");

                    b.Property<int?>("PresBreakDownId")
                        .HasColumnType("int");

                    b.Property<int?>("PresBumpId")
                        .HasColumnType("int");

                    b.Property<int?>("PresCoilTbgEndId")
                        .HasColumnType("int");

                    b.Property<int?>("PresCoilTbgStartId")
                        .HasColumnType("int");

                    b.Property<int?>("PresCsgEndId")
                        .HasColumnType("int");

                    b.Property<int?>("PresCsgStartId")
                        .HasColumnType("int");

                    b.Property<int?>("PresDisplaceId")
                        .HasColumnType("int");

                    b.Property<int?>("PresHeldId")
                        .HasColumnType("int");

                    b.Property<int?>("PresMudCircId")
                        .HasColumnType("int");

                    b.Property<int?>("PresPriorBumpId")
                        .HasColumnType("int");

                    b.Property<int?>("PresSqueezeAvId")
                        .HasColumnType("int");

                    b.Property<int?>("PresSqueezeEndId")
                        .HasColumnType("int");

                    b.Property<string>("PresSqueezeHeld")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PresSqueezeId")
                        .HasColumnType("int");

                    b.Property<int?>("PresTbgEndId")
                        .HasColumnType("int");

                    b.Property<int?>("PresTbgStartPresTbgStId")
                        .HasColumnType("int");

                    b.Property<int?>("PvMudId")
                        .HasColumnType("int");

                    b.Property<string>("SqueezeObj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SqueezeObtained")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TailPipePerf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TailPipeUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TempBHCTId")
                        .HasColumnType("int");

                    b.Property<int?>("TempBHSTId")
                        .HasColumnType("int");

                    b.Property<string>("TopPlug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOriginalMud")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisFunnelMudId")
                        .HasColumnType("int");

                    b.Property<int?>("VolCircPriorId")
                        .HasColumnType("int");

                    b.Property<int?>("VolCsgInId")
                        .HasColumnType("int");

                    b.Property<int?>("VolCsgOutId")
                        .HasColumnType("int");

                    b.Property<int?>("VolDisplaceFluidId")
                        .HasColumnType("int");

                    b.Property<int?>("VolExcessId")
                        .HasColumnType("int");

                    b.Property<string>("VolExcessMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VolMudLostId")
                        .HasColumnType("int");

                    b.Property<int?>("VolReturnsId")
                        .HasColumnType("int");

                    b.Property<int?>("WtMudId")
                        .HasColumnType("int");

                    b.Property<int?>("YpMudId")
                        .HasColumnType("int");

                    b.HasKey("CementStageId");

                    b.HasIndex("CementingFluidId");

                    b.HasIndex("DensDisplaceFluidId");

                    b.HasIndex("DiaTailPipeId");

                    b.HasIndex("ETimMudCirculationId");

                    b.HasIndex("ETimPresHeldId");

                    b.HasIndex("FlowrateBreakDownId");

                    b.HasIndex("FlowrateDisplaceAvId");

                    b.HasIndex("FlowrateDisplaceMxId");

                    b.HasIndex("FlowrateEndId");

                    b.HasIndex("FlowrateMudCircCementJobFlowrateMudCircId");

                    b.HasIndex("FlowratePumpEndId");

                    b.HasIndex("FlowratePumpStartId");

                    b.HasIndex("FlowrateSqueezeAvId");

                    b.HasIndex("FlowrateSqueezeMxId");

                    b.HasIndex("Gel10MinId");

                    b.HasIndex("Gel10SecId");

                    b.HasIndex("MdBottomId");

                    b.HasIndex("MdCircOutId");

                    b.HasIndex("MdCoilTbgId");

                    b.HasIndex("MdStringId");

                    b.HasIndex("MdToolId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("PresBackPressureId");

                    b.HasIndex("PresBreakDownId");

                    b.HasIndex("PresBumpId");

                    b.HasIndex("PresCoilTbgEndId");

                    b.HasIndex("PresCoilTbgStartId");

                    b.HasIndex("PresCsgEndId");

                    b.HasIndex("PresCsgStartId");

                    b.HasIndex("PresDisplaceId");

                    b.HasIndex("PresHeldId");

                    b.HasIndex("PresMudCircId");

                    b.HasIndex("PresPriorBumpId");

                    b.HasIndex("PresSqueezeAvId");

                    b.HasIndex("PresSqueezeEndId");

                    b.HasIndex("PresSqueezeId");

                    b.HasIndex("PresTbgEndId");

                    b.HasIndex("PresTbgStartPresTbgStId");

                    b.HasIndex("PvMudId");

                    b.HasIndex("TempBHCTId");

                    b.HasIndex("TempBHSTId");

                    b.HasIndex("VisFunnelMudId");

                    b.HasIndex("VolCircPriorId");

                    b.HasIndex("VolCsgInId");

                    b.HasIndex("VolCsgOutId");

                    b.HasIndex("VolDisplaceFluidId");

                    b.HasIndex("VolExcessId");

                    b.HasIndex("VolMudLostId");

                    b.HasIndex("VolReturnsId");

                    b.HasIndex("WtMudId");

                    b.HasIndex("YpMudId");

                    b.ToTable("CementJobCementStages");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobCementTest", b =>
                {
                    b.Property<int>("CementTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CblBondQual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CblPresId")
                        .HasColumnType("int");

                    b.Property<string>("CblRun")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CementFoundOnTool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CementShoeCollar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CetBondQual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CetRun")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ETimBeforeTestId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimCementLogId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimPitStartId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimTestId")
                        .HasColumnType("int");

                    b.Property<string>("FailureMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FormPitId")
                        .HasColumnType("int");

                    b.Property<string>("JobRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LinerLapId")
                        .HasColumnType("int");

                    b.Property<int?>("LinerTopId")
                        .HasColumnType("int");

                    b.Property<int?>("MdCementTopId")
                        .HasColumnType("int");

                    b.Property<int?>("MdDVToolJobMdDVToolId")
                        .HasColumnType("int");

                    b.Property<string>("NumRemedial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PresTestId")
                        .HasColumnType("int");

                    b.Property<string>("RemedialCement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempSurvey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestNegativeEmwId")
                        .HasColumnType("int");

                    b.Property<string>("TestNegativeTool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestPositiveEmwId")
                        .HasColumnType("int");

                    b.Property<string>("TestPositiveTool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TocOK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToolCompanyPit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopCementMethod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CementTestId");

                    b.HasIndex("CblPresId");

                    b.HasIndex("ETimBeforeTestId");

                    b.HasIndex("ETimCementLogId");

                    b.HasIndex("ETimPitStartId");

                    b.HasIndex("ETimTestId");

                    b.HasIndex("FormPitId");

                    b.HasIndex("LinerLapId");

                    b.HasIndex("LinerTopId");

                    b.HasIndex("MdCementTopId");

                    b.HasIndex("MdDVToolJobMdDVToolId");

                    b.HasIndex("PresTestId");

                    b.HasIndex("TestNegativeEmwId");

                    b.HasIndex("TestPositiveEmwId");

                    b.ToTable("CementJobCementTests");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobCementingFluid", b =>
                {
                    b.Property<int>("CementingFluidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CementAdditiveId")
                        .HasColumnType("int");

                    b.Property<int?>("CementPumpScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("ClassSlurryDryBlend")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConsTestThickeningId")
                        .HasColumnType("int");

                    b.Property<int?>("DensAtPresId")
                        .HasColumnType("int");

                    b.Property<int?>("DensBaseFluidId")
                        .HasColumnType("int");

                    b.Property<int?>("DensConstGasFoamId")
                        .HasColumnType("int");

                    b.Property<int?>("DensConstGasMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("DensDryBlendId")
                        .HasColumnType("int");

                    b.Property<int?>("DensityId")
                        .HasColumnType("int");

                    b.Property<string>("DescFluid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DryBlendDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DryBlendName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ETimComprStren1Id")
                        .HasColumnType("int");

                    b.Property<int?>("ETimComprStren2Id")
                        .HasColumnType("int");

                    b.Property<int?>("ETimThickeningId")
                        .HasColumnType("int");

                    b.Property<int?>("ExcessPcId")
                        .HasColumnType("int");

                    b.Property<int>("FluidIndex")
                        .HasColumnType("int");

                    b.Property<string>("FluidRheologicalModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoamUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gel10MinReadingId")
                        .HasColumnType("int");

                    b.Property<int?>("Gel10MinStrengthId")
                        .HasColumnType("int");

                    b.Property<int?>("Gel10SecReadingId")
                        .HasColumnType("int");

                    b.Property<int?>("Gel10SecStrengthId")
                        .HasColumnType("int");

                    b.Property<int?>("Gel1MinReadingId")
                        .HasColumnType("int");

                    b.Property<int?>("Gel1MinStrengthId")
                        .HasColumnType("int");

                    b.Property<int?>("KId")
                        .HasColumnType("int");

                    b.Property<int?>("MassDryBlendId")
                        .HasColumnType("int");

                    b.Property<int?>("MassSackDryBlendId")
                        .HasColumnType("int");

                    b.Property<int?>("MdFluidBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdFluidTopId")
                        .HasColumnType("int");

                    b.Property<int?>("NId")
                        .HasColumnType("int");

                    b.Property<int?>("PcFreeWaterId")
                        .HasColumnType("int");

                    b.Property<int?>("PresComprStren1Id")
                        .HasColumnType("int");

                    b.Property<int?>("PresComprStren2Id")
                        .HasColumnType("int");

                    b.Property<int?>("PresTestFluidLossId")
                        .HasColumnType("int");

                    b.Property<int?>("PresTestThickeningId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RatioConstGasMethodAvId")
                        .HasColumnType("int");

                    b.Property<int?>("RatioConstGasMethodEndId")
                        .HasColumnType("int");

                    b.Property<int?>("RatioConstGasMethodStartId")
                        .HasColumnType("int");

                    b.Property<int?>("RatioMixWaterId")
                        .HasColumnType("int");

                    b.Property<int?>("SolidVolumeFractionId")
                        .HasColumnType("int");

                    b.Property<string>("SourceWater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TempComprStren1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TempComprStren2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TempFluidLossId")
                        .HasColumnType("int");

                    b.Property<int?>("TempFreeWaterId")
                        .HasColumnType("int");

                    b.Property<int?>("TempThickeningId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeFluidLossId")
                        .HasColumnType("int");

                    b.Property<string>("TypeBaseFluid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFluid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeGasFoam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisId")
                        .HasColumnType("int");

                    b.Property<int?>("VolAPIFluidLossId")
                        .HasColumnType("int");

                    b.Property<int?>("VolCementId")
                        .HasColumnType("int");

                    b.Property<int?>("VolFluidId")
                        .HasColumnType("int");

                    b.Property<int?>("VolGasFoamId")
                        .HasColumnType("int");

                    b.Property<int?>("VolOtherId")
                        .HasColumnType("int");

                    b.Property<int?>("VolPumpedId")
                        .HasColumnType("int");

                    b.Property<int?>("VolReservedId")
                        .HasColumnType("int");

                    b.Property<int?>("VolTestFluidLossId")
                        .HasColumnType("int");

                    b.Property<int?>("VolTotSlurryId")
                        .HasColumnType("int");

                    b.Property<int?>("VolWaterId")
                        .HasColumnType("int");

                    b.Property<int?>("VolYieldId")
                        .HasColumnType("int");

                    b.Property<int?>("YpJobYpId")
                        .HasColumnType("int");

                    b.HasKey("CementingFluidId");

                    b.HasIndex("CementAdditiveId");

                    b.HasIndex("CementPumpScheduleId");

                    b.HasIndex("ConsTestThickeningId");

                    b.HasIndex("DensAtPresId");

                    b.HasIndex("DensBaseFluidId");

                    b.HasIndex("DensConstGasFoamId");

                    b.HasIndex("DensConstGasMethodId");

                    b.HasIndex("DensDryBlendId");

                    b.HasIndex("DensityId");

                    b.HasIndex("ETimComprStren1Id");

                    b.HasIndex("ETimComprStren2Id");

                    b.HasIndex("ETimThickeningId");

                    b.HasIndex("ExcessPcId");

                    b.HasIndex("Gel10MinReadingId");

                    b.HasIndex("Gel10MinStrengthId");

                    b.HasIndex("Gel10SecReadingId");

                    b.HasIndex("Gel10SecStrengthId");

                    b.HasIndex("Gel1MinReadingId");

                    b.HasIndex("Gel1MinStrengthId");

                    b.HasIndex("KId");

                    b.HasIndex("MassDryBlendId");

                    b.HasIndex("MassSackDryBlendId");

                    b.HasIndex("MdFluidBottomId");

                    b.HasIndex("MdFluidTopId");

                    b.HasIndex("NId");

                    b.HasIndex("PcFreeWaterId");

                    b.HasIndex("PresComprStren1Id");

                    b.HasIndex("PresComprStren2Id");

                    b.HasIndex("PresTestFluidLossId");

                    b.HasIndex("PresTestThickeningId");

                    b.HasIndex("RatioConstGasMethodAvId");

                    b.HasIndex("RatioConstGasMethodEndId");

                    b.HasIndex("RatioConstGasMethodStartId");

                    b.HasIndex("RatioMixWaterId");

                    b.HasIndex("SolidVolumeFractionId");

                    b.HasIndex("TempComprStren1Id");

                    b.HasIndex("TempComprStren2Id");

                    b.HasIndex("TempFluidLossId");

                    b.HasIndex("TempFreeWaterId");

                    b.HasIndex("TempThickeningId");

                    b.HasIndex("TimeFluidLossId");

                    b.HasIndex("VisId");

                    b.HasIndex("VolAPIFluidLossId");

                    b.HasIndex("VolCementId");

                    b.HasIndex("VolFluidId");

                    b.HasIndex("VolGasFoamId");

                    b.HasIndex("VolOtherId");

                    b.HasIndex("VolPumpedId");

                    b.HasIndex("VolReservedId");

                    b.HasIndex("VolTestFluidLossId");

                    b.HasIndex("VolTotSlurryId");

                    b.HasIndex("VolWaterId");

                    b.HasIndex("VolYieldId");

                    b.HasIndex("YpJobYpId");

                    b.ToTable("CementJobCementingFluids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobCommonData", b =>
                {
                    b.Property<int>("CommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommonDataId");

                    b.ToTable("CementJobCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobConcentration", b =>
                {
                    b.Property<int>("ConcentrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConcentrationId");

                    b.ToTable("CementJobConcentrations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobConsTestThickening", b =>
                {
                    b.Property<int>("ConsTestThickeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsTestThickeningId");

                    b.ToTable("CementJobConsTestThickenings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobDensAdd", b =>
                {
                    b.Property<int>("DensAddId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensAddId");

                    b.ToTable("CementJobDensAdds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobDensAtPres", b =>
                {
                    b.Property<int>("DensAtPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensAtPresId");

                    b.ToTable("CementJobDensAtPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobDensBaseFluid", b =>
                {
                    b.Property<int>("DensBaseFluidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensBaseFluidId");

                    b.ToTable("CementJobDensBaseFluids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobDensConstGasFoam", b =>
                {
                    b.Property<int>("DensConstGasFoamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensConstGasFoamId");

                    b.ToTable("CementJobDensConstGasFoams");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobDensConstGasMethod", b =>
                {
                    b.Property<int>("DensConstGasMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensConstGasMethodId");

                    b.ToTable("CementJobDensConstGasMethods");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobDensDisplaceFluid", b =>
                {
                    b.Property<int>("DensDisplaceFluidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensDisplaceFluidId");

                    b.ToTable("CementJobDensDisplaceFluids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobDensDryBlend", b =>
                {
                    b.Property<int>("DensDryBlendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensDryBlendId");

                    b.ToTable("CementJobDensDryBlends");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobDensity", b =>
                {
                    b.Property<int>("DensityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensityId");

                    b.ToTable("CementJobDensitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobDiaTailPipe", b =>
                {
                    b.Property<int>("DiaTailPipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaTailPipeId");

                    b.ToTable("CementJobDiaTailPipes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobETimBeforeTest", b =>
                {
                    b.Property<int>("ETimBeforeTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimBeforeTestId");

                    b.ToTable("CementJobETimBeforeTests");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobETimCementLog", b =>
                {
                    b.Property<int>("ETimCementLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimCementLogId");

                    b.ToTable("CementJobETimCementLogs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobETimComprStren1", b =>
                {
                    b.Property<int>("ETimComprStren1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimComprStren1Id");

                    b.ToTable("CementJobETimComprStren1s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobETimComprStren2", b =>
                {
                    b.Property<int>("ETimComprStren2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimComprStren2Id");

                    b.ToTable("CementJobETimComprStren2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobETimMudCirculation", b =>
                {
                    b.Property<int>("ETimMudCirculationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimMudCirculationId");

                    b.ToTable("CementJobETimMudCirculations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobETimPitStart", b =>
                {
                    b.Property<int>("ETimPitStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimPitStartId");

                    b.ToTable("CementJobETimPitStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobETimPresHeld", b =>
                {
                    b.Property<int>("ETimPresHeldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimPresHeldId");

                    b.ToTable("CementJobETimPresHelds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobETimPump", b =>
                {
                    b.Property<int>("ETimPumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimPumpId");

                    b.ToTable("CementJobETimPumps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobETimShutdown", b =>
                {
                    b.Property<int>("ETimShutdownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimShutdownId");

                    b.ToTable("CementJobETimShutdowns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobETimTest", b =>
                {
                    b.Property<int>("ETimTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimTestId");

                    b.ToTable("CementJobETimTests");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobETimThickening", b =>
                {
                    b.Property<int>("ETimThickeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimThickeningId");

                    b.ToTable("CementJobETimThickenings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobExcessPc", b =>
                {
                    b.Property<int>("ExcessPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExcessPcId");

                    b.ToTable("CementJobExcessPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobFlowrateBreakDown", b =>
                {
                    b.Property<int>("FlowrateBreakDownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowrateBreakDownId");

                    b.ToTable("CementJobFlowrateBreakDowns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobFlowrateDisplaceAv", b =>
                {
                    b.Property<int>("FlowrateDisplaceAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowrateDisplaceAvId");

                    b.ToTable("CementJobFlowrateDisplaceAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobFlowrateDisplaceMx", b =>
                {
                    b.Property<int>("FlowrateDisplaceMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowrateDisplaceMxId");

                    b.ToTable("CementJobFlowrateDisplaceMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobFlowrateEnd", b =>
                {
                    b.Property<int>("FlowrateEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowrateEndId");

                    b.ToTable("CementJobFlowrateEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobFlowrateMudCirc", b =>
                {
                    b.Property<int>("CementJobFlowrateMudCircId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CementJobFlowrateMudCircId");

                    b.ToTable("CementJobFlowrateMudCircs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobFlowratePumpEnd", b =>
                {
                    b.Property<int>("FlowratePumpEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowratePumpEndId");

                    b.ToTable("CementJobFlowratePumpEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobFlowratePumpStart", b =>
                {
                    b.Property<int>("FlowratePumpStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowratePumpStartId");

                    b.ToTable("CementJobFlowratePumpStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobFlowrateSqueezeAv", b =>
                {
                    b.Property<int>("FlowrateSqueezeAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowrateSqueezeAvId");

                    b.ToTable("CementJobFlowrateSqueezeAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobFlowrateSqueezeMx", b =>
                {
                    b.Property<int>("FlowrateSqueezeMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowrateSqueezeMxId");

                    b.ToTable("CementJobFlowrateSqueezeMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobFormPit", b =>
                {
                    b.Property<int>("FormPitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormPitId");

                    b.ToTable("CementJobFormPits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobGel10Min", b =>
                {
                    b.Property<int>("Gel10MinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel10MinId");

                    b.ToTable("CementJobGel10Mins");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobGel10MinReading", b =>
                {
                    b.Property<int>("Gel10MinReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel10MinReadingId");

                    b.ToTable("CementJobGel10MinReadings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobGel10MinStrength", b =>
                {
                    b.Property<int>("Gel10MinStrengthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel10MinStrengthId");

                    b.ToTable("CementJobGel10MinStrengths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobGel10Sec", b =>
                {
                    b.Property<int>("Gel10SecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel10SecId");

                    b.ToTable("CementJobGel10Secs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobGel10SecReading", b =>
                {
                    b.Property<int>("Gel10SecReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel10SecReadingId");

                    b.ToTable("CementJobGel10SecReadings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobGel10SecStrength", b =>
                {
                    b.Property<int>("Gel10SecStrengthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel10SecStrengthId");

                    b.ToTable("CementJobGel10SecStrengths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobGel1MinReading", b =>
                {
                    b.Property<int>("Gel1MinReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel1MinReadingId");

                    b.ToTable("CementJobGel1MinReadings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobGel1MinStrength", b =>
                {
                    b.Property<int>("Gel1MinStrengthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel1MinStrengthId");

                    b.ToTable("CementJobGel1MinStrengths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobK", b =>
                {
                    b.Property<int>("KId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KId");

                    b.ToTable("CementJobKs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobLenPipeRecipStroke", b =>
                {
                    b.Property<int>("LenPipeRecipStrokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenPipeRecipStrokeId");

                    b.ToTable("CementJobLenPipeRecipStrokes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobLinerLap", b =>
                {
                    b.Property<int>("LinerLapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LinerLapId");

                    b.ToTable("CementJobLinerLaps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobLinerTop", b =>
                {
                    b.Property<int>("LinerTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LinerTopId");

                    b.ToTable("CementJobLinerTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMassDryBlend", b =>
                {
                    b.Property<int>("MassDryBlendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MassDryBlendId");

                    b.ToTable("CementJobMassDryBlends");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMassSackDryBlend", b =>
                {
                    b.Property<int>("MassSackDryBlendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MassSackDryBlendId");

                    b.ToTable("CementJobMassSackDryBlends");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdBottom", b =>
                {
                    b.Property<int>("MdBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdBottomId");

                    b.ToTable("CementJobMdBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdCementTop", b =>
                {
                    b.Property<int>("MdCementTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdCementTopId");

                    b.ToTable("CementJobMdCementTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdCircOut", b =>
                {
                    b.Property<int>("MdCircOutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdCircOutId");

                    b.ToTable("CementJobMdCircOuts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdCoilTbg", b =>
                {
                    b.Property<int>("MdCoilTbgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdCoilTbgId");

                    b.ToTable("CementJobMdCoilTbgs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdDVTool", b =>
                {
                    b.Property<int>("JobMdDVToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobMdDVToolId");

                    b.ToTable("CementJobMdDVTools");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdFluidBottom", b =>
                {
                    b.Property<int>("MdFluidBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdFluidBottomId");

                    b.ToTable("CementJobMdFluidBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdFluidTop", b =>
                {
                    b.Property<int>("MdFluidTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdFluidTopId");

                    b.ToTable("CementJobMdFluidTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdHole", b =>
                {
                    b.Property<int>("MdHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdHoleId");

                    b.ToTable("CementJobMdHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdPlugBot", b =>
                {
                    b.Property<int>("MdPlugBotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdPlugBotId");

                    b.ToTable("CementJobMdPlugBots");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdPlugTop", b =>
                {
                    b.Property<int>("MdPlugTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdPlugTopId");

                    b.ToTable("CementJobMdPlugTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdShoe", b =>
                {
                    b.Property<int>("MdShoeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdShoeId");

                    b.ToTable("CementJobMdShoes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdSqueeze", b =>
                {
                    b.Property<int>("MdSqueezeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdSqueezeId");

                    b.ToTable("CementJobMdSqueezes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdString", b =>
                {
                    b.Property<int>("MdStringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdStringId");

                    b.ToTable("CementJobMdStrings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdStringSet", b =>
                {
                    b.Property<int>("MdStringSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdStringSetId");

                    b.ToTable("CementJobMdStringSets");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdTool", b =>
                {
                    b.Property<int>("MdToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdToolId");

                    b.ToTable("CementJobMdTools");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdTop", b =>
                {
                    b.Property<int>("MdTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdTopId");

                    b.ToTable("CementJobMdTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobMdWater", b =>
                {
                    b.Property<int>("MdWaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdWaterId");

                    b.ToTable("CementJobMdWaters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobN", b =>
                {
                    b.Property<int>("NId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NId");

                    b.ToTable("CementJobNs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobOverPull", b =>
                {
                    b.Property<int>("OverPullId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OverPullId");

                    b.ToTable("CementJobOverPulls");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPcFreeWater", b =>
                {
                    b.Property<int>("PcFreeWaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PcFreeWaterId");

                    b.ToTable("CementJobPcFreeWaters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresBack", b =>
                {
                    b.Property<int>("PresBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresBackId");

                    b.ToTable("CementJobPresBacks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresBackPressure", b =>
                {
                    b.Property<int>("PresBackPressureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresBackPressureId");

                    b.ToTable("CementJobPresBackPressures");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresBreakDown", b =>
                {
                    b.Property<int>("PresBreakDownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresBreakDownId");

                    b.ToTable("CementJobPresBreakDowns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresBump", b =>
                {
                    b.Property<int>("PresBumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresBumpId");

                    b.ToTable("CementJobPresBumps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresCoilTbgEnd", b =>
                {
                    b.Property<int>("PresCoilTbgEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresCoilTbgEndId");

                    b.ToTable("CementJobPresCoilTbgEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresCoilTbgStart", b =>
                {
                    b.Property<int>("PresCoilTbgStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresCoilTbgStartId");

                    b.ToTable("CementJobPresCoilTbgStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresComprStren1", b =>
                {
                    b.Property<int>("PresComprStren1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresComprStren1Id");

                    b.ToTable("CementJobPresComprStren1s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresComprStren2", b =>
                {
                    b.Property<int>("PresComprStren2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresComprStren2Id");

                    b.ToTable("CementJobPresComprStren2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresCsgEnd", b =>
                {
                    b.Property<int>("PresCsgEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresCsgEndId");

                    b.ToTable("CementJobPresCsgEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresCsgStart", b =>
                {
                    b.Property<int>("PresCsgStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresCsgStartId");

                    b.ToTable("CementJobPresCsgStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresDisplace", b =>
                {
                    b.Property<int>("PresDisplaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresDisplaceId");

                    b.ToTable("CementJobPresDisplaces");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresHeld", b =>
                {
                    b.Property<int>("PresHeldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresHeldId");

                    b.ToTable("CementJobPresHelds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresMudCirc", b =>
                {
                    b.Property<int>("PresMudCircId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresMudCircId");

                    b.ToTable("CementJobPresMudCircs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresPriorBump", b =>
                {
                    b.Property<int>("PresPriorBumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresPriorBumpId");

                    b.ToTable("CementJobPresPriorBumps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresSqueeze", b =>
                {
                    b.Property<int>("PresSqueezeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresSqueezeId");

                    b.ToTable("CementJobPresSqueezes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresSqueezeAv", b =>
                {
                    b.Property<int>("PresSqueezeAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresSqueezeAvId");

                    b.ToTable("CementJobPresSqueezeAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresSqueezeEnd", b =>
                {
                    b.Property<int>("PresSqueezeEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresSqueezeEndId");

                    b.ToTable("CementJobPresSqueezeEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresTbgEnd", b =>
                {
                    b.Property<int>("PresTbgEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresTbgEndId");

                    b.ToTable("CementJobPresTbgEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresTbgStart", b =>
                {
                    b.Property<int>("PresTbgStId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresTbgStId");

                    b.ToTable("CementJobPresTbgStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresTest", b =>
                {
                    b.Property<int>("PresTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresTestId");

                    b.ToTable("CementJobPresTests");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresTestFluidLoss", b =>
                {
                    b.Property<int>("PresTestFluidLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresTestFluidLossId");

                    b.ToTable("CementJobPresTestFluidLosss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPresTestThickening", b =>
                {
                    b.Property<int>("PresTestThickeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresTestThickeningId");

                    b.ToTable("CementJobPresTestThickenings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobPvMud", b =>
                {
                    b.Property<int>("PvMudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PvMudId");

                    b.ToTable("CementJobPvMuds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobRatePump", b =>
                {
                    b.Property<int>("RatePumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatePumpId");

                    b.ToTable("CementJobRatePumps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobRatioConstGasMethodAv", b =>
                {
                    b.Property<int>("RatioConstGasMethodAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatioConstGasMethodAvId");

                    b.ToTable("CementJobRatioConstGasMethodAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobRatioConstGasMethodEnd", b =>
                {
                    b.Property<int>("RatioConstGasMethodEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatioConstGasMethodEndId");

                    b.ToTable("CementJobRatioConstGasMethodEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobRatioConstGasMethodStart", b =>
                {
                    b.Property<int>("RatioConstGasMethodStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatioConstGasMethodStartId");

                    b.ToTable("CementJobRatioConstGasMethodStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobRatioMixWater", b =>
                {
                    b.Property<int>("RatioMixWaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatioMixWaterId");

                    b.ToTable("CementJobRatioMixWaters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobRpmPipe", b =>
                {
                    b.Property<int>("RpmPipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RpmPipeId");

                    b.ToTable("CementJobRpmPipes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobRpmPipeRecip", b =>
                {
                    b.Property<int>("RpmPipeRecipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RpmPipeRecipId");

                    b.ToTable("CementJobRpmPipeRecips");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobSlackOff", b =>
                {
                    b.Property<int>("SlackOffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SlackOffId");

                    b.ToTable("CementJobSlackOffs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobSolidVolumeFraction", b =>
                {
                    b.Property<int>("SolidVolumeFractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolidVolumeFractionId");

                    b.ToTable("CementJobSolidVolumeFractions");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTempBHCT", b =>
                {
                    b.Property<int>("TempBHCTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempBHCTId");

                    b.ToTable("CementJobTempBHCTs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTempBHST", b =>
                {
                    b.Property<int>("TempBHSTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempBHSTId");

                    b.ToTable("CementJobTempBHSTs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTempComprStren1", b =>
                {
                    b.Property<int>("TempComprStren1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempComprStren1Id");

                    b.ToTable("CementJobTempComprStren1s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTempComprStren2", b =>
                {
                    b.Property<int>("TempComprStren2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempComprStren2Id");

                    b.ToTable("CementJobTempComprStren2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTempFluidLoss", b =>
                {
                    b.Property<int>("TempFluidLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempFluidLossId");

                    b.ToTable("CementJobTempFluidLosss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTempFreeWater", b =>
                {
                    b.Property<int>("TempFreeWaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempFreeWaterId");

                    b.ToTable("CementJobTempFreeWaters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTempThickening", b =>
                {
                    b.Property<int>("TempThickeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempThickeningId");

                    b.ToTable("CementJobTempThickenings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTestNegativeEmw", b =>
                {
                    b.Property<int>("TestNegativeEmwId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestNegativeEmwId");

                    b.ToTable("CementJobTestNegativeEmws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTestPositiveEmw", b =>
                {
                    b.Property<int>("TestPositiveEmwId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestPositiveEmwId");

                    b.ToTable("CementJobTestPositiveEmws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTimeFluidLoss", b =>
                {
                    b.Property<int>("TimeFluidLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeFluidLossId");

                    b.ToTable("CementJobTimeFluidLosss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTqInitPipeRot", b =>
                {
                    b.Property<int>("TqInitPipeRotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TqInitPipeRotId");

                    b.ToTable("CementJobTqInitPipeRots");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTqPipeAv", b =>
                {
                    b.Property<int>("TqPipeAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TqPipeAvId");

                    b.ToTable("CementJobTqPipeAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTqPipeMx", b =>
                {
                    b.Property<int>("TqPipeMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TqPipeMxId");

                    b.ToTable("CementJobTqPipeMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTvdShoe", b =>
                {
                    b.Property<int>("TvdShoeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdShoeId");

                    b.ToTable("CementJobTvdShoes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobTvdStringSet", b =>
                {
                    b.Property<int>("TvdStringSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdStringSetId");

                    b.ToTable("CementJobTvdStringSets");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVis", b =>
                {
                    b.Property<int>("VisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisId");

                    b.ToTable("CementJobViss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVisFunnelMud", b =>
                {
                    b.Property<int>("VisFunnelMudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisFunnelMudId");

                    b.ToTable("CementJobVisFunnelMuds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolAPIFluidLoss", b =>
                {
                    b.Property<int>("VolAPIFluidLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolAPIFluidLossId");

                    b.ToTable("CementJobVolAPIFluidLosss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolCement", b =>
                {
                    b.Property<int>("VolCementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolCementId");

                    b.ToTable("CementJobVolCements");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolCircPrior", b =>
                {
                    b.Property<int>("VolCircPriorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolCircPriorId");

                    b.ToTable("CementJobVolCircPriors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolCsgIn", b =>
                {
                    b.Property<int>("VolCsgInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolCsgInId");

                    b.ToTable("CementJobVolCsgIns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolCsgOut", b =>
                {
                    b.Property<int>("VolCsgOutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolCsgOutId");

                    b.ToTable("CementJobVolCsgOuts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolDisplaceFluid", b =>
                {
                    b.Property<int>("VolDisplaceFluidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolDisplaceFluidId");

                    b.ToTable("CementJobVolDisplaceFluids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolExcess", b =>
                {
                    b.Property<int>("VolExcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolExcessId");

                    b.ToTable("CementJobVolExcesss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolFluid", b =>
                {
                    b.Property<int>("VolFluidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolFluidId");

                    b.ToTable("CementJobVolFluids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolGasFoam", b =>
                {
                    b.Property<int>("VolGasFoamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolGasFoamId");

                    b.ToTable("CementJobVolGasFoams");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolMudLost", b =>
                {
                    b.Property<int>("VolMudLostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolMudLostId");

                    b.ToTable("CementJobVolMudLosts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolOther", b =>
                {
                    b.Property<int>("VolOtherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolOtherId");

                    b.ToTable("CementJobVolOthers");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolPump", b =>
                {
                    b.Property<int>("VolPumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolPumpId");

                    b.ToTable("CementJobVolPumps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolPumped", b =>
                {
                    b.Property<int>("VolPumpedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolPumpedId");

                    b.ToTable("CementJobVolPumpeds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolReserved", b =>
                {
                    b.Property<int>("VolReservedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolReservedId");

                    b.ToTable("CementJobVolReserveds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolReturns", b =>
                {
                    b.Property<int>("VolReturnsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolReturnsId");

                    b.ToTable("CementJobVolReturnss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolTestFluidLoss", b =>
                {
                    b.Property<int>("VolTestFluidLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolTestFluidLossId");

                    b.ToTable("CementJobVolTestFluidLosss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolTotSlurry", b =>
                {
                    b.Property<int>("VolTotSlurryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolTotSlurryId");

                    b.ToTable("CementJobVolTotSlurrys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolWater", b =>
                {
                    b.Property<int>("VolWaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolWaterId");

                    b.ToTable("CementJobVolWaters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobVolYield", b =>
                {
                    b.Property<int>("VolYieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolYieldId");

                    b.ToTable("CementJobVolYields");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobWoc", b =>
                {
                    b.Property<int>("WocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WocId");

                    b.ToTable("CementJobWocs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobWtMud", b =>
                {
                    b.Property<int>("WtMudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WtMudId");

                    b.ToTable("CementJobWtMuds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobYp", b =>
                {
                    b.Property<int>("JobYpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobYpId");

                    b.ToTable("CementJobYps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobYpMud", b =>
                {
                    b.Property<int>("YpMudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YpMudId");

                    b.ToTable("CementJobYpMuds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ChangeHistory", b =>
                {
                    b.Property<int>("ChangeHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangeInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangeLogUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChangeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimChange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndIndexUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mnemonics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartIndexUom")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChangeHistoryId");

                    b.HasIndex("ChangeLogUid");

                    b.HasIndex("EndIndexUom");

                    b.HasIndex("StartIndexUom");

                    b.ToTable("ChangeLogChangeHistory");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ChangeLog", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("LastChangeInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastChangeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameObject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidObject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("CommonDataId");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ChangeLogCommonData", b =>
                {
                    b.Property<int>("CommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DTimCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DTimLastChange")
                        .HasColumnType("datetime2");

                    b.HasKey("CommonDataId");

                    b.ToTable("ChangeLogCommonData");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ClosureDuration", b =>
                {
                    b.Property<int>("ClosureDurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClosureDurationId");

                    b.ToTable("StimJobClosureDurations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ClosurePres", b =>
                {
                    b.Property<int>("ClosurePresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClosurePresId");

                    b.ToTable("StimJobClosurePress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Configuration", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConstantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Index");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Constant", b =>
                {
                    b.Property<int>("ConstantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConstantId");

                    b.ToTable("ToolErrorTermSetConstants");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCore", b =>
                {
                    b.Property<int>("ConvCoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnalysisContractor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("CoreBarrel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoreBitType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoreDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoreFluidUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoreMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoreOrientation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoreReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoreTreatmentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoringContractor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimCoreEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimCoreStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiaBitId")
                        .HasColumnType("int");

                    b.Property<int?>("DiaCoreId")
                        .HasColumnType("int");

                    b.Property<int?>("GeologyIntervalId")
                        .HasColumnType("int");

                    b.Property<int?>("InclHoleId")
                        .HasColumnType("int");

                    b.Property<string>("InnerBarrelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerBarrelUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LenBarrelId")
                        .HasColumnType("int");

                    b.Property<int?>("LenCoredId")
                        .HasColumnType("int");

                    b.Property<int?>("LenRecoveredId")
                        .HasColumnType("int");

                    b.Property<int?>("MdCoreBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdCoreTopId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFormation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecoverPcLenRecoveredId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConvCoreId");

                    b.HasIndex("CommonDataId");

                    b.HasIndex("DiaBitId");

                    b.HasIndex("DiaCoreId");

                    b.HasIndex("GeologyIntervalId");

                    b.HasIndex("InclHoleId");

                    b.HasIndex("LenBarrelId");

                    b.HasIndex("LenCoredId");

                    b.HasIndex("LenRecoveredId");

                    b.HasIndex("MdCoreBottomId");

                    b.HasIndex("MdCoreTopId");

                    b.HasIndex("RecoverPcLenRecoveredId");

                    b.ToTable("ConvCores");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreAcetylene", b =>
                {
                    b.Property<int>("AcetyleneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcetyleneId");

                    b.ToTable("ConvCoreAcetylenes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreCalcStab", b =>
                {
                    b.Property<int>("CalcStabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalcStabId");

                    b.ToTable("ConvCoreCalcStabs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreCalcite", b =>
                {
                    b.Property<int>("CalciteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalciteId");

                    b.ToTable("ConvCoreCalcites");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreCec", b =>
                {
                    b.Property<int>("CecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CecId");

                    b.ToTable("ConvCoreCecs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreChromatograph", b =>
                {
                    b.Property<int>("ChromatographId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcetyleneId")
                        .HasColumnType("int");

                    b.Property<string>("ChromIntRpt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChromType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Co2AvId")
                        .HasColumnType("int");

                    b.Property<int?>("Co2MnId")
                        .HasColumnType("int");

                    b.Property<int?>("Co2MxId")
                        .HasColumnType("int");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ETimChromCycleId")
                        .HasColumnType("int");

                    b.Property<int?>("EpentAvId")
                        .HasColumnType("int");

                    b.Property<int?>("EpentMnId")
                        .HasColumnType("int");

                    b.Property<int?>("EpentMxId")
                        .HasColumnType("int");

                    b.Property<int?>("EthAvId")
                        .HasColumnType("int");

                    b.Property<int?>("EthMnId")
                        .HasColumnType("int");

                    b.Property<int?>("EthMxId")
                        .HasColumnType("int");

                    b.Property<int?>("H2sAvId")
                        .HasColumnType("int");

                    b.Property<int?>("H2sMnId")
                        .HasColumnType("int");

                    b.Property<int?>("H2sMxId")
                        .HasColumnType("int");

                    b.Property<int?>("IbutAvId")
                        .HasColumnType("int");

                    b.Property<int?>("IbutMnId")
                        .HasColumnType("int");

                    b.Property<int?>("IbutMxId")
                        .HasColumnType("int");

                    b.Property<int?>("IhexAvId")
                        .HasColumnType("int");

                    b.Property<int?>("IhexMnId")
                        .HasColumnType("int");

                    b.Property<int?>("IhexMxId")
                        .HasColumnType("int");

                    b.Property<int?>("IpentAvId")
                        .HasColumnType("int");

                    b.Property<int?>("IpentMnId")
                        .HasColumnType("int");

                    b.Property<int?>("IpentMxId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<int?>("MethAvId")
                        .HasColumnType("int");

                    b.Property<int?>("MethMnId")
                        .HasColumnType("int");

                    b.Property<int?>("MethMxId")
                        .HasColumnType("int");

                    b.Property<int?>("NbutAvId")
                        .HasColumnType("int");

                    b.Property<int?>("NbutMnId")
                        .HasColumnType("int");

                    b.Property<int?>("NbutMxId")
                        .HasColumnType("int");

                    b.Property<int?>("NhexAvId")
                        .HasColumnType("int");

                    b.Property<int?>("NhexMnId")
                        .HasColumnType("int");

                    b.Property<int?>("NhexMxId")
                        .HasColumnType("int");

                    b.Property<int?>("NpentAvId")
                        .HasColumnType("int");

                    b.Property<int?>("NpentMnId")
                        .HasColumnType("int");

                    b.Property<int?>("NpentMxId")
                        .HasColumnType("int");

                    b.Property<int?>("PropAvId")
                        .HasColumnType("int");

                    b.Property<int?>("PropMnId")
                        .HasColumnType("int");

                    b.Property<int?>("PropMxId")
                        .HasColumnType("int");

                    b.Property<int?>("WtMudInId")
                        .HasColumnType("int");

                    b.Property<int?>("WtMudOutId")
                        .HasColumnType("int");

                    b.HasKey("ChromatographId");

                    b.HasIndex("AcetyleneId");

                    b.HasIndex("Co2AvId");

                    b.HasIndex("Co2MnId");

                    b.HasIndex("Co2MxId");

                    b.HasIndex("ETimChromCycleId");

                    b.HasIndex("EpentAvId");

                    b.HasIndex("EpentMnId");

                    b.HasIndex("EpentMxId");

                    b.HasIndex("EthAvId");

                    b.HasIndex("EthMnId");

                    b.HasIndex("EthMxId");

                    b.HasIndex("H2sAvId");

                    b.HasIndex("H2sMnId");

                    b.HasIndex("H2sMxId");

                    b.HasIndex("IbutAvId");

                    b.HasIndex("IbutMnId");

                    b.HasIndex("IbutMxId");

                    b.HasIndex("IhexAvId");

                    b.HasIndex("IhexMnId");

                    b.HasIndex("IhexMxId");

                    b.HasIndex("IpentAvId");

                    b.HasIndex("IpentMnId");

                    b.HasIndex("IpentMxId");

                    b.HasIndex("MdBottomId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("MethAvId");

                    b.HasIndex("MethMnId");

                    b.HasIndex("MethMxId");

                    b.HasIndex("NbutAvId");

                    b.HasIndex("NbutMnId");

                    b.HasIndex("NbutMxId");

                    b.HasIndex("NhexAvId");

                    b.HasIndex("NhexMnId");

                    b.HasIndex("NhexMxId");

                    b.HasIndex("NpentAvId");

                    b.HasIndex("NpentMnId");

                    b.HasIndex("NpentMxId");

                    b.HasIndex("PropAvId");

                    b.HasIndex("PropMnId");

                    b.HasIndex("PropMxId");

                    b.HasIndex("WtMudInId");

                    b.HasIndex("WtMudOutId");

                    b.ToTable("ConvCoreChromatographs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreCo2Av", b =>
                {
                    b.Property<int>("Co2AvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Co2AvId");

                    b.ToTable("ConvCoreCo2Avs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreCo2Mn", b =>
                {
                    b.Property<int>("Co2MnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Co2MnId");

                    b.ToTable("ConvCoreCo2Mns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreCo2Mx", b =>
                {
                    b.Property<int>("Co2MxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Co2MxId");

                    b.ToTable("ConvCoreCo2Mxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreCommonData", b =>
                {
                    b.Property<int>("CommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommonDataId");

                    b.ToTable("ConvCoreCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreDensBulk", b =>
                {
                    b.Property<int>("DensBulkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensBulkId");

                    b.ToTable("ConvCoreDensBulks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreDensShale", b =>
                {
                    b.Property<int>("DensShaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensShaleId");

                    b.ToTable("ConvCoreDensShales");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreDiaBit", b =>
                {
                    b.Property<int>("DiaBitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaBitId");

                    b.ToTable("ConvCoreDiaBits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreDiaCore", b =>
                {
                    b.Property<int>("DiaCoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaCoreId");

                    b.ToTable("ConvCoreDiaCores");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreDolomite", b =>
                {
                    b.Property<int>("DolomiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DolomiteId");

                    b.ToTable("ConvCoreDolomites");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreETimChromCycle", b =>
                {
                    b.Property<int>("ETimChromCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimChromCycleId");

                    b.ToTable("ConvCoreETimChromCycles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreEcdTdAv", b =>
                {
                    b.Property<int>("EcdTdAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EcdTdAvId");

                    b.ToTable("ConvCoreEcdTdAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreEpentAv", b =>
                {
                    b.Property<int>("EpentAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpentAvId");

                    b.ToTable("ConvCoreEpentAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreEpentMn", b =>
                {
                    b.Property<int>("EpentMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpentMnId");

                    b.ToTable("ConvCoreEpentMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreEpentMx", b =>
                {
                    b.Property<int>("EpentMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpentMxId");

                    b.ToTable("ConvCoreEpentMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreEthAv", b =>
                {
                    b.Property<int>("EthAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EthAvId");

                    b.ToTable("ConvCoreEthAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreEthMn", b =>
                {
                    b.Property<int>("EthMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EthMnId");

                    b.ToTable("ConvCoreEthMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreEthMx", b =>
                {
                    b.Property<int>("EthMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EthMxId");

                    b.ToTable("ConvCoreEthMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreGasAv", b =>
                {
                    b.Property<int>("GasAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasAvId");

                    b.ToTable("ConvCoreGasAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreGasBackgnd", b =>
                {
                    b.Property<int>("GasBackgndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasBackgndId");

                    b.ToTable("ConvCoreGasBackgnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreGasConAv", b =>
                {
                    b.Property<int>("GasConAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasConAvId");

                    b.ToTable("ConvCoreGasConAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreGasConMx", b =>
                {
                    b.Property<int>("GasConMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasConMxId");

                    b.ToTable("ConvCoreGasConMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreGasPeak", b =>
                {
                    b.Property<int>("GasPeakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasPeakId");

                    b.ToTable("ConvCoreGasPeaks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreGasTrip", b =>
                {
                    b.Property<int>("GasConTripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasConTripId");

                    b.ToTable("ConvCoreGasTrips");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreGeologyInterval", b =>
                {
                    b.Property<int>("GeologyIntervalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalcStabId")
                        .HasColumnType("int");

                    b.Property<int?>("CalciteId")
                        .HasColumnType("int");

                    b.Property<int?>("CecId")
                        .HasColumnType("int");

                    b.Property<int?>("ChromatographId")
                        .HasColumnType("int");

                    b.Property<string>("Chronostratigraphic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CleaningMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CuttingFluid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DensBulkId")
                        .HasColumnType("int");

                    b.Property<int?>("DensShaleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DolomiteId")
                        .HasColumnType("int");

                    b.Property<string>("DryingMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DxcAv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EcdTdAvId")
                        .HasColumnType("int");

                    b.Property<int?>("LenPlugId")
                        .HasColumnType("int");

                    b.Property<int?>("LithologyId")
                        .HasColumnType("int");

                    b.Property<string>("Lithostratigraphic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<int?>("MudGasId")
                        .HasColumnType("int");

                    b.Property<string>("NameFormation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RopAvId")
                        .HasColumnType("int");

                    b.Property<int?>("RopMnId")
                        .HasColumnType("int");

                    b.Property<int?>("RopMxId")
                        .HasColumnType("int");

                    b.Property<int?>("RpmAvId")
                        .HasColumnType("int");

                    b.Property<int?>("ShowId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeMnId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeMxId")
                        .HasColumnType("int");

                    b.Property<int?>("TqAvId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdTopId")
                        .HasColumnType("int");

                    b.Property<string>("TypeLithology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WobAvId")
                        .HasColumnType("int");

                    b.Property<int?>("WtMudAvId")
                        .HasColumnType("int");

                    b.HasKey("GeologyIntervalId");

                    b.HasIndex("CalcStabId");

                    b.HasIndex("CalciteId");

                    b.HasIndex("CecId");

                    b.HasIndex("ChromatographId");

                    b.HasIndex("DensBulkId");

                    b.HasIndex("DensShaleId");

                    b.HasIndex("DolomiteId");

                    b.HasIndex("EcdTdAvId");

                    b.HasIndex("LenPlugId");

                    b.HasIndex("LithologyId");

                    b.HasIndex("MdBottomId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("MudGasId");

                    b.HasIndex("RopAvId");

                    b.HasIndex("RopMnId");

                    b.HasIndex("RopMxId");

                    b.HasIndex("RpmAvId");

                    b.HasIndex("ShowId");

                    b.HasIndex("SizeMnId");

                    b.HasIndex("SizeMxId");

                    b.HasIndex("TqAvId");

                    b.HasIndex("TvdBaseId");

                    b.HasIndex("TvdTopId");

                    b.HasIndex("WobAvId");

                    b.HasIndex("WtMudAvId");

                    b.ToTable("ConvCoreGeologyIntervals");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreH2sAv", b =>
                {
                    b.Property<int>("H2sAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("H2sAvId");

                    b.ToTable("ConvCoreH2sAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreH2sMn", b =>
                {
                    b.Property<int>("H2sMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("H2sMnId");

                    b.ToTable("ConvCoreH2sMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreH2sMx", b =>
                {
                    b.Property<int>("H2sMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("H2sMxId");

                    b.ToTable("ConvCoreH2sMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreIbutAv", b =>
                {
                    b.Property<int>("IbutAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IbutAvId");

                    b.ToTable("ConvCoreIbutAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreIbutMn", b =>
                {
                    b.Property<int>("IbutMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IbutMnId");

                    b.ToTable("ConvCoreIbutMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreIbutMx", b =>
                {
                    b.Property<int>("IbutMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IbutMxId");

                    b.ToTable("ConvCoreIbutMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreIhexAv", b =>
                {
                    b.Property<int>("IhexAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IhexAvId");

                    b.ToTable("ConvCoreIhexAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreIhexMn", b =>
                {
                    b.Property<int>("IhexMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IhexMnId");

                    b.ToTable("ConvCoreIhexMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreIhexMx", b =>
                {
                    b.Property<int>("IhexMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IhexMxId");

                    b.ToTable("ConvCoreIhexMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreInclHole", b =>
                {
                    b.Property<int>("InclHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InclHoleId");

                    b.ToTable("ConvCoreInclHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreIpentAv", b =>
                {
                    b.Property<int>("IpentAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IpentAvId");

                    b.ToTable("ConvCoreIpentAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreIpentMn", b =>
                {
                    b.Property<int>("IpentMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IpentMnId");

                    b.ToTable("ConvCoreIpentMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreIpentMx", b =>
                {
                    b.Property<int>("IpentMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IpentMxId");

                    b.ToTable("ConvCoreIpentMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreLenBarrel", b =>
                {
                    b.Property<int>("LenBarrelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenBarrelId");

                    b.ToTable("ConvCoreLenBarrels");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreLenCored", b =>
                {
                    b.Property<int>("LenCoredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenCoredId");

                    b.ToTable("ConvCoreLenCoreds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreLenPlug", b =>
                {
                    b.Property<int>("LenPlugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenPlugId");

                    b.ToTable("ConvCoreLenPlugs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreLenRecovered", b =>
                {
                    b.Property<int>("LenRecoveredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenRecoveredId");

                    b.ToTable("ConvCoreLenRecovereds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreLithPc", b =>
                {
                    b.Property<int>("LithPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LithPcId");

                    b.ToTable("ConvCoreLithPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreLithology", b =>
                {
                    b.Property<int>("LithologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeLith")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DensShaleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DunhamClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrainType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hardness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LithClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LithPcId")
                        .HasColumnType("int");

                    b.Property<string>("MatrixCement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permeability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PorosityVisible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roundness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeGrain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sorting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Texture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LithologyId");

                    b.HasIndex("DensShaleId");

                    b.HasIndex("LithPcId");

                    b.ToTable("ConvCoreLithologys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreMdBottom", b =>
                {
                    b.Property<int>("MdBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdBottomId");

                    b.ToTable("ConvCoreMdBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreMdCoreBottom", b =>
                {
                    b.Property<int>("MdCoreBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdCoreBottomId");

                    b.ToTable("ConvCoreMdCoreBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreMdCoreTop", b =>
                {
                    b.Property<int>("MdCoreTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdCoreTopId");

                    b.ToTable("ConvCoreMdCoreTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreMdTop", b =>
                {
                    b.Property<int>("MdTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdTopId");

                    b.ToTable("ConvCoreMdTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreMethAv", b =>
                {
                    b.Property<int>("MethAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MethAvId");

                    b.ToTable("ConvCoreMethAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreMethMn", b =>
                {
                    b.Property<int>("MethMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MethMnId");

                    b.ToTable("ConvCoreMethMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreMethMx", b =>
                {
                    b.Property<int>("MethMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MethMxId");

                    b.ToTable("ConvCoreMethMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreMudGas", b =>
                {
                    b.Property<int>("MudGasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GasAvId")
                        .HasColumnType("int");

                    b.Property<int?>("GasBackgndId")
                        .HasColumnType("int");

                    b.Property<int?>("GasConAvId")
                        .HasColumnType("int");

                    b.Property<int?>("GasConMxId")
                        .HasColumnType("int");

                    b.Property<int?>("GasPeakId")
                        .HasColumnType("int");

                    b.Property<string>("GasPeakType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GasTripGasConTripId")
                        .HasColumnType("int");

                    b.HasKey("MudGasId");

                    b.HasIndex("GasAvId");

                    b.HasIndex("GasBackgndId");

                    b.HasIndex("GasConAvId");

                    b.HasIndex("GasConMxId");

                    b.HasIndex("GasPeakId");

                    b.HasIndex("GasTripGasConTripId");

                    b.ToTable("ConvCoreMudGass");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreNatFlorPc", b =>
                {
                    b.Property<int>("NatFlorPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NatFlorPcId");

                    b.ToTable("ConvCoreNatFlorPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreNbutAv", b =>
                {
                    b.Property<int>("NbutAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NbutAvId");

                    b.ToTable("ConvCoreNbutAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreNbutMn", b =>
                {
                    b.Property<int>("NbutMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NbutMnId");

                    b.ToTable("ConvCoreNbutMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreNbutMx", b =>
                {
                    b.Property<int>("NbutMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NbutMxId");

                    b.ToTable("ConvCoreNbutMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreNhexAv", b =>
                {
                    b.Property<int>("NhexAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NhexAvId");

                    b.ToTable("ConvCoreNhexAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreNhexMn", b =>
                {
                    b.Property<int>("NhexMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NhexMnId");

                    b.ToTable("ConvCoreNhexMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreNhexMx", b =>
                {
                    b.Property<int>("NhexMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NhexMxId");

                    b.ToTable("ConvCoreNhexMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreNpentAv", b =>
                {
                    b.Property<int>("NpentAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NpentAvId");

                    b.ToTable("ConvCoreNpentAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreNpentMn", b =>
                {
                    b.Property<int>("NpentMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NpentMnId");

                    b.ToTable("ConvCoreNpentMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreNpentMx", b =>
                {
                    b.Property<int>("NpentMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NpentMxId");

                    b.ToTable("ConvCoreNpentMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCorePropAv", b =>
                {
                    b.Property<int>("PropAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropAvId");

                    b.ToTable("ConvCorePropAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCorePropMn", b =>
                {
                    b.Property<int>("PropMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropMnId");

                    b.ToTable("ConvCorePropMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCorePropMx", b =>
                {
                    b.Property<int>("PropMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropMxId");

                    b.ToTable("ConvCorePropMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreQualifier", b =>
                {
                    b.Property<int>("QualifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConvCoreLithologyLithologyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QualifierId");

                    b.HasIndex("ConvCoreLithologyLithologyId");

                    b.ToTable("ConvCoreQualifiers");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreRecoverPc", b =>
                {
                    b.Property<int>("LenRecoveredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenRecoveredId");

                    b.ToTable("ConvCoreRecoverPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreRopAv", b =>
                {
                    b.Property<int>("RopAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RopAvId");

                    b.ToTable("ConvCoreRopAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreRopMn", b =>
                {
                    b.Property<int>("RopMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RopMnId");

                    b.ToTable("ConvCoreRopMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreRopMx", b =>
                {
                    b.Property<int>("RopMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RopMxId");

                    b.ToTable("ConvCoreRopMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreRpmAv", b =>
                {
                    b.Property<int>("RpmAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RpmAvId");

                    b.ToTable("ConvCoreRpmAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreShow", b =>
                {
                    b.Property<int>("ShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CutColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImpregnatedLitho")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatFlorColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatFlorDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatFlorLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NatFlorPcId")
                        .HasColumnType("int");

                    b.Property<string>("Odor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidueColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShowDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShowRat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StainColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StainDistr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StainPcId")
                        .HasColumnType("int");

                    b.HasKey("ShowId");

                    b.HasIndex("NatFlorPcId");

                    b.HasIndex("StainPcId");

                    b.ToTable("ConvCoreShows");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreSizeMn", b =>
                {
                    b.Property<int>("SizeMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeMnId");

                    b.ToTable("ConvCoreSizeMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreSizeMx", b =>
                {
                    b.Property<int>("SizeMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeMxId");

                    b.ToTable("ConvCoreSizeMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreStainPc", b =>
                {
                    b.Property<int>("StainPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StainPcId");

                    b.ToTable("ConvCoreStainPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreTqAv", b =>
                {
                    b.Property<int>("TqAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TqAvId");

                    b.ToTable("ConvCoreTqAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreTvdBase", b =>
                {
                    b.Property<int>("TvdBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdBaseId");

                    b.ToTable("ConvCoreTvdBases");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreTvdTop", b =>
                {
                    b.Property<int>("TvdTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdTopId");

                    b.ToTable("ConvCoreTvdTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreWobAv", b =>
                {
                    b.Property<int>("WobAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WobAvId");

                    b.ToTable("ConvCoreWobAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreWtMudAv", b =>
                {
                    b.Property<int>("WtMudAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WtMudAvId");

                    b.ToTable("ConvCoreWtMudAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreWtMudIn", b =>
                {
                    b.Property<int>("WtMudInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WtMudInId");

                    b.ToTable("ConvCoreWtMudIns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreWtMudOut", b =>
                {
                    b.Property<int>("WtMudOutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WtMudOutId");

                    b.ToTable("ConvCoreWtMudOuts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Conversion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdentifierCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsesMethodId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdentifierCodeSpace");

                    b.HasIndex("NameCodeSpace");

                    b.HasIndex("UsesMethodId");

                    b.ToTable("CoordinateReferenceSystemConversion");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CoordinateReferenceSystem", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("GeodeticCRSCoRefGeodeticCRSId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectedCRSId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("VerticalCRSId")
                        .HasColumnType("int");

                    b.HasKey("Uid");

                    b.HasIndex("GeodeticCRSCoRefGeodeticCRSId");

                    b.HasIndex("ProjectedCRSId");

                    b.HasIndex("VerticalCRSId");

                    b.ToTable("CoordinateReferenceSystem");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CoordinateReferenceSystemGeodeticCRS", b =>
                {
                    b.Property<int>("CoRefGeodeticCRSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GmlGeodeticCRSId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameCRSCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CoRefGeodeticCRSId");

                    b.HasIndex("GmlGeodeticCRSId");

                    b.HasIndex("NameCRSCode");

                    b.ToTable("CoordinateReferenceSystemGeodeticCRS");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CoordinateReferenceSystemValue", b =>
                {
                    b.Property<int>("ValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ValueId");

                    b.ToTable("CoordinateReferenceSystemValues");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CoordinateSystemAxis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AxisAbbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AxisDirectionCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdentifierCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AxisDirectionCodeSpace");

                    b.HasIndex("IdentifierCodeSpace");

                    b.ToTable("CoordinateReferenceSystemCoordinateSystemAxis");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DayTarget", b =>
                {
                    b.Property<int>("DayTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DayTargetId");

                    b.ToTable("WellboreDayTarget");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DefinedByConversion", b =>
                {
                    b.Property<string>("DefinedByConversionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConversionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DefinedByConversionId");

                    b.HasIndex("ConversionId");

                    b.ToTable("CoordinateReferenceSystemDefinedByConversion");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DensityPerforation", b =>
                {
                    b.Property<int>("DensityPerforationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensityPerforationId");

                    b.ToTable("StimJobDensityPerforations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DiaPlug", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("DiaPlug");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DiameterEntryHole", b =>
                {
                    b.Property<int>("PipeFrictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PipeFrictionId");

                    b.ToTable("StimJobDiameterEntryHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DispEwCenter", b =>
                {
                    b.Property<int>("DispEwCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispEwCenterId");

                    b.ToTable("TargetDispEwCenters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DispEwOffset", b =>
                {
                    b.Property<int>("DispEwOffsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispEwOffsetId");

                    b.ToTable("TargetDispEwOffsets");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DispEwSectOrig", b =>
                {
                    b.Property<int>("DispEwSectOrigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispEwSectOrigId");

                    b.ToTable("TargetDispEwSectOrigs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DispEwVertSectOrig", b =>
                {
                    b.Property<int>("DispEwVertSectOrigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispEwVertSectOrigId");

                    b.ToTable("TrajectoryDispEwVertSectOrigs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DispNsCenter", b =>
                {
                    b.Property<int>("DispNsCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispNsCenterId");

                    b.ToTable("TargetDispNsCenters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DispNsOffset", b =>
                {
                    b.Property<int>("DispNsOffsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispNsOffsetId");

                    b.ToTable("TargetDispNsOffsets");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DispNsSectOrig", b =>
                {
                    b.Property<int>("DispNsSectOrigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispNsSectOrigId");

                    b.ToTable("TargetDispNsSectOrigs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DispNsVertSectOrig", b =>
                {
                    b.Property<int>("DispNsVertSectOrigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispNsVertSectOrigId");

                    b.ToTable("TrajectoryDispNsVertSectOrigs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReport", b =>
                {
                    b.Property<int>("DrillReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BitRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("CommonDataId")
                        .HasColumnType("int");

                    b.Property<int?>("ControlIncidentInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("CoreInfoId")
                        .HasColumnType("int");

                    b.Property<string>("CreateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipFailureInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("ExtendedReportId")
                        .HasColumnType("int");

                    b.Property<int?>("FormTestInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("GasReadingInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("LithShowInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PerfInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("StratInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyStationId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionKind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WellAliasId")
                        .HasColumnType("int");

                    b.Property<string>("WellCRSUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WellTestInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("WellboreInfoId")
                        .HasColumnType("int");

                    b.HasKey("DrillReportId");

                    b.HasIndex("BitRecordId");

                    b.HasIndex("CommonDataId");

                    b.HasIndex("ControlIncidentInfoId");

                    b.HasIndex("CoreInfoId");

                    b.HasIndex("EquipFailureInfoId");

                    b.HasIndex("ExtendedReportId");

                    b.HasIndex("FormTestInfoId");

                    b.HasIndex("GasReadingInfoId");

                    b.HasIndex("LithShowInfoId");

                    b.HasIndex("PerfInfoId");

                    b.HasIndex("StatusInfoId");

                    b.HasIndex("StratInfoId");

                    b.HasIndex("SurveyStationId");

                    b.HasIndex("WellAliasId");

                    b.HasIndex("WellCRSUid");

                    b.HasIndex("WellTestInfoId");

                    b.HasIndex("WellboreInfoId");

                    b.ToTable("DrillReports");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportActivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailActivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DrillReportId")
                        .HasColumnType("int");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<string>("Phase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateDetailActivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.HasIndex("DrillReportId");

                    b.HasIndex("MdId");

                    b.HasIndex("TvdId");

                    b.ToTable("DrillReportActivity");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportAzi", b =>
                {
                    b.Property<int>("AziId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AziId");

                    b.ToTable("DrillReportAzi");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportBitRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeMfg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiaBitId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumBit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiaBitId");

                    b.ToTable("DrillReportBitRecord");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportCarbonDioxide", b =>
                {
                    b.Property<int>("CarbonDioxideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarbonDioxideId");

                    b.ToTable("DrillReportCarbonDioxide");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportChloride", b =>
                {
                    b.Property<int>("ChlorideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChlorideId");

                    b.ToTable("DrillReportChloride");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportChokeOrificeSize", b =>
                {
                    b.Property<int>("ChokeOrificeSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChokeOrificeSizeId");

                    b.ToTable("DrillReportChokeOrificeSize");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportCommonData", b =>
                {
                    b.Property<int>("CommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DefaultDatumId")
                        .HasColumnType("int");

                    b.HasKey("CommonDataId");

                    b.HasIndex("DefaultDatumId");

                    b.ToTable("DrillReportCommonData");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportControlIncidentInfo", b =>
                {
                    b.Property<int>("ControlIncidentInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimRegained")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailActivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiaBitId")
                        .HasColumnType("int");

                    b.Property<int?>("DiaCsgLastId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimLostId")
                        .HasColumnType("int");

                    b.Property<string>("Formation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncidentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KillingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdBitId")
                        .HasColumnType("int");

                    b.Property<int?>("MdCsgLastId")
                        .HasColumnType("int");

                    b.Property<int?>("MdInflowId")
                        .HasColumnType("int");

                    b.Property<string>("Phase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PorePressureId")
                        .HasColumnType("int");

                    b.Property<int?>("PresMaxChokeId")
                        .HasColumnType("int");

                    b.Property<int?>("PresShutInCasingId")
                        .HasColumnType("int");

                    b.Property<int?>("PresShutInDrillId")
                        .HasColumnType("int");

                    b.Property<int?>("TempBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdInflowId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VolMudGainedId")
                        .HasColumnType("int");

                    b.Property<string>("WtMudUom")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ControlIncidentInfoId");

                    b.HasIndex("DiaBitId");

                    b.HasIndex("DiaCsgLastId");

                    b.HasIndex("ETimLostId");

                    b.HasIndex("MdBitId");

                    b.HasIndex("MdCsgLastId");

                    b.HasIndex("MdInflowId");

                    b.HasIndex("PorePressureId");

                    b.HasIndex("PresMaxChokeId");

                    b.HasIndex("PresShutInCasingId");

                    b.HasIndex("PresShutInDrillId");

                    b.HasIndex("TempBottomId");

                    b.HasIndex("TvdInflowId");

                    b.HasIndex("VolMudGainedId");

                    b.HasIndex("WtMudUom");

                    b.ToTable("DrillReportControlIncidentInfo");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportCoreInfo", b =>
                {
                    b.Property<int>("CoreInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoreDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoreNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerBarrelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LenBarrelId")
                        .HasColumnType("int");

                    b.Property<int?>("LenRecoveredId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomDrillReportMdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<int?>("RecoverPcId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdTopDrillReportTvdTopId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CoreInfoId");

                    b.HasIndex("LenBarrelId");

                    b.HasIndex("LenRecoveredId");

                    b.HasIndex("MdBottomDrillReportMdBottomId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("RecoverPcId");

                    b.HasIndex("TvdBottomId");

                    b.HasIndex("TvdTopDrillReportTvdTopId");

                    b.ToTable("DrillReportCoreInfo");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportDefaultDatum", b =>
                {
                    b.Property<int>("DefaultDatumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DefaultDatumId");

                    b.ToTable("DrillReportDefaultDatum");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportDensity", b =>
                {
                    b.Property<int>("DensityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensityId");

                    b.ToTable("DrillReportDensity");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportDensityGas", b =>
                {
                    b.Property<int>("DensityGasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensityGasId");

                    b.ToTable("DrillReportDensityGas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportDensityHC", b =>
                {
                    b.Property<int>("DensityHCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensityHCId");

                    b.ToTable("DrillReportDensityHC");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportDensityOil", b =>
                {
                    b.Property<int>("DensityOilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensityOilId");

                    b.ToTable("DrillReportDensityOil");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportDensityWater", b =>
                {
                    b.Property<int>("DensityWaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensityWaterId");

                    b.ToTable("DrillReportDensityWater");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportDiaBit", b =>
                {
                    b.Property<int>("DiaBitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaBitId");

                    b.ToTable("DrillReportDiaBit");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportDiaCsgLast", b =>
                {
                    b.Property<int>("DiaCsgLastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaCsgLastId");

                    b.ToTable("DrillReportDiaCsgLast");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportDiaHole", b =>
                {
                    b.Property<int>("DiaHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaHoleId");

                    b.ToTable("DrillReportDiaHole");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportDiaPilot", b =>
                {
                    b.Property<int>("DiaPilotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaPilotId");

                    b.ToTable("DrillReportDiaPilot");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportDistDrill", b =>
                {
                    b.Property<int>("DistDrillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistDrillId");

                    b.ToTable("DrillReportDistDrill");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportETimLost", b =>
                {
                    b.Property<int>("ETimLostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimLostId");

                    b.ToTable("DrillReportETimLost");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportETimMissProduction", b =>
                {
                    b.Property<int>("ETimMissProductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimMissProductionId");

                    b.ToTable("DrillReportETimMissProduction");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportETimStatic", b =>
                {
                    b.Property<int>("ETimStaticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimStaticId");

                    b.ToTable("DrillReportETimStatic");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportElevation", b =>
                {
                    b.Property<int>("ElevationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Datum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ElevationId");

                    b.ToTable("DrillReportElevation");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportEquipFailureInfo", b =>
                {
                    b.Property<int>("EquipFailureInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimRepair")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ETimMissProductionId")
                        .HasColumnType("int");

                    b.Property<string>("EquipClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipFailureInfoId");

                    b.HasIndex("ETimMissProductionId");

                    b.HasIndex("MdId");

                    b.ToTable("DrillReportEquipFailureInfo");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportEquivalentMudWeight", b =>
                {
                    b.Property<int>("EquivalentMudWeightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquivalentMudWeightId");

                    b.ToTable("DrillReportEquivalentMudWeight");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportEth", b =>
                {
                    b.Property<int>("EthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EthId");

                    b.ToTable("DrillReportEth");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportExtendedReport", b =>
                {
                    b.Property<int>("ExtendedReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExtendedReportId");

                    b.ToTable("DrillReportExtendedReport");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportFlowRateGas", b =>
                {
                    b.Property<int>("FlowRateGasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowRateGasId");

                    b.ToTable("DrillReportFlowRateGas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportFlowRateOil", b =>
                {
                    b.Property<int>("FlowRateOilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowRateOilId");

                    b.ToTable("DrillReportFlowRateOil");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportFlowRateWater", b =>
                {
                    b.Property<int>("FlowRateWaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowRateWaterId");

                    b.ToTable("DrillReportFlowRateWater");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportFluid", b =>
                {
                    b.Property<int>("FluidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DensityId")
                        .HasColumnType("int");

                    b.Property<int?>("DrillReportId")
                        .HasColumnType("int");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<string>("MudClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PresBopRatingId")
                        .HasColumnType("int");

                    b.Property<int?>("PvId")
                        .HasColumnType("int");

                    b.Property<int?>("TempVisId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidId");

                    b.HasIndex("DensityId");

                    b.HasIndex("DrillReportId");

                    b.HasIndex("MdId");

                    b.HasIndex("PresBopRatingId");

                    b.HasIndex("PvId");

                    b.HasIndex("TempVisId");

                    b.HasIndex("TvdId");

                    b.ToTable("DrillReportFluids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportFormTestInfo", b =>
                {
                    b.Property<int>("FormTestInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DensityHCId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DominateComponent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodSeal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<int?>("MdSampleId")
                        .HasColumnType("int");

                    b.Property<int?>("PresPoreId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VolumeSampleId")
                        .HasColumnType("int");

                    b.HasKey("FormTestInfoId");

                    b.HasIndex("DensityHCId");

                    b.HasIndex("MdId");

                    b.HasIndex("MdSampleId");

                    b.HasIndex("PresPoreId");

                    b.HasIndex("TvdId");

                    b.HasIndex("VolumeSampleId");

                    b.ToTable("DrillReportFormTestInfo");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportGasHigh", b =>
                {
                    b.Property<int>("GasHighId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasHighId");

                    b.ToTable("DrillReportGasHigh");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportGasLow", b =>
                {
                    b.Property<int>("GasLowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasLowId");

                    b.ToTable("DrillReportGasLow");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportGasOilRatio", b =>
                {
                    b.Property<int>("GasOilRatioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasOilRatioId");

                    b.ToTable("DrillReportGasOilRatio");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportGasReadingInfo", b =>
                {
                    b.Property<int>("GasReadingInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EthId")
                        .HasColumnType("int");

                    b.Property<int?>("GasHighId")
                        .HasColumnType("int");

                    b.Property<int?>("GasLowId")
                        .HasColumnType("int");

                    b.Property<int?>("IbutId")
                        .HasColumnType("int");

                    b.Property<int?>("IpentId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomDrillReportMdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<int?>("MethId")
                        .HasColumnType("int");

                    b.Property<int?>("NbutId")
                        .HasColumnType("int");

                    b.Property<int?>("PropId")
                        .HasColumnType("int");

                    b.Property<string>("ReadingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdTopDrillReportTvdTopId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasReadingInfoId");

                    b.HasIndex("EthId");

                    b.HasIndex("GasHighId");

                    b.HasIndex("GasLowId");

                    b.HasIndex("IbutId");

                    b.HasIndex("IpentId");

                    b.HasIndex("MdBottomDrillReportMdBottomId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("MethId");

                    b.HasIndex("NbutId");

                    b.HasIndex("PropId");

                    b.HasIndex("TvdBottomId");

                    b.HasIndex("TvdTopDrillReportTvdTopId");

                    b.ToTable("DrillReportGasReadingInfo");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportGeodeticCRS", b =>
                {
                    b.Property<int>("GeodeticCRSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GeodeticCRSId");

                    b.ToTable("DrillReportGeodeticCRS");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportHydrogenSulfide", b =>
                {
                    b.Property<int>("HydrogenSulfideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HydrogenSulfideId");

                    b.ToTable("DrillReportHydrogenSulfide");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportIbut", b =>
                {
                    b.Property<int>("IbutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IbutId");

                    b.ToTable("DrillReportIbut");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportIncl", b =>
                {
                    b.Property<int>("InclId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InclId");

                    b.ToTable("DrillReportIncl");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportIpent", b =>
                {
                    b.Property<int>("IpentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IpentId");

                    b.ToTable("DrillReportIpent");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportLenBarrel", b =>
                {
                    b.Property<int>("LenBarrelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenBarrelId");

                    b.ToTable("DrillReportLenBarrel");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportLenRecovered", b =>
                {
                    b.Property<int>("LenRecoveredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenRecoveredId");

                    b.ToTable("DrillReportLenRecovered");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportLithShowInfo", b =>
                {
                    b.Property<int>("LithShowInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lithology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdBottomDrillReportMdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<string>("Show")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdTopDrillReportTvdTopId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LithShowInfoId");

                    b.HasIndex("MdBottomDrillReportMdBottomId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("TvdBottomId");

                    b.HasIndex("TvdTopDrillReportTvdTopId");

                    b.ToTable("DrillReportLithShowInfo");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportLogInfo", b =>
                {
                    b.Property<int>("LogInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DrillReportId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimStaticId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomDrillReportMdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTempToolId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<string>("RunNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TempBHCTId")
                        .HasColumnType("int");

                    b.Property<int?>("TempBHSTId")
                        .HasColumnType("int");

                    b.Property<string>("Tool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdTempToolId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdTopDrillReportTvdTopId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogInfoId");

                    b.HasIndex("DrillReportId");

                    b.HasIndex("ETimStaticId");

                    b.HasIndex("MdBottomDrillReportMdBottomId");

                    b.HasIndex("MdTempToolId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("TempBHCTId");

                    b.HasIndex("TempBHSTId");

                    b.HasIndex("TvdBottomId");

                    b.HasIndex("TvdTempToolId");

                    b.HasIndex("TvdTopDrillReportTvdTopId");

                    b.ToTable("DrillReportLogInfo");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMd", b =>
                {
                    b.Property<int>("MdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdId");

                    b.ToTable("DrillReportMd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMdBit", b =>
                {
                    b.Property<int>("MdBitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdBitId");

                    b.ToTable("DrillReportMdBit");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMdBottom", b =>
                {
                    b.Property<int>("DrillReportMdBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrillReportMdBottomId");

                    b.ToTable("DrillReportMdBottom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMdCsgLast", b =>
                {
                    b.Property<int>("MdCsgLastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdCsgLastId");

                    b.ToTable("DrillReportMdCsgLast");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMdDiaHoleStart", b =>
                {
                    b.Property<int>("MdDiaHoleStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdDiaHoleStartId");

                    b.ToTable("DrillReportMdDiaHoleStart");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMdDiaPilotPlan", b =>
                {
                    b.Property<int>("MdDiaPilotPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdDiaPilotPlanId");

                    b.ToTable("DrillReportMdDiaPilotPlan");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMdInflow", b =>
                {
                    b.Property<int>("MdInflowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdInflowId");

                    b.ToTable("DrillReportMdInflow");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMdKickoff", b =>
                {
                    b.Property<int>("MdKickoffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdKickoffId");

                    b.ToTable("DrillReportMdKickoff");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMdPlugTop", b =>
                {
                    b.Property<int>("MdPlugTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdPlugTopId");

                    b.ToTable("DrillReportMdPlugTop");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMdSample", b =>
                {
                    b.Property<int>("MdSampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdSampleId");

                    b.ToTable("DrillReportMdSample");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMdStrengthForm", b =>
                {
                    b.Property<int>("MdStrengthFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdStrengthFormId");

                    b.ToTable("DrillReportMdStrengthForm");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMdTempTool", b =>
                {
                    b.Property<int>("MdTempToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdTempToolId");

                    b.ToTable("DrillReportMdTempTool");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMdTop", b =>
                {
                    b.Property<int>("MdTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdTopId");

                    b.ToTable("DrillReportMdTop");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportMeth", b =>
                {
                    b.Property<int>("MethId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MethId");

                    b.ToTable("DrillReportMeth");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportNbut", b =>
                {
                    b.Property<int>("NbutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NbutId");

                    b.ToTable("DrillReportNbut");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPerfInfo", b =>
                {
                    b.Property<int>("PerfInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTimClose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimOpen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdBottomDrillReportMdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdTopDrillReportTvdTopId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerfInfoId");

                    b.HasIndex("MdBottomDrillReportMdBottomId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("TvdBottomId");

                    b.HasIndex("TvdTopDrillReportTvdTopId");

                    b.ToTable("DrillReportPerfInfo");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPorePressure", b =>
                {
                    b.Property<int>("PorePressureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DrillReportId")
                        .HasColumnType("int");

                    b.Property<int?>("EquivalentMudWeightId")
                        .HasColumnType("int");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<string>("ReadingKind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PorePressureId");

                    b.HasIndex("DrillReportId");

                    b.HasIndex("EquivalentMudWeightId");

                    b.HasIndex("MdId");

                    b.HasIndex("TvdId");

                    b.ToTable("DrillReportPorePressure");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPresBopRating", b =>
                {
                    b.Property<int>("PresBopRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresBopRatingId");

                    b.ToTable("DrillReportPresBopRating");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPresBottom", b =>
                {
                    b.Property<int>("PresBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresBottomId");

                    b.ToTable("DrillReportPresBottom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPresFlowing", b =>
                {
                    b.Property<int>("PresFlowingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresFlowingId");

                    b.ToTable("DrillReportPresFlowing");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPresMaxChoke", b =>
                {
                    b.Property<int>("PresMaxChokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresMaxChokeId");

                    b.ToTable("DrillReportPresMaxChoke");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPresPore", b =>
                {
                    b.Property<int>("PresPoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresPoreId");

                    b.ToTable("DrillReportPresPore");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPresShutIn", b =>
                {
                    b.Property<int>("PresShutInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresShutInId");

                    b.ToTable("DrillReportPresShutIn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPresShutInCasing", b =>
                {
                    b.Property<int>("PresShutInCasingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresShutInCasingId");

                    b.ToTable("DrillReportPresShutInCasing");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPresShutInDrill", b =>
                {
                    b.Property<int>("PresShutInDrillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresShutInDrillId");

                    b.ToTable("DrillReportPresShutInDrill");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportProp", b =>
                {
                    b.Property<int>("PropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropId");

                    b.ToTable("DrillReportProp");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPv", b =>
                {
                    b.Property<int>("PvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PvId");

                    b.ToTable("DrillReportPv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportRecoverPc", b =>
                {
                    b.Property<int>("RecoverPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecoverPcId");

                    b.ToTable("DrillReportRecoverPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportRigAlias", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DrillReportWellboreInfoWellboreInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RigAliasId")
                        .HasColumnType("int");

                    b.HasKey("Uid");

                    b.HasIndex("DrillReportWellboreInfoWellboreInfoId");

                    b.ToTable("DrillReportRigAlias");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportRopCurrent", b =>
                {
                    b.Property<int>("RopCurrentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RopCurrentId");

                    b.ToTable("DrillReportRopCurrent");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportStatusInfo", b =>
                {
                    b.Property<int>("StatusInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiaCsgLastId")
                        .HasColumnType("int");

                    b.Property<int?>("DiaHoleId")
                        .HasColumnType("int");

                    b.Property<int?>("DiaPilotId")
                        .HasColumnType("int");

                    b.Property<int?>("DistDrillId")
                        .HasColumnType("int");

                    b.Property<string>("Forecast24Hr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdCsgLastId")
                        .HasColumnType("int");

                    b.Property<int?>("MdDiaHoleStartId")
                        .HasColumnType("int");

                    b.Property<int?>("MdDiaPilotPlanId")
                        .HasColumnType("int");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<int?>("MdKickoffId")
                        .HasColumnType("int");

                    b.Property<int?>("MdPlugTopId")
                        .HasColumnType("int");

                    b.Property<int?>("MdStrengthFormId")
                        .HasColumnType("int");

                    b.Property<string>("PresTestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RopCurrentId")
                        .HasColumnType("int");

                    b.Property<int?>("StrengthFormId")
                        .HasColumnType("int");

                    b.Property<string>("Sum24Hr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusInfoId");

                    b.HasIndex("DiaCsgLastId");

                    b.HasIndex("DiaHoleId");

                    b.HasIndex("DiaPilotId");

                    b.HasIndex("DistDrillId");

                    b.HasIndex("MdCsgLastId");

                    b.HasIndex("MdDiaHoleStartId");

                    b.HasIndex("MdDiaPilotPlanId");

                    b.HasIndex("MdId");

                    b.HasIndex("MdKickoffId");

                    b.HasIndex("MdPlugTopId");

                    b.HasIndex("MdStrengthFormId");

                    b.HasIndex("RopCurrentId");

                    b.HasIndex("StrengthFormId");

                    b.HasIndex("TvdId");

                    b.ToTable("DrillReportStatusInfo");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportStratInfo", b =>
                {
                    b.Property<int>("StratInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdTopDrillReportTvdTopId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StratInfoId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("TvdTopDrillReportTvdTopId");

                    b.ToTable("DrillReportStratInfo");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportStrengthForm", b =>
                {
                    b.Property<int>("StrengthFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StrengthFormId");

                    b.ToTable("DrillReportStrengthForm");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportSurveyStation", b =>
                {
                    b.Property<int>("SurveyStationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AziId")
                        .HasColumnType("int");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InclId")
                        .HasColumnType("int");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveyStationId");

                    b.HasIndex("AziId");

                    b.HasIndex("InclId");

                    b.HasIndex("MdId");

                    b.HasIndex("TvdId");

                    b.ToTable("DrillReportSurveyStation");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportTempBHCT", b =>
                {
                    b.Property<int>("TempBHCTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempBHCTId");

                    b.ToTable("DrillReportTempBHCT");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportTempBHST", b =>
                {
                    b.Property<int>("TempBHSTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempBHSTId");

                    b.ToTable("DrillReportTempBHST");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportTempBottom", b =>
                {
                    b.Property<int>("TempBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempBottomId");

                    b.ToTable("DrillReportTempBottom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportTempVis", b =>
                {
                    b.Property<int>("TempVisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempVisId");

                    b.ToTable("DrillReportTempVis");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportTvd", b =>
                {
                    b.Property<int>("TvdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdId");

                    b.ToTable("DrillReportTvd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportTvdBottom", b =>
                {
                    b.Property<int>("TvdBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdBottomId");

                    b.ToTable("DrillReportTvdBottom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportTvdInflow", b =>
                {
                    b.Property<int>("TvdInflowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdInflowId");

                    b.ToTable("DrillReportTvdInflow");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportTvdTempTool", b =>
                {
                    b.Property<int>("TvdTempToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdTempToolId");

                    b.ToTable("DrillReportTvdTempTool");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportTvdTop", b =>
                {
                    b.Property<int>("DrillReportTvdTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrillReportTvdTopId");

                    b.ToTable("DrillReportTvdTop");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportVolGasTotal", b =>
                {
                    b.Property<int>("VolGasTotalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolGasTotalId");

                    b.ToTable("DrillReportVolGasTotal");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportVolMudGained", b =>
                {
                    b.Property<int>("VolMudGainedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolMudGainedId");

                    b.ToTable("DrillReportVolMudGained");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportVolOilStored", b =>
                {
                    b.Property<int>("VolOilStoredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolOilStoredId");

                    b.ToTable("DrillReportVolOilStored");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportVolOilTotal", b =>
                {
                    b.Property<int>("VolOilTotalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolOilTotalId");

                    b.ToTable("DrillReportVolOilTotal");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportVolWaterTotal", b =>
                {
                    b.Property<int>("VolWaterTotalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolWaterTotalId");

                    b.ToTable("DrillReportVolWaterTotal");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportVolumeSample", b =>
                {
                    b.Property<int>("VolumeSampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolumeSampleId");

                    b.ToTable("DrillReportVolumeSample");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportWaterOilRatio", b =>
                {
                    b.Property<int>("WaterOilRatioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WaterOilRatioId");

                    b.ToTable("DrillReportWaterOilRatio");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportWellAlias", b =>
                {
                    b.Property<int>("WellAliasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WellAliasId");

                    b.ToTable("DrillReportWellAlias");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportWellCRS", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GeodeticCRSId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("GeodeticCRSId");

                    b.ToTable("DrillReportWellCR");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportWellDatum", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DrillReportId")
                        .HasColumnType("int");

                    b.Property<int?>("ElevationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("DrillReportId");

                    b.HasIndex("ElevationId");

                    b.ToTable("DrillReportWellDatum");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportWellTestInfo", b =>
                {
                    b.Property<int>("WellTestInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarbonDioxideId")
                        .HasColumnType("int");

                    b.Property<int?>("ChlorideId")
                        .HasColumnType("int");

                    b.Property<int?>("ChokeOrificeSizeId")
                        .HasColumnType("int");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DensityGasId")
                        .HasColumnType("int");

                    b.Property<int?>("DensityOilId")
                        .HasColumnType("int");

                    b.Property<int?>("DensityWaterId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowRateGasId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowRateOilId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowRateWaterId")
                        .HasColumnType("int");

                    b.Property<int?>("GasOilRatioId")
                        .HasColumnType("int");

                    b.Property<int?>("HydrogenSulfideId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomDrillReportMdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<int?>("PresBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("PresFlowingId")
                        .HasColumnType("int");

                    b.Property<int?>("PresShutInId")
                        .HasColumnType("int");

                    b.Property<string>("TestNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdTopDrillReportTvdTopId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VolGasTotalId")
                        .HasColumnType("int");

                    b.Property<int?>("VolOilStoredId")
                        .HasColumnType("int");

                    b.Property<int?>("VolOilTotalId")
                        .HasColumnType("int");

                    b.Property<int?>("VolWaterTotalId")
                        .HasColumnType("int");

                    b.Property<int?>("WaterOilRatioId")
                        .HasColumnType("int");

                    b.HasKey("WellTestInfoId");

                    b.HasIndex("CarbonDioxideId");

                    b.HasIndex("ChlorideId");

                    b.HasIndex("ChokeOrificeSizeId");

                    b.HasIndex("DensityGasId");

                    b.HasIndex("DensityOilId");

                    b.HasIndex("DensityWaterId");

                    b.HasIndex("FlowRateGasId");

                    b.HasIndex("FlowRateOilId");

                    b.HasIndex("FlowRateWaterId");

                    b.HasIndex("GasOilRatioId");

                    b.HasIndex("HydrogenSulfideId");

                    b.HasIndex("MdBottomDrillReportMdBottomId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("PresBottomId");

                    b.HasIndex("PresFlowingId");

                    b.HasIndex("PresShutInId");

                    b.HasIndex("TvdBottomId");

                    b.HasIndex("TvdTopDrillReportTvdTopId");

                    b.HasIndex("VolGasTotalId");

                    b.HasIndex("VolOilStoredId");

                    b.HasIndex("VolOilTotalId");

                    b.HasIndex("VolWaterTotalId");

                    b.HasIndex("WaterOilRatioId");

                    b.ToTable("DrillReportWellTestInfo");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportWellboreAlias", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DrillReportId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("DrillReportId");

                    b.ToTable("DrillReportWellboreAlias");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportWellboreInfo", b =>
                {
                    b.Property<int>("WellboreInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTimPreSpud")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimSpud")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WellboreInfoId");

                    b.ToTable("DrillReportWellboreInfo");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportWtMud", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("DrillReportWtMuds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Easting", b =>
                {
                    b.Property<int>("EastingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EastingId");

                    b.ToTable("TrajectoryEastings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Ellipsoid", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SecondDefiningParameterId")
                        .HasColumnType("int");

                    b.Property<string>("SemiMajorAxisUom")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdentifierCodeSpace");

                    b.HasIndex("SecondDefiningParameterId");

                    b.HasIndex("SemiMajorAxisUom");

                    b.ToTable("CoordinateReferenceSystemEllipsoid");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EllipsoidalCS", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdentifierCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdentifierCodeSpace");

                    b.HasIndex("NameCodeSpace");

                    b.ToTable("CoordinateReferenceSystemEllipsoidalCS");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.End", b =>
                {
                    b.Property<int>("EndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndId");

                    b.ToTable("ToolErrorModelEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EndFoamRateCO2", b =>
                {
                    b.Property<int>("EndFoamRateCO2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndFoamRateCO2Id");

                    b.ToTable("StimJobEndFoamRateCO2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EndFoamRateN2", b =>
                {
                    b.Property<int>("EndFoamRateN2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndFoamRateN2Id");

                    b.ToTable("StimJobEndFoamRateN2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EndIndex", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("ChangeLogEndIndexs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EndPdlDuration", b =>
                {
                    b.Property<int>("EndPdlDurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndPdlDurationId");

                    b.ToTable("StimJobEndPdlDurations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EndPresBottomhole", b =>
                {
                    b.Property<int>("EndPresBottomholeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndPresBottomholeId");

                    b.ToTable("StimJobEndPresBottomholes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EndPresSurface", b =>
                {
                    b.Property<int>("EndPresSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndPresSurfaceId");

                    b.ToTable("StimJobEndPresSurfaces");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EndProppantConcBottomhole", b =>
                {
                    b.Property<int>("EndProppantConcBottomholeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndProppantConcBottomholeId");

                    b.ToTable("StimJobEndProppantConcBottomholes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EndProppantConcSurface", b =>
                {
                    b.Property<int>("EndProppantConcSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndProppantConcSurfaceId");

                    b.ToTable("StimJobEndProppantConcSurfaces");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EndPumpRateBottomhole", b =>
                {
                    b.Property<int>("EndPumpRateBottomholeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndPumpRateBottomholeId");

                    b.ToTable("StimJobEndPumpRateBottomholes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EndRateSurfaceCO2", b =>
                {
                    b.Property<int>("EndRateSurfaceCO2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndRateSurfaceCO2Id");

                    b.ToTable("StimJobEndRateSurfaceCO2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EndRateSurfaceLiquid", b =>
                {
                    b.Property<int>("EndRateSurfaceLiquidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndRateSurfaceLiquidId");

                    b.ToTable("StimJobEndRateSurfaceLiquids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EndStdRateSurfaceN2", b =>
                {
                    b.Property<int>("EndStdRateSurfaceN2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndStdRateSurfaceN2Id");

                    b.ToTable("StimJobEndStdRateSurfaceN2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EntryFriction", b =>
                {
                    b.Property<int>("EntryFrictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntryFrictionId");

                    b.ToTable("StimJobEntryFrictions");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ErrorCoefficient", b =>
                {
                    b.Property<int>("ErrorCoefficientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Azi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Depth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ErrorTermId")
                        .HasColumnType("int");

                    b.Property<string>("Inc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tvd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ErrorCoefficientId");

                    b.HasIndex("ErrorTermId");

                    b.ToTable("ToolErrorTermSetErrorCoefficients");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ErrorTerm", b =>
                {
                    b.Property<int>("ErrorTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasureClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToolErrorTermSetId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ErrorTermId");

                    b.HasIndex("ToolErrorTermSetId");

                    b.ToTable("ToolErrorTermSetErrorTerms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ErrorTermValue", b =>
                {
                    b.Property<int>("ErrorTermValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("ToolErrorModelId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ValueId")
                        .HasColumnType("int");

                    b.HasKey("ErrorTermValueId");

                    b.HasIndex("TermId");

                    b.HasIndex("ToolErrorModelId");

                    b.HasIndex("ValueId");

                    b.ToTable("ToolErrorModelErrorTermValues");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FinalFractureGradient", b =>
                {
                    b.Property<int>("FinalFractureGradientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FinalFractureGradientId");

                    b.ToTable("StimJobFinalFractureGradients");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FlowBackPres", b =>
                {
                    b.Property<int>("FlowBackPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowBackPresId");

                    b.ToTable("StimJobFlowBackPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FlowBackRate", b =>
                {
                    b.Property<int>("FlowBackRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowBackRateId");

                    b.ToTable("StimJobFlowBackRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FlowBackVolume", b =>
                {
                    b.Property<int>("FlowBackVolumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowBackVolumeId");

                    b.ToTable("StimJobFlowBackVolumes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FlowPath", b =>
                {
                    b.Property<int>("FlowPathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcidVolId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgAcidRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgBaseFluidQualityId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgBaseFluidRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgCO2BaseFluidQualityId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgCO2LiquidRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgGelRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgHydraulicPowerId")
                        .HasColumnType("int");

                    b.Property<string>("AvgIntervalPhaseFraction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AvgN2BaseFluidQualityId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgN2StdRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgOilRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgPmaxPacPresId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgPmaxWeaklinkPresId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgPropConcId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgSlurryPropConcId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgSlurryRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgTemperatureId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgTreatPresId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgWellheadRateId")
                        .HasColumnType("int");

                    b.Property<int?>("BaseFluidBypassVolId")
                        .HasColumnType("int");

                    b.Property<int?>("BaseFluidVolId")
                        .HasColumnType("int");

                    b.Property<int?>("BreakDownPresId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FractureGradientId")
                        .HasColumnType("int");

                    b.Property<int?>("GelVolId")
                        .HasColumnType("int");

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MassCO2Id")
                        .HasColumnType("int");

                    b.Property<int?>("MaxAcidRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxCO2LiquidRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxGelRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxN2StdRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxOilRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPmaxPacPresId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPmaxWeaklinkPresId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPropConcId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxSlurryPropConcId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxSlurryRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxTreatmentPresId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxWellheadRateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OilVolId")
                        .HasColumnType("int");

                    b.Property<int?>("PercentPadId")
                        .HasColumnType("int");

                    b.Property<string>("PipeFrictionFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropMassId")
                        .HasColumnType("int");

                    b.Property<int?>("ShutinPres10MinId")
                        .HasColumnType("int");

                    b.Property<int?>("ShutinPres15MinId")
                        .HasColumnType("int");

                    b.Property<int?>("ShutinPres5MinId")
                        .HasColumnType("int");

                    b.Property<int?>("SlurryVolId")
                        .HasColumnType("int");

                    b.Property<string>("StageCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StdVolN2Id")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WellheadVolStdVolN2Id")
                        .HasColumnType("int");

                    b.HasKey("FlowPathId");

                    b.HasIndex("AcidVolId");

                    b.HasIndex("AvgAcidRateId");

                    b.HasIndex("AvgBaseFluidQualityId");

                    b.HasIndex("AvgBaseFluidRateId");

                    b.HasIndex("AvgCO2BaseFluidQualityId");

                    b.HasIndex("AvgCO2LiquidRateId");

                    b.HasIndex("AvgGelRateId");

                    b.HasIndex("AvgHydraulicPowerId");

                    b.HasIndex("AvgN2BaseFluidQualityId");

                    b.HasIndex("AvgN2StdRateId");

                    b.HasIndex("AvgOilRateId");

                    b.HasIndex("AvgPmaxPacPresId");

                    b.HasIndex("AvgPmaxWeaklinkPresId");

                    b.HasIndex("AvgPropConcId");

                    b.HasIndex("AvgSlurryPropConcId");

                    b.HasIndex("AvgSlurryRateId");

                    b.HasIndex("AvgTemperatureId");

                    b.HasIndex("AvgTreatPresId");

                    b.HasIndex("AvgWellheadRateId");

                    b.HasIndex("BaseFluidBypassVolId");

                    b.HasIndex("BaseFluidVolId");

                    b.HasIndex("BreakDownPresId");

                    b.HasIndex("FractureGradientId");

                    b.HasIndex("GelVolId");

                    b.HasIndex("MassCO2Id");

                    b.HasIndex("MaxAcidRateId");

                    b.HasIndex("MaxCO2LiquidRateId");

                    b.HasIndex("MaxGelRateId");

                    b.HasIndex("MaxN2StdRateId");

                    b.HasIndex("MaxOilRateId");

                    b.HasIndex("MaxPmaxPacPresId");

                    b.HasIndex("MaxPmaxWeaklinkPresId");

                    b.HasIndex("MaxPropConcId");

                    b.HasIndex("MaxSlurryPropConcId");

                    b.HasIndex("MaxSlurryRateId");

                    b.HasIndex("MaxTreatmentPresId");

                    b.HasIndex("MaxWellheadRateId");

                    b.HasIndex("OilVolId");

                    b.HasIndex("PercentPadId");

                    b.HasIndex("PropMassId");

                    b.HasIndex("ShutinPres10MinId");

                    b.HasIndex("ShutinPres15MinId");

                    b.HasIndex("ShutinPres5MinId");

                    b.HasIndex("SlurryVolId");

                    b.HasIndex("StdVolN2Id");

                    b.HasIndex("WellheadVolStdVolN2Id");

                    b.ToTable("StimJobFlowPaths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidCompressibility", b =>
                {
                    b.Property<int>("FluidCompressibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidCompressibilityId");

                    b.ToTable("StimJobFluidCompressibilitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidDensity", b =>
                {
                    b.Property<int>("FluidDensityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidDensityId");

                    b.ToTable("StimJobFluidDensitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidEfficiency", b =>
                {
                    b.Property<int>("FluidEfficiencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidEfficiencyId");

                    b.ToTable("StimJobFluidEfficiencys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidEfficiencyTest", b =>
                {
                    b.Property<int>("FluidEfficiencyTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTimEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndPdlDurationId")
                        .HasColumnType("int");

                    b.Property<int?>("FluidEfficiencyId")
                        .HasColumnType("int");

                    b.Property<int?>("FractureCloseDurationId")
                        .HasColumnType("int");

                    b.Property<int?>("FractureClosePresId")
                        .HasColumnType("int");

                    b.Property<int?>("FractureExtensionPresId")
                        .HasColumnType("int");

                    b.Property<int?>("FractureLengthId")
                        .HasColumnType("int");

                    b.Property<int?>("FractureWidthId")
                        .HasColumnType("int");

                    b.Property<int?>("NetPresId")
                        .HasColumnType("int");

                    b.Property<string>("PdlCoef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PorePresId")
                        .HasColumnType("int");

                    b.Property<int?>("PseudoRadialPresId")
                        .HasColumnType("int");

                    b.Property<int?>("ResidualPermeabilityId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidEfficiencyTestId");

                    b.HasIndex("EndPdlDurationId");

                    b.HasIndex("FluidEfficiencyId");

                    b.HasIndex("FractureCloseDurationId");

                    b.HasIndex("FractureClosePresId");

                    b.HasIndex("FractureExtensionPresId");

                    b.HasIndex("FractureLengthId");

                    b.HasIndex("FractureWidthId");

                    b.HasIndex("NetPresId");

                    b.HasIndex("PorePresId");

                    b.HasIndex("PseudoRadialPresId");

                    b.HasIndex("ResidualPermeabilityId");

                    b.ToTable("StimJobFluidEfficiencyTests");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidSpecificHeat", b =>
                {
                    b.Property<int>("FluidSpecificHeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidSpecificHeatId");

                    b.ToTable("StimJobFluidSpecificHeats");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidThermalConductivity", b =>
                {
                    b.Property<int>("FluidThermalConductivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidThermalConductivityId");

                    b.ToTable("StimJobFluidThermalConductivitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidThermalExpansionCoefficient", b =>
                {
                    b.Property<int>("FluidThermalExpansionCoefficientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidThermalExpansionCoefficientId");

                    b.ToTable("StimJobFluidThermalExpansionCoefficients");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidVol", b =>
                {
                    b.Property<int>("FluidVolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidVolId");

                    b.ToTable("StimJobFluidVols");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidVolBase", b =>
                {
                    b.Property<int>("FluidVolBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidVolBaseId");

                    b.ToTable("StimJobFluidVolBases");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidVolSlurry", b =>
                {
                    b.Property<int>("FluidVolSlurryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidVolSlurryId");

                    b.ToTable("StimJobFluidVolSlurrys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReport", b =>
                {
                    b.Property<int>("FluidsReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FluidUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidsReportId");

                    b.HasIndex("CommonDataId");

                    b.HasIndex("FluidUid");

                    b.HasIndex("MdId");

                    b.HasIndex("TvdId");

                    b.ToTable("FluidsReports");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportAlkalinityP1", b =>
                {
                    b.Property<int>("AlkalinityP1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlkalinityP1Id");

                    b.ToTable("FluidsReportAlkalinityP1");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportAlkalinityP2", b =>
                {
                    b.Property<int>("AlkalinityP2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlkalinityP2Id");

                    b.ToTable("FluidsReportAlkalinityP2");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportBaritePc", b =>
                {
                    b.Property<int>("BaritePcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BaritePcId");

                    b.ToTable("FluidsReportBaritePc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportBrinePc", b =>
                {
                    b.Property<int>("BrinePcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrinePcId");

                    b.ToTable("FluidsReportBrinePc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportCalcium", b =>
                {
                    b.Property<int>("CalciumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalciumId");

                    b.ToTable("FluidsReportCalcium");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportCalciumChloride", b =>
                {
                    b.Property<int>("CalciumChlorideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalciumChlorideId");

                    b.ToTable("FluidsReportCalciumChloride");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportChloride", b =>
                {
                    b.Property<int>("ChlorideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChlorideId");

                    b.ToTable("FluidsReportChloride");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportCommonData", b =>
                {
                    b.Property<int>("CommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommonDataId");

                    b.ToTable("FluidsReportCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportDensity", b =>
                {
                    b.Property<int>("DensityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensityId");

                    b.ToTable("FluidsReportDensity");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportElectStab", b =>
                {
                    b.Property<int>("ElectStabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ElectStabId");

                    b.ToTable("FluidsReportElectStab");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportFilterCakeHthp", b =>
                {
                    b.Property<int>("FilterCakeHthpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilterCakeHthpId");

                    b.ToTable("FluidsReportFilterCakeHthp");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportFilterCakeLtlp", b =>
                {
                    b.Property<int>("FilterCakeLtlpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilterCakeLtlpId");

                    b.ToTable("FluidsReportFilterCakeLtlp");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportFiltrateHthp", b =>
                {
                    b.Property<int>("FiltrateHthpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FiltrateHthpId");

                    b.ToTable("FluidsReportFiltrateHthp");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportFiltrateLtlp", b =>
                {
                    b.Property<int>("FiltrateLtlpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FiltrateLtlpId");

                    b.ToTable("FluidsReportFiltrateLtlp");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportFluid", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AlkalinityP1Id")
                        .HasColumnType("int");

                    b.Property<int?>("AlkalinityP2Id")
                        .HasColumnType("int");

                    b.Property<string>("Asg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaritePcId")
                        .HasColumnType("int");

                    b.Property<int?>("BrinePcId")
                        .HasColumnType("int");

                    b.Property<int?>("CalciumChlorideId")
                        .HasColumnType("int");

                    b.Property<int?>("CalciumId")
                        .HasColumnType("int");

                    b.Property<int?>("ChlorideId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DensityId")
                        .HasColumnType("int");

                    b.Property<int?>("ElectStabId")
                        .HasColumnType("int");

                    b.Property<string>("Engineer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FilterCakeHthpId")
                        .HasColumnType("int");

                    b.Property<int?>("FilterCakeLtlpId")
                        .HasColumnType("int");

                    b.Property<int?>("FiltrateHthpId")
                        .HasColumnType("int");

                    b.Property<int?>("FiltrateLtlpId")
                        .HasColumnType("int");

                    b.Property<int?>("Gel10MinId")
                        .HasColumnType("int");

                    b.Property<int?>("Gel10SecId")
                        .HasColumnType("int");

                    b.Property<int?>("Gel30MinId")
                        .HasColumnType("int");

                    b.Property<int?>("HardnessCaId")
                        .HasColumnType("int");

                    b.Property<int?>("LcmId")
                        .HasColumnType("int");

                    b.Property<int?>("LimeId")
                        .HasColumnType("int");

                    b.Property<string>("LocationSample")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MagnesiumId")
                        .HasColumnType("int");

                    b.Property<int?>("MbtId")
                        .HasColumnType("int");

                    b.Property<int?>("MfId")
                        .HasColumnType("int");

                    b.Property<int?>("OilCtgId")
                        .HasColumnType("int");

                    b.Property<int?>("OilPcId")
                        .HasColumnType("int");

                    b.Property<string>("Ph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PmFiltrateId")
                        .HasColumnType("int");

                    b.Property<int?>("PmId")
                        .HasColumnType("int");

                    b.Property<string>("PolyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PolymerId")
                        .HasColumnType("int");

                    b.Property<int?>("PotassiumId")
                        .HasColumnType("int");

                    b.Property<int?>("PresHthpId")
                        .HasColumnType("int");

                    b.Property<int?>("PvReportPvId")
                        .HasColumnType("int");

                    b.Property<int?>("SandPcId")
                        .HasColumnType("int");

                    b.Property<int?>("SolCorPcId")
                        .HasColumnType("int");

                    b.Property<int?>("SolidsCalcPcId")
                        .HasColumnType("int");

                    b.Property<int?>("SolidsHiGravPcId")
                        .HasColumnType("int");

                    b.Property<int?>("SolidsLowGravPcId")
                        .HasColumnType("int");

                    b.Property<int?>("SolidsPcId")
                        .HasColumnType("int");

                    b.Property<int?>("SulfideId")
                        .HasColumnType("int");

                    b.Property<int?>("TempHthpId")
                        .HasColumnType("int");

                    b.Property<int?>("TempPhId")
                        .HasColumnType("int");

                    b.Property<int?>("TempVisId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisFunnelId")
                        .HasColumnType("int");

                    b.Property<int?>("WaterPcId")
                        .HasColumnType("int");

                    b.Property<int?>("YpReportYpId")
                        .HasColumnType("int");

                    b.HasKey("Uid");

                    b.HasIndex("AlkalinityP1Id");

                    b.HasIndex("AlkalinityP2Id");

                    b.HasIndex("BaritePcId");

                    b.HasIndex("BrinePcId");

                    b.HasIndex("CalciumChlorideId");

                    b.HasIndex("CalciumId");

                    b.HasIndex("ChlorideId");

                    b.HasIndex("DensityId");

                    b.HasIndex("ElectStabId");

                    b.HasIndex("FilterCakeHthpId");

                    b.HasIndex("FilterCakeLtlpId");

                    b.HasIndex("FiltrateHthpId");

                    b.HasIndex("FiltrateLtlpId");

                    b.HasIndex("Gel10MinId");

                    b.HasIndex("Gel10SecId");

                    b.HasIndex("Gel30MinId");

                    b.HasIndex("HardnessCaId");

                    b.HasIndex("LcmId");

                    b.HasIndex("LimeId");

                    b.HasIndex("MagnesiumId");

                    b.HasIndex("MbtId");

                    b.HasIndex("MfId");

                    b.HasIndex("OilCtgId");

                    b.HasIndex("OilPcId");

                    b.HasIndex("PmFiltrateId");

                    b.HasIndex("PmId");

                    b.HasIndex("PolymerId");

                    b.HasIndex("PotassiumId");

                    b.HasIndex("PresHthpId");

                    b.HasIndex("PvReportPvId");

                    b.HasIndex("SandPcId");

                    b.HasIndex("SolCorPcId");

                    b.HasIndex("SolidsCalcPcId");

                    b.HasIndex("SolidsHiGravPcId");

                    b.HasIndex("SolidsLowGravPcId");

                    b.HasIndex("SolidsPcId");

                    b.HasIndex("SulfideId");

                    b.HasIndex("TempHthpId");

                    b.HasIndex("TempPhId");

                    b.HasIndex("TempVisId");

                    b.HasIndex("VisFunnelId");

                    b.HasIndex("WaterPcId");

                    b.HasIndex("YpReportYpId");

                    b.ToTable("FluidsReportFluid");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportGel10Min", b =>
                {
                    b.Property<int>("Gel10MinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel10MinId");

                    b.ToTable("FluidsReportGel10Min");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportGel10Sec", b =>
                {
                    b.Property<int>("Gel10SecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel10SecId");

                    b.ToTable("FluidsReportGel10Sec");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportGel30Min", b =>
                {
                    b.Property<int>("Gel30MinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel30MinId");

                    b.ToTable("FluidsReportGel30Min");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportHardnessCa", b =>
                {
                    b.Property<int>("HardnessCaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HardnessCaId");

                    b.ToTable("FluidsReportHardnessCa");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportLcm", b =>
                {
                    b.Property<int>("LcmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LcmId");

                    b.ToTable("FluidsReportLcm");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportLime", b =>
                {
                    b.Property<int>("LimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LimeId");

                    b.ToTable("FluidsReportLime");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportMagnesium", b =>
                {
                    b.Property<int>("MagnesiumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagnesiumId");

                    b.ToTable("FluidsReportMagnesium");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportMbt", b =>
                {
                    b.Property<int>("MbtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MbtId");

                    b.ToTable("FluidsReportMbt");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportMd", b =>
                {
                    b.Property<int>("MdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdId");

                    b.ToTable("FluidsReportMd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportMf", b =>
                {
                    b.Property<int>("MfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MfId");

                    b.ToTable("FluidsReportMf");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportOilCtg", b =>
                {
                    b.Property<int>("OilCtgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OilCtgId");

                    b.ToTable("FluidsReportOilCtg");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportOilPc", b =>
                {
                    b.Property<int>("OilPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OilPcId");

                    b.ToTable("FluidsReportOilPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportPm", b =>
                {
                    b.Property<int>("PmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PmId");

                    b.ToTable("FluidsReportPm");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportPmFiltrate", b =>
                {
                    b.Property<int>("PmFiltrateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PmFiltrateId");

                    b.ToTable("FluidsReportPmFiltrate");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportPolymer", b =>
                {
                    b.Property<int>("PolymerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PolymerId");

                    b.ToTable("FluidsReportPolymer");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportPotassium", b =>
                {
                    b.Property<int>("PotassiumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PotassiumId");

                    b.ToTable("FluidsReportPotassium");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportPresHthp", b =>
                {
                    b.Property<int>("PresHthpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresHthpId");

                    b.ToTable("FluidsReportPresHthp");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportPresRheom", b =>
                {
                    b.Property<int>("PresRheomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresRheomId");

                    b.ToTable("FluidsReportPresRheom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportPv", b =>
                {
                    b.Property<int>("ReportPvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportPvId");

                    b.ToTable("FluidsReportPv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportRheometer", b =>
                {
                    b.Property<int>("RheometerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FluidsReportFluidUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PresRheomId")
                        .HasColumnType("int");

                    b.Property<int?>("TempRheomId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vis100Rpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vis200Rpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vis300Rpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vis3Rpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vis600Rpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vis6Rpm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RheometerId");

                    b.HasIndex("FluidsReportFluidUid");

                    b.HasIndex("PresRheomId");

                    b.HasIndex("TempRheomId");

                    b.ToTable("FluidsReportRheometer");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportSandPc", b =>
                {
                    b.Property<int>("SandPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SandPcId");

                    b.ToTable("FluidsReportSandPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportSolCorPc", b =>
                {
                    b.Property<int>("SolCorPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolCorPcId");

                    b.ToTable("FluidsReportSolCorPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportSolidsCalcPc", b =>
                {
                    b.Property<int>("SolidsCalcPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolidsCalcPcId");

                    b.ToTable("FluidsReportSolidsCalcPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportSolidsHiGravPc", b =>
                {
                    b.Property<int>("SolidsHiGravPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolidsHiGravPcId");

                    b.ToTable("FluidsReportSolidsHiGravPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportSolidsLowGravPc", b =>
                {
                    b.Property<int>("SolidsLowGravPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolidsLowGravPcId");

                    b.ToTable("FluidsReportSolidsLowGravPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportSolidsPc", b =>
                {
                    b.Property<int>("SolidsPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolidsPcId");

                    b.ToTable("FluidsReportSolidsPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportSulfide", b =>
                {
                    b.Property<int>("SulfideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SulfideId");

                    b.ToTable("FluidsReportSulfide");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportTempHthp", b =>
                {
                    b.Property<int>("TempHthpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempHthpId");

                    b.ToTable("FluidsReportTempHthp");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportTempPh", b =>
                {
                    b.Property<int>("TempPhId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempPhId");

                    b.ToTable("FluidsReportTempPh");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportTempRheom", b =>
                {
                    b.Property<int>("TempRheomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempRheomId");

                    b.ToTable("FluidsReportTempRheom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportTempVis", b =>
                {
                    b.Property<int>("TempVisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempVisId");

                    b.ToTable("FluidsReportTempVis");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportTvd", b =>
                {
                    b.Property<int>("TvdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdId");

                    b.ToTable("FluidsReportTvd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportVisFunnel", b =>
                {
                    b.Property<int>("VisFunnelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisFunnelId");

                    b.ToTable("FluidsReportVisFunnel");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportWaterPc", b =>
                {
                    b.Property<int>("WaterPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WaterPcId");

                    b.ToTable("FluidsReportWaterPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportYp", b =>
                {
                    b.Property<int>("ReportYpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportYpId");

                    b.ToTable("FluidsReportYp");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FoamQuality", b =>
                {
                    b.Property<int>("FoamQualityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoamQualityId");

                    b.ToTable("StimJobFoamQualitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarker", b =>
                {
                    b.Property<int>("FormationMarkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChronostratigraphicId")
                        .HasColumnType("int");

                    b.Property<int?>("CommonDataFormationMarkerCommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DipDirectionId")
                        .HasColumnType("int");

                    b.Property<int?>("DipId")
                        .HasColumnType("int");

                    b.Property<int?>("LithostratigraphicId")
                        .HasColumnType("int");

                    b.Property<int?>("MdLogSampleId")
                        .HasColumnType("int");

                    b.Property<int?>("MdPrognosedId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopSampleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThicknessApparentId")
                        .HasColumnType("int");

                    b.Property<int?>("ThicknessBedId")
                        .HasColumnType("int");

                    b.Property<int?>("ThicknessPerpenId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdLogSampleId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdPrognosedId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdTopSampleId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormationMarkerId");

                    b.HasIndex("ChronostratigraphicId");

                    b.HasIndex("CommonDataFormationMarkerCommonDataId");

                    b.HasIndex("DipDirectionId");

                    b.HasIndex("DipId");

                    b.HasIndex("LithostratigraphicId");

                    b.HasIndex("MdLogSampleId");

                    b.HasIndex("MdPrognosedId");

                    b.HasIndex("MdTopSampleId");

                    b.HasIndex("ThicknessApparentId");

                    b.HasIndex("ThicknessBedId");

                    b.HasIndex("ThicknessPerpenId");

                    b.HasIndex("TvdLogSampleId");

                    b.HasIndex("TvdPrognosedId");

                    b.HasIndex("TvdTopSampleId");

                    b.ToTable("FormationMarkers");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerChronostratigraphic", b =>
                {
                    b.Property<int>("ChronostratigraphicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChronostratigraphicId");

                    b.ToTable("FormationMarkerChronostratigraphics");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerCommonData", b =>
                {
                    b.Property<int>("FormationMarkerCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormationMarkerCommonDataId");

                    b.ToTable("FormationMarkerCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerDip", b =>
                {
                    b.Property<int>("DipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DipId");

                    b.ToTable("FormationMarkerDips");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerDipDirection", b =>
                {
                    b.Property<int>("DipDirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DipDirectionId");

                    b.ToTable("FormationMarkerDipDirections");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerLithostratigraphic", b =>
                {
                    b.Property<int>("LithostratigraphicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LithostratigraphicId");

                    b.ToTable("FormationMarkerLithostratigraphics");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerMdLogSample", b =>
                {
                    b.Property<int>("MdLogSampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdLogSampleId");

                    b.ToTable("FormationMarkerMdLogSamples");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerMdPrognosed", b =>
                {
                    b.Property<int>("MdPrognosedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdPrognosedId");

                    b.ToTable("FormationMarkerMdPrognoseds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerMdTopSample", b =>
                {
                    b.Property<int>("MdTopSampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdTopSampleId");

                    b.ToTable("FormationMarkerMdTopSamples");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerThicknessApparent", b =>
                {
                    b.Property<int>("ThicknessApparentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThicknessApparentId");

                    b.ToTable("FormationMarkerThicknessApparents");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerThicknessBed", b =>
                {
                    b.Property<int>("ThicknessBedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThicknessBedId");

                    b.ToTable("FormationMarkerThicknessBeds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerThicknessPerpen", b =>
                {
                    b.Property<int>("ThicknessPerpenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThicknessPerpenId");

                    b.ToTable("FormationMarkerThicknessPerpens");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerTvdLogSample", b =>
                {
                    b.Property<int>("TvdLogSampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdLogSampleId");

                    b.ToTable("FormationMarkerTvdLogSamples");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerTvdPrognosed", b =>
                {
                    b.Property<int>("TvdPrognosedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdPrognosedId");

                    b.ToTable("FormationMarkerTvdPrognoseds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarkerTvdTopSample", b =>
                {
                    b.Property<int>("TvdTopSampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdTopSampleId");

                    b.ToTable("FormationMarkerTvdTopSamples");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationPermeability", b =>
                {
                    b.Property<int>("FormationPermeabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormationPermeabilityId");

                    b.ToTable("StimJobFormationPermeabilitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationPorosity", b =>
                {
                    b.Property<int>("FormationPorosityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormationPorosityId");

                    b.ToTable("StimJobFormationPorositys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationProppantMass", b =>
                {
                    b.Property<int>("FormationProppantMassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormationProppantMassId");

                    b.ToTable("StimJobFormationProppantMasss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FractureCloseDuration", b =>
                {
                    b.Property<int>("FractureCloseDurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FractureCloseDurationId");

                    b.ToTable("StimJobFractureCloseDurations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FractureClosePres", b =>
                {
                    b.Property<int>("FractureClosePresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FractureClosePresId");

                    b.ToTable("StimJobFractureClosePress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FractureExtensionPres", b =>
                {
                    b.Property<int>("FractureExtensionPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FractureExtensionPresId");

                    b.ToTable("StimJobFractureExtensionPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FractureGradient", b =>
                {
                    b.Property<int>("FractureGradientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FractureGradientId");

                    b.ToTable("StimJobFractureGradients");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FractureLength", b =>
                {
                    b.Property<int>("FractureLengthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FractureLengthId");

                    b.ToTable("StimJobFractureLengths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FractureWidth", b =>
                {
                    b.Property<int>("FractureWidthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FractureWidthId");

                    b.ToTable("StimJobFractureWidths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FrequencyMx", b =>
                {
                    b.Property<int>("FrequencyMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FrequencyMxId");

                    b.ToTable("SurveyProgramFrequencyMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FrictionPres", b =>
                {
                    b.Property<int>("FrictionPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FrictionPresId");

                    b.ToTable("StimJobFrictionPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Function", b =>
                {
                    b.Property<int>("FunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NomenclatureId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FunctionId");

                    b.HasIndex("NomenclatureId");

                    b.ToTable("ToolErrorTermSetFunctions");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GelVol", b =>
                {
                    b.Property<int>("GelVolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GelVolId");

                    b.ToTable("StimJobGelVols");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GelVolume", b =>
                {
                    b.Property<int>("GelVolumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GelVolumeId");

                    b.ToTable("StimJobGelVolumes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GeodeticDatum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnchorPoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsesEllipsoidId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UsesPrimeMeridianId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentifierCodeSpace");

                    b.HasIndex("UsesEllipsoidId");

                    b.HasIndex("UsesPrimeMeridianId");

                    b.ToTable("CoordinateReferenceSystemGeodeticDatum");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GeographicCRS", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdentifierCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsesEllipsoidalCSEllipsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UsesGeodeticDatumId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentifierCodeSpace");

                    b.HasIndex("NameCodeSpace");

                    b.HasIndex("UsesEllipsoidalCSEllipsId");

                    b.HasIndex("UsesGeodeticDatumId");

                    b.ToTable("CoordinateReferenceSystemGeographicCRS");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GmlGeodeticCRS", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EllipsoidalCSId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsesGeodeticDatumId")
                        .HasColumnType("int");

                    b.Property<string>("Xsi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EllipsoidalCSId");

                    b.HasIndex("IdentifierCodeSpace");

                    b.HasIndex("NameCodeSpace");

                    b.HasIndex("UsesGeodeticDatumId");

                    b.ToTable("CoordinateReferenceSystemGmlGeodeticCRS");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GreenwichLongitude", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("CoordinateReferenceSystemGreenwichLongitude");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GridCorUsed", b =>
                {
                    b.Property<int>("GridCorUsedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GridCorUsedId");

                    b.ToTable("TrajectoryGridCorUseds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GrossPayThickness", b =>
                {
                    b.Property<int>("GrossPayThicknessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GrossPayThicknessId");

                    b.ToTable("StimJobGrossPayThicknesss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GyroInitialization", b =>
                {
                    b.Property<int>("GyroInitializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GyroInitializationId");

                    b.ToTable("ToolErrorModelGyroInitializations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GyroReinitializationDistance", b =>
                {
                    b.Property<int>("GyroReinitializationDistanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GyroReinitializationDistanceId");

                    b.ToTable("ToolErrorModelGyroReinitializationDistances");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.HhpOrdered", b =>
                {
                    b.Property<int>("HhpOrderedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HhpOrderedId");

                    b.ToTable("StimJobHhpOrdereds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.HhpOrderedCO2", b =>
                {
                    b.Property<int>("HhpOrderedCO2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HhpOrderedCO2Id");

                    b.ToTable("StimJobHhpOrderedCO2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.HhpOrderedFluid", b =>
                {
                    b.Property<int>("HhpOrderedFluidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HhpOrderedFluidId");

                    b.ToTable("StimJobHhpOrderedFluids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.HhpUsed", b =>
                {
                    b.Property<int>("HhpUsedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HhpUsedId");

                    b.ToTable("StimJobHhpUseds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.HhpUsedCO2", b =>
                {
                    b.Property<int>("HhpUsedCO2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HhpUsedCO2Id");

                    b.ToTable("StimJobHhpUsedCO2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.HhpUsedFluid", b =>
                {
                    b.Property<int>("HhpUsedFluidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HhpUsedFluidId");

                    b.ToTable("StimJobHhpUsedFluids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Identifier", b =>
                {
                    b.Property<string>("CodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodeSpace");

                    b.ToTable("CoordinateReferenceSystemIdentifier");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.InitialShutinPres", b =>
                {
                    b.Property<int>("InitialShutinPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InitialShutinPresId");

                    b.ToTable("StimJobInitialShutinPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.InverseFlattening", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("CoordinateReferenceSystemInverseFlattening");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.JobEvent", b =>
                {
                    b.Property<int>("JobEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlowPathId")
                        .HasColumnType("int");

                    b.Property<string>("NumStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobEventId");

                    b.HasIndex("FlowPathId");

                    b.ToTable("StimJobJobEvents");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.JobInterval", b =>
                {
                    b.Property<int>("JobIntervalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AveragePresId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgBaseFluidReturnRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgBottomholeRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgConductivityId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgFractureWidthId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgPresCasingId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgPresTubingId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgProppantConcBottomholeId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgProppantConcSurfaceId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgSlurryReturnRateId")
                        .HasColumnType("int");

                    b.Property<int?>("BreakDownPresId")
                        .HasColumnType("int");

                    b.Property<int?>("ClosureDurationId")
                        .HasColumnType("int");

                    b.Property<int?>("ClosurePresId")
                        .HasColumnType("int");

                    b.Property<string>("DTimStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinalFractureGradientId")
                        .HasColumnType("int");

                    b.Property<string>("FormationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FormationProppantMassId")
                        .HasColumnType("int");

                    b.Property<int?>("FractureGradientId")
                        .HasColumnType("int");

                    b.Property<int?>("HhpOrderedCO2Id")
                        .HasColumnType("int");

                    b.Property<int?>("HhpOrderedFluidId")
                        .HasColumnType("int");

                    b.Property<int?>("HhpUsedCO2Id")
                        .HasColumnType("int");

                    b.Property<int?>("HhpUsedFluidId")
                        .HasColumnType("int");

                    b.Property<int?>("InitialShutinPresId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxFluidRateAnnulusId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxFluidRateTubingId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPresAnnulusId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPresTubingId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxProppantConcBottomholeId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxProppantConcSurfaceId")
                        .HasColumnType("int");

                    b.Property<int?>("MdFormationBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdFormationTopId")
                        .HasColumnType("int");

                    b.Property<int?>("MdOpenHoleBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdOpenHoleTopId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NetPresId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpenHoleDiameterId")
                        .HasColumnType("int");

                    b.Property<string>("OpenHoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PdatSessionId")
                        .HasColumnType("int");

                    b.Property<int?>("PercentProppantPumpedId")
                        .HasColumnType("int");

                    b.Property<string>("PerfBallCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PerfBallSizeId")
                        .HasColumnType("int");

                    b.Property<int?>("PerforationIntervalId")
                        .HasColumnType("int");

                    b.Property<int?>("PerfproppantConcId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservoirIntervalId")
                        .HasColumnType("int");

                    b.Property<int?>("ScreenOutPresId")
                        .HasColumnType("int");

                    b.Property<string>("ScreenedOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalCO2MassId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalFrictionPresLossId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalN2StdVolumeId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalProppantMassId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPumpTimeId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalVolumeId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdFormationBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdFormationTopId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdOpenHoleBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdOpenHoleTopId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidTreatmentInterval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WellboreProppantMassId")
                        .HasColumnType("int");

                    b.HasKey("JobIntervalId");

                    b.HasIndex("AveragePresId");

                    b.HasIndex("AvgBaseFluidReturnRateId");

                    b.HasIndex("AvgBottomholeRateId");

                    b.HasIndex("AvgConductivityId");

                    b.HasIndex("AvgFractureWidthId");

                    b.HasIndex("AvgPresCasingId");

                    b.HasIndex("AvgPresTubingId");

                    b.HasIndex("AvgProppantConcBottomholeId");

                    b.HasIndex("AvgProppantConcSurfaceId");

                    b.HasIndex("AvgSlurryReturnRateId");

                    b.HasIndex("BreakDownPresId");

                    b.HasIndex("ClosureDurationId");

                    b.HasIndex("ClosurePresId");

                    b.HasIndex("FinalFractureGradientId");

                    b.HasIndex("FormationProppantMassId");

                    b.HasIndex("FractureGradientId");

                    b.HasIndex("HhpOrderedCO2Id");

                    b.HasIndex("HhpOrderedFluidId");

                    b.HasIndex("HhpUsedCO2Id");

                    b.HasIndex("HhpUsedFluidId");

                    b.HasIndex("InitialShutinPresId");

                    b.HasIndex("MaxFluidRateAnnulusId");

                    b.HasIndex("MaxFluidRateTubingId");

                    b.HasIndex("MaxPresAnnulusId");

                    b.HasIndex("MaxPresTubingId");

                    b.HasIndex("MaxProppantConcBottomholeId");

                    b.HasIndex("MaxProppantConcSurfaceId");

                    b.HasIndex("MdFormationBottomId");

                    b.HasIndex("MdFormationTopId");

                    b.HasIndex("MdOpenHoleBottomId");

                    b.HasIndex("MdOpenHoleTopId");

                    b.HasIndex("NetPresId");

                    b.HasIndex("OpenHoleDiameterId");

                    b.HasIndex("PdatSessionId");

                    b.HasIndex("PercentProppantPumpedId");

                    b.HasIndex("PerfBallSizeId");

                    b.HasIndex("PerforationIntervalId");

                    b.HasIndex("PerfproppantConcId");

                    b.HasIndex("ReservoirIntervalId");

                    b.HasIndex("ScreenOutPresId");

                    b.HasIndex("TotalCO2MassId");

                    b.HasIndex("TotalFrictionPresLossId");

                    b.HasIndex("TotalN2StdVolumeId");

                    b.HasIndex("TotalProppantMassId");

                    b.HasIndex("TotalPumpTimeId");

                    b.HasIndex("TotalVolumeId");

                    b.HasIndex("TvdFormationBottomId");

                    b.HasIndex("TvdFormationTopId");

                    b.HasIndex("TvdOpenHoleBottomId");

                    b.HasIndex("TvdOpenHoleTopId");

                    b.HasIndex("WellboreProppantMassId");

                    b.ToTable("StimJobJobIntervals");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.JobStage", b =>
                {
                    b.Property<int>("JobStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcidVolumeId")
                        .HasColumnType("int");

                    b.Property<int?>("AveragePresBottomholeId")
                        .HasColumnType("int");

                    b.Property<int?>("AveragePresSurfaceId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgAcidRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgBaseFluidQualityId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgBaseFluidRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgCO2BaseFluidQualityId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgCO2RateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgGelRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgHydraulicPowerId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgInternalPhaseFractionId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgN2BaseFluidQualityId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgN2StdRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgOilRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgPropConcId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgProppantConcBottomholeId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgProppantConcSurfaceId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgPumpRateBottomholeId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgRateSurfaceCO2Id")
                        .HasColumnType("int");

                    b.Property<int?>("AvgRateSurfaceLiquidId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgSlurryPropConcId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgSlurryRateId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgStdRateSurfaceN2Id")
                        .HasColumnType("int");

                    b.Property<int?>("AvgTemperatureId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgWellheadRateId")
                        .HasColumnType("int");

                    b.Property<int?>("BaseFluidBypassVolId")
                        .HasColumnType("int");

                    b.Property<int?>("BaseFluidVolId")
                        .HasColumnType("int");

                    b.Property<string>("DTimEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndFoamRateCO2Id")
                        .HasColumnType("int");

                    b.Property<int?>("EndFoamRateN2Id")
                        .HasColumnType("int");

                    b.Property<int?>("EndPresBottomholeId")
                        .HasColumnType("int");

                    b.Property<int?>("EndPresSurfaceId")
                        .HasColumnType("int");

                    b.Property<int?>("EndProppantConcBottomholeId")
                        .HasColumnType("int");

                    b.Property<int?>("EndProppantConcSurfaceId")
                        .HasColumnType("int");

                    b.Property<int?>("EndPumpRateBottomholeId")
                        .HasColumnType("int");

                    b.Property<int?>("EndRateSurfaceCO2Id")
                        .HasColumnType("int");

                    b.Property<int?>("EndRateSurfaceLiquidId")
                        .HasColumnType("int");

                    b.Property<int?>("EndStdRateSurfaceN2Id")
                        .HasColumnType("int");

                    b.Property<int?>("FlowPathId")
                        .HasColumnType("int");

                    b.Property<int?>("FluidVolBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("FluidVolSlurryId")
                        .HasColumnType("int");

                    b.Property<string>("FrictionFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GelVolumeId")
                        .HasColumnType("int");

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxAcidRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxCO2LiquidRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxGelRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxN2StdRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxOilRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPmaxPacPresId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPmaxWeaklinkPresId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPresId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPropConcId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxSlurryPropConcId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxSlurryRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxWellheadRateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OilVolumeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProppantMassId")
                        .HasColumnType("int");

                    b.Property<int?>("ProppantMassWellHeadId")
                        .HasColumnType("int");

                    b.Property<int?>("PumpTimeId")
                        .HasColumnType("int");

                    b.Property<int?>("SlurryRateBeginId")
                        .HasColumnType("int");

                    b.Property<int?>("SlurryRateEndId")
                        .HasColumnType("int");

                    b.Property<int?>("SlurryVolId")
                        .HasColumnType("int");

                    b.Property<int?>("StageFluidId")
                        .HasColumnType("int");

                    b.Property<int?>("StartFoamRateCO2Id")
                        .HasColumnType("int");

                    b.Property<int?>("StartFoamRateN2Id")
                        .HasColumnType("int");

                    b.Property<int?>("StartPresBottomholeId")
                        .HasColumnType("int");

                    b.Property<int?>("StartPresSurfaceId")
                        .HasColumnType("int");

                    b.Property<int?>("StartProppantConcBottomholeId")
                        .HasColumnType("int");

                    b.Property<int?>("StartProppantConcSurfaceId")
                        .HasColumnType("int");

                    b.Property<int?>("StartPumpRateBottomholeId")
                        .HasColumnType("int");

                    b.Property<int?>("StartRateSurfaceCO2Id")
                        .HasColumnType("int");

                    b.Property<int?>("StartRateSurfaceLiquidId")
                        .HasColumnType("int");

                    b.Property<int?>("StartStdRateSurfaceN2Id")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WellheadVolStdVolN2Id")
                        .HasColumnType("int");

                    b.HasKey("JobStageId");

                    b.HasIndex("AcidVolumeId");

                    b.HasIndex("AveragePresBottomholeId");

                    b.HasIndex("AveragePresSurfaceId");

                    b.HasIndex("AvgAcidRateId");

                    b.HasIndex("AvgBaseFluidQualityId");

                    b.HasIndex("AvgBaseFluidRateId");

                    b.HasIndex("AvgCO2BaseFluidQualityId");

                    b.HasIndex("AvgCO2RateId");

                    b.HasIndex("AvgGelRateId");

                    b.HasIndex("AvgHydraulicPowerId");

                    b.HasIndex("AvgInternalPhaseFractionId");

                    b.HasIndex("AvgN2BaseFluidQualityId");

                    b.HasIndex("AvgN2StdRateId");

                    b.HasIndex("AvgOilRateId");

                    b.HasIndex("AvgPropConcId");

                    b.HasIndex("AvgProppantConcBottomholeId");

                    b.HasIndex("AvgProppantConcSurfaceId");

                    b.HasIndex("AvgPumpRateBottomholeId");

                    b.HasIndex("AvgRateSurfaceCO2Id");

                    b.HasIndex("AvgRateSurfaceLiquidId");

                    b.HasIndex("AvgSlurryPropConcId");

                    b.HasIndex("AvgSlurryRateId");

                    b.HasIndex("AvgStdRateSurfaceN2Id");

                    b.HasIndex("AvgTemperatureId");

                    b.HasIndex("AvgWellheadRateId");

                    b.HasIndex("BaseFluidBypassVolId");

                    b.HasIndex("BaseFluidVolId");

                    b.HasIndex("EndFoamRateCO2Id");

                    b.HasIndex("EndFoamRateN2Id");

                    b.HasIndex("EndPresBottomholeId");

                    b.HasIndex("EndPresSurfaceId");

                    b.HasIndex("EndProppantConcBottomholeId");

                    b.HasIndex("EndProppantConcSurfaceId");

                    b.HasIndex("EndPumpRateBottomholeId");

                    b.HasIndex("EndRateSurfaceCO2Id");

                    b.HasIndex("EndRateSurfaceLiquidId");

                    b.HasIndex("EndStdRateSurfaceN2Id");

                    b.HasIndex("FlowPathId");

                    b.HasIndex("FluidVolBaseId");

                    b.HasIndex("FluidVolSlurryId");

                    b.HasIndex("GelVolumeId");

                    b.HasIndex("MaxAcidRateId");

                    b.HasIndex("MaxCO2LiquidRateId");

                    b.HasIndex("MaxGelRateId");

                    b.HasIndex("MaxN2StdRateId");

                    b.HasIndex("MaxOilRateId");

                    b.HasIndex("MaxPmaxPacPresId");

                    b.HasIndex("MaxPmaxWeaklinkPresId");

                    b.HasIndex("MaxPresId");

                    b.HasIndex("MaxPropConcId");

                    b.HasIndex("MaxSlurryPropConcId");

                    b.HasIndex("MaxSlurryRateId");

                    b.HasIndex("MaxWellheadRateId");

                    b.HasIndex("OilVolumeId");

                    b.HasIndex("ProppantMassId");

                    b.HasIndex("ProppantMassWellHeadId");

                    b.HasIndex("PumpTimeId");

                    b.HasIndex("SlurryRateBeginId");

                    b.HasIndex("SlurryRateEndId");

                    b.HasIndex("SlurryVolId");

                    b.HasIndex("StageFluidId");

                    b.HasIndex("StartFoamRateCO2Id");

                    b.HasIndex("StartFoamRateN2Id");

                    b.HasIndex("StartPresBottomholeId");

                    b.HasIndex("StartPresSurfaceId");

                    b.HasIndex("StartProppantConcBottomholeId");

                    b.HasIndex("StartProppantConcSurfaceId");

                    b.HasIndex("StartPumpRateBottomholeId");

                    b.HasIndex("StartRateSurfaceCO2Id");

                    b.HasIndex("StartRateSurfaceLiquidId");

                    b.HasIndex("StartStdRateSurfaceN2Id");

                    b.HasIndex("WellheadVolStdVolN2Id");

                    b.ToTable("StimJobJobStages");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LenMajorAxis", b =>
                {
                    b.Property<int>("LenMajorAxisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenMajorAxisId");

                    b.ToTable("TargetLenMajorAxiss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LenRadius", b =>
                {
                    b.Property<int>("LenRadiusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenRadiusId");

                    b.ToTable("TargetLenRadiuss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LithFormationPermeability", b =>
                {
                    b.Property<int>("LithFormationPermeabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LithFormationPermeabilityId");

                    b.ToTable("StimJobLithFormationPermeabilitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LithNetPayThickness", b =>
                {
                    b.Property<int>("LithNetPayThicknessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LithNetPayThicknessId");

                    b.ToTable("StimJobLithNetPayThicknesss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LithPoissonsRatio", b =>
                {
                    b.Property<int>("LithPoissonsRatioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LithPoissonsRatioId");

                    b.ToTable("StimJobLithPoissonsRatios");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LithPorePres", b =>
                {
                    b.Property<int>("LithPorePresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LithPorePresId");

                    b.ToTable("StimJobLithPorePress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LithYoungsModulus", b =>
                {
                    b.Property<int>("LithYoungsModulusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LithYoungsModulusId");

                    b.ToTable("StimJobLithYoungsModuluss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommonDataLogCommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("CreationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndIndexLogEndIndexId")
                        .HasColumnType("int");

                    b.Property<string>("IndexCurve")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndexType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LogDataId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NullValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartIndexLogStartIndexId")
                        .HasColumnType("int");

                    b.Property<int?>("StepIncrementId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogId");

                    b.HasIndex("CommonDataLogCommonDataId");

                    b.HasIndex("EndIndexLogEndIndexId");

                    b.HasIndex("LogDataId");

                    b.HasIndex("StartIndexLogStartIndexId");

                    b.HasIndex("StepIncrementId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LogCommonData", b =>
                {
                    b.Property<int>("LogCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogCommonDataId");

                    b.ToTable("LogCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LogCurveInfo", b =>
                {
                    b.Property<int>("LogCurveInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassWitsml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurveDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxIndexId")
                        .HasColumnType("int");

                    b.Property<int?>("MinIndexId")
                        .HasColumnType("int");

                    b.Property<string>("MnemAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mnemonic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NullValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SensorOffsetId")
                        .HasColumnType("int");

                    b.Property<string>("TraceState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeLogData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogCurveInfoId");

                    b.HasIndex("LogId");

                    b.HasIndex("MaxIndexId");

                    b.HasIndex("MinIndexId");

                    b.HasIndex("SensorOffsetId");

                    b.ToTable("LogCurveInfos");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LogData", b =>
                {
                    b.Property<int>("LogDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MnemonicList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitList")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogDataId");

                    b.ToTable("LogDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LogEndIndex", b =>
                {
                    b.Property<int>("LogEndIndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogEndIndexId");

                    b.ToTable("LogEndIndex");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LogParam", b =>
                {
                    b.Property<int>("LogParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogParamId");

                    b.HasIndex("LogId");

                    b.ToTable("LogParams");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LogStartIndex", b =>
                {
                    b.Property<int>("LogStartIndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogStartIndexId");

                    b.ToTable("LogStartIndex");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MagDeclUsed", b =>
                {
                    b.Property<int>("MagDeclUsedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagDeclUsedId");

                    b.ToTable("TrajectoryMagDeclUseds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Mass", b =>
                {
                    b.Property<int>("MassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MassId");

                    b.ToTable("StimJobMasss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MassCO2", b =>
                {
                    b.Property<int>("MassCO2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MassCO2Id");

                    b.ToTable("StimJobMassCO2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Max", b =>
                {
                    b.Property<int>("MaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxId");

                    b.ToTable("ToolErrorModelMaxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxAcidRate", b =>
                {
                    b.Property<int>("MaxAcidRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxAcidRateId");

                    b.ToTable("StimJobMaxAcidRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxCO2LiquidRate", b =>
                {
                    b.Property<int>("MaxCO2LiquidRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxCO2LiquidRateId");

                    b.ToTable("StimJobMaxCO2LiquidRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxFluidRate", b =>
                {
                    b.Property<int>("MaxFluidRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxFluidRateId");

                    b.ToTable("StimJobMaxFluidRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxFluidRateAnnulus", b =>
                {
                    b.Property<int>("MaxFluidRateAnnulusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxFluidRateAnnulusId");

                    b.ToTable("StimJobMaxFluidRateAnnuluss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxFluidRateTubing", b =>
                {
                    b.Property<int>("MaxFluidRateTubingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxFluidRateTubingId");

                    b.ToTable("StimJobMaxFluidRateTubings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxGelRate", b =>
                {
                    b.Property<int>("MaxGelRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxGelRateId");

                    b.ToTable("StimJobMaxGelRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxIndex", b =>
                {
                    b.Property<int>("MaxIndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxIndexId");

                    b.ToTable("LogMaxIndexs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxJobPres", b =>
                {
                    b.Property<int>("MaxJobPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxJobPresId");

                    b.ToTable("StimJobMaxJobPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxN2StdRate", b =>
                {
                    b.Property<int>("MaxN2StdRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxN2StdRateId");

                    b.ToTable("StimJobMaxN2StdRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxOilRate", b =>
                {
                    b.Property<int>("MaxOilRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxOilRateId");

                    b.ToTable("StimJobMaxOilRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxPmaxPacPres", b =>
                {
                    b.Property<int>("MaxPmaxPacPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxPmaxPacPresId");

                    b.ToTable("StimJobMaxPmaxPacPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxPmaxWeaklinkPres", b =>
                {
                    b.Property<int>("MaxPmaxWeaklinkPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxPmaxWeaklinkPresId");

                    b.ToTable("StimJobMaxPmaxWeaklinkPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxPres", b =>
                {
                    b.Property<int>("MaxPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxPresId");

                    b.ToTable("StimJobMaxPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxPresAnnulus", b =>
                {
                    b.Property<int>("MaxPresAnnulusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxPresAnnulusId");

                    b.ToTable("StimJobMaxPresAnnuluss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxPresTubing", b =>
                {
                    b.Property<int>("MaxPresTubingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxPresTubingId");

                    b.ToTable("StimJobMaxPresTubings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxPropConc", b =>
                {
                    b.Property<int>("MaxPropConcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxPropConcId");

                    b.ToTable("StimJobMaxPropConcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxProppantConcBottomhole", b =>
                {
                    b.Property<int>("MaxProppantConcBottomholeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxProppantConcBottomholeId");

                    b.ToTable("StimJobMaxProppantConcBottomholes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxProppantConcSurface", b =>
                {
                    b.Property<int>("MaxProppantConcSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxProppantConcSurfaceId");

                    b.ToTable("StimJobMaxProppantConcSurfaces");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxSlurryPropConc", b =>
                {
                    b.Property<int>("MaxSlurryPropConcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxSlurryPropConcId");

                    b.ToTable("StimJobMaxSlurryPropConcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxSlurryRate", b =>
                {
                    b.Property<int>("MaxSlurryRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxSlurryRateId");

                    b.ToTable("StimJobMaxSlurryRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxTreatmentPres", b =>
                {
                    b.Property<int>("MaxTreatmentPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxTreatmentPresId");

                    b.ToTable("StimJobMaxTreatmentPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MaxWellheadRate", b =>
                {
                    b.Property<int>("MaxWellheadRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaxWellheadRateId");

                    b.ToTable("StimJobMaxWellheadRates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdBottomhole", b =>
                {
                    b.Property<int>("MdBottomholeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdBottomholeId");

                    b.ToTable("StimJobMdBottomholes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdCore", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("SideWallMdCore");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdEnd", b =>
                {
                    b.Property<int>("MdEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdEndId");

                    b.ToTable("SurveyProgramMdEnd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdFormationBottom", b =>
                {
                    b.Property<int>("MdFormationBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdFormationBottomId");

                    b.ToTable("StimJobMdFormationBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdFormationTop", b =>
                {
                    b.Property<int>("MdFormationTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdFormationTopId");

                    b.ToTable("StimJobMdFormationTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdGrossPayBottom", b =>
                {
                    b.Property<int>("MdGrossPayBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdGrossPayBottomId");

                    b.ToTable("StimJobMdGrossPayBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdGrossPayTop", b =>
                {
                    b.Property<int>("MdGrossPayTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdGrossPayTopId");

                    b.ToTable("StimJobMdGrossPayTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdLithBottom", b =>
                {
                    b.Property<int>("MdLithBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdLithBottomId");

                    b.ToTable("StimJobMdLithBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdLithTop", b =>
                {
                    b.Property<int>("MdLithTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdLithTopId");

                    b.ToTable("StimJobMdLithTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdMidPerforation", b =>
                {
                    b.Property<int>("MdMidPerforationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdMidPerforationId");

                    b.ToTable("StimJobMdMidPerforations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdMn", b =>
                {
                    b.Property<int>("MdMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdMnId");

                    b.ToTable("TrajectoryMdMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdMx", b =>
                {
                    b.Property<int>("MdMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdMxId");

                    b.ToTable("TrajectoryMdMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdOpenHoleBottom", b =>
                {
                    b.Property<int>("MdOpenHoleBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdOpenHoleBottomId");

                    b.ToTable("StimJobMdOpenHoleBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdOpenHoleTop", b =>
                {
                    b.Property<int>("MdOpenHoleTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdOpenHoleTopId");

                    b.ToTable("StimJobMdOpenHoleTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdPerforationsBottom", b =>
                {
                    b.Property<int>("MdPerforationsBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdPerforationsBottomId");

                    b.ToTable("StimJobMdPerforationsBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdPerforationsTop", b =>
                {
                    b.Property<int>("MdPerforationsTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdPerforationsTopId");

                    b.ToTable("StimJobMdPerforationsTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdStart", b =>
                {
                    b.Property<int>("MdStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdStartId");

                    b.ToTable("SurveyProgramMdStart");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdSubSeaPlanned", b =>
                {
                    b.Property<int>("MdSubSeaPlannedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdSubSeaPlannedId");

                    b.ToTable("WellboreMdSubSeaPlanned");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdSurface", b =>
                {
                    b.Property<int>("MdSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdSurfaceId");

                    b.ToTable("StimJobMdSurfaces");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MdToolReference", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("SideWallMdToolReference");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommonDataMessageCommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdBitId")
                        .HasColumnType("int");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamIndex")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarnProbability")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("CommonDataMessageCommonDataId");

                    b.HasIndex("MdBitId");

                    b.HasIndex("MdId");

                    b.HasIndex("ParamIndex");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MessageCommonData", b =>
                {
                    b.Property<int>("MessageCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageCommonDataId");

                    b.ToTable("MessageCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MessageMd", b =>
                {
                    b.Property<int>("MdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdId");

                    b.ToTable("MessageMd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MessageMdBit", b =>
                {
                    b.Property<int>("MdBitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdBitId");

                    b.ToTable("MessageMdBit");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MessageParam", b =>
                {
                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Index");

                    b.ToTable("MessageParam");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Min", b =>
                {
                    b.Property<int>("MinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MinId");

                    b.ToTable("ToolErrorModelMins");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MinIndex", b =>
                {
                    b.Property<int>("MinIndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MinIndexId");

                    b.ToTable("LogMinIndexs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ModelParameters", b =>
                {
                    b.Property<int>("ModelParametersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GyroInitializationId")
                        .HasColumnType("int");

                    b.Property<int?>("GyroReinitializationDistanceId")
                        .HasColumnType("int");

                    b.Property<string>("MisalignmentMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoiseReductionFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Switching")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModelParametersId");

                    b.HasIndex("GyroInitializationId");

                    b.HasIndex("GyroReinitializationDistanceId");

                    b.ToTable("ToolErrorModelModelParameter");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLog", b =>
                {
                    b.Property<int>("MudLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommonDataMudLogCommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndMdId")
                        .HasColumnType("int");

                    b.Property<int?>("GeologyIntervalId")
                        .HasColumnType("int");

                    b.Property<string>("MudLogCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MudLogEngineers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectGrowing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartMdId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MudLogId");

                    b.HasIndex("CommonDataMudLogCommonDataId");

                    b.HasIndex("EndMdId");

                    b.HasIndex("GeologyIntervalId");

                    b.HasIndex("StartMdId");

                    b.ToTable("MudLogs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogAbundance", b =>
                {
                    b.Property<int>("AbundanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AbundanceId");

                    b.ToTable("MudLogAbundance");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogAcetylene", b =>
                {
                    b.Property<int>("AcetyleneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcetyleneId");

                    b.ToTable("MudLogAcetylene");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogCalcStab", b =>
                {
                    b.Property<int>("CalcStabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalcStabId");

                    b.ToTable("MudLogCalcStab");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogCalcite", b =>
                {
                    b.Property<int>("CalciteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalciteId");

                    b.ToTable("MudLogCalcite");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogCec", b =>
                {
                    b.Property<int>("CecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CecId");

                    b.ToTable("MudLogCec");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogChromatograph", b =>
                {
                    b.Property<int>("ChromatographId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcetyleneId")
                        .HasColumnType("int");

                    b.Property<string>("ChromIntRpt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChromType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Co2AvId")
                        .HasColumnType("int");

                    b.Property<int?>("Co2MnId")
                        .HasColumnType("int");

                    b.Property<int?>("Co2MxId")
                        .HasColumnType("int");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ETimChromCycleId")
                        .HasColumnType("int");

                    b.Property<int?>("EpentAvId")
                        .HasColumnType("int");

                    b.Property<int?>("EpentMnId")
                        .HasColumnType("int");

                    b.Property<int?>("EpentMxId")
                        .HasColumnType("int");

                    b.Property<int?>("EthAvId")
                        .HasColumnType("int");

                    b.Property<int?>("EthMnId")
                        .HasColumnType("int");

                    b.Property<int?>("EthMxId")
                        .HasColumnType("int");

                    b.Property<int?>("H2sAvId")
                        .HasColumnType("int");

                    b.Property<int?>("H2sMnId")
                        .HasColumnType("int");

                    b.Property<int?>("H2sMxId")
                        .HasColumnType("int");

                    b.Property<int?>("IbutAvId")
                        .HasColumnType("int");

                    b.Property<int?>("IbutMnId")
                        .HasColumnType("int");

                    b.Property<int?>("IbutMxId")
                        .HasColumnType("int");

                    b.Property<int?>("IhexAvId")
                        .HasColumnType("int");

                    b.Property<int?>("IhexMnId")
                        .HasColumnType("int");

                    b.Property<int?>("IhexMxId")
                        .HasColumnType("int");

                    b.Property<int?>("IpentAvId")
                        .HasColumnType("int");

                    b.Property<int?>("IpentMnId")
                        .HasColumnType("int");

                    b.Property<int?>("IpentMxId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<int?>("MethAvId")
                        .HasColumnType("int");

                    b.Property<int?>("MethMnId")
                        .HasColumnType("int");

                    b.Property<int?>("MethMxId")
                        .HasColumnType("int");

                    b.Property<int?>("NbutAvId")
                        .HasColumnType("int");

                    b.Property<int?>("NbutMnId")
                        .HasColumnType("int");

                    b.Property<int?>("NbutMxId")
                        .HasColumnType("int");

                    b.Property<int?>("NhexAvId")
                        .HasColumnType("int");

                    b.Property<int?>("NhexMnId")
                        .HasColumnType("int");

                    b.Property<int?>("NhexMxId")
                        .HasColumnType("int");

                    b.Property<int?>("NpentAvId")
                        .HasColumnType("int");

                    b.Property<int?>("NpentMnId")
                        .HasColumnType("int");

                    b.Property<int?>("NpentMxId")
                        .HasColumnType("int");

                    b.Property<int?>("PropAvId")
                        .HasColumnType("int");

                    b.Property<int?>("PropMnId")
                        .HasColumnType("int");

                    b.Property<int?>("PropMxId")
                        .HasColumnType("int");

                    b.Property<int?>("WtMudInId")
                        .HasColumnType("int");

                    b.Property<int?>("WtMudOutId")
                        .HasColumnType("int");

                    b.HasKey("ChromatographId");

                    b.HasIndex("AcetyleneId");

                    b.HasIndex("Co2AvId");

                    b.HasIndex("Co2MnId");

                    b.HasIndex("Co2MxId");

                    b.HasIndex("ETimChromCycleId");

                    b.HasIndex("EpentAvId");

                    b.HasIndex("EpentMnId");

                    b.HasIndex("EpentMxId");

                    b.HasIndex("EthAvId");

                    b.HasIndex("EthMnId");

                    b.HasIndex("EthMxId");

                    b.HasIndex("H2sAvId");

                    b.HasIndex("H2sMnId");

                    b.HasIndex("H2sMxId");

                    b.HasIndex("IbutAvId");

                    b.HasIndex("IbutMnId");

                    b.HasIndex("IbutMxId");

                    b.HasIndex("IhexAvId");

                    b.HasIndex("IhexMnId");

                    b.HasIndex("IhexMxId");

                    b.HasIndex("IpentAvId");

                    b.HasIndex("IpentMnId");

                    b.HasIndex("IpentMxId");

                    b.HasIndex("MdBottomId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("MethAvId");

                    b.HasIndex("MethMnId");

                    b.HasIndex("MethMxId");

                    b.HasIndex("NbutAvId");

                    b.HasIndex("NbutMnId");

                    b.HasIndex("NbutMxId");

                    b.HasIndex("NhexAvId");

                    b.HasIndex("NhexMnId");

                    b.HasIndex("NhexMxId");

                    b.HasIndex("NpentAvId");

                    b.HasIndex("NpentMnId");

                    b.HasIndex("NpentMxId");

                    b.HasIndex("PropAvId");

                    b.HasIndex("PropMnId");

                    b.HasIndex("PropMxId");

                    b.HasIndex("WtMudInId");

                    b.HasIndex("WtMudOutId");

                    b.ToTable("MudLogChromatograph");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogChronostratigraphic", b =>
                {
                    b.Property<int>("ChronostratigraphicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MudLogGeologyIntervalGeologyIntervalId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChronostratigraphicId");

                    b.HasIndex("MudLogGeologyIntervalGeologyIntervalId");

                    b.ToTable("MudLogChronostratigraphic");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogCo2Av", b =>
                {
                    b.Property<int>("Co2AvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Co2AvId");

                    b.ToTable("MudLogCo2Av");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogCo2Mn", b =>
                {
                    b.Property<int>("Co2MnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Co2MnId");

                    b.ToTable("MudLogCo2Mn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogCo2Mx", b =>
                {
                    b.Property<int>("Co2MxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Co2MxId");

                    b.ToTable("MudLogCo2Mx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogCommonData", b =>
                {
                    b.Property<int>("MudLogCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MudLogCommonDataId");

                    b.ToTable("MudLogCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogCommonTime", b =>
                {
                    b.Property<int>("CommonTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTimCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimLastChange")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommonTimeId");

                    b.ToTable("MudLogCommonTime");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogDensBulk", b =>
                {
                    b.Property<int>("DensBulkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensBulkId");

                    b.ToTable("MudLogDensBulk");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogDensShale", b =>
                {
                    b.Property<int>("DensShaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensShaleId");

                    b.ToTable("MudLogDensShale");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogDolomite", b =>
                {
                    b.Property<int>("DolomiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DolomiteId");

                    b.ToTable("MudLogDolomite");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogETimChromCycle", b =>
                {
                    b.Property<int>("ETimChromCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimChromCycleId");

                    b.ToTable("MudLogETimChromCycle");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogEcdTdAv", b =>
                {
                    b.Property<int>("EcdTdAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EcdTdAvId");

                    b.ToTable("MudLogEcdTdAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogEndMd", b =>
                {
                    b.Property<int>("EndMdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndMdId");

                    b.ToTable("MudLogEndMd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogEpentAv", b =>
                {
                    b.Property<int>("EpentAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpentAvId");

                    b.ToTable("MudLogEpentAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogEpentMn", b =>
                {
                    b.Property<int>("EpentMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpentMnId");

                    b.ToTable("MudLogEpentMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogEpentMx", b =>
                {
                    b.Property<int>("EpentMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpentMxId");

                    b.ToTable("MudLogEpentMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogEthAv", b =>
                {
                    b.Property<int>("EthAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EthAvId");

                    b.ToTable("MudLogEthAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogEthMn", b =>
                {
                    b.Property<int>("EthMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EthMnId");

                    b.ToTable("MudLogEthMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogEthMx", b =>
                {
                    b.Property<int>("EthMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EthMxId");

                    b.ToTable("MudLogEthMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogForce", b =>
                {
                    b.Property<int>("ForceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ForceId");

                    b.ToTable("MudLogForce");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogGasAv", b =>
                {
                    b.Property<int>("GasAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasAvId");

                    b.ToTable("MudLogGasAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogGasBackgnd", b =>
                {
                    b.Property<int>("GasBackgndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasBackgndId");

                    b.ToTable("MudLogGasBackgnd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogGasConAv", b =>
                {
                    b.Property<int>("GasConAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasConAvId");

                    b.ToTable("MudLogGasConAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogGasConMx", b =>
                {
                    b.Property<int>("GasConMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasConMxId");

                    b.ToTable("MudLogGasConMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogGasPeak", b =>
                {
                    b.Property<int>("GasPeakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasPeakId");

                    b.ToTable("MudLogGasPeak");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogGasTrip", b =>
                {
                    b.Property<int>("GasTripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GasTripId");

                    b.ToTable("MudLogGasTrip");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogGeologyInterval", b =>
                {
                    b.Property<int>("GeologyIntervalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalcStabId")
                        .HasColumnType("int");

                    b.Property<int?>("CalciteId")
                        .HasColumnType("int");

                    b.Property<int?>("CecId")
                        .HasColumnType("int");

                    b.Property<int?>("ChromatographId")
                        .HasColumnType("int");

                    b.Property<string>("CleaningMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommonTimeId")
                        .HasColumnType("int");

                    b.Property<string>("CuttingFluid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DensBulkId")
                        .HasColumnType("int");

                    b.Property<int?>("DensShaleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DolomiteId")
                        .HasColumnType("int");

                    b.Property<string>("DryingMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DxcAv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EcdTdAvId")
                        .HasColumnType("int");

                    b.Property<int?>("LenPlugId")
                        .HasColumnType("int");

                    b.Property<int?>("LithologyId")
                        .HasColumnType("int");

                    b.Property<int?>("LithostratigraphicId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<int?>("MudGasId")
                        .HasColumnType("int");

                    b.Property<int?>("RopAvId")
                        .HasColumnType("int");

                    b.Property<int?>("RopMnId")
                        .HasColumnType("int");

                    b.Property<int?>("RopMxId")
                        .HasColumnType("int");

                    b.Property<int?>("RpmAvId")
                        .HasColumnType("int");

                    b.Property<int?>("ShowId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeMnId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeMxId")
                        .HasColumnType("int");

                    b.Property<int?>("TqAvId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdTopId")
                        .HasColumnType("int");

                    b.Property<string>("TypeLithology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WobAvId")
                        .HasColumnType("int");

                    b.Property<int?>("WtMudAvId")
                        .HasColumnType("int");

                    b.HasKey("GeologyIntervalId");

                    b.HasIndex("CalcStabId");

                    b.HasIndex("CalciteId");

                    b.HasIndex("CecId");

                    b.HasIndex("ChromatographId");

                    b.HasIndex("CommonTimeId");

                    b.HasIndex("DensBulkId");

                    b.HasIndex("DensShaleId");

                    b.HasIndex("DolomiteId");

                    b.HasIndex("EcdTdAvId");

                    b.HasIndex("LenPlugId");

                    b.HasIndex("LithologyId");

                    b.HasIndex("LithostratigraphicId");

                    b.HasIndex("MdBottomId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("MudGasId");

                    b.HasIndex("RopAvId");

                    b.HasIndex("RopMnId");

                    b.HasIndex("RopMxId");

                    b.HasIndex("RpmAvId");

                    b.HasIndex("ShowId");

                    b.HasIndex("SizeMnId");

                    b.HasIndex("SizeMxId");

                    b.HasIndex("TqAvId");

                    b.HasIndex("TvdBaseId");

                    b.HasIndex("TvdTopId");

                    b.HasIndex("WobAvId");

                    b.HasIndex("WtMudAvId");

                    b.ToTable("MudLogGeologyInterval");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogH2sAv", b =>
                {
                    b.Property<int>("H2sAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("H2sAvId");

                    b.ToTable("MudLogH2sAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogH2sMn", b =>
                {
                    b.Property<int>("H2sMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("H2sMnId");

                    b.ToTable("MudLogH2sMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogH2sMx", b =>
                {
                    b.Property<int>("H2sMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("H2sMxId");

                    b.ToTable("MudLogH2sMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogIbutAv", b =>
                {
                    b.Property<int>("IbutAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IbutAvId");

                    b.ToTable("MudLogIbutAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogIbutMn", b =>
                {
                    b.Property<int>("IbutMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IbutMnId");

                    b.ToTable("MudLogIbutMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogIbutMx", b =>
                {
                    b.Property<int>("IbutMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IbutMxId");

                    b.ToTable("MudLogIbutMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogIhexAv", b =>
                {
                    b.Property<int>("IhexAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IhexAvId");

                    b.ToTable("MudLogIhexAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogIhexMn", b =>
                {
                    b.Property<int>("IhexMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IhexMnId");

                    b.ToTable("MudLogIhexMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogIhexMx", b =>
                {
                    b.Property<int>("IhexMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IhexMxId");

                    b.ToTable("MudLogIhexMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogIpentAv", b =>
                {
                    b.Property<int>("IpentAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IpentAvId");

                    b.ToTable("MudLogIpentAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogIpentMn", b =>
                {
                    b.Property<int>("IpentMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IpentMnId");

                    b.ToTable("MudLogIpentMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogIpentMx", b =>
                {
                    b.Property<int>("IpentMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IpentMxId");

                    b.ToTable("MudLogIpentMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogLenPlug", b =>
                {
                    b.Property<int>("LenPlugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenPlugId");

                    b.ToTable("MudLogLenPlug");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogLithology", b =>
                {
                    b.Property<int>("LithologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DensShaleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hardness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatrixCement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permeability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PorosityVisible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QualifierId")
                        .HasColumnType("int");

                    b.Property<string>("Roundness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeGrain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sorting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Texture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LithologyId");

                    b.HasIndex("DensShaleId");

                    b.HasIndex("QualifierId");

                    b.ToTable("MudLogLithology");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogLithostratigraphic", b =>
                {
                    b.Property<int>("LithostratigraphicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LithostratigraphicId");

                    b.ToTable("MudLogLithostratigraphic");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogMdBottom", b =>
                {
                    b.Property<int>("MdBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdBottomId");

                    b.ToTable("MudLogMdBottom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogMdTop", b =>
                {
                    b.Property<int>("MdTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdTopId");

                    b.ToTable("MudLogMdTop");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogMethAv", b =>
                {
                    b.Property<int>("MethAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MethAvId");

                    b.ToTable("MudLogMethAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogMethMn", b =>
                {
                    b.Property<int>("MethMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MethMnId");

                    b.ToTable("MudLogMethMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogMethMx", b =>
                {
                    b.Property<int>("MethMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MethMxId");

                    b.ToTable("MudLogMethMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogMudGas", b =>
                {
                    b.Property<int>("MudGasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GasAvId")
                        .HasColumnType("int");

                    b.Property<int?>("GasBackgndId")
                        .HasColumnType("int");

                    b.Property<int?>("GasConAvId")
                        .HasColumnType("int");

                    b.Property<int?>("GasConMxId")
                        .HasColumnType("int");

                    b.Property<int?>("GasPeakId")
                        .HasColumnType("int");

                    b.Property<string>("GasPeakType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GasTripId")
                        .HasColumnType("int");

                    b.HasKey("MudGasId");

                    b.HasIndex("GasAvId");

                    b.HasIndex("GasBackgndId");

                    b.HasIndex("GasConAvId");

                    b.HasIndex("GasConMxId");

                    b.HasIndex("GasPeakId");

                    b.HasIndex("GasTripId");

                    b.ToTable("MudLogMudGas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogNatFlorPc", b =>
                {
                    b.Property<int>("NatFlorPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NatFlorPcId");

                    b.ToTable("MudLogNatFlorPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogNbutAv", b =>
                {
                    b.Property<int>("NbutAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NbutAvId");

                    b.ToTable("MudLogNbutAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogNbutMn", b =>
                {
                    b.Property<int>("NbutMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NbutMnId");

                    b.ToTable("MudLogNbutMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogNbutMx", b =>
                {
                    b.Property<int>("NbutMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NbutMxId");

                    b.ToTable("MudLogNbutMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogNhexAv", b =>
                {
                    b.Property<int>("NhexAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NhexAvId");

                    b.ToTable("MudLogNhexAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogNhexMn", b =>
                {
                    b.Property<int>("NhexMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NhexMnId");

                    b.ToTable("MudLogNhexMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogNhexMx", b =>
                {
                    b.Property<int>("NhexMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NhexMxId");

                    b.ToTable("MudLogNhexMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogNpentAv", b =>
                {
                    b.Property<int>("NpentAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NpentAvId");

                    b.ToTable("MudLogNpentAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogNpentMn", b =>
                {
                    b.Property<int>("NpentMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NpentMnId");

                    b.ToTable("MudLogNpentMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogNpentMx", b =>
                {
                    b.Property<int>("NpentMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NpentMxId");

                    b.ToTable("MudLogNpentMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogParameter", b =>
                {
                    b.Property<int>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommonTimeId")
                        .HasColumnType("int");

                    b.Property<int?>("ForceId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<int?>("MudLogId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParameterId");

                    b.HasIndex("CommonTimeId");

                    b.HasIndex("ForceId");

                    b.HasIndex("MdBottomId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("MudLogId");

                    b.ToTable("MudLogParameter");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogPropAv", b =>
                {
                    b.Property<int>("PropAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropAvId");

                    b.ToTable("MudLogPropAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogPropMn", b =>
                {
                    b.Property<int>("PropMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropMnId");

                    b.ToTable("MudLogPropMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogPropMx", b =>
                {
                    b.Property<int>("PropMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropMxId");

                    b.ToTable("MudLogPropMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogQualifier", b =>
                {
                    b.Property<int>("QualifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AbundanceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QualifierId");

                    b.HasIndex("AbundanceId");

                    b.ToTable("MudLogQualifier");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogRopAv", b =>
                {
                    b.Property<int>("RopAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RopAvId");

                    b.ToTable("MudLogRopAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogRopMn", b =>
                {
                    b.Property<int>("RopMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RopMnId");

                    b.ToTable("MudLogRopMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogRopMx", b =>
                {
                    b.Property<int>("RopMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RopMxId");

                    b.ToTable("MudLogRopMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogRpmAv", b =>
                {
                    b.Property<int>("RpmAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RpmAvId");

                    b.ToTable("MudLogRpmAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogShow", b =>
                {
                    b.Property<int>("ShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CutColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImpregnatedLitho")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatFlorColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatFlorDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatFlorLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NatFlorPcId")
                        .HasColumnType("int");

                    b.Property<string>("Odor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidueColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShowDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShowRat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StainColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StainDistr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StainPcId")
                        .HasColumnType("int");

                    b.HasKey("ShowId");

                    b.HasIndex("NatFlorPcId");

                    b.HasIndex("StainPcId");

                    b.ToTable("MudLogShow");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogSizeMn", b =>
                {
                    b.Property<int>("SizeMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeMnId");

                    b.ToTable("MudLogSizeMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogSizeMx", b =>
                {
                    b.Property<int>("SizeMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeMxId");

                    b.ToTable("MudLogSizeMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogStainPc", b =>
                {
                    b.Property<int>("StainPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StainPcId");

                    b.ToTable("MudLogStainPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogStartMd", b =>
                {
                    b.Property<int>("StartMdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartMdId");

                    b.ToTable("MudLogStartMd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogTqAv", b =>
                {
                    b.Property<int>("TqAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TqAvId");

                    b.ToTable("MudLogTqAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogTvdBase", b =>
                {
                    b.Property<int>("TvdBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdBaseId");

                    b.ToTable("MudLogTvdBase");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogTvdTop", b =>
                {
                    b.Property<int>("TvdTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdTopId");

                    b.ToTable("MudLogTvdTop");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogWobAv", b =>
                {
                    b.Property<int>("WobAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WobAvId");

                    b.ToTable("MudLogWobAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogWtMudAv", b =>
                {
                    b.Property<int>("WtMudAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WtMudAvId");

                    b.ToTable("MudLogWtMudAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogWtMudIn", b =>
                {
                    b.Property<int>("WtMudInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WtMudInId");

                    b.ToTable("MudLogWtMudIn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogWtMudOut", b =>
                {
                    b.Property<int>("WtMudOutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WtMudOutId");

                    b.ToTable("MudLogWtMudOut");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Name", b =>
                {
                    b.Property<string>("CodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EllipsoidId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GeodeticDatumId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodeSpace");

                    b.HasIndex("EllipsoidId");

                    b.HasIndex("GeodeticDatumId");

                    b.ToTable("CoordinateReferenceSystemName");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.NameCRS", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NamingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("CoordinateReferenceSystemNameCRS");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.NearWellboreFriction", b =>
                {
                    b.Property<int>("NearWellboreFrictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NearWellboreFrictionId");

                    b.ToTable("StimJobNearWellboreFrictions");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.NetPayFluidCompressibility", b =>
                {
                    b.Property<int>("NetPayFluidCompressibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NetPayFluidCompressibilityId");

                    b.ToTable("StimJobNetPayFluidCompressibilitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.NetPayFluidViscosity", b =>
                {
                    b.Property<int>("NetPayFluidViscosityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NetPayFluidViscosityId");

                    b.ToTable("StimJobNetPayFluidViscositys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.NetPayFormationPermeability", b =>
                {
                    b.Property<int>("NetPayFormationPermeabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NetPayFormationPermeabilityId");

                    b.ToTable("StimJobNetPayFormationPermeabilitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.NetPayFormationPorosity", b =>
                {
                    b.Property<int>("NetPayFormationPorosityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NetPayFormationPorosityId");

                    b.ToTable("StimJobNetPayFormationPorositys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.NetPayPorePres", b =>
                {
                    b.Property<int>("NetPayPorePresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NetPayPorePresId");

                    b.ToTable("StimJobNetPayPorePress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.NetPayThickness", b =>
                {
                    b.Property<int>("NetPayThicknessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NetPayThicknessId");

                    b.ToTable("StimJobNetPayThicknesss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.NetPres", b =>
                {
                    b.Property<int>("NetPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NetPresId");

                    b.ToTable("StimJobNetPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Nomenclature", b =>
                {
                    b.Property<int>("NomenclatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConstantId")
                        .HasColumnType("int");

                    b.HasKey("NomenclatureId");

                    b.HasIndex("ConstantId");

                    b.ToTable("ToolErrorTermSetNomenclatures");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroup", b =>
                {
                    b.Property<int>("ObjectGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommonDataObjectGroupCommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("CustomData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberObjectId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParamId")
                        .HasColumnType("int");

                    b.Property<string>("Sequence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ObjectGroupId");

                    b.HasIndex("CommonDataObjectGroupCommonDataId");

                    b.HasIndex("MemberObjectId");

                    b.HasIndex("ParamId");

                    b.ToTable("ObjectGroups");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupAcquisitionTimeZone", b =>
                {
                    b.Property<int>("AcquisitionTimeZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcquisitionTimeZoneId");

                    b.ToTable("ObjectGroupAcquisitionTimeZones");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupCommonData", b =>
                {
                    b.Property<int>("ObjectGroupCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcquisitionTimeZoneId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimLastChange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DefaultDatumId")
                        .HasColumnType("int");

                    b.Property<string>("ExtensionAny")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExtensionNameValueId")
                        .HasColumnType("int");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateGroupOnly")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ObjectGroupCommonDataId");

                    b.HasIndex("AcquisitionTimeZoneId");

                    b.HasIndex("DefaultDatumId");

                    b.HasIndex("ExtensionNameValueId");

                    b.ToTable("ObjectGroupCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupDefaultDatum", b =>
                {
                    b.Property<int>("DefaultDatumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DefaultDatumId");

                    b.ToTable("ObjectGroupDefaultDatum");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupExtensionNameValue", b =>
                {
                    b.Property<int>("ExtensionNameValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<string>("MeasureClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ValueId")
                        .HasColumnType("int");

                    b.HasKey("ExtensionNameValueId");

                    b.HasIndex("MdId");

                    b.HasIndex("ValueId");

                    b.ToTable("ObjectGroupExtensionNameValues");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupMd", b =>
                {
                    b.Property<int>("MdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Datum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdId");

                    b.ToTable("ObjectGroupMd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupMemberObject", b =>
                {
                    b.Property<int>("MemberObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ExtensionNameValueId")
                        .HasColumnType("int");

                    b.Property<string>("IndexType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MnemonicList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ObjectReferenceId")
                        .HasColumnType("int");

                    b.Property<int?>("ParamId")
                        .HasColumnType("int");

                    b.Property<string>("RangeDateTimeMax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RangeDateTimeMin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RangeMaxId")
                        .HasColumnType("int");

                    b.Property<int?>("RangeMinId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceDateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferenceDepthId")
                        .HasColumnType("int");

                    b.Property<int?>("Sequence1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Sequence2Id")
                        .HasColumnType("int");

                    b.Property<int?>("Sequence3Id")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberObjectId");

                    b.HasIndex("ExtensionNameValueId");

                    b.HasIndex("ObjectReferenceId");

                    b.HasIndex("ParamId");

                    b.HasIndex("RangeMaxId");

                    b.HasIndex("RangeMinId");

                    b.HasIndex("ReferenceDepthId");

                    b.HasIndex("Sequence1Id");

                    b.HasIndex("Sequence2Id");

                    b.HasIndex("Sequence3Id");

                    b.ToTable("ObjectGroupMemberObjects");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupObjectReference", b =>
                {
                    b.Property<int>("ObjectReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Object")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ObjectReferenceId");

                    b.ToTable("ObjectGroupObjectReference");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupParam", b =>
                {
                    b.Property<int>("ParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParamId");

                    b.ToTable("ObjectGroupParam");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupRangeMax", b =>
                {
                    b.Property<int>("RangeMaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RangeMaxId");

                    b.ToTable("ObjectGroupRangeMaxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupRangeMin", b =>
                {
                    b.Property<int>("RangeMinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RangeMinId");

                    b.ToTable("ObjectGroupRangeMins");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupReferenceDepth", b =>
                {
                    b.Property<int>("ReferenceDepthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Datum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReferenceDepthId");

                    b.ToTable("ObjectGroupReferenceDepths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupSequence1", b =>
                {
                    b.Property<int>("Sequence1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sequence1Id");

                    b.ToTable("ObjectGroupSequence1s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupSequence2", b =>
                {
                    b.Property<int>("Sequence2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sequence2Id");

                    b.ToTable("ObjectGroupSequence2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupSequence3", b =>
                {
                    b.Property<int>("Sequence3Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sequence3Id");

                    b.ToTable("ObjectGroupSequence3s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupValue", b =>
                {
                    b.Property<int>("ValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ValueId");

                    b.ToTable("ObjectGroupValue");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OilVol", b =>
                {
                    b.Property<int>("OilVolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OilVolId");

                    b.ToTable("StimJobOilVols");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OilVolume", b =>
                {
                    b.Property<int>("OilVolumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OilVolumeId");

                    b.ToTable("StimJobOilVolumes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpenHoleDiameter", b =>
                {
                    b.Property<int>("OpenHoleDiameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OpenHoleDiameterId");

                    b.ToTable("StimJobOpenHoleDiameters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OperatingCondition", b =>
                {
                    b.Property<int>("OperatingConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MaxId")
                        .HasColumnType("int");

                    b.Property<int?>("MinId")
                        .HasColumnType("int");

                    b.Property<string>("Parameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperatingConditionId");

                    b.HasIndex("MaxId");

                    b.HasIndex("MinId");

                    b.ToTable("ToolErrorModelOperatingConditions");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OperatingInterval", b =>
                {
                    b.Property<int>("OperatingIntervalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EndId")
                        .HasColumnType("int");

                    b.Property<string>("Mode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpeedId")
                        .HasColumnType("int");

                    b.Property<int?>("StartId")
                        .HasColumnType("int");

                    b.Property<int?>("ToolErrorModelId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperatingIntervalId");

                    b.HasIndex("EndId");

                    b.HasIndex("SpeedId");

                    b.HasIndex("StartId");

                    b.HasIndex("ToolErrorModelId");

                    b.ToTable("ToolErrorModelOperatingIntervals");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OperationMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdentifierCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MethodFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceDimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetDimensions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentifierCodeSpace");

                    b.HasIndex("NameCodeSpace");

                    b.ToTable("CoordinateReferenceSystemOperationMethod");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OperationParameter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdentifierCodeSpace");

                    b.HasIndex("NameCodeSpace");

                    b.ToTable("CoordinateReferenceSystemOperationParameter");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReport", b =>
                {
                    b.Property<int>("OpsReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BulkId")
                        .HasColumnType("int");

                    b.Property<int?>("CommonDataOpsReportsCommonDataid")
                        .HasColumnType("int");

                    b.Property<string>("ConditionHole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CostDayId")
                        .HasColumnType("int");

                    b.Property<int?>("CostDayMudId")
                        .HasColumnType("int");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiaCsgLastId")
                        .HasColumnType("int");

                    b.Property<int?>("DiaHoleId")
                        .HasColumnType("int");

                    b.Property<int?>("DistDrillId")
                        .HasColumnType("int");

                    b.Property<int?>("DistDrillRotId")
                        .HasColumnType("int");

                    b.Property<int?>("DistDrillSlidId")
                        .HasColumnType("int");

                    b.Property<int?>("DistHoldId")
                        .HasColumnType("int");

                    b.Property<int?>("DistReamId")
                        .HasColumnType("int");

                    b.Property<int?>("DistSteeringId")
                        .HasColumnType("int");

                    b.Property<string>("DrillingParamsUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ETimCircId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimDrillId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimDrillRotId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimDrillSlidId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimHoldId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimLocId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimReamId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimSpudId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimStartId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimSteeringId")
                        .HasColumnType("int");

                    b.Property<string>("Engineer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FluidUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Forecast24Hr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Geologist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HseId")
                        .HasColumnType("int");

                    b.Property<string>("Lithology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaaspId")
                        .HasColumnType("int");

                    b.Property<int?>("MdCsgLastId")
                        .HasColumnType("int");

                    b.Property<int?>("MdPlannedId")
                        .HasColumnType("int");

                    b.Property<int?>("MdReportId")
                        .HasColumnType("int");

                    b.Property<int?>("MudInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("MudVolumeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFormation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumAFE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumContract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumPob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PresKickTolId")
                        .HasColumnType("int");

                    b.Property<int?>("PresLotEmwId")
                        .HasColumnType("int");

                    b.Property<int?>("PumpOpId")
                        .HasColumnType("int");

                    b.Property<int?>("RigOpsReportRigId")
                        .HasColumnType("int");

                    b.Property<int?>("RigResponseId")
                        .HasColumnType("int");

                    b.Property<int?>("RopAvId")
                        .HasColumnType("int");

                    b.Property<int?>("RopCurrentId")
                        .HasColumnType("int");

                    b.Property<int?>("ShakerOpId")
                        .HasColumnType("int");

                    b.Property<string>("StatusCurrent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sum24Hr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supervisor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupportCraftId")
                        .HasColumnType("int");

                    b.Property<string>("TrajectoryStationUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TubularId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdCsgLastId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdLotId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdReportId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VolKickTolId")
                        .HasColumnType("int");

                    b.Property<int?>("WeatherId")
                        .HasColumnType("int");

                    b.HasKey("OpsReportId");

                    b.HasIndex("ActivityUid");

                    b.HasIndex("BulkId");

                    b.HasIndex("CommonDataOpsReportsCommonDataid");

                    b.HasIndex("CostDayId");

                    b.HasIndex("CostDayMudId");

                    b.HasIndex("DiaCsgLastId");

                    b.HasIndex("DiaHoleId");

                    b.HasIndex("DistDrillId");

                    b.HasIndex("DistDrillRotId");

                    b.HasIndex("DistDrillSlidId");

                    b.HasIndex("DistHoldId");

                    b.HasIndex("DistReamId");

                    b.HasIndex("DistSteeringId");

                    b.HasIndex("DrillingParamsUid");

                    b.HasIndex("ETimCircId");

                    b.HasIndex("ETimDrillId");

                    b.HasIndex("ETimDrillRotId");

                    b.HasIndex("ETimDrillSlidId");

                    b.HasIndex("ETimHoldId");

                    b.HasIndex("ETimLocId");

                    b.HasIndex("ETimReamId");

                    b.HasIndex("ETimSpudId");

                    b.HasIndex("ETimStartId");

                    b.HasIndex("ETimSteeringId");

                    b.HasIndex("FluidUid");

                    b.HasIndex("HseId");

                    b.HasIndex("MaaspId");

                    b.HasIndex("MdCsgLastId");

                    b.HasIndex("MdPlannedId");

                    b.HasIndex("MdReportId");

                    b.HasIndex("MudInventoryId");

                    b.HasIndex("MudVolumeId");

                    b.HasIndex("PresKickTolId");

                    b.HasIndex("PresLotEmwId");

                    b.HasIndex("PumpOpId");

                    b.HasIndex("RigOpsReportRigId");

                    b.HasIndex("RigResponseId");

                    b.HasIndex("RopAvId");

                    b.HasIndex("RopCurrentId");

                    b.HasIndex("ShakerOpId");

                    b.HasIndex("SupportCraftId");

                    b.HasIndex("TrajectoryStationUid");

                    b.HasIndex("TubularId");

                    b.HasIndex("TvdCsgLastId");

                    b.HasIndex("TvdLotId");

                    b.HasIndex("TvdReportId");

                    b.HasIndex("VolKickTolId");

                    b.HasIndex("WeatherId");

                    b.ToTable("OpsReports");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportActivity", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailActivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DurationId")
                        .HasColumnType("int");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdBitEndId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBitStartId")
                        .HasColumnType("int");

                    b.Property<int?>("MdHoleEndId")
                        .HasColumnType("int");

                    b.Property<int?>("MdHoleStartId")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Optimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Productive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdHoleEndId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdHoleStartId")
                        .HasColumnType("int");

                    b.Property<string>("TypeActivityClass")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("DurationId");

                    b.HasIndex("MdBitEndId");

                    b.HasIndex("MdBitStartId");

                    b.HasIndex("MdHoleEndId");

                    b.HasIndex("MdHoleStartId");

                    b.HasIndex("TvdHoleEndId");

                    b.HasIndex("TvdHoleStartId");

                    b.ToTable("OpsReportActivitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAlkalinityP1", b =>
                {
                    b.Property<int>("AlkalinityP1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlkalinityP1Id");

                    b.ToTable("OpsReportAlkalinityP1s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAlkalinityP2", b =>
                {
                    b.Property<int>("AlkalinityP2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlkalinityP2Id");

                    b.ToTable("OpsReportAlkalinityP2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAmtPrecip", b =>
                {
                    b.Property<int>("AmtPrecipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AmtPrecipId");

                    b.ToTable("OpsReportAmtPrecips");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAnchorAngle", b =>
                {
                    b.Property<int>("AnchorAngleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpsReportRigResponseRigResponseId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnchorAngleId");

                    b.HasIndex("OpsReportRigResponseRigResponseId");

                    b.ToTable("OpsReportAnchorAngles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAnchorTension", b =>
                {
                    b.Property<int>("AnchorTensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpsReportRigResponseRigResponseId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnchorTensionId");

                    b.HasIndex("OpsReportRigResponseRigResponseId");

                    b.ToTable("OpsReportAnchorTensions");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAzi", b =>
                {
                    b.Property<int>("AziId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AziId");

                    b.ToTable("OpsReportAzis");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAziBottom", b =>
                {
                    b.Property<int>("AziBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AziBottomId");

                    b.ToTable("OpsReportAziBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAziCurrentSea", b =>
                {
                    b.Property<int>("AziCurrentSeaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AziCurrentSeaId");

                    b.ToTable("OpsReportAziCurrentSeas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAziTop", b =>
                {
                    b.Property<int>("AziTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AziTopId");

                    b.ToTable("OpsReportAziTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAziWave", b =>
                {
                    b.Property<int>("AziWaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AziWaveId");

                    b.ToTable("OpsReportAziWaves");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAziWind", b =>
                {
                    b.Property<int>("AziWindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AziWindId");

                    b.ToTable("OpsReportAziWinds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportBallJointAngle", b =>
                {
                    b.Property<int>("BallJointAngleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BallJointAngleId");

                    b.ToTable("OpsReportBallJointAngles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportBallJointDirection", b =>
                {
                    b.Property<int>("BallJointDirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BallJointDirectionId");

                    b.ToTable("OpsReportBallJointDirections");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportBaritePc", b =>
                {
                    b.Property<int>("BaritePcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BaritePcId");

                    b.ToTable("OpsReportBaritePcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportBarometricPressure", b =>
                {
                    b.Property<int>("BarometricPressureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BarometricPressureId");

                    b.ToTable("OpsReportBarometricPressures");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportBiasE", b =>
                {
                    b.Property<int>("BiasEId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BiasEId");

                    b.ToTable("OpsReportBiasEs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportBiasN", b =>
                {
                    b.Property<int>("BiasNId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BiasNId");

                    b.ToTable("OpsReportBiasNs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportBiasVert", b =>
                {
                    b.Property<int>("BiasVertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BiasVertId");

                    b.ToTable("OpsReportBiasVerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportBrinePc", b =>
                {
                    b.Property<int>("BrinePcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrinePcId");

                    b.ToTable("OpsReportBrinePcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportBulk", b =>
                {
                    b.Property<int>("BulkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CostItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemVolPerUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PricePerUnitId")
                        .HasColumnType("int");

                    b.Property<string>("QtyAdjustment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QtyOnLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QtyReceived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QtyReturned")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QtyStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QtyUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BulkId");

                    b.HasIndex("CostItemId");

                    b.HasIndex("ItemVolPerUnitId");

                    b.HasIndex("PricePerUnitId");

                    b.ToTable("OpsReportBulks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCTimCirc", b =>
                {
                    b.Property<int>("CTimCircId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CTimCircId");

                    b.ToTable("OpsReportCTimCircs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCTimDrillRot", b =>
                {
                    b.Property<int>("CTimDrillRotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CTimDrillRotId");

                    b.ToTable("OpsReportCTimDrillRots");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCTimDrillSlid", b =>
                {
                    b.Property<int>("CTimDrillSlidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CTimDrillSlidId");

                    b.ToTable("OpsReportCTimDrillSlids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCTimHold", b =>
                {
                    b.Property<int>("CTimHoldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CTimHoldId");

                    b.ToTable("OpsReportCTimHolds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCTimReam", b =>
                {
                    b.Property<int>("CTimReamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CTimReamId");

                    b.ToTable("OpsReportCTimReams");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCTimSteering", b =>
                {
                    b.Property<int>("CTimSteeringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CTimSteeringId");

                    b.ToTable("OpsReportCTimSteerings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCalcium", b =>
                {
                    b.Property<int>("MagnesiumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagnesiumId");

                    b.ToTable("OpsReportCalciums");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCalciumChloride", b =>
                {
                    b.Property<int>("CalciumChlorideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalciumChlorideId");

                    b.ToTable("OpsReportCalciumChlorides");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCeilingCloud", b =>
                {
                    b.Property<int>("CeilingCloudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CeilingCloudId");

                    b.ToTable("OpsReportCeilingClouds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportChloride", b =>
                {
                    b.Property<int>("ChlorideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChlorideId");

                    b.ToTable("OpsReportChlorides");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCorUsed", b =>
                {
                    b.Property<int>("CorUsedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DirSensorOffsetId")
                        .HasColumnType("int");

                    b.Property<int?>("GravAxialAccelCorId")
                        .HasColumnType("int");

                    b.Property<int?>("GravTran1AccelCorId")
                        .HasColumnType("int");

                    b.Property<int?>("GravTran2AccelCorId")
                        .HasColumnType("int");

                    b.Property<int?>("MagAxialDrlstrCorId")
                        .HasColumnType("int");

                    b.Property<int?>("MagTran1DrlstrCorId")
                        .HasColumnType("int");

                    b.Property<int?>("MagTran2DrlstrCorId")
                        .HasColumnType("int");

                    b.Property<int?>("SagAziCorId")
                        .HasColumnType("int");

                    b.Property<int?>("SagIncCorId")
                        .HasColumnType("int");

                    b.Property<int?>("StnGridCorUsedId")
                        .HasColumnType("int");

                    b.Property<int?>("StnMagDeclUsedId")
                        .HasColumnType("int");

                    b.HasKey("CorUsedId");

                    b.HasIndex("DirSensorOffsetId");

                    b.HasIndex("GravAxialAccelCorId");

                    b.HasIndex("GravTran1AccelCorId");

                    b.HasIndex("GravTran2AccelCorId");

                    b.HasIndex("MagAxialDrlstrCorId");

                    b.HasIndex("MagTran1DrlstrCorId");

                    b.HasIndex("MagTran2DrlstrCorId");

                    b.HasIndex("SagAziCorId");

                    b.HasIndex("SagIncCorId");

                    b.HasIndex("StnGridCorUsedId");

                    b.HasIndex("StnMagDeclUsedId");

                    b.ToTable("OpsReportCorUseds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCostAmount", b =>
                {
                    b.Property<int>("CostAmountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CostAmountId");

                    b.ToTable("OpsReportCostAmounts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCostDay", b =>
                {
                    b.Property<int>("CostDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CostDayId");

                    b.ToTable("OpsReportCostDays");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCostDayMud", b =>
                {
                    b.Property<int>("CostDayMudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CostDayMudId");

                    b.ToTable("OpsReportCostDayMuds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCostItem", b =>
                {
                    b.Property<int>("CostItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CostItemId");

                    b.ToTable("OpsReportCostItems");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCostLostGross", b =>
                {
                    b.Property<int>("CostLostGrossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CostLostGrossId");

                    b.ToTable("OpsReportCostLostGrosss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCostPerItem", b =>
                {
                    b.Property<int>("CostPerItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CostPerItemId");

                    b.ToTable("OpsReportCostPerItems");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCurrentSea", b =>
                {
                    b.Property<int>("CurrentSeaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrentSeaId");

                    b.ToTable("OpsReportCurrentSeas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCutPoint", b =>
                {
                    b.Property<int>("CutPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CutPointId");

                    b.ToTable("OpsReportCutPoints");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDayCost", b =>
                {
                    b.Property<int>("DayCostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CostAmountId")
                        .HasColumnType("int");

                    b.Property<string>("CostClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CostPerItemId")
                        .HasColumnType("int");

                    b.Property<string>("CostSubCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estimated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsCarryOver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsRental")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemKind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameVendor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumAFE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumPO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumSerial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTicket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumVendor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpsReportId")
                        .HasColumnType("int");

                    b.Property<string>("Pool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QtyItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DayCostId");

                    b.HasIndex("CostAmountId");

                    b.HasIndex("CostPerItemId");

                    b.HasIndex("OpsReportId");

                    b.ToTable("OpsReportDayCosts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDaysIncFree", b =>
                {
                    b.Property<int>("DaysIncFreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DaysIncFreeId");

                    b.ToTable("OpsReportDaysIncFrees");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDensFluid", b =>
                {
                    b.Property<int>("DensFluidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensFluidId");

                    b.ToTable("OpsReportDensFluids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDensity", b =>
                {
                    b.Property<int>("DensityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DensityId");

                    b.ToTable("OpsReportDensitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDiaCsgLast", b =>
                {
                    b.Property<int>("DiaCsgLastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaCsgLastId");

                    b.ToTable("OpsReportDiaCsgLasts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDiaHole", b =>
                {
                    b.Property<int>("DiaHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaHoleId");

                    b.ToTable("OpsReportDiaHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDipAngleUncert", b =>
                {
                    b.Property<int>("DipAngleUncertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DipAngleUncertId");

                    b.ToTable("OpsReportDipAngleUncerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDirSensorOffset", b =>
                {
                    b.Property<int>("DirSensorOffsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DirSensorOffsetId");

                    b.ToTable("OpsReportDirSensorOffsets");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDispEw", b =>
                {
                    b.Property<int>("DispEwId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispEwId");

                    b.ToTable("OpsReportDispEws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDispNs", b =>
                {
                    b.Property<int>("DispNsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispNsId");

                    b.ToTable("OpsReportDispNss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDispRig", b =>
                {
                    b.Property<int>("DispRigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispRigId");

                    b.ToTable("OpsReportDispRigs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDistDrill", b =>
                {
                    b.Property<int>("DistDrillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistDrillId");

                    b.ToTable("OpsReportDistDrills");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDistDrillRot", b =>
                {
                    b.Property<int>("DistDrillRotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistDrillRotId");

                    b.ToTable("OpsReportDistDrillRots");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDistDrillSlid", b =>
                {
                    b.Property<int>("DistDrillSlidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistDrillSlidId");

                    b.ToTable("OpsReportDistDrillSlids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDistHold", b =>
                {
                    b.Property<int>("DistHoldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistHoldId");

                    b.ToTable("OpsReportDistHolds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDistReam", b =>
                {
                    b.Property<int>("DistReamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistReamId");

                    b.ToTable("OpsReportDistReams");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDistSteering", b =>
                {
                    b.Property<int>("DistSteeringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistSteeringId");

                    b.ToTable("OpsReportDistSteerings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDls", b =>
                {
                    b.Property<int>("DlsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DlsId");

                    b.ToTable("OpsReportDlss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDrillingParam", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AziBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("AziTopId")
                        .HasColumnType("int");

                    b.Property<int?>("CTimCircId")
                        .HasColumnType("int");

                    b.Property<int?>("CTimDrillRotId")
                        .HasColumnType("int");

                    b.Property<int?>("CTimDrillSlidId")
                        .HasColumnType("int");

                    b.Property<int?>("CTimHoldId")
                        .HasColumnType("int");

                    b.Property<int?>("CTimReamId")
                        .HasColumnType("int");

                    b.Property<int?>("CTimSteeringId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistDrillRotId")
                        .HasColumnType("int");

                    b.Property<int?>("DistDrillSlidId")
                        .HasColumnType("int");

                    b.Property<int?>("DistHoldId")
                        .HasColumnType("int");

                    b.Property<int?>("DistReamId")
                        .HasColumnType("int");

                    b.Property<int?>("DistSteeringId")
                        .HasColumnType("int");

                    b.Property<int?>("ETimOpBitId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowrateBitId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowratePumpId")
                        .HasColumnType("int");

                    b.Property<int?>("HkldDnId")
                        .HasColumnType("int");

                    b.Property<int?>("HkldRotId")
                        .HasColumnType("int");

                    b.Property<int?>("HkldUpId")
                        .HasColumnType("int");

                    b.Property<int?>("InclMnId")
                        .HasColumnType("int");

                    b.Property<int?>("InclMxId")
                        .HasColumnType("int");

                    b.Property<int?>("InclStartId")
                        .HasColumnType("int");

                    b.Property<int?>("InclStopId")
                        .HasColumnType("int");

                    b.Property<int?>("MdHoleStartId")
                        .HasColumnType("int");

                    b.Property<int?>("MdHoleStopId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectiveBha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OverPullId")
                        .HasColumnType("int");

                    b.Property<int?>("PowBitId")
                        .HasColumnType("int");

                    b.Property<int?>("PresDropBitId")
                        .HasColumnType("int");

                    b.Property<int?>("PresPumpAvId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonTrip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RopAvId")
                        .HasColumnType("int");

                    b.Property<int?>("RopMnId")
                        .HasColumnType("int");

                    b.Property<int?>("RopMxId")
                        .HasColumnType("int");

                    b.Property<int?>("RpmAvDhId")
                        .HasColumnType("int");

                    b.Property<int?>("RpmAvId")
                        .HasColumnType("int");

                    b.Property<int?>("RpmMnId")
                        .HasColumnType("int");

                    b.Property<int?>("RpmMxId")
                        .HasColumnType("int");

                    b.Property<int?>("SlackOffId")
                        .HasColumnType("int");

                    b.Property<int?>("TempMudDhMxId")
                        .HasColumnType("int");

                    b.Property<int?>("TqDhAvId")
                        .HasColumnType("int");

                    b.Property<int?>("TqOffBotAvId")
                        .HasColumnType("int");

                    b.Property<int?>("TqOnBotAvId")
                        .HasColumnType("int");

                    b.Property<int?>("TqOnBotMnId")
                        .HasColumnType("int");

                    b.Property<int?>("TqOnBotMxId")
                        .HasColumnType("int");

                    b.Property<string>("TubularUidRef")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("VelNozzleAvId")
                        .HasColumnType("int");

                    b.Property<int?>("WobAvDhId")
                        .HasColumnType("int");

                    b.Property<int?>("WobAvId")
                        .HasColumnType("int");

                    b.Property<int?>("WobMnId")
                        .HasColumnType("int");

                    b.Property<int?>("WobMxId")
                        .HasColumnType("int");

                    b.Property<int?>("WtAboveJarId")
                        .HasColumnType("int");

                    b.Property<int?>("WtBelowJarId")
                        .HasColumnType("int");

                    b.Property<string>("WtMudUom")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Uid");

                    b.HasIndex("AziBottomId");

                    b.HasIndex("AziTopId");

                    b.HasIndex("CTimCircId");

                    b.HasIndex("CTimDrillRotId");

                    b.HasIndex("CTimDrillSlidId");

                    b.HasIndex("CTimHoldId");

                    b.HasIndex("CTimReamId");

                    b.HasIndex("CTimSteeringId");

                    b.HasIndex("DistDrillRotId");

                    b.HasIndex("DistDrillSlidId");

                    b.HasIndex("DistHoldId");

                    b.HasIndex("DistReamId");

                    b.HasIndex("DistSteeringId");

                    b.HasIndex("ETimOpBitId");

                    b.HasIndex("FlowrateBitId");

                    b.HasIndex("FlowratePumpId");

                    b.HasIndex("HkldDnId");

                    b.HasIndex("HkldRotId");

                    b.HasIndex("HkldUpId");

                    b.HasIndex("InclMnId");

                    b.HasIndex("InclMxId");

                    b.HasIndex("InclStartId");

                    b.HasIndex("InclStopId");

                    b.HasIndex("MdHoleStartId");

                    b.HasIndex("MdHoleStopId");

                    b.HasIndex("OverPullId");

                    b.HasIndex("PowBitId");

                    b.HasIndex("PresDropBitId");

                    b.HasIndex("PresPumpAvId");

                    b.HasIndex("RopAvId");

                    b.HasIndex("RopMnId");

                    b.HasIndex("RopMxId");

                    b.HasIndex("RpmAvDhId");

                    b.HasIndex("RpmAvId");

                    b.HasIndex("RpmMnId");

                    b.HasIndex("RpmMxId");

                    b.HasIndex("SlackOffId");

                    b.HasIndex("TempMudDhMxId");

                    b.HasIndex("TqDhAvId");

                    b.HasIndex("TqOffBotAvId");

                    b.HasIndex("TqOnBotAvId");

                    b.HasIndex("TqOnBotMnId");

                    b.HasIndex("TqOnBotMxId");

                    b.HasIndex("TubularUidRef");

                    b.HasIndex("VelNozzleAvId");

                    b.HasIndex("WobAvDhId");

                    b.HasIndex("WobAvId");

                    b.HasIndex("WobMnId");

                    b.HasIndex("WobMxId");

                    b.HasIndex("WtAboveJarId");

                    b.HasIndex("WtBelowJarId");

                    b.HasIndex("WtMudUom");

                    b.ToTable("OpsReportDrillingParams");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDuration", b =>
                {
                    b.Property<int>("DurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DurationId");

                    b.ToTable("OpsReportDurations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportETimCirc", b =>
                {
                    b.Property<int>("ETimCircId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimCircId");

                    b.ToTable("OpsReportETimCircs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportETimDrill", b =>
                {
                    b.Property<int>("ETimDrillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimDrillId");

                    b.ToTable("OpsReportETimDrills");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportETimDrillRot", b =>
                {
                    b.Property<int>("ETimDrillRotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimDrillRotId");

                    b.ToTable("OpsReportETimDrillRots");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportETimDrillSlid", b =>
                {
                    b.Property<int>("ETimDrillSlidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimDrillSlidId");

                    b.ToTable("OpsReportETimDrillSlids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportETimHold", b =>
                {
                    b.Property<int>("ETimHoldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimHoldId");

                    b.ToTable("OpsReportETimHolds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportETimLoc", b =>
                {
                    b.Property<int>("ETimLocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimLocId");

                    b.ToTable("OpsReportETimLocs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportETimLostGross", b =>
                {
                    b.Property<int>("ETimLostGrossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimLostGrossId");

                    b.ToTable("OpsReportETimLostGrosss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportETimOpBit", b =>
                {
                    b.Property<int>("ETimOpBitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimOpBitId");

                    b.ToTable("OpsReportETimOpBits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportETimReam", b =>
                {
                    b.Property<int>("ETimReamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimReamId");

                    b.ToTable("OpsReportETimReams");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportETimSpud", b =>
                {
                    b.Property<int>("ETimSpudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimSpudId");

                    b.ToTable("OpsReportETimSpuds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportETimStart", b =>
                {
                    b.Property<int>("ETimStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimStartId");

                    b.ToTable("OpsReportETimStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportETimSteering", b =>
                {
                    b.Property<int>("ETimSteeringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETimSteeringId");

                    b.ToTable("OpsReportETimSteerings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportElectStab", b =>
                {
                    b.Property<int>("ElectStabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ElectStabId");

                    b.ToTable("OpsReportElectStabs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportFilterCakeHthp", b =>
                {
                    b.Property<int>("FilterCakeHthpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilterCakeHthpId");

                    b.ToTable("OpsReportFilterCakeHthps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportFilterCakeLtlp", b =>
                {
                    b.Property<int>("FilterCakeLtlpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilterCakeLtlpId");

                    b.ToTable("OpsReportFilterCakeLtlps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportFiltrateHthp", b =>
                {
                    b.Property<int>("FiltrateHthpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FiltrateHthpId");

                    b.ToTable("OpsReportFiltrateHthps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportFiltrateLtlp", b =>
                {
                    b.Property<int>("FiltrateLtlpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FiltrateLtlpId");

                    b.ToTable("OpsReportFiltrateLtlps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportFlowrateBit", b =>
                {
                    b.Property<int>("FlowrateBitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowrateBitId");

                    b.ToTable("OpsReportFlowrateBits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportFlowratePump", b =>
                {
                    b.Property<int>("FlowratePumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowratePumpId");

                    b.ToTable("OpsReportFlowratePumps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportFluid", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AlkalinityP1Id")
                        .HasColumnType("int");

                    b.Property<int?>("AlkalinityP2Id")
                        .HasColumnType("int");

                    b.Property<string>("Asg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaritePcId")
                        .HasColumnType("int");

                    b.Property<int?>("BrinePcId")
                        .HasColumnType("int");

                    b.Property<int?>("CalciumChlorideId")
                        .HasColumnType("int");

                    b.Property<int?>("CalciumMagnesiumId")
                        .HasColumnType("int");

                    b.Property<int?>("ChlorideId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DensityId")
                        .HasColumnType("int");

                    b.Property<int?>("ElectStabId")
                        .HasColumnType("int");

                    b.Property<string>("Engineer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FilterCakeHthpId")
                        .HasColumnType("int");

                    b.Property<int?>("FilterCakeLtlpId")
                        .HasColumnType("int");

                    b.Property<int?>("FiltrateHthpId")
                        .HasColumnType("int");

                    b.Property<int?>("FiltrateLtlpId")
                        .HasColumnType("int");

                    b.Property<int?>("Gel10MinId")
                        .HasColumnType("int");

                    b.Property<int?>("Gel10SecId")
                        .HasColumnType("int");

                    b.Property<int?>("Gel30MinId")
                        .HasColumnType("int");

                    b.Property<int?>("HardnessCaId")
                        .HasColumnType("int");

                    b.Property<int?>("LcmId")
                        .HasColumnType("int");

                    b.Property<int?>("LimeId")
                        .HasColumnType("int");

                    b.Property<string>("LocationSample")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MagnesiumId")
                        .HasColumnType("int");

                    b.Property<int?>("MbtId")
                        .HasColumnType("int");

                    b.Property<int?>("MfId")
                        .HasColumnType("int");

                    b.Property<int?>("OilCtgId")
                        .HasColumnType("int");

                    b.Property<int?>("OilPcId")
                        .HasColumnType("int");

                    b.Property<string>("Ph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PmFiltrateId")
                        .HasColumnType("int");

                    b.Property<int?>("PmId")
                        .HasColumnType("int");

                    b.Property<string>("PolyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PolymerId")
                        .HasColumnType("int");

                    b.Property<int?>("PresHthpId")
                        .HasColumnType("int");

                    b.Property<int?>("PvReportPvId")
                        .HasColumnType("int");

                    b.Property<int?>("SandPcId")
                        .HasColumnType("int");

                    b.Property<int?>("SolCorPcId")
                        .HasColumnType("int");

                    b.Property<int?>("SolidsCalcPcId")
                        .HasColumnType("int");

                    b.Property<int?>("SolidsHiGravPcId")
                        .HasColumnType("int");

                    b.Property<int?>("SolidsLowGravPcId")
                        .HasColumnType("int");

                    b.Property<int?>("SolidsPcId")
                        .HasColumnType("int");

                    b.Property<int?>("SulfideId")
                        .HasColumnType("int");

                    b.Property<int?>("TempHthpId")
                        .HasColumnType("int");

                    b.Property<int?>("TempPhId")
                        .HasColumnType("int");

                    b.Property<int?>("TempVisId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisFunnelId")
                        .HasColumnType("int");

                    b.Property<int?>("WaterPcId")
                        .HasColumnType("int");

                    b.Property<int?>("YpId")
                        .HasColumnType("int");

                    b.HasKey("Uid");

                    b.HasIndex("AlkalinityP1Id");

                    b.HasIndex("AlkalinityP2Id");

                    b.HasIndex("BaritePcId");

                    b.HasIndex("BrinePcId");

                    b.HasIndex("CalciumChlorideId");

                    b.HasIndex("CalciumMagnesiumId");

                    b.HasIndex("ChlorideId");

                    b.HasIndex("DensityId");

                    b.HasIndex("ElectStabId");

                    b.HasIndex("FilterCakeHthpId");

                    b.HasIndex("FilterCakeLtlpId");

                    b.HasIndex("FiltrateHthpId");

                    b.HasIndex("FiltrateLtlpId");

                    b.HasIndex("Gel10MinId");

                    b.HasIndex("Gel10SecId");

                    b.HasIndex("Gel30MinId");

                    b.HasIndex("HardnessCaId");

                    b.HasIndex("LcmId");

                    b.HasIndex("LimeId");

                    b.HasIndex("MagnesiumId");

                    b.HasIndex("MbtId");

                    b.HasIndex("MfId");

                    b.HasIndex("OilCtgId");

                    b.HasIndex("OilPcId");

                    b.HasIndex("PmFiltrateId");

                    b.HasIndex("PmId");

                    b.HasIndex("PolymerId");

                    b.HasIndex("PresHthpId");

                    b.HasIndex("PvReportPvId");

                    b.HasIndex("SandPcId");

                    b.HasIndex("SolCorPcId");

                    b.HasIndex("SolidsCalcPcId");

                    b.HasIndex("SolidsHiGravPcId");

                    b.HasIndex("SolidsLowGravPcId");

                    b.HasIndex("SolidsPcId");

                    b.HasIndex("SulfideId");

                    b.HasIndex("TempHthpId");

                    b.HasIndex("TempPhId");

                    b.HasIndex("TempVisId");

                    b.HasIndex("VisFunnelId");

                    b.HasIndex("WaterPcId");

                    b.HasIndex("YpId");

                    b.ToTable("OpsReportFluids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportFluidDischarged", b =>
                {
                    b.Property<int>("FluidDischargedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FluidDischargedId");

                    b.ToTable("OpsReportFluidDischargeds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGel10Min", b =>
                {
                    b.Property<int>("Gel10MinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel10MinId");

                    b.ToTable("OpsReportGel10Mins");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGel10Sec", b =>
                {
                    b.Property<int>("Gel10SecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel10SecId");

                    b.ToTable("OpsReportGel10Secs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGel30Min", b =>
                {
                    b.Property<int>("Gel30MinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gel30MinId");

                    b.ToTable("OpsReportGel30Mins");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGravAxialAccelCor", b =>
                {
                    b.Property<int>("GravAxialAccelCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravAxialAccelCorId");

                    b.ToTable("OpsReportGravAxialAccelCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGravAxialRaw", b =>
                {
                    b.Property<int>("GravAxialRawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravAxialRawId");

                    b.ToTable("OpsReportGravAxialRaws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGravTotalFieldCalc", b =>
                {
                    b.Property<int>("GravTotalFieldCalcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravTotalFieldCalcId");

                    b.ToTable("OpsReportGravTotalFieldCalcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGravTotalUncert", b =>
                {
                    b.Property<int>("GravTotalUncertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravTotalUncertId");

                    b.ToTable("OpsReportGravTotalUncerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGravTran1AccelCor", b =>
                {
                    b.Property<int>("GravTran1AccelCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravTran1AccelCorId");

                    b.ToTable("OpsReportGravTran1AccelCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGravTran1Raw", b =>
                {
                    b.Property<int>("GravTran1RawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravTran1RawId");

                    b.ToTable("OpsReportGravTran1Raws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGravTran2AccelCor", b =>
                {
                    b.Property<int>("GravTran2AccelCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravTran2AccelCorId");

                    b.ToTable("OpsReportGravTran2AccelCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGravTran2Raw", b =>
                {
                    b.Property<int>("GravTran2RawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravTran2RawId");

                    b.ToTable("OpsReportGravTran2Raws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGtf", b =>
                {
                    b.Property<int>("GtfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GtfId");

                    b.ToTable("OpsReportGtfs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportGuideBaseAngle", b =>
                {
                    b.Property<int>("GuideBaseAngleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuideBaseAngleId");

                    b.ToTable("OpsReportGuideBaseAngles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportHardnessCa", b =>
                {
                    b.Property<int>("HardnessCaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HardnessCaId");

                    b.ToTable("OpsReportHardnessCas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportHkldDn", b =>
                {
                    b.Property<int>("HkldDnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HkldDnId");

                    b.ToTable("OpsReportHkldDns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportHkldRot", b =>
                {
                    b.Property<int>("HkldRotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HkldRotId");

                    b.ToTable("OpsReportHkldRots");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportHkldUp", b =>
                {
                    b.Property<int>("HkldUpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HkldUpId");

                    b.ToTable("OpsReportHkldUps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportHoursRun", b =>
                {
                    b.Property<int>("HoursRunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HoursRunId");

                    b.ToTable("OpsReportHoursRuns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportHse", b =>
                {
                    b.Property<int>("HseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DaysIncFreeId")
                        .HasColumnType("int");

                    b.Property<int?>("FluidDischargedId")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int");

                    b.Property<string>("LastAbandonDrill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastBopDrill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastBopPresTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastCsgPresTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastDiverterDrill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastFireBoatDrill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastRigInspection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastSafetyInspection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastSafetyMeeting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTripDrill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextBopPresTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NonComplianceIssued")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumStopCards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PresAnnularId")
                        .HasColumnType("int");

                    b.Property<int?>("PresChokeLineId")
                        .HasColumnType("int");

                    b.Property<int?>("PresChokeManId")
                        .HasColumnType("int");

                    b.Property<int?>("PresDiverterId")
                        .HasColumnType("int");

                    b.Property<int?>("PresKellyHoseId")
                        .HasColumnType("int");

                    b.Property<int?>("PresLastCsgId")
                        .HasColumnType("int");

                    b.Property<int?>("PresRamsId")
                        .HasColumnType("int");

                    b.Property<int?>("PresStdPipeId")
                        .HasColumnType("int");

                    b.Property<string>("RegAgencyInsp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VolCtgDischargedId")
                        .HasColumnType("int");

                    b.Property<int?>("VolOilCtgDischargeId")
                        .HasColumnType("int");

                    b.Property<int?>("WasteDischargedId")
                        .HasColumnType("int");

                    b.HasKey("HseId");

                    b.HasIndex("DaysIncFreeId");

                    b.HasIndex("FluidDischargedId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("PresAnnularId");

                    b.HasIndex("PresChokeLineId");

                    b.HasIndex("PresChokeManId");

                    b.HasIndex("PresDiverterId");

                    b.HasIndex("PresKellyHoseId");

                    b.HasIndex("PresLastCsgId");

                    b.HasIndex("PresRamsId");

                    b.HasIndex("PresStdPipeId");

                    b.HasIndex("VolCtgDischargedId");

                    b.HasIndex("VolOilCtgDischargeId");

                    b.HasIndex("WasteDischargedId");

                    b.ToTable("OpsReportHses");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportHtWave", b =>
                {
                    b.Property<int>("HtWaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HtWaveId");

                    b.ToTable("OpsReportHtWaves");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportIdLiner", b =>
                {
                    b.Property<int>("IdLinerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLinerId");

                    b.ToTable("OpsReportIdLiners");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportIncident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CauseDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CostLostGrossId")
                        .HasColumnType("int");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescAccident")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ETimLostGrossId")
                        .HasColumnType("int");

                    b.Property<string>("IsNearMiss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumFatality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumMajorInjury")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumMinorInjury")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemedialActionDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reporter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IncidentId");

                    b.HasIndex("CostLostGrossId");

                    b.HasIndex("ETimLostGrossId");

                    b.ToTable("OpsReportIncidents");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportIncl", b =>
                {
                    b.Property<int>("InclId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InclId");

                    b.ToTable("OpsReportIncls");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportInclMn", b =>
                {
                    b.Property<int>("InclMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InclMnId");

                    b.ToTable("OpsReportInclMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportInclMx", b =>
                {
                    b.Property<int>("InclMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InclMxId");

                    b.ToTable("OpsReportInclMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportInclStart", b =>
                {
                    b.Property<int>("InclStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InclStartId");

                    b.ToTable("OpsReportInclStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportInclStop", b =>
                {
                    b.Property<int>("InclStopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InclStopId");

                    b.ToTable("OpsReportInclStops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportItemVolPerUnit", b =>
                {
                    b.Property<int>("ItemVolPerUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemVolPerUnitId");

                    b.ToTable("OpsReportItemVolPerUnits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportItemWtPerUnit", b =>
                {
                    b.Property<int>("ItemWtPerUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemWtPerUnitId");

                    b.ToTable("OpsReportItemWtPerUnits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportLatitude", b =>
                {
                    b.Property<int>("LatitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LatitudeId");

                    b.ToTable("OpsReportLatitudes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportLcm", b =>
                {
                    b.Property<int>("LcmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LcmId");

                    b.ToTable("OpsReportLcms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportLenStroke", b =>
                {
                    b.Property<int>("LenStrokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenStrokeId");

                    b.ToTable("OpsReportLenStrokes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportLime", b =>
                {
                    b.Property<int>("LimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LimeId");

                    b.ToTable("OpsReportLimes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportLoadLeg1", b =>
                {
                    b.Property<int>("LoadLeg1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoadLeg1Id");

                    b.ToTable("OpsReportLoadLeg1s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportLoadLeg2", b =>
                {
                    b.Property<int>("LoadLeg2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoadLeg2Id");

                    b.ToTable("OpsReportLoadLeg2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportLoadLeg3", b =>
                {
                    b.Property<int>("LoadLeg3Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoadLeg3Id");

                    b.ToTable("OpsReportLoadLeg3s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportLoadLeg4", b =>
                {
                    b.Property<int>("LoadLeg4Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoadLeg4Id");

                    b.ToTable("OpsReportLoadLeg4s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportLocation", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("LatitudeId")
                        .HasColumnType("int");

                    b.Property<int?>("LongitudeId")
                        .HasColumnType("int");

                    b.Property<string>("OpsReportTrajectoryStationUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ProjectedXId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectedYId")
                        .HasColumnType("int");

                    b.Property<int?>("WellCRSId")
                        .HasColumnType("int");

                    b.HasKey("Uid");

                    b.HasIndex("LatitudeId");

                    b.HasIndex("LongitudeId");

                    b.HasIndex("OpsReportTrajectoryStationUid");

                    b.HasIndex("ProjectedXId");

                    b.HasIndex("ProjectedYId");

                    b.HasIndex("WellCRSId");

                    b.ToTable("OpsReportLocations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportLongitude", b =>
                {
                    b.Property<int>("LongitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LongitudeId");

                    b.ToTable("OpsReportLongitudes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMaasp", b =>
                {
                    b.Property<int>("MaaspId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaaspId");

                    b.ToTable("OpsReportMaasps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMagAxialDrlstrCor", b =>
                {
                    b.Property<int>("MagAxialDrlstrCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagAxialDrlstrCorId");

                    b.ToTable("OpsReportMagAxialDrlstrCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMagAxialRaw", b =>
                {
                    b.Property<int>("MagAxialRawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagAxialRawId");

                    b.ToTable("OpsReportMagAxialRaws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMagDipAngleCalc", b =>
                {
                    b.Property<int>("MagDipAngleCalcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagDipAngleCalcId");

                    b.ToTable("OpsReportMagDipAngleCalcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMagTotalFieldCalc", b =>
                {
                    b.Property<int>("MagTotalFieldCalcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagTotalFieldCalcId");

                    b.ToTable("OpsReportMagTotalFieldCalcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMagTotalUncert", b =>
                {
                    b.Property<int>("MagTotalUncertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagTotalUncertId");

                    b.ToTable("OpsReportMagTotalUncerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMagTran1DrlstrCor", b =>
                {
                    b.Property<int>("MagTran1DrlstrCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagTran1DrlstrCorId");

                    b.ToTable("OpsReportMagTran1DrlstrCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMagTran1Raw", b =>
                {
                    b.Property<int>("MagTran1RawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagTran1RawId");

                    b.ToTable("OpsReportMagTran1Raws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMagTran2DrlstrCor", b =>
                {
                    b.Property<int>("MagTran2DrlstrCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagTran2DrlstrCorId");

                    b.ToTable("OpsReportMagTran2DrlstrCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMagTran2Raw", b =>
                {
                    b.Property<int>("MagTran2RawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagTran2RawId");

                    b.ToTable("OpsReportMagTran2Raws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMagnesium", b =>
                {
                    b.Property<int>("MagnesiumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagnesiumId");

                    b.ToTable("OpsReportMagnesiums");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMatrixCov", b =>
                {
                    b.Property<int>("MatrixCovId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BiasEId")
                        .HasColumnType("int");

                    b.Property<int?>("BiasNId")
                        .HasColumnType("int");

                    b.Property<int?>("BiasVertId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianceEEId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianceEVertId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianceNEOpsReportsId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianceNNId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianceNVertId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianceVertVertId")
                        .HasColumnType("int");

                    b.HasKey("MatrixCovId");

                    b.HasIndex("BiasEId");

                    b.HasIndex("BiasNId");

                    b.HasIndex("BiasVertId");

                    b.HasIndex("VarianceEEId");

                    b.HasIndex("VarianceEVertId");

                    b.HasIndex("VarianceNEOpsReportsId");

                    b.HasIndex("VarianceNNId");

                    b.HasIndex("VarianceNVertId");

                    b.HasIndex("VarianceVertVertId");

                    b.ToTable("OpsReportMatrixCovs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMbt", b =>
                {
                    b.Property<int>("MbtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MbtId");

                    b.ToTable("OpsReportMbts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMd", b =>
                {
                    b.Property<int>("MdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdId");

                    b.ToTable("OpsReportMds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMdBit", b =>
                {
                    b.Property<int>("MdBitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdBitId");

                    b.ToTable("OpsReportMdBits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMdBitEnd", b =>
                {
                    b.Property<int>("MdBitEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdBitEndId");

                    b.ToTable("OpsReportMdBitEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMdBitStart", b =>
                {
                    b.Property<int>("MdBitStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdBitStartId");

                    b.ToTable("OpsReportMdBitStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMdCsgLast", b =>
                {
                    b.Property<int>("MdCsgLastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdCsgLastId");

                    b.ToTable("OpsReportMdCsgLasts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMdDelta", b =>
                {
                    b.Property<int>("MdDeltaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdDeltaId");

                    b.ToTable("OpsReportMdDeltas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMdHole", b =>
                {
                    b.Property<int>("MdHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdHoleId");

                    b.ToTable("OpsReportMdHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMdHoleEnd", b =>
                {
                    b.Property<int>("MdHoleEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdHoleEndId");

                    b.ToTable("OpsReportMdHoleEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMdHoleStart", b =>
                {
                    b.Property<int>("MdHoleStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdHoleStartId");

                    b.ToTable("OpsReportMdHoleStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMdHoleStop", b =>
                {
                    b.Property<int>("MdHoleStopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdHoleStopId");

                    b.ToTable("OpsReportMdHoleStops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMdPlanned", b =>
                {
                    b.Property<int>("MdPlannedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdPlannedId");

                    b.ToTable("OpsReportMdPlanneds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMdReport", b =>
                {
                    b.Property<int>("MdReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdReportId");

                    b.ToTable("OpsReportMdReports");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMeanDraft", b =>
                {
                    b.Property<int>("MeanDraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeanDraftId");

                    b.ToTable("OpsReportMeanDrafts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMeshX", b =>
                {
                    b.Property<int>("MeshXId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeshXId");

                    b.ToTable("OpsReportMeshXs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMeshY", b =>
                {
                    b.Property<int>("MeshYId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeshYId");

                    b.ToTable("OpsReportMeshYs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMf", b =>
                {
                    b.Property<int>("MfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MfId");

                    b.ToTable("OpsReportMfs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMtf", b =>
                {
                    b.Property<int>("MtfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MtfId");

                    b.ToTable("OpsReportMtfs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMudInventory", b =>
                {
                    b.Property<int>("MudInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CostItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemWtPerUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PricePerUnitId")
                        .HasColumnType("int");

                    b.Property<string>("QtyAdjustment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QtyOnLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QtyReceived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QtyReturned")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QtyStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QtyUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MudInventoryId");

                    b.HasIndex("CostItemId");

                    b.HasIndex("ItemWtPerUnitId");

                    b.HasIndex("PricePerUnitId");

                    b.ToTable("OpsReportMudInventorys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMudLosses", b =>
                {
                    b.Property<int>("MudLossesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("VolLostAbandonHoleId")
                        .HasColumnType("int");

                    b.Property<int?>("VolLostBhdCsgHoleId")
                        .HasColumnType("int");

                    b.Property<int?>("VolLostCircHoleId")
                        .HasColumnType("int");

                    b.Property<int?>("VolLostCmtHoleId")
                        .HasColumnType("int");

                    b.Property<int?>("VolLostCsgHoleId")
                        .HasColumnType("int");

                    b.Property<int?>("VolLostMudCleanerSurfId")
                        .HasColumnType("int");

                    b.Property<int?>("VolLostOtherHoleId")
                        .HasColumnType("int");

                    b.Property<int?>("VolLostOtherSurfId")
                        .HasColumnType("int");

                    b.Property<int?>("VolLostPitsSurfId")
                        .HasColumnType("int");

                    b.Property<int?>("VolLostShakerSurfId")
                        .HasColumnType("int");

                    b.Property<int?>("VolLostTrippingSurfId")
                        .HasColumnType("int");

                    b.Property<int?>("VolTotMudLostHoleId")
                        .HasColumnType("int");

                    b.Property<int?>("VolTotMudLostSurfId")
                        .HasColumnType("int");

                    b.HasKey("MudLossesId");

                    b.HasIndex("VolLostAbandonHoleId");

                    b.HasIndex("VolLostBhdCsgHoleId");

                    b.HasIndex("VolLostCircHoleId");

                    b.HasIndex("VolLostCmtHoleId");

                    b.HasIndex("VolLostCsgHoleId");

                    b.HasIndex("VolLostMudCleanerSurfId");

                    b.HasIndex("VolLostOtherHoleId");

                    b.HasIndex("VolLostOtherSurfId");

                    b.HasIndex("VolLostPitsSurfId");

                    b.HasIndex("VolLostShakerSurfId");

                    b.HasIndex("VolLostTrippingSurfId");

                    b.HasIndex("VolTotMudLostHoleId");

                    b.HasIndex("VolTotMudLostSurfId");

                    b.ToTable("OpsReportMudLossess");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMudVolume", b =>
                {
                    b.Property<int>("MudVolumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MudLossesId")
                        .HasColumnType("int");

                    b.Property<int?>("VolMudBuiltId")
                        .HasColumnType("int");

                    b.Property<int?>("VolMudCasingId")
                        .HasColumnType("int");

                    b.Property<int?>("VolMudDumpedId")
                        .HasColumnType("int");

                    b.Property<int?>("VolMudHoleId")
                        .HasColumnType("int");

                    b.Property<int?>("VolMudReceivedId")
                        .HasColumnType("int");

                    b.Property<int?>("VolMudReturnedId")
                        .HasColumnType("int");

                    b.Property<int?>("VolMudRiserId")
                        .HasColumnType("int");

                    b.Property<int?>("VolMudStringId")
                        .HasColumnType("int");

                    b.Property<int?>("VolTotMudEndId")
                        .HasColumnType("int");

                    b.Property<int?>("VolTotMudStartId")
                        .HasColumnType("int");

                    b.HasKey("MudVolumeId");

                    b.HasIndex("MudLossesId");

                    b.HasIndex("VolMudBuiltId");

                    b.HasIndex("VolMudCasingId");

                    b.HasIndex("VolMudDumpedId");

                    b.HasIndex("VolMudHoleId");

                    b.HasIndex("VolMudReceivedId");

                    b.HasIndex("VolMudReturnedId");

                    b.HasIndex("VolMudRiserId");

                    b.HasIndex("VolMudStringId");

                    b.HasIndex("VolTotMudEndId");

                    b.HasIndex("VolTotMudStartId");

                    b.ToTable("OpsReportMudVolumes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportOffsetRig", b =>
                {
                    b.Property<int>("OffsetRigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OffsetRigId");

                    b.ToTable("OpsReportOffsetRigs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportOilCtg", b =>
                {
                    b.Property<int>("OilCtgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OilCtgId");

                    b.ToTable("OpsReportOilCtgs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportOilPc", b =>
                {
                    b.Property<int>("OilPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OilPcId");

                    b.ToTable("OpsReportOilPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportOverPull", b =>
                {
                    b.Property<int>("OverPullId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OverPullId");

                    b.ToTable("OpsReportOverPulls");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPcEfficiency", b =>
                {
                    b.Property<int>("PcEfficiencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PcEfficiencyId");

                    b.ToTable("OpsReportPcEfficiencys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPcScreenCovered", b =>
                {
                    b.Property<int>("PcScreenCoveredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PcScreenCoveredId");

                    b.ToTable("OpsReportPcScreenCovereds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPenetrationLeg1", b =>
                {
                    b.Property<int>("PenetrationLeg1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PenetrationLeg1Id");

                    b.ToTable("OpsReportPenetrationLeg1s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPenetrationLeg2", b =>
                {
                    b.Property<int>("PenetrationLeg2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PenetrationLeg2Id");

                    b.ToTable("OpsReportPenetrationLeg2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPenetrationLeg3", b =>
                {
                    b.Property<int>("PenetrationLeg3Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PenetrationLeg3Id");

                    b.ToTable("OpsReportPenetrationLeg3s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPenetrationLeg4", b =>
                {
                    b.Property<int>("PenetrationLeg4Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PenetrationLeg4Id");

                    b.ToTable("OpsReportPenetrationLeg4s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPeriodWave", b =>
                {
                    b.Property<int>("PeriodWaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PeriodWaveId");

                    b.ToTable("OpsReportPeriodWaves");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPersonnel", b =>
                {
                    b.Property<int>("PersonnelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumPeople")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpsReportId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalTimeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonnelId");

                    b.HasIndex("OpsReportId");

                    b.HasIndex("TotalTimeId");

                    b.ToTable("OpsReportPersonnels");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPit", b =>
                {
                    b.Property<int>("PitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PitId");

                    b.ToTable("OpsReportPits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPitVolume", b =>
                {
                    b.Property<int>("PitVolumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DensFluidId")
                        .HasColumnType("int");

                    b.Property<string>("DescFluid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpsReportId")
                        .HasColumnType("int");

                    b.Property<int?>("PitId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisFunnelId")
                        .HasColumnType("int");

                    b.Property<int?>("VolPitId")
                        .HasColumnType("int");

                    b.HasKey("PitVolumeId");

                    b.HasIndex("DensFluidId");

                    b.HasIndex("OpsReportId");

                    b.HasIndex("PitId");

                    b.HasIndex("VisFunnelId");

                    b.HasIndex("VolPitId");

                    b.ToTable("OpsReportPitVolumes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPm", b =>
                {
                    b.Property<int>("PmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PmId");

                    b.ToTable("OpsReportPms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPmFiltrate", b =>
                {
                    b.Property<int>("PmFiltrateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PmFiltrateId");

                    b.ToTable("OpsReportPmFiltrates");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPolymer", b =>
                {
                    b.Property<int>("PolymerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PolymerId");

                    b.ToTable("OpsReportPolymers");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPowBit", b =>
                {
                    b.Property<int>("PowBitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PowBitId");

                    b.ToTable("OpsReportPowBits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresAnnular", b =>
                {
                    b.Property<int>("PresAnnularId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresAnnularId");

                    b.ToTable("OpsReportPresAnnulars");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresChokeLine", b =>
                {
                    b.Property<int>("PresChokeLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresChokeLineId");

                    b.ToTable("OpsReportPresChokeLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresChokeMan", b =>
                {
                    b.Property<int>("PresChokeManId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresChokeManId");

                    b.ToTable("OpsReportPresChokeMans");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresDiverter", b =>
                {
                    b.Property<int>("PresDiverterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresDiverterId");

                    b.ToTable("OpsReportPresDiverters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresDropBit", b =>
                {
                    b.Property<int>("PresDropBitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresDropBitId");

                    b.ToTable("OpsReportPresDropBits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresHthp", b =>
                {
                    b.Property<int>("PresHthpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresHthpId");

                    b.ToTable("OpsReportPresHthps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresKellyHose", b =>
                {
                    b.Property<int>("PresKellyHoseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresKellyHoseId");

                    b.ToTable("OpsReportPresKellyHoses");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresKickTol", b =>
                {
                    b.Property<int>("PresKickTolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresKickTolId");

                    b.ToTable("OpsReportPresKickTols");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresLastCsg", b =>
                {
                    b.Property<int>("PresLastCsgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresLastCsgId");

                    b.ToTable("OpsReportPresLastCsgs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresLotEmw", b =>
                {
                    b.Property<int>("PresLotEmwId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresLotEmwId");

                    b.ToTable("OpsReportPresLotEmws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresPumpAv", b =>
                {
                    b.Property<int>("PresPumpAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresPumpAvId");

                    b.ToTable("OpsReportPresPumpAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresRams", b =>
                {
                    b.Property<int>("PresRamsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresRamsId");

                    b.ToTable("OpsReportPresRamss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresRecorded", b =>
                {
                    b.Property<int>("PresRecordedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresRecordedId");

                    b.ToTable("OpsReportPresRecordeds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresRheom", b =>
                {
                    b.Property<int>("PresRheomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresRheomId");

                    b.ToTable("OpsReportPresRheoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPresStdPipe", b =>
                {
                    b.Property<int>("PresStdPipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresStdPipeId");

                    b.ToTable("OpsReportPresStdPipes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPressure", b =>
                {
                    b.Property<int>("PressureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PressureId");

                    b.ToTable("OpsReportPressures");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPricePerUnit", b =>
                {
                    b.Property<int>("PricePerUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PricePerUnitId");

                    b.ToTable("OpsReportPricePerUnits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportProjectedX", b =>
                {
                    b.Property<int>("ProjectedXId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectedXId");

                    b.ToTable("OpsReportProjectedXs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportProjectedY", b =>
                {
                    b.Property<int>("ProjectedYId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectedYId");

                    b.ToTable("OpsReportProjectedYs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPump", b =>
                {
                    b.Property<int>("PumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PumpId");

                    b.ToTable("OpsReportPumps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPumpOp", b =>
                {
                    b.Property<int>("PumpOpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdLinerId")
                        .HasColumnType("int");

                    b.Property<int?>("LenStrokeId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBitId")
                        .HasColumnType("int");

                    b.Property<int?>("PcEfficiencyId")
                        .HasColumnType("int");

                    b.Property<int?>("PressureId")
                        .HasColumnType("int");

                    b.Property<int?>("PumpId")
                        .HasColumnType("int");

                    b.Property<int?>("PumpOutputId")
                        .HasColumnType("int");

                    b.Property<int?>("RateStrokeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeOperation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PumpOpId");

                    b.HasIndex("IdLinerId");

                    b.HasIndex("LenStrokeId");

                    b.HasIndex("MdBitId");

                    b.HasIndex("PcEfficiencyId");

                    b.HasIndex("PressureId");

                    b.HasIndex("PumpId");

                    b.HasIndex("PumpOutputId");

                    b.HasIndex("RateStrokeId");

                    b.ToTable("OpsReportPumpOps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPumpOutput", b =>
                {
                    b.Property<int>("PumpOutputId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PumpOutputId");

                    b.ToTable("OpsReportPumpOutputs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPv", b =>
                {
                    b.Property<int>("ReportPvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportPvId");

                    b.ToTable("OpsReportPvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRateBuild", b =>
                {
                    b.Property<int>("RateBuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RateBuildId");

                    b.ToTable("OpsReportRateBuilds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRateStroke", b =>
                {
                    b.Property<int>("RateStrokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RateStrokeId");

                    b.ToTable("OpsReportRateStrokes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRateTurn", b =>
                {
                    b.Property<int>("RateTurnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RateTurnId");

                    b.ToTable("OpsReportRateTurns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRawData", b =>
                {
                    b.Property<int>("RawDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GravAxialRawId")
                        .HasColumnType("int");

                    b.Property<int?>("GravTran1RawId")
                        .HasColumnType("int");

                    b.Property<int?>("GravTran2RawId")
                        .HasColumnType("int");

                    b.Property<int?>("MagAxialRawId")
                        .HasColumnType("int");

                    b.Property<int?>("MagTran1RawId")
                        .HasColumnType("int");

                    b.Property<int?>("MagTran2RawId")
                        .HasColumnType("int");

                    b.HasKey("RawDataId");

                    b.HasIndex("GravAxialRawId");

                    b.HasIndex("GravTran1RawId");

                    b.HasIndex("GravTran2RawId");

                    b.HasIndex("MagAxialRawId");

                    b.HasIndex("MagTran1RawId");

                    b.HasIndex("MagTran2RawId");

                    b.ToTable("OpsReportRawDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRheometer", b =>
                {
                    b.Property<int>("RheometerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OpsReportFluidUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PresRheomId")
                        .HasColumnType("int");

                    b.Property<int?>("TempRheomId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vis100Rpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vis200Rpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vis300Rpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vis3Rpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vis600Rpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vis6Rpm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RheometerId");

                    b.HasIndex("OpsReportFluidUid");

                    b.HasIndex("PresRheomId");

                    b.HasIndex("TempRheomId");

                    b.ToTable("OpsReportRheometers");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRig", b =>
                {
                    b.Property<int>("OpsReportRigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OpsReportRigId");

                    b.ToTable("OpsReportRigs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRigHeading", b =>
                {
                    b.Property<int>("RigHeadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RigHeadingId");

                    b.ToTable("OpsReportRigHeadings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRigHeave", b =>
                {
                    b.Property<int>("RigHeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RigHeaveId");

                    b.ToTable("OpsReportRigHeaves");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRigPitchAngle", b =>
                {
                    b.Property<int>("RigPitchAngleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RigPitchAngleId");

                    b.ToTable("OpsReportRigPitchAngles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRigResponse", b =>
                {
                    b.Property<int>("RigResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BallJointAngleId")
                        .HasColumnType("int");

                    b.Property<int?>("BallJointDirectionId")
                        .HasColumnType("int");

                    b.Property<int?>("DispRigId")
                        .HasColumnType("int");

                    b.Property<int?>("GuideBaseAngleId")
                        .HasColumnType("int");

                    b.Property<int?>("LoadLeg1Id")
                        .HasColumnType("int");

                    b.Property<int?>("LoadLeg2Id")
                        .HasColumnType("int");

                    b.Property<int?>("LoadLeg3Id")
                        .HasColumnType("int");

                    b.Property<int?>("LoadLeg4Id")
                        .HasColumnType("int");

                    b.Property<int?>("MeanDraftId")
                        .HasColumnType("int");

                    b.Property<int?>("OffsetRigId")
                        .HasColumnType("int");

                    b.Property<int?>("PenetrationLeg1Id")
                        .HasColumnType("int");

                    b.Property<int?>("PenetrationLeg2Id")
                        .HasColumnType("int");

                    b.Property<int?>("PenetrationLeg3Id")
                        .HasColumnType("int");

                    b.Property<int?>("PenetrationLeg4Id")
                        .HasColumnType("int");

                    b.Property<int?>("RigHeadingId")
                        .HasColumnType("int");

                    b.Property<int?>("RigHeaveId")
                        .HasColumnType("int");

                    b.Property<int?>("RigPitchAngleId")
                        .HasColumnType("int");

                    b.Property<int?>("RigRollAngleId")
                        .HasColumnType("int");

                    b.Property<int?>("RiserAngleId")
                        .HasColumnType("int");

                    b.Property<int?>("RiserDirectionId")
                        .HasColumnType("int");

                    b.Property<int?>("RiserTensionId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalDeckLoadId")
                        .HasColumnType("int");

                    b.Property<int?>("VariableDeckLoadId")
                        .HasColumnType("int");

                    b.HasKey("RigResponseId");

                    b.HasIndex("BallJointAngleId");

                    b.HasIndex("BallJointDirectionId");

                    b.HasIndex("DispRigId");

                    b.HasIndex("GuideBaseAngleId");

                    b.HasIndex("LoadLeg1Id");

                    b.HasIndex("LoadLeg2Id");

                    b.HasIndex("LoadLeg3Id");

                    b.HasIndex("LoadLeg4Id");

                    b.HasIndex("MeanDraftId");

                    b.HasIndex("OffsetRigId");

                    b.HasIndex("PenetrationLeg1Id");

                    b.HasIndex("PenetrationLeg2Id");

                    b.HasIndex("PenetrationLeg3Id");

                    b.HasIndex("PenetrationLeg4Id");

                    b.HasIndex("RigHeadingId");

                    b.HasIndex("RigHeaveId");

                    b.HasIndex("RigPitchAngleId");

                    b.HasIndex("RigRollAngleId");

                    b.HasIndex("RiserAngleId");

                    b.HasIndex("RiserDirectionId");

                    b.HasIndex("RiserTensionId");

                    b.HasIndex("TotalDeckLoadId");

                    b.HasIndex("VariableDeckLoadId");

                    b.ToTable("OpsReportRigResponses");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRigRollAngle", b =>
                {
                    b.Property<int>("RigRollAngleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RigRollAngleId");

                    b.ToTable("OpsReportRigRollAngles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRiserAngle", b =>
                {
                    b.Property<int>("RiserAngleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RiserAngleId");

                    b.ToTable("OpsReportRiserAngles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRiserDirection", b =>
                {
                    b.Property<int>("RiserDirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RiserDirectionId");

                    b.ToTable("OpsReportRiserDirections");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRiserTension", b =>
                {
                    b.Property<int>("RiserTensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RiserTensionId");

                    b.ToTable("OpsReportRiserTensions");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRopAv", b =>
                {
                    b.Property<int>("RopAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RopAvId");

                    b.ToTable("OpsReportRopAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRopCurrent", b =>
                {
                    b.Property<int>("RopCurrentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RopCurrentId");

                    b.ToTable("OpsReportRopCurrents");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRopMn", b =>
                {
                    b.Property<int>("RopMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RopMnId");

                    b.ToTable("OpsReportRopMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRopMx", b =>
                {
                    b.Property<int>("RopMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RopMxId");

                    b.ToTable("OpsReportRopMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRpmAv", b =>
                {
                    b.Property<int>("RpmAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RpmAvId");

                    b.ToTable("OpsReportRpmAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRpmAvDh", b =>
                {
                    b.Property<int>("RpmAvDhId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RpmAvDhId");

                    b.ToTable("OpsReportRpmAvDhs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRpmMn", b =>
                {
                    b.Property<int>("RpmMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RpmMnId");

                    b.ToTable("OpsReportRpmMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRpmMx", b =>
                {
                    b.Property<int>("RpmMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RpmMxId");

                    b.ToTable("OpsReportRpmMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportSagAziCor", b =>
                {
                    b.Property<int>("SagAziCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SagAziCorId");

                    b.ToTable("OpsReportSagAziCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportSagIncCor", b =>
                {
                    b.Property<int>("SagIncCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SagIncCorId");

                    b.ToTable("OpsReportSagIncCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportSandPc", b =>
                {
                    b.Property<int>("SandPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SandPcId");

                    b.ToTable("OpsReportSandPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportScr", b =>
                {
                    b.Property<int>("ScrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdBitId")
                        .HasColumnType("int");

                    b.Property<int?>("OpsReportId")
                        .HasColumnType("int");

                    b.Property<int?>("PresRecordedId")
                        .HasColumnType("int");

                    b.Property<int?>("PumpId")
                        .HasColumnType("int");

                    b.Property<int?>("RateStrokeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeScr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScrId");

                    b.HasIndex("MdBitId");

                    b.HasIndex("OpsReportId");

                    b.HasIndex("PresRecordedId");

                    b.HasIndex("PumpId");

                    b.HasIndex("RateStrokeId");

                    b.ToTable("OpsReportScrs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportShaker", b =>
                {
                    b.Property<int>("ShakerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShakerId");

                    b.ToTable("OpsReportShakers");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportShakerOp", b =>
                {
                    b.Property<int>("ShakerOpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HoursRunId")
                        .HasColumnType("int");

                    b.Property<int?>("MdHoleId")
                        .HasColumnType("int");

                    b.Property<int?>("PcScreenCoveredId")
                        .HasColumnType("int");

                    b.Property<int?>("ShakerId")
                        .HasColumnType("int");

                    b.Property<int?>("ShakerScreenId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShakerOpId");

                    b.HasIndex("HoursRunId");

                    b.HasIndex("MdHoleId");

                    b.HasIndex("PcScreenCoveredId");

                    b.HasIndex("ShakerId");

                    b.HasIndex("ShakerScreenId");

                    b.ToTable("OpsReportShakerOps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportShakerScreen", b =>
                {
                    b.Property<int>("ShakerScreenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CutPointId")
                        .HasColumnType("int");

                    b.Property<string>("DTimEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeshXId")
                        .HasColumnType("int");

                    b.Property<int?>("MeshYId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumDeck")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShakerScreenId");

                    b.HasIndex("CutPointId");

                    b.HasIndex("MeshXId");

                    b.HasIndex("MeshYId");

                    b.ToTable("OpsReportShakerScreens");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportSlackOff", b =>
                {
                    b.Property<int>("SlackOffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SlackOffId");

                    b.ToTable("OpsReportSlackOffs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportSolCorPc", b =>
                {
                    b.Property<int>("SolCorPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolCorPcId");

                    b.ToTable("OpsReportSolCorPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportSolidsCalcPc", b =>
                {
                    b.Property<int>("SolidsCalcPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolidsCalcPcId");

                    b.ToTable("OpsReportSolidsCalcPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportSolidsHiGravPc", b =>
                {
                    b.Property<int>("SolidsHiGravPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolidsHiGravPcId");

                    b.ToTable("OpsReportSolidsHiGravPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportSolidsLowGravPc", b =>
                {
                    b.Property<int>("SolidsLowGravPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolidsLowGravPcId");

                    b.ToTable("OpsReportSolidsLowGravPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportSolidsPc", b =>
                {
                    b.Property<int>("SolidsPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolidsPcId");

                    b.ToTable("OpsReportSolidsPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportStnGridCorUsed", b =>
                {
                    b.Property<int>("StnGridCorUsedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StnGridCorUsedId");

                    b.ToTable("OpsReportStnGridCorUseds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportStnMagDeclUsed", b =>
                {
                    b.Property<int>("StnMagDeclUsedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StnMagDeclUsedId");

                    b.ToTable("OpsReportStnMagDeclUseds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportSulfide", b =>
                {
                    b.Property<int>("SulfideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SulfideId");

                    b.ToTable("OpsReportSulfides");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportSupportCraft", b =>
                {
                    b.Property<int>("SupportCraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimArrived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimDeparted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeSuppCraft")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupportCraftId");

                    b.ToTable("OpsReportSupportCrafts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTempHthp", b =>
                {
                    b.Property<int>("TempHthpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempHthpId");

                    b.ToTable("OpsReportTempHthps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTempMudDhMx", b =>
                {
                    b.Property<int>("TempMudDhMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempMudDhMxId");

                    b.ToTable("OpsReportTempMudDhMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTempPh", b =>
                {
                    b.Property<int>("TempPhId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempPhId");

                    b.ToTable("OpsReportTempPhs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTempRheom", b =>
                {
                    b.Property<int>("TempRheomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempRheomId");

                    b.ToTable("OpsReportTempRheoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTempSurfaceMn", b =>
                {
                    b.Property<int>("TempSurfaceMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempSurfaceMnId");

                    b.ToTable("OpsReportTempSurfaceMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTempSurfaceMx", b =>
                {
                    b.Property<int>("TempSurfaceMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempSurfaceMxId");

                    b.ToTable("OpsReportTempSurfaceMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTempVis", b =>
                {
                    b.Property<int>("TempVisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempVisId");

                    b.ToTable("OpsReportTempViss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTempWindChill", b =>
                {
                    b.Property<int>("TempWindChillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempWindChillId");

                    b.ToTable("OpsReportTempWindChills");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTempsea", b =>
                {
                    b.Property<int>("TempseaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempseaId");

                    b.ToTable("OpsReportTempseas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTotalDeckLoad", b =>
                {
                    b.Property<int>("TotalDeckLoadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TotalDeckLoadId");

                    b.ToTable("OpsReportTotalDeckLoads");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTotalTime", b =>
                {
                    b.Property<int>("TotalTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TotalTimeId");

                    b.ToTable("OpsReportTotalTimes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTqDhAv", b =>
                {
                    b.Property<int>("TqDhAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TqDhAvId");

                    b.ToTable("OpsReportTqDhAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTqOffBotAv", b =>
                {
                    b.Property<int>("TqOffBotAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TqOffBotAvId");

                    b.ToTable("OpsReportTqOffBotAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTqOnBotAv", b =>
                {
                    b.Property<int>("TqOnBotAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TqOnBotAvId");

                    b.ToTable("OpsReportTqOnBotAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTqOnBotMn", b =>
                {
                    b.Property<int>("TqOnBotMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TqOnBotMnId");

                    b.ToTable("OpsReportTqOnBotMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTqOnBotMx", b =>
                {
                    b.Property<int>("TqOnBotMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TqOnBotMxId");

                    b.ToTable("OpsReportTqOnBotMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTrajectoryStation", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AziId")
                        .HasColumnType("int");

                    b.Property<int?>("CorUsedId")
                        .HasColumnType("int");

                    b.Property<string>("DTimStn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DipAngleUncertId")
                        .HasColumnType("int");

                    b.Property<int?>("DispEwId")
                        .HasColumnType("int");

                    b.Property<int?>("DispNsId")
                        .HasColumnType("int");

                    b.Property<int?>("DlsId")
                        .HasColumnType("int");

                    b.Property<string>("GravAccelCorUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GravTotalUncertId")
                        .HasColumnType("int");

                    b.Property<int?>("GtfId")
                        .HasColumnType("int");

                    b.Property<int?>("InclId")
                        .HasColumnType("int");

                    b.Property<string>("MagDrlstrCorUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MagTotalUncertId")
                        .HasColumnType("int");

                    b.Property<string>("MagXAxialCorUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MatrixCovId")
                        .HasColumnType("int");

                    b.Property<int?>("MdDeltaId")
                        .HasColumnType("int");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<string>("ModelToolError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MtfId")
                        .HasColumnType("int");

                    b.Property<int?>("RateBuildId")
                        .HasColumnType("int");

                    b.Property<int?>("RateTurnId")
                        .HasColumnType("int");

                    b.Property<int?>("RawDataId")
                        .HasColumnType("int");

                    b.Property<string>("SagCorUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusTrajStation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdDeltaId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdId")
                        .HasColumnType("int");

                    b.Property<string>("TypeTrajStation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ValidId")
                        .HasColumnType("int");

                    b.Property<int?>("VertSectId")
                        .HasColumnType("int");

                    b.HasKey("Uid");

                    b.HasIndex("AziId");

                    b.HasIndex("CorUsedId");

                    b.HasIndex("DipAngleUncertId");

                    b.HasIndex("DispEwId");

                    b.HasIndex("DispNsId");

                    b.HasIndex("DlsId");

                    b.HasIndex("GravTotalUncertId");

                    b.HasIndex("GtfId");

                    b.HasIndex("InclId");

                    b.HasIndex("MagTotalUncertId");

                    b.HasIndex("MatrixCovId");

                    b.HasIndex("MdDeltaId");

                    b.HasIndex("MdId");

                    b.HasIndex("MtfId");

                    b.HasIndex("RateBuildId");

                    b.HasIndex("RateTurnId");

                    b.HasIndex("RawDataId");

                    b.HasIndex("TvdDeltaId");

                    b.HasIndex("TvdId");

                    b.HasIndex("ValidId");

                    b.HasIndex("VertSectId");

                    b.ToTable("OpsReportTrajectoryStations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTubular", b =>
                {
                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UidRef");

                    b.ToTable("OpsReportTubulars");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTvd", b =>
                {
                    b.Property<int>("TvdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdId");

                    b.ToTable("OpsReportTvds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTvdCsgLast", b =>
                {
                    b.Property<int>("TvdCsgLastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdCsgLastId");

                    b.ToTable("OpsReportTvdCsgLasts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTvdDelta", b =>
                {
                    b.Property<int>("TvdDeltaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdDeltaId");

                    b.ToTable("OpsReportTvdDeltas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTvdHoleEnd", b =>
                {
                    b.Property<int>("TvdHoleEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdHoleEndId");

                    b.ToTable("OpsReportTvdHoleEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTvdHoleStart", b =>
                {
                    b.Property<int>("TvdHoleStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdHoleStartId");

                    b.ToTable("OpsReportTvdHoleStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTvdLot", b =>
                {
                    b.Property<int>("TvdLotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdLotId");

                    b.ToTable("OpsReportTvdLots");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTvdReport", b =>
                {
                    b.Property<int>("TvdReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdReportId");

                    b.ToTable("OpsReportTvdReports");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportValid", b =>
                {
                    b.Property<int>("ValidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GravTotalFieldCalcId")
                        .HasColumnType("int");

                    b.Property<int?>("MagDipAngleCalcId")
                        .HasColumnType("int");

                    b.Property<int?>("MagTotalFieldCalcId")
                        .HasColumnType("int");

                    b.HasKey("ValidId");

                    b.HasIndex("GravTotalFieldCalcId");

                    b.HasIndex("MagDipAngleCalcId");

                    b.HasIndex("MagTotalFieldCalcId");

                    b.ToTable("OpsReportValids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVariableDeckLoad", b =>
                {
                    b.Property<int>("VariableDeckLoadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VariableDeckLoadId");

                    b.ToTable("OpsReportVariableDeckLoads");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVarianceEE", b =>
                {
                    b.Property<int>("VarianceEEId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VarianceEEId");

                    b.ToTable("OpsReportVarianceEEs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVarianceEVert", b =>
                {
                    b.Property<int>("VarianceEVertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VarianceEVertId");

                    b.ToTable("OpsReportVarianceEVerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVarianceNE", b =>
                {
                    b.Property<int>("OpsReportsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OpsReportsId");

                    b.ToTable("OpsReportVarianceNEs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVarianceNN", b =>
                {
                    b.Property<int>("VarianceNNId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VarianceNNId");

                    b.ToTable("OpsReportVarianceNNs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVarianceNVert", b =>
                {
                    b.Property<int>("VarianceNVertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VarianceNVertId");

                    b.ToTable("OpsReportVarianceNVerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVarianceVertVert", b =>
                {
                    b.Property<int>("VarianceVertVertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VarianceVertVertId");

                    b.ToTable("OpsReportVarianceVertVerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVelNozzleAv", b =>
                {
                    b.Property<int>("VelNozzleAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VelNozzleAvId");

                    b.ToTable("OpsReportVelNozzleAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVelWind", b =>
                {
                    b.Property<int>("VelWindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VelWindId");

                    b.ToTable("OpsReportVelWinds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVertSect", b =>
                {
                    b.Property<int>("VertSectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VertSectId");

                    b.ToTable("OpsReportVertSects");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVisFunnel", b =>
                {
                    b.Property<int>("VisFunnelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisFunnelId");

                    b.ToTable("OpsReportVisFunnels");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVisibility", b =>
                {
                    b.Property<int>("VisibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisibilityId");

                    b.ToTable("OpsReportVisibilitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolCtgDischarged", b =>
                {
                    b.Property<int>("VolCtgDischargedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolCtgDischargedId");

                    b.ToTable("OpsReportVolCtgDischargeds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolKickTol", b =>
                {
                    b.Property<int>("VolKickTolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolKickTolId");

                    b.ToTable("OpsReportVolKickTols");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolLostAbandonHole", b =>
                {
                    b.Property<int>("VolLostAbandonHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolLostAbandonHoleId");

                    b.ToTable("OpsReportVolLostAbandonHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolLostBhdCsgHole", b =>
                {
                    b.Property<int>("VolLostBhdCsgHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolLostBhdCsgHoleId");

                    b.ToTable("OpsReportVolLostBhdCsgHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolLostCircHole", b =>
                {
                    b.Property<int>("VolLostCircHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolLostCircHoleId");

                    b.ToTable("OpsReportVolLostCircHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolLostCmtHole", b =>
                {
                    b.Property<int>("VolLostCmtHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolLostCmtHoleId");

                    b.ToTable("OpsReportVolLostCmtHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolLostCsgHole", b =>
                {
                    b.Property<int>("VolLostCsgHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolLostCsgHoleId");

                    b.ToTable("OpsReportVolLostCsgHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolLostMudCleanerSurf", b =>
                {
                    b.Property<int>("VolLostMudCleanerSurfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolLostMudCleanerSurfId");

                    b.ToTable("OpsReportVolLostMudCleanerSurfs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolLostOtherHole", b =>
                {
                    b.Property<int>("VolLostOtherHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolLostOtherHoleId");

                    b.ToTable("OpsReportVolLostOtherHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolLostOtherSurf", b =>
                {
                    b.Property<int>("VolLostOtherSurfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolLostOtherSurfId");

                    b.ToTable("OpsReportVolLostOtherSurfs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolLostPitsSurf", b =>
                {
                    b.Property<int>("VolLostPitsSurfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolLostPitsSurfId");

                    b.ToTable("OpsReportVolLostPitsSurfs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolLostShakerSurf", b =>
                {
                    b.Property<int>("VolLostShakerSurfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolLostShakerSurfId");

                    b.ToTable("OpsReportVolLostShakerSurfs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolLostTrippingSurf", b =>
                {
                    b.Property<int>("VolLostTrippingSurfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolLostTrippingSurfId");

                    b.ToTable("OpsReportVolLostTrippingSurfs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolMudBuilt", b =>
                {
                    b.Property<int>("VolMudBuiltId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolMudBuiltId");

                    b.ToTable("OpsReportVolMudBuilts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolMudCasing", b =>
                {
                    b.Property<int>("VolMudCasingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolMudCasingId");

                    b.ToTable("OpsReportVolMudCasings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolMudDumped", b =>
                {
                    b.Property<int>("VolMudDumpedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolMudDumpedId");

                    b.ToTable("OpsReportVolMudDumpeds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolMudHole", b =>
                {
                    b.Property<int>("VolMudHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolMudHoleId");

                    b.ToTable("OpsReportVolMudHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolMudReceived", b =>
                {
                    b.Property<int>("VolMudReceivedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolMudReceivedId");

                    b.ToTable("OpsReportVolMudReceiveds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolMudReturned", b =>
                {
                    b.Property<int>("VolMudReturnedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolMudReturnedId");

                    b.ToTable("OpsReportVolMudReturneds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolMudRiser", b =>
                {
                    b.Property<int>("VolMudRiserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolMudRiserId");

                    b.ToTable("OpsReportVolMudRisers");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolMudString", b =>
                {
                    b.Property<int>("VolMudStringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolMudStringId");

                    b.ToTable("OpsReportVolMudStrings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolOilCtgDischarge", b =>
                {
                    b.Property<int>("VolOilCtgDischargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolOilCtgDischargeId");

                    b.ToTable("OpsReportVolOilCtgDischarges");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolPit", b =>
                {
                    b.Property<int>("VolPitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolPitId");

                    b.ToTable("OpsReportVolPits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolTotMudEnd", b =>
                {
                    b.Property<int>("VolTotMudEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolTotMudEndId");

                    b.ToTable("OpsReportVolTotMudEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolTotMudLostHole", b =>
                {
                    b.Property<int>("VolTotMudLostHoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolTotMudLostHoleId");

                    b.ToTable("OpsReportVolTotMudLostHoles");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolTotMudLostSurf", b =>
                {
                    b.Property<int>("VolTotMudLostSurfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolTotMudLostSurfId");

                    b.ToTable("OpsReportVolTotMudLostSurfs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportVolTotMudStart", b =>
                {
                    b.Property<int>("VolTotMudStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolTotMudStartId");

                    b.ToTable("OpsReportVolTotMudStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportWasteDischarged", b =>
                {
                    b.Property<int>("WasteDischargedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WasteDischargedId");

                    b.ToTable("OpsReportWasteDischargeds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportWaterPc", b =>
                {
                    b.Property<int>("WaterPcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WaterPcId");

                    b.ToTable("OpsReportWaterPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportWeather", b =>
                {
                    b.Property<int>("WeatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AmtPrecipId")
                        .HasColumnType("int");

                    b.Property<int?>("AziCurrentSeaId")
                        .HasColumnType("int");

                    b.Property<int?>("AziWaveId")
                        .HasColumnType("int");

                    b.Property<int?>("AziWindId")
                        .HasColumnType("int");

                    b.Property<int?>("BarometricPressureId")
                        .HasColumnType("int");

                    b.Property<string>("BeaufortScaleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CeilingCloudId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverCloud")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrentSeaId")
                        .HasColumnType("int");

                    b.Property<string>("DTim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HtWaveId")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodWaveId")
                        .HasColumnType("int");

                    b.Property<int?>("TempSurfaceMnId")
                        .HasColumnType("int");

                    b.Property<int?>("TempSurfaceMxId")
                        .HasColumnType("int");

                    b.Property<int?>("TempWindChillId")
                        .HasColumnType("int");

                    b.Property<int?>("TempseaId")
                        .HasColumnType("int");

                    b.Property<string>("TypePrecip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VelWindId")
                        .HasColumnType("int");

                    b.Property<int?>("VisibilityId")
                        .HasColumnType("int");

                    b.HasKey("WeatherId");

                    b.HasIndex("AmtPrecipId");

                    b.HasIndex("AziCurrentSeaId");

                    b.HasIndex("AziWaveId");

                    b.HasIndex("AziWindId");

                    b.HasIndex("BarometricPressureId");

                    b.HasIndex("CeilingCloudId");

                    b.HasIndex("CurrentSeaId");

                    b.HasIndex("HtWaveId");

                    b.HasIndex("PeriodWaveId");

                    b.HasIndex("TempSurfaceMnId");

                    b.HasIndex("TempSurfaceMxId");

                    b.HasIndex("TempWindChillId");

                    b.HasIndex("TempseaId");

                    b.HasIndex("VelWindId");

                    b.HasIndex("VisibilityId");

                    b.ToTable("OpsReportWeathers");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportWellCRS", b =>
                {
                    b.Property<int>("WellCRSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WellCRSId");

                    b.ToTable("OpsReportWellCRSs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportWobAv", b =>
                {
                    b.Property<int>("WobAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WobAvId");

                    b.ToTable("OpsReportWobAvs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportWobAvDh", b =>
                {
                    b.Property<int>("WobAvDhId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WobAvDhId");

                    b.ToTable("OpsReportWobAvDhs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportWobMn", b =>
                {
                    b.Property<int>("WobMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WobMnId");

                    b.ToTable("OpsReportWobMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportWobMx", b =>
                {
                    b.Property<int>("WobMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WobMxId");

                    b.ToTable("OpsReportWobMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportWtAboveJar", b =>
                {
                    b.Property<int>("WtAboveJarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WtAboveJarId");

                    b.ToTable("OpsReportWtAboveJars");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportWtBelowJar", b =>
                {
                    b.Property<int>("WtBelowJarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WtBelowJarId");

                    b.ToTable("OpsReportWtBelowJars");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportWtMud", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("OpsReportWtMuds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportYp", b =>
                {
                    b.Property<int>("YpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YpId");

                    b.ToTable("OpsReportYps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportsCommonData", b =>
                {
                    b.Property<int>("OpsReportsCommonDataid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OpsReportsCommonDataid");

                    b.ToTable("OpsReportsCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ParameterValue", b =>
                {
                    b.Property<int>("ValueOfParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ValueId")
                        .HasColumnType("int");

                    b.Property<int?>("ValueOfParameterId1")
                        .HasColumnType("int");

                    b.HasKey("ValueOfParameterId");

                    b.HasIndex("ValueId");

                    b.HasIndex("ValueOfParameterId1");

                    b.ToTable("CoordinateReferenceSystemParameterValue");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ParentWellbore", b =>
                {
                    b.Property<int>("ParentWellboreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentWellboreId");

                    b.ToTable("WellboreParentWellbore");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PdatSession", b =>
                {
                    b.Property<int>("PdatSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AvgBottomholeTreatmentPresId")
                        .HasColumnType("int");

                    b.Property<int?>("AvgBottomholeTreatmentRateId")
                        .HasColumnType("int");

                    b.Property<int?>("BaseFluidVolId")
                        .HasColumnType("int");

                    b.Property<int?>("BottomholeHydrostaticPresId")
                        .HasColumnType("int");

                    b.Property<int?>("BottomholeTemperatureId")
                        .HasColumnType("int");

                    b.Property<int?>("BubblePointPresId")
                        .HasColumnType("int");

                    b.Property<string>("DTimFractureClose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimPumpOff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimPumpOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimWellShutin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FluidCompressibilityId")
                        .HasColumnType("int");

                    b.Property<int?>("FluidDensityId")
                        .HasColumnType("int");

                    b.Property<int?>("FluidEfficiencyId")
                        .HasColumnType("int");

                    b.Property<int?>("FluidEfficiencyTestId")
                        .HasColumnType("int");

                    b.Property<string>("FluidKprimeFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FluidNprimeFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FluidSpecificHeatId")
                        .HasColumnType("int");

                    b.Property<int?>("FluidThermalConductivityId")
                        .HasColumnType("int");

                    b.Property<int?>("FluidThermalExpansionCoefficientId")
                        .HasColumnType("int");

                    b.Property<int?>("FoamQualityId")
                        .HasColumnType("int");

                    b.Property<int?>("FractureClosePresId")
                        .HasColumnType("int");

                    b.Property<int?>("FrictionPresId")
                        .HasColumnType("int");

                    b.Property<int?>("InitialShutinPresId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomholeId")
                        .HasColumnType("int");

                    b.Property<int?>("MdMidPerforationId")
                        .HasColumnType("int");

                    b.Property<int?>("MdSurfaceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PercentPadId")
                        .HasColumnType("int");

                    b.Property<int?>("PorePresId")
                        .HasColumnType("int");

                    b.Property<int?>("PumpDurationId")
                        .HasColumnType("int");

                    b.Property<int?>("PumpFlowBackTestId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservoirTotalCompressibilityId")
                        .HasColumnType("int");

                    b.Property<int?>("StepDownTestId")
                        .HasColumnType("int");

                    b.Property<int?>("StepRateTestId")
                        .HasColumnType("int");

                    b.Property<int?>("SurfaceFluidTemperatureId")
                        .HasColumnType("int");

                    b.Property<int?>("SurfaceTemperatureId")
                        .HasColumnType("int");

                    b.Property<string>("TemperatureCorrectionApplied")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdMidPerforationId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WellboreVolumeId")
                        .HasColumnType("int");

                    b.HasKey("PdatSessionId");

                    b.HasIndex("AvgBottomholeTreatmentPresId");

                    b.HasIndex("AvgBottomholeTreatmentRateId");

                    b.HasIndex("BaseFluidVolId");

                    b.HasIndex("BottomholeHydrostaticPresId");

                    b.HasIndex("BottomholeTemperatureId");

                    b.HasIndex("BubblePointPresId");

                    b.HasIndex("FluidCompressibilityId");

                    b.HasIndex("FluidDensityId");

                    b.HasIndex("FluidEfficiencyId");

                    b.HasIndex("FluidEfficiencyTestId");

                    b.HasIndex("FluidSpecificHeatId");

                    b.HasIndex("FluidThermalConductivityId");

                    b.HasIndex("FluidThermalExpansionCoefficientId");

                    b.HasIndex("FoamQualityId");

                    b.HasIndex("FractureClosePresId");

                    b.HasIndex("FrictionPresId");

                    b.HasIndex("InitialShutinPresId");

                    b.HasIndex("MdBottomholeId");

                    b.HasIndex("MdMidPerforationId");

                    b.HasIndex("MdSurfaceId");

                    b.HasIndex("PercentPadId");

                    b.HasIndex("PorePresId");

                    b.HasIndex("PumpDurationId");

                    b.HasIndex("PumpFlowBackTestId");

                    b.HasIndex("ReservoirTotalCompressibilityId");

                    b.HasIndex("StepDownTestId");

                    b.HasIndex("StepRateTestId");

                    b.HasIndex("SurfaceFluidTemperatureId");

                    b.HasIndex("SurfaceTemperatureId");

                    b.HasIndex("TvdMidPerforationId");

                    b.HasIndex("WellboreVolumeId");

                    b.ToTable("StimJobPdatSessions");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PercentPad", b =>
                {
                    b.Property<int>("PercentPadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PercentPadId");

                    b.ToTable("StimJobPercentPads");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PercentProppantPumped", b =>
                {
                    b.Property<int>("PercentProppantPumpedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PercentProppantPumpedId");

                    b.ToTable("StimJobPercentProppantPumpeds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PerfBallSize", b =>
                {
                    b.Property<int>("PerfBallSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerfBallSizeId");

                    b.ToTable("StimJobPerfBallSizes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PerfFriction", b =>
                {
                    b.Property<int>("PerfFrictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerfFrictionId");

                    b.ToTable("StimJobPerfFrictions");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PerforationInterval", b =>
                {
                    b.Property<int>("PerforationIntervalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DensityPerforationId")
                        .HasColumnType("int");

                    b.Property<string>("DischargeCoefficient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrictionFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FrictionPresId")
                        .HasColumnType("int");

                    b.Property<int?>("MdPerforationsBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdPerforationsTopId")
                        .HasColumnType("int");

                    b.Property<string>("PerforationCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhasingPerforationId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdPerforationsBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdPerforationsTopId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerforationIntervalId");

                    b.HasIndex("DensityPerforationId");

                    b.HasIndex("FrictionPresId");

                    b.HasIndex("MdPerforationsBottomId");

                    b.HasIndex("MdPerforationsTopId");

                    b.HasIndex("PhasingPerforationId");

                    b.HasIndex("SizeId");

                    b.HasIndex("TvdPerforationsBottomId");

                    b.HasIndex("TvdPerforationsTopId");

                    b.ToTable("StimJobPerforationIntervals");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PerfproppantConc", b =>
                {
                    b.Property<int>("PerfproppantConcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerfproppantConcId");

                    b.ToTable("StimJobPerfproppantConcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PhasingPerforation", b =>
                {
                    b.Property<int>("PhasingPerforationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhasingPerforationId");

                    b.ToTable("StimJobPhasingPerforations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PipeFriction", b =>
                {
                    b.Property<int>("PipeFrictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PipeFrictionId");

                    b.ToTable("StimJobPipeFrictions");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PorePres", b =>
                {
                    b.Property<int>("PorePresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PorePresId");

                    b.ToTable("StimJobPorePress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Pres", b =>
                {
                    b.Property<int>("PresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresId");

                    b.ToTable("StimJobPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PresMeasurement", b =>
                {
                    b.Property<int>("PresMeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BottomholeRateId")
                        .HasColumnType("int");

                    b.Property<int?>("PresId")
                        .HasColumnType("int");

                    b.Property<int?>("StepRateTestId")
                        .HasColumnType("int");

                    b.HasKey("PresMeasurementId");

                    b.HasIndex("BottomholeRateId");

                    b.HasIndex("PresId");

                    b.HasIndex("StepRateTestId");

                    b.ToTable("StimJobPresMeasurements");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PrimeMeridian", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GreenwichLongitudeUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdentifierCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GreenwichLongitudeUom");

                    b.HasIndex("IdentifierCodeSpace");

                    b.HasIndex("NameCodeSpace");

                    b.ToTable("CoordinateReferenceSystemPrimeMeridian");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ProjectedCRS", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BaseGeographicCRSId")
                        .HasColumnType("int");

                    b.Property<string>("DefinedByConversionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameCodeSpace")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsesCartesianCSId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseGeographicCRSId");

                    b.HasIndex("DefinedByConversionId");

                    b.HasIndex("IdentifierCodeSpace");

                    b.HasIndex("NameCodeSpace");

                    b.HasIndex("UsesCartesianCSId");

                    b.ToTable("CoordinateReferenceSystemProjectedCRS");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PropMass", b =>
                {
                    b.Property<int>("PropMassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropMassId");

                    b.ToTable("StimJobPropMasss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Proppant", b =>
                {
                    b.Property<int>("ProppantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SieveSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WeightId")
                        .HasColumnType("int");

                    b.HasKey("ProppantId");

                    b.HasIndex("WeightId");

                    b.ToTable("StimJobProppants");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ProppantMass", b =>
                {
                    b.Property<int>("ProppantMassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProppantMassId");

                    b.ToTable("StimJobProppantMasss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ProppantMassWellHead", b =>
                {
                    b.Property<int>("ProppantMassWellHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProppantMassWellHeadId");

                    b.ToTable("StimJobProppantMassWellHeads");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PseudoRadialPres", b =>
                {
                    b.Property<int>("PseudoRadialPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PseudoRadialPresId");

                    b.ToTable("StimJobPseudoRadialPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PumpDuration", b =>
                {
                    b.Property<int>("PumpDurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PumpDurationId");

                    b.ToTable("StimJobPumpDurations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PumpFlowBackTest", b =>
                {
                    b.Property<int>("PumpFlowBackTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FractureCloseDurationId")
                        .HasColumnType("int");

                    b.Property<int?>("FractureClosePresId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PumpFlowBackTestId");

                    b.HasIndex("FractureCloseDurationId");

                    b.HasIndex("FractureClosePresId");

                    b.ToTable("StimJobPumpFlowBackTests");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PumpTime", b =>
                {
                    b.Property<int>("PumpTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PumpTimeId");

                    b.ToTable("StimJobPumpTimes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ReservoirInterval", b =>
                {
                    b.Property<int>("ReservoirIntervalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FormationPermeabilityId")
                        .HasColumnType("int");

                    b.Property<int?>("FormationPorosityId")
                        .HasColumnType("int");

                    b.Property<int?>("GrossPayThicknessId")
                        .HasColumnType("int");

                    b.Property<int?>("LithFormationPermeabilityId")
                        .HasColumnType("int");

                    b.Property<string>("LithName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LithNetPayThicknessId")
                        .HasColumnType("int");

                    b.Property<int?>("LithPoissonsRatioId")
                        .HasColumnType("int");

                    b.Property<int?>("LithPorePresId")
                        .HasColumnType("int");

                    b.Property<int?>("LithYoungsModulusId")
                        .HasColumnType("int");

                    b.Property<int?>("MdGrossPayBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdGrossPayTopId")
                        .HasColumnType("int");

                    b.Property<int?>("MdLithBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdLithTopId")
                        .HasColumnType("int");

                    b.Property<string>("NameFormation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NetPayFluidCompressibilityId")
                        .HasColumnType("int");

                    b.Property<int?>("NetPayFluidViscosityId")
                        .HasColumnType("int");

                    b.Property<int?>("NetPayFormationPermeabilityId")
                        .HasColumnType("int");

                    b.Property<int?>("NetPayFormationPorosityId")
                        .HasColumnType("int");

                    b.Property<string>("NetPayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NetPayPorePresId")
                        .HasColumnType("int");

                    b.Property<int?>("NetPayThicknessId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservoirIntervalId");

                    b.HasIndex("FormationPermeabilityId");

                    b.HasIndex("FormationPorosityId");

                    b.HasIndex("GrossPayThicknessId");

                    b.HasIndex("LithFormationPermeabilityId");

                    b.HasIndex("LithNetPayThicknessId");

                    b.HasIndex("LithPoissonsRatioId");

                    b.HasIndex("LithPorePresId");

                    b.HasIndex("LithYoungsModulusId");

                    b.HasIndex("MdGrossPayBottomId");

                    b.HasIndex("MdGrossPayTopId");

                    b.HasIndex("MdLithBottomId");

                    b.HasIndex("MdLithTopId");

                    b.HasIndex("NetPayFluidCompressibilityId");

                    b.HasIndex("NetPayFluidViscosityId");

                    b.HasIndex("NetPayFormationPermeabilityId");

                    b.HasIndex("NetPayFormationPorosityId");

                    b.HasIndex("NetPayPorePresId");

                    b.HasIndex("NetPayThicknessId");

                    b.ToTable("StimJobReservoirIntervals");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ReservoirTotalCompressibility", b =>
                {
                    b.Property<int>("ReservoirTotalCompressibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservoirTotalCompressibilityId");

                    b.ToTable("StimJobReservoirTotalCompressibilitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ResidualPermeability", b =>
                {
                    b.Property<int>("ResidualPermeabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResidualPermeabilityId");

                    b.ToTable("StimJobResidualPermeabilitys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Rig", b =>
                {
                    b.Property<int>("RigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AirGapId")
                        .HasColumnType("int");

                    b.Property<string>("Approvals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Azimuthing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BopId")
                        .HasColumnType("int");

                    b.Property<string>("BunksPerRoom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CapBulkCementId")
                        .HasColumnType("int");

                    b.Property<int?>("CapBulkMudId")
                        .HasColumnType("int");

                    b.Property<int?>("CapDrillWaterId")
                        .HasColumnType("int");

                    b.Property<int?>("CapFuelId")
                        .HasColumnType("int");

                    b.Property<int?>("CapLiquidMudId")
                        .HasColumnType("int");

                    b.Property<int?>("CapPotableWaterId")
                        .HasColumnType("int");

                    b.Property<int?>("CapWindDerrickId")
                        .HasColumnType("int");

                    b.Property<string>("CementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CentrifugeId")
                        .HasColumnType("int");

                    b.Property<string>("ClassRig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommonDataRigCommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("DTimEndOp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimStartOp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DegasserId")
                        .HasColumnType("int");

                    b.Property<string>("DescBrake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescRotSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flares")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gantry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Generator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeaveMxId")
                        .HasColumnType("int");

                    b.Property<int?>("HtDerrickId")
                        .HasColumnType("int");

                    b.Property<int?>("HydrocycloneId")
                        .HasColumnType("int");

                    b.Property<string>("IsOffshore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainEngine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MotionCompensationMnId")
                        .HasColumnType("int");

                    b.Property<int?>("MotionCompensationMxId")
                        .HasColumnType("int");

                    b.Property<string>("MotorDrawWorks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumAnch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumBlockLines")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumBunks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumCranes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumDerricks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumGuideTens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumRiserTens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumThrusters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PipeHandlingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PitUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PowerDrawWorksId")
                        .HasColumnType("int");

                    b.Property<string>("PumpUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RatingBlockId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingDerrickId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingDrawWorksId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingDrillDepthId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingHkldId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingHookId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingRotSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingSwivelId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingTqRotSysId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingWaterDepthId")
                        .HasColumnType("int");

                    b.Property<string>("Registration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiserAngleLimitId")
                        .HasColumnType("int");

                    b.Property<int?>("RotSizeOpeningId")
                        .HasColumnType("int");

                    b.Property<string>("RotSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScrSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShakerUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SizeDrillLineId")
                        .HasColumnType("int");

                    b.Property<int?>("StrokeMotionCompensationId")
                        .HasColumnType("int");

                    b.Property<int?>("SurfaceEquipmentId")
                        .HasColumnType("int");

                    b.Property<string>("TelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDerrick")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDrawWorks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeHook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeRig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeSwivel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VarDeckLdMxId")
                        .HasColumnType("int");

                    b.Property<int?>("VdlStormId")
                        .HasColumnType("int");

                    b.Property<int?>("WtBlockId")
                        .HasColumnType("int");

                    b.Property<string>("YearEntService")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RigId");

                    b.HasIndex("AirGapId");

                    b.HasIndex("BopId");

                    b.HasIndex("CapBulkCementId");

                    b.HasIndex("CapBulkMudId");

                    b.HasIndex("CapDrillWaterId");

                    b.HasIndex("CapFuelId");

                    b.HasIndex("CapLiquidMudId");

                    b.HasIndex("CapPotableWaterId");

                    b.HasIndex("CapWindDerrickId");

                    b.HasIndex("CentrifugeId");

                    b.HasIndex("CommonDataRigCommonDataId");

                    b.HasIndex("DegasserId");

                    b.HasIndex("HeaveMxId");

                    b.HasIndex("HtDerrickId");

                    b.HasIndex("HydrocycloneId");

                    b.HasIndex("MotionCompensationMnId");

                    b.HasIndex("MotionCompensationMxId");

                    b.HasIndex("PitUid");

                    b.HasIndex("PowerDrawWorksId");

                    b.HasIndex("PumpUid");

                    b.HasIndex("RatingBlockId");

                    b.HasIndex("RatingDerrickId");

                    b.HasIndex("RatingDrawWorksId");

                    b.HasIndex("RatingDrillDepthId");

                    b.HasIndex("RatingHkldId");

                    b.HasIndex("RatingHookId");

                    b.HasIndex("RatingRotSystemId");

                    b.HasIndex("RatingSwivelId");

                    b.HasIndex("RatingTqRotSysId");

                    b.HasIndex("RatingWaterDepthId");

                    b.HasIndex("RiserAngleLimitId");

                    b.HasIndex("RotSizeOpeningId");

                    b.HasIndex("ShakerUid");

                    b.HasIndex("SizeDrillLineId");

                    b.HasIndex("StrokeMotionCompensationId");

                    b.HasIndex("SurfaceEquipmentId");

                    b.HasIndex("VarDeckLdMxId");

                    b.HasIndex("VdlStormId");

                    b.HasIndex("WtBlockId");

                    b.ToTable("Rigs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigAirGap", b =>
                {
                    b.Property<int>("AirGapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AirGapId");

                    b.ToTable("RigAirGaps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigAreaSeparatorFlow", b =>
                {
                    b.Property<int>("AreaSeparatorFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AreaSeparatorFlowId");

                    b.ToTable("RigAreaSeparatorFlows");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigBop", b =>
                {
                    b.Property<int>("BopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accumulator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CapAccFluidId")
                        .HasColumnType("int");

                    b.Property<string>("DTimInstall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimRemove")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescControlManifold")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiaDiverterId")
                        .HasColumnType("int");

                    b.Property<int?>("IdBoosterLineId")
                        .HasColumnType("int");

                    b.Property<int?>("IdChkLineId")
                        .HasColumnType("int");

                    b.Property<int?>("IdKillLineId")
                        .HasColumnType("int");

                    b.Property<int?>("IdSurfLineId")
                        .HasColumnType("int");

                    b.Property<int?>("LenBoosterLineId")
                        .HasColumnType("int");

                    b.Property<int?>("LenChkLineId")
                        .HasColumnType("int");

                    b.Property<int?>("LenKillLineId")
                        .HasColumnType("int");

                    b.Property<int?>("LenSurfLineId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OdBoosterLineId")
                        .HasColumnType("int");

                    b.Property<int?>("OdChkLineId")
                        .HasColumnType("int");

                    b.Property<int?>("OdKillLineId")
                        .HasColumnType("int");

                    b.Property<int?>("OdSurfLineId")
                        .HasColumnType("int");

                    b.Property<int?>("PresAccOpRatingId")
                        .HasColumnType("int");

                    b.Property<int?>("PresAccPreChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("PresBopRatingId")
                        .HasColumnType("int");

                    b.Property<int?>("PresChokeManifoldId")
                        .HasColumnType("int");

                    b.Property<int?>("PresWorkDiverterId")
                        .HasColumnType("int");

                    b.Property<string>("RotBop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SizeBopSysId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeConnectionBopId")
                        .HasColumnType("int");

                    b.Property<string>("TypeChokeManifold")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeConnectionBop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeControlManifold")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDiverter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VolAccPreChargeId")
                        .HasColumnType("int");

                    b.HasKey("BopId");

                    b.HasIndex("CapAccFluidId");

                    b.HasIndex("DiaDiverterId");

                    b.HasIndex("IdBoosterLineId");

                    b.HasIndex("IdChkLineId");

                    b.HasIndex("IdKillLineId");

                    b.HasIndex("IdSurfLineId");

                    b.HasIndex("LenBoosterLineId");

                    b.HasIndex("LenChkLineId");

                    b.HasIndex("LenKillLineId");

                    b.HasIndex("LenSurfLineId");

                    b.HasIndex("OdBoosterLineId");

                    b.HasIndex("OdChkLineId");

                    b.HasIndex("OdKillLineId");

                    b.HasIndex("OdSurfLineId");

                    b.HasIndex("PresAccOpRatingId");

                    b.HasIndex("PresAccPreChargeId");

                    b.HasIndex("PresBopRatingId");

                    b.HasIndex("PresChokeManifoldId");

                    b.HasIndex("PresWorkDiverterId");

                    b.HasIndex("SizeBopSysId");

                    b.HasIndex("SizeConnectionBopId");

                    b.HasIndex("VolAccPreChargeId");

                    b.ToTable("RigBops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigBopComponent", b =>
                {
                    b.Property<int>("BopComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescComp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiaCloseMnId")
                        .HasColumnType("int");

                    b.Property<int?>("DiaCloseMxId")
                        .HasColumnType("int");

                    b.Property<int?>("IdPassThruId")
                        .HasColumnType("int");

                    b.Property<string>("IsVariable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nomenclature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PresWorkId")
                        .HasColumnType("int");

                    b.Property<int?>("RigBopBopId")
                        .HasColumnType("int");

                    b.Property<string>("TypeBopComp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BopComponentId");

                    b.HasIndex("DiaCloseMnId");

                    b.HasIndex("DiaCloseMxId");

                    b.HasIndex("IdPassThruId");

                    b.HasIndex("PresWorkId");

                    b.HasIndex("RigBopBopId");

                    b.ToTable("RigBopComponents");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCapAccFluid", b =>
                {
                    b.Property<int>("CapAccFluidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapAccFluidId");

                    b.ToTable("RigCapAccFluids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCapBlowdown", b =>
                {
                    b.Property<int>("CapBlowdownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapBlowdownId");

                    b.ToTable("RigCapBlowdowns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCapBulkCement", b =>
                {
                    b.Property<int>("CapBulkCementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapBulkCementId");

                    b.ToTable("RigCapBulkCements");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCapBulkMud", b =>
                {
                    b.Property<int>("CapBulkMudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapBulkMudId");

                    b.ToTable("RigCapBulkMuds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCapDrillWater", b =>
                {
                    b.Property<int>("CapDrillWaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapDrillWaterId");

                    b.ToTable("RigCapDrillWaters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCapFlow", b =>
                {
                    b.Property<int>("CapFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapFlowId");

                    b.ToTable("RigCapFlows");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCapFuel", b =>
                {
                    b.Property<int>("CapFuelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapFuelId");

                    b.ToTable("RigCapFuels");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCapGasSep", b =>
                {
                    b.Property<int>("CapGasSepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapGasSepId");

                    b.ToTable("RigCapGasSeps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCapLiquidMud", b =>
                {
                    b.Property<int>("CapLiquidMudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapLiquidMudId");

                    b.ToTable("RigCapLiquidMuds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCapMx", b =>
                {
                    b.Property<int>("CapMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapMxId");

                    b.ToTable("RigCapMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCapPotableWater", b =>
                {
                    b.Property<int>("CapPotableWaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapPotableWaterId");

                    b.ToTable("RigCapPotableWaters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCapWindDerrick", b =>
                {
                    b.Property<int>("CapWindDerrickId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapWindDerrickId");

                    b.ToTable("RigCapWindDerricks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCentrifuge", b =>
                {
                    b.Property<int>("CentrifugeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CapFlowId")
                        .HasColumnType("int");

                    b.Property<string>("DTimInstall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimRemove")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CentrifugeId");

                    b.HasIndex("CapFlowId");

                    b.ToTable("RigCentrifuges");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCommonData", b =>
                {
                    b.Property<int>("RigCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RigCommonDataId");

                    b.ToTable("RigCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigDegasser", b =>
                {
                    b.Property<int>("DegasserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaSeparatorFlowId")
                        .HasColumnType("int");

                    b.Property<int?>("CapBlowdownId")
                        .HasColumnType("int");

                    b.Property<int?>("CapFlowId")
                        .HasColumnType("int");

                    b.Property<int?>("CapGasSepId")
                        .HasColumnType("int");

                    b.Property<string>("DTimInstall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimRemove")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeightId")
                        .HasColumnType("int");

                    b.Property<int?>("HtMudSealId")
                        .HasColumnType("int");

                    b.Property<int?>("IdInletId")
                        .HasColumnType("int");

                    b.Property<int?>("IdUniqueId")
                        .HasColumnType("int");

                    b.Property<int?>("IdVentLineId")
                        .HasColumnType("int");

                    b.Property<int?>("LenId")
                        .HasColumnType("int");

                    b.Property<int?>("LenVentLineId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PresRatingId")
                        .HasColumnType("int");

                    b.Property<int?>("TempRatingId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DegasserId");

                    b.HasIndex("AreaSeparatorFlowId");

                    b.HasIndex("CapBlowdownId");

                    b.HasIndex("CapFlowId");

                    b.HasIndex("CapGasSepId");

                    b.HasIndex("HeightId");

                    b.HasIndex("HtMudSealId");

                    b.HasIndex("IdInletId");

                    b.HasIndex("IdUniqueId");

                    b.HasIndex("IdVentLineId");

                    b.HasIndex("LenId");

                    b.HasIndex("LenVentLineId");

                    b.HasIndex("PresRatingId");

                    b.HasIndex("TempRatingId");

                    b.ToTable("RigDegassers");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigDiaCloseMn", b =>
                {
                    b.Property<int>("DiaCloseMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaCloseMnId");

                    b.ToTable("RigDiaCloseMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigDiaCloseMx", b =>
                {
                    b.Property<int>("DiaCloseMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaCloseMxId");

                    b.ToTable("RigDiaCloseMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigDiaDiverter", b =>
                {
                    b.Property<int>("DiaDiverterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaDiverterId");

                    b.ToTable("RigDiaDiverters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigDisplacement", b =>
                {
                    b.Property<int>("DisplacementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DisplacementId");

                    b.ToTable("RigDisplacements");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigEff", b =>
                {
                    b.Property<int>("EffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EffId");

                    b.ToTable("RigEffs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigHeaveMx", b =>
                {
                    b.Property<int>("HeaveMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HeaveMxId");

                    b.ToTable("RigHeaveMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigHeight", b =>
                {
                    b.Property<int>("HeightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HeightId");

                    b.ToTable("RigHeights");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigHtDerrick", b =>
                {
                    b.Property<int>("HtDerrickId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HtDerrickId");

                    b.ToTable("RigHtDerricks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigHtFlange", b =>
                {
                    b.Property<int>("HtFlangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HtFlangeId");

                    b.ToTable("RigHtFlanges");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigHtInjStk", b =>
                {
                    b.Property<int>("HtInjStkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HtInjStkId");

                    b.ToTable("RigHtInjStks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigHtMudSeal", b =>
                {
                    b.Property<int>("HtMudSealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HtMudSealId");

                    b.ToTable("RigHtMudSeals");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigHtTopStk", b =>
                {
                    b.Property<int>("HtTopStkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HtTopStkId");

                    b.ToTable("RigHtTopStks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigHydrocyclone", b =>
                {
                    b.Property<int>("HydrocycloneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTimInstall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimRemove")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescCone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HydrocycloneId");

                    b.ToTable("RigHydrocyclones");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigId", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniqueId");

                    b.ToTable("RigIds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdBoosterLine", b =>
                {
                    b.Property<int>("IdBoosterLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdBoosterLineId");

                    b.ToTable("RigIdBoosterLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdChkLine", b =>
                {
                    b.Property<int>("IdChkLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdChkLineId");

                    b.ToTable("RigIdChkLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdDischargeLine", b =>
                {
                    b.Property<int>("IdDischargeLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDischargeLineId");

                    b.ToTable("RigIdDischargeLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdHose", b =>
                {
                    b.Property<int>("IdHoseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdHoseId");

                    b.ToTable("RigIdHoses");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdInlet", b =>
                {
                    b.Property<int>("IdInletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdInletId");

                    b.ToTable("RigIdInlets");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdKelly", b =>
                {
                    b.Property<int>("IdKellyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdKellyId");

                    b.ToTable("RigIdKellys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdKillLine", b =>
                {
                    b.Property<int>("IdKillLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdKillLineId");

                    b.ToTable("RigIdKillLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdLiner", b =>
                {
                    b.Property<int>("IdLinerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLinerId");

                    b.ToTable("RigIdLiners");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdPassThru", b =>
                {
                    b.Property<int>("IdPassThruId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPassThruId");

                    b.ToTable("RigIdPassThrus");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdStandpipe", b =>
                {
                    b.Property<int>("IdStandpipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStandpipeId");

                    b.ToTable("RigIdStandpipes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdSurfLine", b =>
                {
                    b.Property<int>("IdSurfLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSurfLineId");

                    b.ToTable("RigIdSurfLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdSwivel", b =>
                {
                    b.Property<int>("IdSwivelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSwivelId");

                    b.ToTable("RigIdSwivels");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdTopStk", b =>
                {
                    b.Property<int>("IdTopStkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTopStkId");

                    b.ToTable("RigIdTopStks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigIdVentLine", b =>
                {
                    b.Property<int>("IdVentLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdVentLineId");

                    b.ToTable("RigIdVentLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLen", b =>
                {
                    b.Property<int>("LenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenId");

                    b.ToTable("RigLens");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenBoosterLine", b =>
                {
                    b.Property<int>("LenBoosterLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenBoosterLineId");

                    b.ToTable("RigLenBoosterLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenChkLine", b =>
                {
                    b.Property<int>("LenChkLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenChkLineId");

                    b.ToTable("RigLenChkLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenDischargeLine", b =>
                {
                    b.Property<int>("LenDischargeLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenDischargeLineId");

                    b.ToTable("RigLenDischargeLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenHose", b =>
                {
                    b.Property<int>("LenHoseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenHoseId");

                    b.ToTable("RigLenHoses");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenKelly", b =>
                {
                    b.Property<int>("LenKellyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenKellyId");

                    b.ToTable("RigLenKellys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenKillLine", b =>
                {
                    b.Property<int>("LenKillLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenKillLineId");

                    b.ToTable("RigLenKillLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenReel", b =>
                {
                    b.Property<int>("LenReelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenReelId");

                    b.ToTable("RigLenReels");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenStandpipe", b =>
                {
                    b.Property<int>("LenStandpipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenStandpipeId");

                    b.ToTable("RigLenStandpipes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenStroke", b =>
                {
                    b.Property<int>("LenStrokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenStrokeId");

                    b.ToTable("RigLenStrokes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenSurfLine", b =>
                {
                    b.Property<int>("LenSurfLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenSurfLineId");

                    b.ToTable("RigLenSurfLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenSwivel", b =>
                {
                    b.Property<int>("LenSwivelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenSwivelId");

                    b.ToTable("RigLenSwivels");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenUmbilical", b =>
                {
                    b.Property<int>("LenUmbilicalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenUmbilicalId");

                    b.ToTable("RigLenUmbilicals");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigLenVentLine", b =>
                {
                    b.Property<int>("LenVentLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenVentLineId");

                    b.ToTable("RigLenVentLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigMotionCompensationMn", b =>
                {
                    b.Property<int>("MotionCompensationMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MotionCompensationMnId");

                    b.ToTable("RigMotionCompensationMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigMotionCompensationMx", b =>
                {
                    b.Property<int>("MotionCompensationMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MotionCompensationMxId");

                    b.ToTable("RigMotionCompensationMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigOdBoosterLine", b =>
                {
                    b.Property<int>("OdBoosterLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdBoosterLineId");

                    b.ToTable("RigOdBoosterLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigOdChkLine", b =>
                {
                    b.Property<int>("OdChkLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdChkLineId");

                    b.ToTable("RigOdChkLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigOdCore", b =>
                {
                    b.Property<int>("OdCoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdCoreId");

                    b.ToTable("RigOdCores");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigOdKillLine", b =>
                {
                    b.Property<int>("OdKillLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdKillLineId");

                    b.ToTable("RigOdKillLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigOdReel", b =>
                {
                    b.Property<int>("OdReelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdReelId");

                    b.ToTable("RigOdReels");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigOdRod", b =>
                {
                    b.Property<int>("OdRodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdRodId");

                    b.ToTable("RigOdRods");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigOdSurfLine", b =>
                {
                    b.Property<int>("OdSurfLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdSurfLineId");

                    b.ToTable("RigOdSurfLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigOdUmbilical", b =>
                {
                    b.Property<int>("OdUmbilicalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdUmbilicalId");

                    b.ToTable("RigOdUmbilicals");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPit", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CapMxId")
                        .HasColumnType("int");

                    b.Property<string>("DTimInstall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimRemove")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsActive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypePit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("CapMxId");

                    b.ToTable("RigPits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPowHydMx", b =>
                {
                    b.Property<int>("PowHydMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PowHydMxId");

                    b.ToTable("RigPowHydMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPowMechMx", b =>
                {
                    b.Property<int>("PowMechMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PowMechMxId");

                    b.ToTable("RigPowMechMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPowerDrawWorks", b =>
                {
                    b.Property<int>("PowerDrawWorksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PowerDrawWorksId");

                    b.ToTable("RigPowerDrawWork");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPresAccOpRating", b =>
                {
                    b.Property<int>("PresAccOpRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresAccOpRatingId");

                    b.ToTable("RigPresAccOpRatings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPresAccPreCharge", b =>
                {
                    b.Property<int>("PresAccPreChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresAccPreChargeId");

                    b.ToTable("RigPresAccPreCharges");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPresBopRating", b =>
                {
                    b.Property<int>("PresBopRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresBopRatingId");

                    b.ToTable("RigPresBopRatings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPresChokeManifold", b =>
                {
                    b.Property<int>("PresChokeManifoldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresChokeManifoldId");

                    b.ToTable("RigPresChokeManifolds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPresDamp", b =>
                {
                    b.Property<int>("PresDampId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresDampId");

                    b.ToTable("RigPresDamps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPresMx", b =>
                {
                    b.Property<int>("PresMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresMxId");

                    b.ToTable("RigPresMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPresRating", b =>
                {
                    b.Property<int>("PresRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresRatingId");

                    b.ToTable("RigPresRatings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPresWork", b =>
                {
                    b.Property<int>("PresWorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresWorkId");

                    b.ToTable("RigPresWorks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPresWorkDiverter", b =>
                {
                    b.Property<int>("PresWorkDiverterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresWorkDiverterId");

                    b.ToTable("RigPresWorkDiverters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPump", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DTimInstall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimRemove")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplacementId")
                        .HasColumnType("int");

                    b.Property<int?>("EffId")
                        .HasColumnType("int");

                    b.Property<int?>("IdLinerId")
                        .HasColumnType("int");

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LenStrokeId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumCyl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OdRodId")
                        .HasColumnType("int");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PowHydMxId")
                        .HasColumnType("int");

                    b.Property<int?>("PowMechMxId")
                        .HasColumnType("int");

                    b.Property<int?>("PresDampId")
                        .HasColumnType("int");

                    b.Property<int?>("PresMxId")
                        .HasColumnType("int");

                    b.Property<string>("PumpAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpmMxId")
                        .HasColumnType("int");

                    b.Property<string>("TypePump")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VolDampId")
                        .HasColumnType("int");

                    b.HasKey("Uid");

                    b.HasIndex("DisplacementId");

                    b.HasIndex("EffId");

                    b.HasIndex("IdLinerId");

                    b.HasIndex("LenStrokeId");

                    b.HasIndex("OdRodId");

                    b.HasIndex("PowHydMxId");

                    b.HasIndex("PowMechMxId");

                    b.HasIndex("PresDampId");

                    b.HasIndex("PresMxId");

                    b.HasIndex("SpmMxId");

                    b.HasIndex("VolDampId");

                    b.ToTable("RigPumps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigRatingBlock", b =>
                {
                    b.Property<int>("RatingBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingBlockId");

                    b.ToTable("RigRatingBlocks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigRatingDerrick", b =>
                {
                    b.Property<int>("RatingDerrickId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingDerrickId");

                    b.ToTable("RigRatingDerricks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigRatingDrawWorks", b =>
                {
                    b.Property<int>("RatingDrawWorksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingDrawWorksId");

                    b.ToTable("RigRatingDrawWork");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigRatingDrillDepth", b =>
                {
                    b.Property<int>("RatingDrillDepthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingDrillDepthId");

                    b.ToTable("RigRatingDrillDepths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigRatingHkld", b =>
                {
                    b.Property<int>("RatingHkldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingHkldId");

                    b.ToTable("RigRatingHklds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigRatingHook", b =>
                {
                    b.Property<int>("RatingHookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingHookId");

                    b.ToTable("RigRatingHooks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigRatingRotSystem", b =>
                {
                    b.Property<int>("RatingRotSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingRotSystemId");

                    b.ToTable("RigRatingRotSystems");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigRatingSwivel", b =>
                {
                    b.Property<int>("RatingSwivelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingSwivelId");

                    b.ToTable("RigRatingSwivels");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigRatingTqRotSys", b =>
                {
                    b.Property<int>("RatingTqRotSysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingTqRotSysId");

                    b.ToTable("RigRatingTqRotSy");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigRatingWaterDepth", b =>
                {
                    b.Property<int>("RatingWaterDepthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingWaterDepthId");

                    b.ToTable("RigRatingWaterDepths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigRiserAngleLimit", b =>
                {
                    b.Property<int>("RiserAngleLimitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RiserAngleLimitId");

                    b.ToTable("RigRiserAngleLimits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigRotSizeOpening", b =>
                {
                    b.Property<int>("RotSizeOpeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RotSizeOpeningId");

                    b.ToTable("RigRotSizeOpenings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigShaker", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CapFlowId")
                        .HasColumnType("int");

                    b.Property<string>("DTimInstall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimRemove")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationShaker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MudCleaner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumCascLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumDecks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SizeMeshMnId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("CapFlowId");

                    b.HasIndex("SizeMeshMnId");

                    b.ToTable("RigShakers");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigSizeBopSys", b =>
                {
                    b.Property<int>("SizeBopSysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeBopSysId");

                    b.ToTable("RigSizeBopSyss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigSizeConnectionBop", b =>
                {
                    b.Property<int>("SizeConnectionBopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeConnectionBopId");

                    b.ToTable("RigSizeConnectionBops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigSizeDrillLine", b =>
                {
                    b.Property<int>("SizeDrillLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeDrillLineId");

                    b.ToTable("RigSizeDrillLines");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigSizeMeshMn", b =>
                {
                    b.Property<int>("SizeMeshMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeMeshMnId");

                    b.ToTable("RigSizeMeshMns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigSpmMx", b =>
                {
                    b.Property<int>("SpmMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpmMxId");

                    b.ToTable("RigSpmMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigStrokeMotionCompensation", b =>
                {
                    b.Property<int>("StrokeMotionCompensationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StrokeMotionCompensationId");

                    b.ToTable("RigStrokeMotionCompensations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigSurfaceEquipment", b =>
                {
                    b.Property<int>("SurfaceEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CtWrapType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HtFlangeId")
                        .HasColumnType("int");

                    b.Property<int?>("HtInjStkId")
                        .HasColumnType("int");

                    b.Property<int?>("HtTopStkId")
                        .HasColumnType("int");

                    b.Property<int?>("IdDischargeLineId")
                        .HasColumnType("int");

                    b.Property<int?>("IdHoseId")
                        .HasColumnType("int");

                    b.Property<int?>("IdKellyId")
                        .HasColumnType("int");

                    b.Property<int?>("IdStandpipeId")
                        .HasColumnType("int");

                    b.Property<int?>("IdSwivelId")
                        .HasColumnType("int");

                    b.Property<int?>("IdTopStkId")
                        .HasColumnType("int");

                    b.Property<string>("InjStkUp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LenDischargeLineId")
                        .HasColumnType("int");

                    b.Property<int?>("LenHoseId")
                        .HasColumnType("int");

                    b.Property<int?>("LenKellyId")
                        .HasColumnType("int");

                    b.Property<int?>("LenReelId")
                        .HasColumnType("int");

                    b.Property<int?>("LenStandpipeId")
                        .HasColumnType("int");

                    b.Property<int?>("LenSwivelId")
                        .HasColumnType("int");

                    b.Property<int?>("LenUmbilicalId")
                        .HasColumnType("int");

                    b.Property<int?>("OdCoreId")
                        .HasColumnType("int");

                    b.Property<int?>("OdReelId")
                        .HasColumnType("int");

                    b.Property<int?>("OdUmbilicalId")
                        .HasColumnType("int");

                    b.Property<int?>("PresRatingId")
                        .HasColumnType("int");

                    b.Property<string>("TypeSurfEquip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UmbInside")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseHose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseInjStack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseKelly")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsePumpDischarge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseStandpipe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseSurfaceIron")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseSwivel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseTopStack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WidReelWrapId")
                        .HasColumnType("int");

                    b.HasKey("SurfaceEquipmentId");

                    b.HasIndex("HtFlangeId");

                    b.HasIndex("HtInjStkId");

                    b.HasIndex("HtTopStkId");

                    b.HasIndex("IdDischargeLineId");

                    b.HasIndex("IdHoseId");

                    b.HasIndex("IdKellyId");

                    b.HasIndex("IdStandpipeId");

                    b.HasIndex("IdSwivelId");

                    b.HasIndex("IdTopStkId");

                    b.HasIndex("LenDischargeLineId");

                    b.HasIndex("LenHoseId");

                    b.HasIndex("LenKellyId");

                    b.HasIndex("LenReelId");

                    b.HasIndex("LenStandpipeId");

                    b.HasIndex("LenSwivelId");

                    b.HasIndex("LenUmbilicalId");

                    b.HasIndex("OdCoreId");

                    b.HasIndex("OdReelId");

                    b.HasIndex("OdUmbilicalId");

                    b.HasIndex("PresRatingId");

                    b.HasIndex("WidReelWrapId");

                    b.ToTable("RigSurfaceEquipments");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigTempRating", b =>
                {
                    b.Property<int>("TempRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempRatingId");

                    b.ToTable("RigTempRatings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigVarDeckLdMx", b =>
                {
                    b.Property<int>("VarDeckLdMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VarDeckLdMxId");

                    b.ToTable("RigVarDeckLdMxs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigVdlStorm", b =>
                {
                    b.Property<int>("VdlStormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VdlStormId");

                    b.ToTable("RigVdlStorms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigVolAccPreCharge", b =>
                {
                    b.Property<int>("VolAccPreChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolAccPreChargeId");

                    b.ToTable("RigVolAccPreCharges");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigVolDamp", b =>
                {
                    b.Property<int>("VolDampId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolDampId");

                    b.ToTable("RigVolDamps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigWidReelWrap", b =>
                {
                    b.Property<int>("WidReelWrapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WidReelWrapId");

                    b.ToTable("RigWidReelWraps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigWtBlock", b =>
                {
                    b.Property<int>("WtBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WtBlockId");

                    b.ToTable("RigWtBlocks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Risk", b =>
                {
                    b.Property<int>("RiskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiaHoleUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Identification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdHoleEndId")
                        .HasColumnType("int");

                    b.Property<int?>("MdHoleStartId")
                        .HasColumnType("int");

                    b.Property<string>("Mitigation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ObjectReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ProbabilityLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeverityLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdHoleEndId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdHoleStartId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RiskId");

                    b.HasIndex("DiaHoleUom");

                    b.HasIndex("MdHoleEndId");

                    b.HasIndex("MdHoleStartId");

                    b.HasIndex("ObjectReferenceId");

                    b.HasIndex("TvdHoleEndId");

                    b.HasIndex("TvdHoleStartId");

                    b.ToTable("Risks");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RiskDiaHole", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("RiskDiaHole");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RiskMdHoleEnd", b =>
                {
                    b.Property<int>("MdHoleEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdHoleEndId");

                    b.ToTable("RiskMdHoleEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RiskMdHoleStart", b =>
                {
                    b.Property<int>("MdHoleStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdHoleStartId");

                    b.ToTable("RiskMdHoleStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RiskObjectReference", b =>
                {
                    b.Property<int>("ObjectReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Object")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ObjectReferenceId");

                    b.ToTable("RiskObjectReferences");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RiskTvdHoleEnd", b =>
                {
                    b.Property<int>("TvdHoleEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdHoleEndId");

                    b.ToTable("RiskTvdHoleEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RiskTvdHoleStart", b =>
                {
                    b.Property<int>("TvdHoleStartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdHoleStartId");

                    b.ToTable("RiskTvdHoleStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Rotation", b =>
                {
                    b.Property<int>("RotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RotationId");

                    b.ToTable("TargetRotations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ScreenOutPres", b =>
                {
                    b.Property<int>("ScreenOutPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScreenOutPresId");

                    b.ToTable("StimJobScreenOutPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SecondDefiningParameter", b =>
                {
                    b.Property<int>("SecondDefiningParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InverseFlatteningUom")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SecondDefiningParameterId");

                    b.HasIndex("InverseFlatteningUom");

                    b.ToTable("CoordinateReferenceSystemSecondDefiningParameter");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SemiMajorAxis", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("CoordinateReferenceSystemSemiMajorAxis");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SensorOffset", b =>
                {
                    b.Property<int>("SensorOffsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SensorOffsetId");

                    b.ToTable("LogSensorOffsets");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ShutinPres", b =>
                {
                    b.Property<int>("ShutinPresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PresId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeAfterShutinId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShutinPresId");

                    b.HasIndex("PresId");

                    b.HasIndex("TimeAfterShutinId");

                    b.ToTable("StimJobShutinPress");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ShutinPres10Min", b =>
                {
                    b.Property<int>("ShutinPres10MinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShutinPres10MinId");

                    b.ToTable("StimJobShutinPres10Mins");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ShutinPres15Min", b =>
                {
                    b.Property<int>("ShutinPres15MinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShutinPres15MinId");

                    b.ToTable("StimJobShutinPres15Mins");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ShutinPres5Min", b =>
                {
                    b.Property<int>("ShutinPres5MinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShutinPres5MinId");

                    b.ToTable("StimJobShutinPres5Mins");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreAbundance", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("SideWallCoreAbundance");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreCommonData", b =>
                {
                    b.Property<int>("SidewallCoresCommonDataid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SidewallCoresCommonDataid");

                    b.ToTable("SideWallCoreCommonData");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreDensShale", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("SideWallCoreDensShale");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreDiaHole", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("SideWallCoreDiaHole");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreLithPc", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("SideWallLithPcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreLithology", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodeLith")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DensShaleUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DunhamClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrainType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hardness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LithClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LithPcUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MatrixCement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permeability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PorosityVisible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualifierUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Roundness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeGrain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sorting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Texture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("DensShaleUom");

                    b.HasIndex("LithPcUom");

                    b.HasIndex("QualifierUid");

                    b.ToTable("SideWallCoreLithology");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreNatFlorPc", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("SideWallCoreNatFlorPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreQualifier", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AbundanceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbundanceUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("AbundanceUom");

                    b.ToTable("SideWallCoreQualifier");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreShow", b =>
                {
                    b.Property<int>("SideWallCoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CutColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutFlorStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImpregnatedLitho")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatFlorColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatFlorDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatFlorLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatFlorPcUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Odor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidueColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShowDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShowRat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StainColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StainDistr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StainPcUom")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SideWallCoreId");

                    b.HasIndex("NatFlorPcUom");

                    b.HasIndex("StainPcUom");

                    b.ToTable("SideWallCoreShow");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreStainPc", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("SideWallCoreStainPc");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreSwcSample", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LithologyUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MdUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameFormation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShowSideWallCoreId")
                        .HasColumnType("int");

                    b.HasKey("Uid");

                    b.HasIndex("LithologyUid");

                    b.HasIndex("MdUom");

                    b.HasIndex("ShowSideWallCoreId");

                    b.ToTable("SideWallCoreSwcSample");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallMd", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("SideWallMd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SidewallCore", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnalysisBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnalysisContractor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommonDataSidewallCoresCommonDataid")
                        .HasColumnType("int");

                    b.Property<string>("CoreReferenceLog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimToolPull")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimToolRun")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiaHoleUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiaPlugUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MdCoreUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MdToolReferenceUom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumEmptyPlugs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumLostPlugs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumMisfiredPlugs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumPaidPlugs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumPlugsShot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumRecPlugs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SidewallCoringTool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwcSampleUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("CommonDataSidewallCoresCommonDataid");

                    b.HasIndex("DiaHoleUom");

                    b.HasIndex("DiaPlugUom");

                    b.HasIndex("MdCoreUom");

                    b.HasIndex("MdToolReferenceUom");

                    b.HasIndex("SwcSampleUid");

                    b.ToTable("SidewallCores");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeId");

                    b.ToTable("StimJobSizes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SlurryRateBegin", b =>
                {
                    b.Property<int>("SlurryRateBeginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SlurryRateBeginId");

                    b.ToTable("StimJobSlurryRateBegins");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SlurryRateEnd", b =>
                {
                    b.Property<int>("SlurryRateEndId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SlurryRateEndId");

                    b.ToTable("StimJobSlurryRateEnds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SlurryVol", b =>
                {
                    b.Property<int>("SlurryVolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SlurryVolId");

                    b.ToTable("StimJobSlurryVols");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Speed", b =>
                {
                    b.Property<int>("SpeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpeedId");

                    b.ToTable("ToolErrorModelSpeeds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StageFluid", b =>
                {
                    b.Property<int>("StageFluidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FluidVolId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProppantId")
                        .HasColumnType("int");

                    b.Property<string>("WaterSource")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StageFluidId");

                    b.HasIndex("FluidVolId");

                    b.HasIndex("ProppantId");

                    b.ToTable("StimJobStageFluids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Start", b =>
                {
                    b.Property<int>("StartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartId");

                    b.ToTable("ToolErrorModelStarts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StartFoamRateCO2", b =>
                {
                    b.Property<int>("StartFoamRateCO2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartFoamRateCO2Id");

                    b.ToTable("StimJobStartFoamRateCO2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StartFoamRateN2", b =>
                {
                    b.Property<int>("StartFoamRateN2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartFoamRateN2Id");

                    b.ToTable("StimJobStartFoamRateN2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StartIndex", b =>
                {
                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uom");

                    b.ToTable("ChangeLogStartIndexs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StartPresBottomhole", b =>
                {
                    b.Property<int>("StartPresBottomholeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartPresBottomholeId");

                    b.ToTable("StimJobStartPresBottomholes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StartPresSurface", b =>
                {
                    b.Property<int>("StartPresSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartPresSurfaceId");

                    b.ToTable("StimJobStartPresSurfaces");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StartProppantConcBottomhole", b =>
                {
                    b.Property<int>("StartProppantConcBottomholeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartProppantConcBottomholeId");

                    b.ToTable("StimJobStartProppantConcBottomholes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StartProppantConcSurface", b =>
                {
                    b.Property<int>("StartProppantConcSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartProppantConcSurfaceId");

                    b.ToTable("StimJobStartProppantConcSurfaces");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StartPumpRateBottomhole", b =>
                {
                    b.Property<int>("StartPumpRateBottomholeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartPumpRateBottomholeId");

                    b.ToTable("StimJobStartPumpRateBottomholes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StartRateSurfaceCO2", b =>
                {
                    b.Property<int>("StartRateSurfaceCO2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartRateSurfaceCO2Id");

                    b.ToTable("StimJobStartRateSurfaceCO2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StartRateSurfaceLiquid", b =>
                {
                    b.Property<int>("StartRateSurfaceLiquidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartRateSurfaceLiquidId");

                    b.ToTable("StimJobStartRateSurfaceLiquids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StartStdRateSurfaceN2", b =>
                {
                    b.Property<int>("StartStdRateSurfaceN2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartStdRateSurfaceN2Id");

                    b.ToTable("StimJobStartStdRateSurfaceN2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StdVolN2", b =>
                {
                    b.Property<int>("StdVolN2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StdVolN2Id");

                    b.ToTable("StimJobStdVolN2s");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Step", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BottomholeRateId")
                        .HasColumnType("int");

                    b.Property<int?>("EntryFrictionId")
                        .HasColumnType("int");

                    b.Property<int?>("NearWellboreFrictionId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PerfFrictionId")
                        .HasColumnType("int");

                    b.Property<int?>("PipeFrictionId")
                        .HasColumnType("int");

                    b.Property<int?>("PresId")
                        .HasColumnType("int");

                    b.Property<int?>("StepDownTestId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StepId");

                    b.HasIndex("BottomholeRateId");

                    b.HasIndex("EntryFrictionId");

                    b.HasIndex("NearWellboreFrictionId");

                    b.HasIndex("PerfFrictionId");

                    b.HasIndex("PipeFrictionId");

                    b.HasIndex("PresId");

                    b.HasIndex("StepDownTestId");

                    b.ToTable("StimJobSteps");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StepDownTest", b =>
                {
                    b.Property<int>("StepDownTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BottomholeFluidDensityId")
                        .HasColumnType("int");

                    b.Property<int?>("DiameterEntryHolePipeFrictionId")
                        .HasColumnType("int");

                    b.Property<string>("DischargeCoefficient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EffectivePerfs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InitialShutinPresId")
                        .HasColumnType("int");

                    b.Property<string>("PerforationCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StepDownTestId");

                    b.HasIndex("BottomholeFluidDensityId");

                    b.HasIndex("DiameterEntryHolePipeFrictionId");

                    b.HasIndex("InitialShutinPresId");

                    b.ToTable("StimJobStepDownTests");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StepIncrement", b =>
                {
                    b.Property<int>("StepIncrementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StepIncrementId");

                    b.ToTable("LogStepIncrements");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StepRateTest", b =>
                {
                    b.Property<int>("StepRateTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FractureExtensionPresId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StepRateTestId");

                    b.HasIndex("FractureExtensionPresId");

                    b.ToTable("StimJobStepRateTests");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StimJob", b =>
                {
                    b.Property<int>("StimJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AvgJobPresId")
                        .HasColumnType("int");

                    b.Property<int?>("BottomholeStaticTemperatureId")
                        .HasColumnType("int");

                    b.Property<string>("CommodityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimArrival")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlowBackPresId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowBackRateId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowBackVolumeId")
                        .HasColumnType("int");

                    b.Property<int?>("FluidEfficiencyId")
                        .HasColumnType("int");

                    b.Property<int?>("HhpOrderedId")
                        .HasColumnType("int");

                    b.Property<int?>("HhpUsedId")
                        .HasColumnType("int");

                    b.Property<int?>("JobIntervalId")
                        .HasColumnType("int");

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxFluidRateId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxJobPresId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerfBallCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProppantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supervisor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalCO2MassId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalJobVolumeId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalN2StdVolumeId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalProppantWtId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPumpTimeId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatingBottomholeTemperatureId")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentIntervalCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StimJobId");

                    b.HasIndex("AvgJobPresId");

                    b.HasIndex("BottomholeStaticTemperatureId");

                    b.HasIndex("FlowBackPresId");

                    b.HasIndex("FlowBackRateId");

                    b.HasIndex("FlowBackVolumeId");

                    b.HasIndex("FluidEfficiencyId");

                    b.HasIndex("HhpOrderedId");

                    b.HasIndex("HhpUsedId");

                    b.HasIndex("JobIntervalId");

                    b.HasIndex("MaxFluidRateId");

                    b.HasIndex("MaxJobPresId");

                    b.HasIndex("TotalCO2MassId");

                    b.HasIndex("TotalJobVolumeId");

                    b.HasIndex("TotalN2StdVolumeId");

                    b.HasIndex("TotalProppantWtId");

                    b.HasIndex("TotalPumpTimeId");

                    b.HasIndex("TreatingBottomholeTemperatureId");

                    b.ToTable("StimJobs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StimJobAdditive", b =>
                {
                    b.Property<int>("AdditiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StageFluidId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VolumeId")
                        .HasColumnType("int");

                    b.HasKey("AdditiveId");

                    b.HasIndex("MassId");

                    b.HasIndex("StageFluidId");

                    b.HasIndex("VolumeId");

                    b.ToTable("StimJobAdditives");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StimJobId", b =>
                {
                    b.Property<int>("IdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdId");

                    b.ToTable("StimJobIds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StimJobMdBottom", b =>
                {
                    b.Property<int>("MdBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdBottomId");

                    b.ToTable("StimJobMdBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StimJobMdTop", b =>
                {
                    b.Property<int>("MdTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdTopId");

                    b.ToTable("StimJobMdTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StimJobOd", b =>
                {
                    b.Property<int>("OdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdId");

                    b.ToTable("StimJobOds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StimJobTubular", b =>
                {
                    b.Property<int>("TubularId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FlowPathId")
                        .HasColumnType("int");

                    b.Property<int?>("IdId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<int?>("OdId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VolumeFactorId")
                        .HasColumnType("int");

                    b.Property<int?>("WeightId")
                        .HasColumnType("int");

                    b.HasKey("TubularId");

                    b.HasIndex("FlowPathId");

                    b.HasIndex("IdId");

                    b.HasIndex("MdBottomId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("OdId");

                    b.HasIndex("VolumeFactorId");

                    b.HasIndex("WeightId");

                    b.ToTable("StimJobTubulars");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StimJobVolumeFactor", b =>
                {
                    b.Property<int>("VolumeFactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolumeFactorId");

                    b.ToTable("StimJobVolumeFactors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StimJobWeight", b =>
                {
                    b.Property<int>("WeightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeightId");

                    b.ToTable("StimJobWeights");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Strike", b =>
                {
                    b.Property<int>("StrikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StrikeId");

                    b.ToTable("TargetStrikes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SurfaceFluidTemperature", b =>
                {
                    b.Property<int>("SurfaceFluidTemperatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurfaceFluidTemperatureId");

                    b.ToTable("StimJobSurfaceFluidTemperatures");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SurfaceTemperature", b =>
                {
                    b.Property<int>("SurfaceTemperatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurfaceTemperatureId");

                    b.ToTable("StimJobSurfaceTemperatures");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SurveyProgram", b =>
                {
                    b.Property<int>("SurveyProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommonDataSurveyProgramCommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("DTimTrajProg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Engineer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Final")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurveyVer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveyProgramId");

                    b.HasIndex("CommonDataSurveyProgramCommonDataId");

                    b.ToTable("SurveyPrograms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SurveyProgramCommonData", b =>
                {
                    b.Property<int>("SurveyProgramCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveyProgramCommonDataId");

                    b.ToTable("SurveyProgramCommonData");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SurveySection", b =>
                {
                    b.Property<int>("SurveySectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FrequencyMxId")
                        .HasColumnType("int");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdEndId")
                        .HasColumnType("int");

                    b.Property<int?>("MdStartId")
                        .HasColumnType("int");

                    b.Property<string>("ModelError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSurveyCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameTool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Overwrite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sequence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SurveyProgramId")
                        .HasColumnType("int");

                    b.Property<string>("TypeTool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveySectionId");

                    b.HasIndex("FrequencyMxId");

                    b.HasIndex("MdEndId");

                    b.HasIndex("MdStartId");

                    b.HasIndex("SurveyProgramId");

                    b.ToTable("SurveyProgramSurveySection");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Target", b =>
                {
                    b.Property<int>("TargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AziRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatTarg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommonDataTargetCommonDataId")
                        .HasColumnType("int");

                    b.Property<int?>("DipId")
                        .HasColumnType("int");

                    b.Property<int?>("DispEwCenterId")
                        .HasColumnType("int");

                    b.Property<int?>("DispEwOffsetId")
                        .HasColumnType("int");

                    b.Property<int?>("DispEwSectOrigId")
                        .HasColumnType("int");

                    b.Property<int?>("DispNsCenterId")
                        .HasColumnType("int");

                    b.Property<int?>("DispNsOffsetId")
                        .HasColumnType("int");

                    b.Property<int?>("DispNsSectOrigId")
                        .HasColumnType("int");

                    b.Property<int?>("LenMajorAxisId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RotationId")
                        .HasColumnType("int");

                    b.Property<int?>("StrikeId")
                        .HasColumnType("int");

                    b.Property<int?>("ThickAboveId")
                        .HasColumnType("int");

                    b.Property<int?>("ThickBelowId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdId")
                        .HasColumnType("int");

                    b.Property<string>("TypeTargetScope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WidMinorAxisId")
                        .HasColumnType("int");

                    b.HasKey("TargetId");

                    b.HasIndex("CommonDataTargetCommonDataId");

                    b.HasIndex("DipId");

                    b.HasIndex("DispEwCenterId");

                    b.HasIndex("DispEwOffsetId");

                    b.HasIndex("DispEwSectOrigId");

                    b.HasIndex("DispNsCenterId");

                    b.HasIndex("DispNsOffsetId");

                    b.HasIndex("DispNsSectOrigId");

                    b.HasIndex("LenMajorAxisId");

                    b.HasIndex("RotationId");

                    b.HasIndex("StrikeId");

                    b.HasIndex("ThickAboveId");

                    b.HasIndex("ThickBelowId");

                    b.HasIndex("TvdId");

                    b.HasIndex("WidMinorAxisId");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TargetCommonData", b =>
                {
                    b.Property<int>("TargetCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TargetCommonDataId");

                    b.ToTable("TargetCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TargetDip", b =>
                {
                    b.Property<int>("DipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DipId");

                    b.ToTable("TargetDips");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TargetLatitude", b =>
                {
                    b.Property<int>("LatitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LatitudeId");

                    b.ToTable("TargetLatitudes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TargetLocation", b =>
                {
                    b.Property<int>("TargetLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LatitudeId")
                        .HasColumnType("int");

                    b.Property<int?>("LongitudeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectedXId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectedYId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetSectionId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WellCRSId")
                        .HasColumnType("int");

                    b.HasKey("TargetLocationId");

                    b.HasIndex("LatitudeId");

                    b.HasIndex("LongitudeId");

                    b.HasIndex("ProjectedXId");

                    b.HasIndex("ProjectedYId");

                    b.HasIndex("TargetId");

                    b.HasIndex("TargetSectionId");

                    b.HasIndex("WellCRSId");

                    b.ToTable("TargetLocations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TargetLongitude", b =>
                {
                    b.Property<int>("LongitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LongitudeId");

                    b.ToTable("TargetLongitudes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TargetProjectedX", b =>
                {
                    b.Property<int>("ProjectedXId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectedXId");

                    b.ToTable("TargetProjectedXs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TargetProjectedY", b =>
                {
                    b.Property<int>("ProjectedYId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectedYId");

                    b.ToTable("TargetProjectedYs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TargetSection", b =>
                {
                    b.Property<int>("TargetSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AngleArcId")
                        .HasColumnType("int");

                    b.Property<int?>("LenRadiusId")
                        .HasColumnType("int");

                    b.Property<string>("SectNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<int?>("ThickAboveId")
                        .HasColumnType("int");

                    b.Property<int?>("ThickBelowId")
                        .HasColumnType("int");

                    b.Property<string>("TypeTargetSectionScope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TargetSectionId");

                    b.HasIndex("AngleArcId");

                    b.HasIndex("LenRadiusId");

                    b.HasIndex("TargetId");

                    b.HasIndex("ThickAboveId");

                    b.HasIndex("ThickBelowId");

                    b.ToTable("TargetSections");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TargetTvd", b =>
                {
                    b.Property<int>("TvdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdId");

                    b.ToTable("TargetTvds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TargetWellCRS", b =>
                {
                    b.Property<int>("WellCRSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WellCRSId");

                    b.ToTable("TargetWellCRSs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TermId");

                    b.ToTable("ToolErrorModelTerms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ThickAbove", b =>
                {
                    b.Property<int>("ThickAboveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThickAboveId");

                    b.ToTable("TargetThickAboves");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ThickBelow", b =>
                {
                    b.Property<int>("ThickBelowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThickBelowId");

                    b.ToTable("TargetThickBelows");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TimeAfterShutin", b =>
                {
                    b.Property<int>("TimeAfterShutinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeAfterShutinId");

                    b.ToTable("StimJobTimeAfterShutins");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ToolErrorModel", b =>
                {
                    b.Property<int>("ToolErrorModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorizationId")
                        .HasColumnType("int");

                    b.Property<int?>("CommonDataToolErrorModelCommonDataId")
                        .HasColumnType("int");

                    b.Property<int?>("ModelParametersId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperatingConditionId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UseErrorTermSetId")
                        .HasColumnType("int");

                    b.HasKey("ToolErrorModelId");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("CommonDataToolErrorModelCommonDataId");

                    b.HasIndex("ModelParametersId");

                    b.HasIndex("OperatingConditionId");

                    b.HasIndex("UseErrorTermSetId");

                    b.ToTable("ToolErrorModels");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ToolErrorModelAuthorization", b =>
                {
                    b.Property<int>("AuthorizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Authority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorizationId");

                    b.ToTable("ToolErrorModelAuthorizations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ToolErrorModelCommonData", b =>
                {
                    b.Property<int>("ToolErrorModelCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTimLastChange")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToolErrorModelCommonDataId");

                    b.ToTable("ToolErrorModelCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ToolErrorTermSet", b =>
                {
                    b.Property<int>("ToolErrorTermSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorizationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NomenclatureId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToolErrorTermSetId");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("NomenclatureId");

                    b.ToTable("ToolErrorTermSets");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ToolErrorTermSetParameter", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NomenclatureId")
                        .HasColumnType("int");

                    b.HasKey("Uid");

                    b.HasIndex("NomenclatureId");

                    b.ToTable("ToolErrorTermSetParameters");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ToolErrorValue", b =>
                {
                    b.Property<int>("ValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ValueId");

                    b.ToTable("ToolErrorModelValues");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TotalCO2Mass", b =>
                {
                    b.Property<int>("TotalCO2MassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TotalCO2MassId");

                    b.ToTable("StimJobTotalCO2Masss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TotalFrictionPresLoss", b =>
                {
                    b.Property<int>("TotalFrictionPresLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TotalFrictionPresLossId");

                    b.ToTable("StimJobTotalFrictionPresLosss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TotalJobVolume", b =>
                {
                    b.Property<int>("TotalJobVolumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TotalJobVolumeId");

                    b.ToTable("StimJobTotalJobVolumes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TotalN2StdVolume", b =>
                {
                    b.Property<int>("TotalN2StdVolumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TotalN2StdVolumeId");

                    b.ToTable("StimJobTotalN2StdVolumes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TotalProppantMass", b =>
                {
                    b.Property<int>("TotalProppantMassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TotalProppantMassId");

                    b.ToTable("StimJobTotalProppantMasss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TotalProppantUsage", b =>
                {
                    b.Property<int>("TotalProppantUsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("JobIntervalId")
                        .HasColumnType("int");

                    b.Property<int?>("MassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TotalProppantUsageId");

                    b.HasIndex("JobIntervalId");

                    b.HasIndex("MassId");

                    b.ToTable("StimJobTotalProppantUsages");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TotalProppantWt", b =>
                {
                    b.Property<int>("TotalProppantWtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TotalProppantWtId");

                    b.ToTable("StimJobTotalProppantWts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TotalPumpTime", b =>
                {
                    b.Property<int>("TotalPumpTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TotalPumpTimeId");

                    b.ToTable("StimJobTotalPumpTimes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TotalVolume", b =>
                {
                    b.Property<int>("TotalVolumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TotalVolumeId");

                    b.ToTable("StimJobTotalVolumes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Trajectory", b =>
                {
                    b.Property<int>("TrajectoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AziRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AziVertSectId")
                        .HasColumnType("int");

                    b.Property<int?>("CommonDataTrajectoryCommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("DTimTrajEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimTrajStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definitive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DispEwVertSectOrigId")
                        .HasColumnType("int");

                    b.Property<int?>("DispNsVertSectOrigId")
                        .HasColumnType("int");

                    b.Property<string>("FinalTraj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GridCorUsedId")
                        .HasColumnType("int");

                    b.Property<int?>("MagDeclUsedId")
                        .HasColumnType("int");

                    b.Property<int?>("MdMnId")
                        .HasColumnType("int");

                    b.Property<int?>("MdMxId")
                        .HasColumnType("int");

                    b.Property<string>("Memory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrajectoryStationId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrajectoryId");

                    b.HasIndex("AziVertSectId");

                    b.HasIndex("CommonDataTrajectoryCommonDataId");

                    b.HasIndex("DispEwVertSectOrigId");

                    b.HasIndex("DispNsVertSectOrigId");

                    b.HasIndex("GridCorUsedId");

                    b.HasIndex("MagDeclUsedId");

                    b.HasIndex("MdMnId");

                    b.HasIndex("MdMxId");

                    b.HasIndex("TrajectoryStationId");

                    b.ToTable("Trajectorys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryAzi", b =>
                {
                    b.Property<int>("AziId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AziId");

                    b.ToTable("TrajectoryAzis");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryBiasE", b =>
                {
                    b.Property<int>("BiasEId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BiasEId");

                    b.ToTable("TrajectoryBiasEs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryBiasN", b =>
                {
                    b.Property<int>("BiasNDtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BiasNDtId");

                    b.ToTable("TrajectoryBiasNs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryBiasVert", b =>
                {
                    b.Property<int>("BiasVertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BiasVertId");

                    b.ToTable("TrajectoryBiasVerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryCommonData", b =>
                {
                    b.Property<int>("TrajectoryCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrajectoryCommonDataId");

                    b.ToTable("TrajectoryCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryCorUsed", b =>
                {
                    b.Property<int>("TrajectoryCorUsedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DirSensorOffsetId")
                        .HasColumnType("int");

                    b.Property<int?>("GravAxialAccelCorId")
                        .HasColumnType("int");

                    b.Property<int?>("GravTran1AccelCorId")
                        .HasColumnType("int");

                    b.Property<int?>("GravTran2AccelCorId")
                        .HasColumnType("int");

                    b.Property<int?>("MagAxialDrlstrCorId")
                        .HasColumnType("int");

                    b.Property<int?>("MagTran1DrlstrCorId")
                        .HasColumnType("int");

                    b.Property<int?>("MagTran2DrlstrCorId")
                        .HasColumnType("int");

                    b.Property<int?>("SagAziCorId")
                        .HasColumnType("int");

                    b.Property<int?>("SagIncCorId")
                        .HasColumnType("int");

                    b.Property<int?>("StnGridCorUsedId")
                        .HasColumnType("int");

                    b.Property<int?>("StnMagDeclUsedId")
                        .HasColumnType("int");

                    b.HasKey("TrajectoryCorUsedId");

                    b.HasIndex("DirSensorOffsetId");

                    b.HasIndex("GravAxialAccelCorId");

                    b.HasIndex("GravTran1AccelCorId");

                    b.HasIndex("GravTran2AccelCorId");

                    b.HasIndex("MagAxialDrlstrCorId");

                    b.HasIndex("MagTran1DrlstrCorId");

                    b.HasIndex("MagTran2DrlstrCorId");

                    b.HasIndex("SagAziCorId");

                    b.HasIndex("SagIncCorId");

                    b.HasIndex("StnGridCorUsedId");

                    b.HasIndex("StnMagDeclUsedId");

                    b.ToTable("TrajectoryCorUseds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryDipAngleUncert", b =>
                {
                    b.Property<int>("DipAngleUncertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DipAngleUncertId");

                    b.ToTable("TrajectoryDipAngleUncerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryDirSensorOffset", b =>
                {
                    b.Property<int>("DirSensorOffsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DirSensorOffsetId");

                    b.ToTable("TrajectoryDirSensorOffsets");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryDispEw", b =>
                {
                    b.Property<int>("DispEwId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispEwId");

                    b.ToTable("TrajectoryDispEws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryDispNs", b =>
                {
                    b.Property<int>("DispNsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispNsId");

                    b.ToTable("TrajectoryDispNss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryDls", b =>
                {
                    b.Property<int>("DlsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DlsId");

                    b.ToTable("TrajectoryDlss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryGravAxialAccelCor", b =>
                {
                    b.Property<int>("GravAxialAccelCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravAxialAccelCorId");

                    b.ToTable("TrajectoryGravAxialAccelCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryGravAxialRaw", b =>
                {
                    b.Property<int>("GravAxialRawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravAxialRawId");

                    b.ToTable("TrajectoryGravAxialRaws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryGravTotalFieldCalc", b =>
                {
                    b.Property<int>("GravTotalFieldCalcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravTotalFieldCalcId");

                    b.ToTable("TrajectoryGravTotalFieldCalcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryGravTotalUncert", b =>
                {
                    b.Property<int>("GravTotalUncertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravTotalUncertId");

                    b.ToTable("TrajectoryGravTotalUncerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryGravTran1AccelCor", b =>
                {
                    b.Property<int>("GravTran1AccelCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravTran1AccelCorId");

                    b.ToTable("TrajectoryGravTran1AccelCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryGravTran1Raw", b =>
                {
                    b.Property<int>("GravTran1RawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravTran1RawId");

                    b.ToTable("TrajectoryGravTran1Raws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryGravTran2AccelCor", b =>
                {
                    b.Property<int>("GravTran2AccelCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravTran2AccelCorId");

                    b.ToTable("TrajectoryGravTran2AccelCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryGravTran2Raw", b =>
                {
                    b.Property<int>("GravTran2RawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GravTran2RawId");

                    b.ToTable("TrajectoryGravTran2Raws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryGtf", b =>
                {
                    b.Property<int>("GtfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GtfId");

                    b.ToTable("TrajectoryGtfs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryIncl", b =>
                {
                    b.Property<int>("InclId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InclId");

                    b.ToTable("TrajectoryIncls");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryLatitude", b =>
                {
                    b.Property<int>("LatitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LatitudeId");

                    b.ToTable("TrajectoryLatitudes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryLocation", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("EastingId")
                        .HasColumnType("int");

                    b.Property<int?>("LatitudeId")
                        .HasColumnType("int");

                    b.Property<int?>("LongitudeId")
                        .HasColumnType("int");

                    b.Property<int?>("NorthingId")
                        .HasColumnType("int");

                    b.Property<int?>("TrajectoryStationId")
                        .HasColumnType("int");

                    b.Property<string>("WellCRSUidRef")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Uid");

                    b.HasIndex("EastingId");

                    b.HasIndex("LatitudeId");

                    b.HasIndex("LongitudeId");

                    b.HasIndex("NorthingId");

                    b.HasIndex("TrajectoryStationId");

                    b.HasIndex("WellCRSUidRef");

                    b.ToTable("TrajectoryLocations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryLongitude", b =>
                {
                    b.Property<int>("LongitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LongitudeId");

                    b.ToTable("TrajectoryLongitudes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMagAxialDrlstrCor", b =>
                {
                    b.Property<int>("MagAxialDrlstrCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagAxialDrlstrCorId");

                    b.ToTable("TrajectoryMagAxialDrlstrCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMagAxialRaw", b =>
                {
                    b.Property<int>("MagAxialRawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagAxialRawId");

                    b.ToTable("TrajectoryMagAxialRaws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMagDipAngleCalc", b =>
                {
                    b.Property<int>("MagDipAngleCalcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagDipAngleCalcId");

                    b.ToTable("TrajectoryMagDipAngleCalcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMagTotalFieldCalc", b =>
                {
                    b.Property<int>("MagTotalFieldCalcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagTotalFieldCalcId");

                    b.ToTable("TrajectoryMagTotalFieldCalcs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMagTotalUncert", b =>
                {
                    b.Property<int>("MagTotalUncertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagTotalUncertId");

                    b.ToTable("TrajectoryMagTotalUncerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMagTran1DrlstrCor", b =>
                {
                    b.Property<int>("MagTran1DrlstrCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagTran1DrlstrCorId");

                    b.ToTable("TrajectoryMagTran1DrlstrCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMagTran1Raw", b =>
                {
                    b.Property<int>("MagTran1RawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagTran1RawId");

                    b.ToTable("TrajectoryMagTran1Raws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMagTran2DrlstrCor", b =>
                {
                    b.Property<int>("MagTran2DrlstrCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagTran2DrlstrCorId");

                    b.ToTable("TrajectoryMagTran2DrlstrCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMagTran2Raw", b =>
                {
                    b.Property<int>("MagTran2RawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagTran2RawId");

                    b.ToTable("TrajectoryMagTran2Raws");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMatrixCov", b =>
                {
                    b.Property<int>("MatrixCovId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BiasEId")
                        .HasColumnType("int");

                    b.Property<int?>("BiasNDtId")
                        .HasColumnType("int");

                    b.Property<int?>("BiasVertId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianceEEId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianceEVertId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianceNEId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianceNNId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianceNVertId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianceVertVertId")
                        .HasColumnType("int");

                    b.HasKey("MatrixCovId");

                    b.HasIndex("BiasEId");

                    b.HasIndex("BiasNDtId");

                    b.HasIndex("BiasVertId");

                    b.HasIndex("VarianceEEId");

                    b.HasIndex("VarianceEVertId");

                    b.HasIndex("VarianceNEId");

                    b.HasIndex("VarianceNNId");

                    b.HasIndex("VarianceNVertId");

                    b.HasIndex("VarianceVertVertId");

                    b.ToTable("TrajectoryMatrixCovs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMd", b =>
                {
                    b.Property<int>("MdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdId");

                    b.ToTable("TrajectoryMds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMdDelta", b =>
                {
                    b.Property<int>("MdDeltaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdDeltaId");

                    b.ToTable("TrajectoryMdDeltas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMtf", b =>
                {
                    b.Property<int>("MtfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MtfId");

                    b.ToTable("TrajectoryMtfs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryNorthing", b =>
                {
                    b.Property<int>("NorthingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NorthingId");

                    b.ToTable("TrajectoryNorthings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryRateBuild", b =>
                {
                    b.Property<int>("RateBuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RateBuildId");

                    b.ToTable("TrajectoryRateBuilds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryRateTurn", b =>
                {
                    b.Property<int>("RateTurnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RateTurnId");

                    b.ToTable("TrajectoryRateTurns");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryRawData", b =>
                {
                    b.Property<int>("RawDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GravAxialRawId")
                        .HasColumnType("int");

                    b.Property<int?>("GravTran1RawId")
                        .HasColumnType("int");

                    b.Property<int?>("GravTran2RawId")
                        .HasColumnType("int");

                    b.Property<int?>("MagAxialRawId")
                        .HasColumnType("int");

                    b.Property<int?>("MagTran1RawId")
                        .HasColumnType("int");

                    b.Property<int?>("MagTran2RawId")
                        .HasColumnType("int");

                    b.HasKey("RawDataId");

                    b.HasIndex("GravAxialRawId");

                    b.HasIndex("GravTran1RawId");

                    b.HasIndex("GravTran2RawId");

                    b.HasIndex("MagAxialRawId");

                    b.HasIndex("MagTran1RawId");

                    b.HasIndex("MagTran2RawId");

                    b.ToTable("TrajectoryRawDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectorySagAziCor", b =>
                {
                    b.Property<int>("SagAziCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SagAziCorId");

                    b.ToTable("TrajectorySagAziCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectorySagIncCor", b =>
                {
                    b.Property<int>("SagIncCorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SagIncCorId");

                    b.ToTable("TrajectorySagIncCors");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryStation", b =>
                {
                    b.Property<int>("TrajectoryStationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AziId")
                        .HasColumnType("int");

                    b.Property<int?>("CorUsedTrajectoryCorUsedId")
                        .HasColumnType("int");

                    b.Property<string>("DTimStn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DipAngleUncertId")
                        .HasColumnType("int");

                    b.Property<int?>("DispEwId")
                        .HasColumnType("int");

                    b.Property<int?>("DispNsId")
                        .HasColumnType("int");

                    b.Property<int?>("DlsId")
                        .HasColumnType("int");

                    b.Property<string>("GravAccelCorUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GravTotalUncertId")
                        .HasColumnType("int");

                    b.Property<int?>("GtfId")
                        .HasColumnType("int");

                    b.Property<int?>("InclId")
                        .HasColumnType("int");

                    b.Property<string>("MagDrlstrCorUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MagTotalUncertId")
                        .HasColumnType("int");

                    b.Property<string>("MagXAxialCorUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MatrixCovId")
                        .HasColumnType("int");

                    b.Property<int?>("MdDeltaId")
                        .HasColumnType("int");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<string>("ModelToolError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MtfId")
                        .HasColumnType("int");

                    b.Property<int?>("RateBuildId")
                        .HasColumnType("int");

                    b.Property<int?>("RateTurnId")
                        .HasColumnType("int");

                    b.Property<int?>("RawDataId")
                        .HasColumnType("int");

                    b.Property<string>("SagCorUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusTrajStation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdDeltaId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdId")
                        .HasColumnType("int");

                    b.Property<string>("TypeTrajStation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ValidId")
                        .HasColumnType("int");

                    b.Property<int?>("VertSectId")
                        .HasColumnType("int");

                    b.HasKey("TrajectoryStationId");

                    b.HasIndex("AziId");

                    b.HasIndex("CorUsedTrajectoryCorUsedId");

                    b.HasIndex("DipAngleUncertId");

                    b.HasIndex("DispEwId");

                    b.HasIndex("DispNsId");

                    b.HasIndex("DlsId");

                    b.HasIndex("GravTotalUncertId");

                    b.HasIndex("GtfId");

                    b.HasIndex("InclId");

                    b.HasIndex("MagTotalUncertId");

                    b.HasIndex("MatrixCovId");

                    b.HasIndex("MdDeltaId");

                    b.HasIndex("MdId");

                    b.HasIndex("MtfId");

                    b.HasIndex("RateBuildId");

                    b.HasIndex("RateTurnId");

                    b.HasIndex("RawDataId");

                    b.HasIndex("TvdDeltaId");

                    b.HasIndex("TvdId");

                    b.HasIndex("ValidId");

                    b.HasIndex("VertSectId");

                    b.ToTable("TrajectoryStations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryStnGridCorUsed", b =>
                {
                    b.Property<int>("StnGridCorUsedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StnGridCorUsedId");

                    b.ToTable("TrajectoryStnGridCorUseds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryStnMagDeclUsed", b =>
                {
                    b.Property<int>("StnMagDeclUsedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StnMagDeclUsedId");

                    b.ToTable("TrajectoryStnMagDeclUseds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryTvd", b =>
                {
                    b.Property<int>("TvdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdId");

                    b.ToTable("TrajectoryTvds");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryTvdDelta", b =>
                {
                    b.Property<int>("TvdDeltaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdDeltaId");

                    b.ToTable("TrajectoryTvdDeltas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryValid", b =>
                {
                    b.Property<int>("ValidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GravTotalFieldCalcId")
                        .HasColumnType("int");

                    b.Property<int?>("MagDipAngleCalcId")
                        .HasColumnType("int");

                    b.Property<int?>("MagTotalFieldCalcId")
                        .HasColumnType("int");

                    b.HasKey("ValidId");

                    b.HasIndex("GravTotalFieldCalcId");

                    b.HasIndex("MagDipAngleCalcId");

                    b.HasIndex("MagTotalFieldCalcId");

                    b.ToTable("TrajectoryValids");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryVarianceEE", b =>
                {
                    b.Property<int>("VarianceEEId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VarianceEEId");

                    b.ToTable("TrajectoryVarianceEEs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryVarianceEVert", b =>
                {
                    b.Property<int>("VarianceEVertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VarianceEVertId");

                    b.ToTable("TrajectoryVarianceEVerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryVarianceNE", b =>
                {
                    b.Property<int>("VarianceNEId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VarianceNEId");

                    b.ToTable("TrajectoryVarianceNEs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryVarianceNN", b =>
                {
                    b.Property<int>("VarianceNNId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VarianceNNId");

                    b.ToTable("TrajectoryVarianceNNs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryVarianceNVert", b =>
                {
                    b.Property<int>("VarianceNVertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VarianceNVertId");

                    b.ToTable("TrajectoryVarianceNVerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryVarianceVertVert", b =>
                {
                    b.Property<int>("VarianceVertVertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VarianceVertVertId");

                    b.ToTable("TrajectoryVarianceVertVerts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryVertSect", b =>
                {
                    b.Property<int>("VertSectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VertSectId");

                    b.ToTable("TrajectoryVertSects");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryWellCRS", b =>
                {
                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UidRef");

                    b.ToTable("TrajectoryWellCRSs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TreatingBottomholeTemperature", b =>
                {
                    b.Property<int>("TreatingBottomholeTemperatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatingBottomholeTemperatureId");

                    b.ToTable("StimJobTreatingBottomholeTemperatures");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Tubular", b =>
                {
                    b.Property<int>("TubularId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommonDataTubularyCommonDataId")
                        .HasColumnType("int");

                    b.Property<int?>("DiaHoleAssyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceNuclear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeTubularAssy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValveFloat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TubularId");

                    b.HasIndex("CommonDataTubularyCommonDataId");

                    b.HasIndex("DiaHoleAssyId");

                    b.ToTable("Tubulars");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularAngle", b =>
                {
                    b.Property<int>("AngleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AngleId");

                    b.ToTable("TubularAngle");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularAreaNozzleFlow", b =>
                {
                    b.Property<int>("AreaNozzleFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AreaNozzleFlowId");

                    b.ToTable("TubularAreaNozzleFlow");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularAxialStiffness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TubularAxialStiffness");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularBend", b =>
                {
                    b.Property<int>("BendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AngleId")
                        .HasColumnType("int");

                    b.Property<int?>("DistBendBotId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BendId");

                    b.HasIndex("AngleId");

                    b.HasIndex("DistBendBotId");

                    b.ToTable("TubularBend");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularBendSettingsMn", b =>
                {
                    b.Property<int>("BendSettingsMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BendSettingsMnId");

                    b.ToTable("TubularBendSettingsMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularBendSettingsMx", b =>
                {
                    b.Property<int>("BendSettingsMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BendSettingsMxId");

                    b.ToTable("TubularBendSettingsMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularBendStiffness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TubularBendStiffness");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularBitRecord", b =>
                {
                    b.Property<int>("BitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BitClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeIADC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondFinalBearing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondFinalDull")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondFinalGauge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondFinalInner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondFinalLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondFinalOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondFinalOuter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondFinalReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondInitBearing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondInitDull")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondInitGauge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondInitInner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondInitLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondInitOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondInitOuter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondInitReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CostId")
                        .HasColumnType("int");

                    b.Property<int?>("DiaBitId")
                        .HasColumnType("int");

                    b.Property<int?>("DiaPassThruId")
                        .HasColumnType("int");

                    b.Property<int?>("DiaPilotId")
                        .HasColumnType("int");

                    b.Property<string>("Drive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumBit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeBit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BitId");

                    b.HasIndex("CostId");

                    b.HasIndex("DiaBitId");

                    b.HasIndex("DiaPassThruId");

                    b.HasIndex("DiaPilotId");

                    b.ToTable("TubularBitRecord");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularClearanceBearBox", b =>
                {
                    b.Property<int>("ClearanceBearBoxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClearanceBearBoxId");

                    b.ToTable("TubularClearanceBearBox");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularCommonData", b =>
                {
                    b.Property<int>("TubularyCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TubularyCommonDataId");

                    b.ToTable("TubularCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularComponent", b =>
                {
                    b.Property<int>("TubularComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaNozzleFlowId")
                        .HasColumnType("int");

                    b.Property<int?>("AxialStiffnessId")
                        .HasColumnType("int");

                    b.Property<int?>("BendId")
                        .HasColumnType("int");

                    b.Property<int?>("BendStiffnessId")
                        .HasColumnType("int");

                    b.Property<int?>("BitRecordBitId")
                        .HasColumnType("int");

                    b.Property<string>("ClassService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigCon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConnectionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DispId")
                        .HasColumnType("int");

                    b.Property<int?>("DoglegMxId")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HoleOpenerId")
                        .HasColumnType("int");

                    b.Property<int?>("IdFishneckId")
                        .HasColumnType("int");

                    b.Property<int?>("IdTubularIdId")
                        .HasColumnType("int");

                    b.Property<int?>("JarId")
                        .HasColumnType("int");

                    b.Property<int?>("LenFishneckId")
                        .HasColumnType("int");

                    b.Property<int?>("LenId")
                        .HasColumnType("int");

                    b.Property<int?>("LenJointAvId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MotorId")
                        .HasColumnType("int");

                    b.Property<int?>("MwdToolId")
                        .HasColumnType("int");

                    b.Property<int?>("NameTagId")
                        .HasColumnType("int");

                    b.Property<string>("NumJointStand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OdDriftId")
                        .HasColumnType("int");

                    b.Property<int?>("OdFishneckId")
                        .HasColumnType("int");

                    b.Property<int?>("OdId")
                        .HasColumnType("int");

                    b.Property<int?>("PresBurstId")
                        .HasColumnType("int");

                    b.Property<int?>("PresCollapseId")
                        .HasColumnType("int");

                    b.Property<string>("Sequence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StabilizerId")
                        .HasColumnType("int");

                    b.Property<int?>("StressFatigId")
                        .HasColumnType("int");

                    b.Property<int?>("TensYieldId")
                        .HasColumnType("int");

                    b.Property<int?>("ThickWallId")
                        .HasColumnType("int");

                    b.Property<int?>("TorsionalStiffnessId")
                        .HasColumnType("int");

                    b.Property<int?>("TqYieldId")
                        .HasColumnType("int");

                    b.Property<int?>("TubularId")
                        .HasColumnType("int");

                    b.Property<string>("TypeMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeTubularComp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WearWallId")
                        .HasColumnType("int");

                    b.Property<int?>("WtPerLenId")
                        .HasColumnType("int");

                    b.HasKey("TubularComponentId");

                    b.HasIndex("AreaNozzleFlowId");

                    b.HasIndex("AxialStiffnessId");

                    b.HasIndex("BendId");

                    b.HasIndex("BendStiffnessId");

                    b.HasIndex("BitRecordBitId");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("DispId");

                    b.HasIndex("DoglegMxId");

                    b.HasIndex("HoleOpenerId");

                    b.HasIndex("IdFishneckId");

                    b.HasIndex("IdTubularIdId");

                    b.HasIndex("JarId");

                    b.HasIndex("LenFishneckId");

                    b.HasIndex("LenId");

                    b.HasIndex("LenJointAvId");

                    b.HasIndex("MotorId");

                    b.HasIndex("MwdToolId");

                    b.HasIndex("NameTagId");

                    b.HasIndex("OdDriftId");

                    b.HasIndex("OdFishneckId");

                    b.HasIndex("OdId");

                    b.HasIndex("PresBurstId");

                    b.HasIndex("PresCollapseId");

                    b.HasIndex("StabilizerId");

                    b.HasIndex("StressFatigId");

                    b.HasIndex("TensYieldId");

                    b.HasIndex("ThickWallId");

                    b.HasIndex("TorsionalStiffnessId");

                    b.HasIndex("TqYieldId");

                    b.HasIndex("TubularId");

                    b.HasIndex("WearWallId");

                    b.HasIndex("WtPerLenId");

                    b.ToTable("TubularComponent");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularConnection", b =>
                {
                    b.Property<int>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CriticalCrossSectionId")
                        .HasColumnType("int");

                    b.Property<int?>("IdTubularIdId")
                        .HasColumnType("int");

                    b.Property<int?>("LenId")
                        .HasColumnType("int");

                    b.Property<int?>("OdId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PresLeakId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeThreadId")
                        .HasColumnType("int");

                    b.Property<int?>("TensYieldId")
                        .HasColumnType("int");

                    b.Property<int?>("TqMakeupId")
                        .HasColumnType("int");

                    b.Property<int?>("TqYieldId")
                        .HasColumnType("int");

                    b.Property<string>("TypeThread")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("CriticalCrossSectionId");

                    b.HasIndex("IdTubularIdId");

                    b.HasIndex("LenId");

                    b.HasIndex("OdId");

                    b.HasIndex("PresLeakId");

                    b.HasIndex("SizeThreadId");

                    b.HasIndex("TensYieldId");

                    b.HasIndex("TqMakeupId");

                    b.HasIndex("TqYieldId");

                    b.ToTable("TubularConnection");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularCost", b =>
                {
                    b.Property<int>("CostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CostId");

                    b.ToTable("TubularCosts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularCriticalCrossSection", b =>
                {
                    b.Property<int>("CriticalCrossSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CriticalCrossSectionId");

                    b.ToTable("TubularCriticalCrossSection");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularDiaBit", b =>
                {
                    b.Property<int>("DiaBitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaBitId");

                    b.ToTable("TubularDiaBits");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularDiaHoleAssy", b =>
                {
                    b.Property<int>("DiaHoleAssyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaHoleAssyId");

                    b.ToTable("TubularDiaHoleAssy");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularDiaHoleOpener", b =>
                {
                    b.Property<int>("DiaHoleOpenerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaHoleOpenerId");

                    b.ToTable("TubularDiaHoleOpener");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularDiaNozzle", b =>
                {
                    b.Property<int>("DiaNozzleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaNozzleId");

                    b.ToTable("TubularDiaNozzle");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularDiaPassThru", b =>
                {
                    b.Property<int>("DiaPassThruId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaPassThruId");

                    b.ToTable("TubularDiaPassThrus");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularDiaPilot", b =>
                {
                    b.Property<int>("DiaPilotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaPilotId");

                    b.ToTable("TubularDiaPilot");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularDiaRotorNozzle", b =>
                {
                    b.Property<int>("DiaRotorNozzleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaRotorNozzleId");

                    b.ToTable("TubularDiaRotorNozzle");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularDisp", b =>
                {
                    b.Property<int>("DispId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispId");

                    b.ToTable("TubularDisp");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularDistBendBot", b =>
                {
                    b.Property<int>("DistBendBotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistBendBotId");

                    b.ToTable("TubularDistBendBot");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularDistBladeBot", b =>
                {
                    b.Property<int>("DistBladeBotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistBladeBotId");

                    b.ToTable("TubularDistBladeBot");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularDoglegMx", b =>
                {
                    b.Property<int>("DoglegMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoglegMxId");

                    b.ToTable("TubularDoglegMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularFlowrateMn", b =>
                {
                    b.Property<int>("FlowrateMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowrateMnId");

                    b.ToTable("TubularFlowrateMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularFlowrateMx", b =>
                {
                    b.Property<int>("FlowrateMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowrateMxId");

                    b.ToTable("TubularFlowrateMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularForDownSet", b =>
                {
                    b.Property<int>("ForDownSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ForDownSetId");

                    b.ToTable("TubularForDownSet");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularForDownTrip", b =>
                {
                    b.Property<int>("ForDownTripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ForDownTripId");

                    b.ToTable("TubularForDownTrip");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularForPmpOpen", b =>
                {
                    b.Property<int>("ForPmpOpenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ForPmpOpenId");

                    b.ToTable("TubularForPmpOpen");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularForSealFric", b =>
                {
                    b.Property<int>("ForSealFricId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ForSealFricId");

                    b.ToTable("TubularForSealFric");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularForUpSet", b =>
                {
                    b.Property<int>("ForUpSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ForUpSetId");

                    b.ToTable("TubularForUpSet");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularForUpTrip", b =>
                {
                    b.Property<int>("ForUpTripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ForUpTripId");

                    b.ToTable("TubularForUpTrip");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularHoleOpener", b =>
                {
                    b.Property<int>("HoleOpenerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DiaHoleOpenerId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumCutter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeHoleOpener")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HoleOpenerId");

                    b.HasIndex("DiaHoleOpenerId");

                    b.ToTable("TubularHoleOpener");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularId", b =>
                {
                    b.Property<int>("TubularIdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TubularIdId");

                    b.ToTable("TubularId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularIdEquv", b =>
                {
                    b.Property<int>("IdEquvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEquvId");

                    b.ToTable("TubularIdEquv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularIdFishneck", b =>
                {
                    b.Property<int>("IdFishneckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFishneckId");

                    b.ToTable("TubularIdFishneck");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularJar", b =>
                {
                    b.Property<int>("JarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ForDownSetId")
                        .HasColumnType("int");

                    b.Property<int?>("ForDownTripId")
                        .HasColumnType("int");

                    b.Property<int?>("ForPmpOpenId")
                        .HasColumnType("int");

                    b.Property<int?>("ForSealFricId")
                        .HasColumnType("int");

                    b.Property<int?>("ForUpSetId")
                        .HasColumnType("int");

                    b.Property<int?>("ForUpTripId")
                        .HasColumnType("int");

                    b.Property<string>("JarAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeJar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JarId");

                    b.HasIndex("ForDownSetId");

                    b.HasIndex("ForDownTripId");

                    b.HasIndex("ForPmpOpenId");

                    b.HasIndex("ForSealFricId");

                    b.HasIndex("ForUpSetId");

                    b.HasIndex("ForUpTripId");

                    b.ToTable("TubularJar");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularLen", b =>
                {
                    b.Property<int>("LenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenId");

                    b.ToTable("TubularLen");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularLenBlade", b =>
                {
                    b.Property<int>("LenBladeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenBladeId");

                    b.ToTable("TubularLenBlade");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularLenFishneck", b =>
                {
                    b.Property<int>("LenFishneckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenFishneckId");

                    b.ToTable("TubularLenFishneck");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularLenJointAv", b =>
                {
                    b.Property<int>("LenJointAvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LenJointAvId");

                    b.ToTable("TubularLenJointAv");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularMotor", b =>
                {
                    b.Property<int>("MotorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BendSettingsMnId")
                        .HasColumnType("int");

                    b.Property<int?>("BendSettingsMxId")
                        .HasColumnType("int");

                    b.Property<int?>("ClearanceBearBoxId")
                        .HasColumnType("int");

                    b.Property<int?>("DiaNozzleId")
                        .HasColumnType("int");

                    b.Property<int?>("DiaRotorNozzleId")
                        .HasColumnType("int");

                    b.Property<string>("DumpValve")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlowrateMnId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowrateMxId")
                        .HasColumnType("int");

                    b.Property<string>("LobesRotor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LobesStator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OffsetToolId")
                        .HasColumnType("int");

                    b.Property<string>("PresLossFact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rotatable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RotorCatcher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TempOpMxId")
                        .HasColumnType("int");

                    b.Property<string>("TypeBearing")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MotorId");

                    b.HasIndex("BendSettingsMnId");

                    b.HasIndex("BendSettingsMxId");

                    b.HasIndex("ClearanceBearBoxId");

                    b.HasIndex("DiaNozzleId");

                    b.HasIndex("DiaRotorNozzleId");

                    b.HasIndex("FlowrateMnId");

                    b.HasIndex("FlowrateMxId");

                    b.HasIndex("OffsetToolId");

                    b.HasIndex("TempOpMxId");

                    b.ToTable("TubularMotor");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularMwdTool", b =>
                {
                    b.Property<int>("MwdToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FlowrateMnId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowrateMxId")
                        .HasColumnType("int");

                    b.Property<int?>("IdEquvId")
                        .HasColumnType("int");

                    b.Property<int?>("TempMxId")
                        .HasColumnType("int");

                    b.HasKey("MwdToolId");

                    b.HasIndex("FlowrateMnId");

                    b.HasIndex("FlowrateMxId");

                    b.HasIndex("IdEquvId");

                    b.HasIndex("TempMxId");

                    b.ToTable("TubularMwdTool");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularNameTag", b =>
                {
                    b.Property<int>("NameTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberingScheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NameTagId");

                    b.ToTable("TubularNameTag");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularNozzle", b =>
                {
                    b.Property<int>("NozzleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DiaNozzleId")
                        .HasColumnType("int");

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LenId")
                        .HasColumnType("int");

                    b.Property<int?>("TubularComponentId")
                        .HasColumnType("int");

                    b.Property<string>("TypeNozzle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NozzleId");

                    b.HasIndex("DiaNozzleId");

                    b.HasIndex("LenId");

                    b.HasIndex("TubularComponentId");

                    b.ToTable("TubularNozzle");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularOd", b =>
                {
                    b.Property<int>("OdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdId");

                    b.ToTable("TubularOd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularOdBladeMn", b =>
                {
                    b.Property<int>("OdBladeMnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdBladeMnId");

                    b.ToTable("TubularOdBladeMn");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularOdBladeMx", b =>
                {
                    b.Property<int>("OdBladeMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdBladeMxId");

                    b.ToTable("TubularOdBladeMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularOdDrift", b =>
                {
                    b.Property<int>("OdDriftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdDriftId");

                    b.ToTable("TubularOdDrifts");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularOdFishneck", b =>
                {
                    b.Property<int>("OdFishneckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdFishneckId");

                    b.ToTable("TubularOdFishneck");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularOffsetBot", b =>
                {
                    b.Property<int>("OffsetBotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OffsetBotId");

                    b.ToTable("TubularOffsetBot");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularOffsetTool", b =>
                {
                    b.Property<int>("OffsetToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OffsetToolId");

                    b.ToTable("TubularOffsetTool");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularPresBurst", b =>
                {
                    b.Property<int>("PresBurstId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresBurstId");

                    b.ToTable("TubularPresBurst");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularPresCollapse", b =>
                {
                    b.Property<int>("PresCollapseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresCollapseId");

                    b.ToTable("TubularPresCollapse");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularPresLeak", b =>
                {
                    b.Property<int>("PresLeakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresLeakId");

                    b.ToTable("TubularPresLeak");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularSensor", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OffsetBotId")
                        .HasColumnType("int");

                    b.Property<int?>("TubularMwdToolMwdToolId")
                        .HasColumnType("int");

                    b.Property<string>("TypeMeasurement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SensorId");

                    b.HasIndex("OffsetBotId");

                    b.HasIndex("TubularMwdToolMwdToolId");

                    b.ToTable("TubularSensor");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularSizeThread", b =>
                {
                    b.Property<int>("SizeThreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeThreadId");

                    b.ToTable("TubularSizeThread");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularStabilizer", b =>
                {
                    b.Property<int>("StabilizerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DistBladeBotId")
                        .HasColumnType("int");

                    b.Property<string>("FactFric")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LenBladeId")
                        .HasColumnType("int");

                    b.Property<int?>("OdBladeMnId")
                        .HasColumnType("int");

                    b.Property<int?>("OdBladeMxId")
                        .HasColumnType("int");

                    b.Property<string>("ShapeBlade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeBlade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StabilizerId");

                    b.HasIndex("DistBladeBotId");

                    b.HasIndex("LenBladeId");

                    b.HasIndex("OdBladeMnId");

                    b.HasIndex("OdBladeMxId");

                    b.ToTable("TubularStabilizer");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularStressFatig", b =>
                {
                    b.Property<int>("StressFatigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StressFatigId");

                    b.ToTable("TubularStressFatig");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularTempMx", b =>
                {
                    b.Property<int>("TempMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempMxId");

                    b.ToTable("TubularTempMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularTempOpMx", b =>
                {
                    b.Property<int>("TempOpMxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempOpMxId");

                    b.ToTable("TubularTempOpMx");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularTensYield", b =>
                {
                    b.Property<int>("TensYieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TensYieldId");

                    b.ToTable("TubularTensYield");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularThickWall", b =>
                {
                    b.Property<int>("ThickWallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThickWallId");

                    b.ToTable("TubularThickWall");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularTorsionalStiffness", b =>
                {
                    b.Property<int>("TorsionalStiffnessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TorsionalStiffnessId");

                    b.ToTable("TubularTorsionalStiffness");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularTqMakeup", b =>
                {
                    b.Property<int>("TqMakeupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TqMakeupId");

                    b.ToTable("TubularTqMakeup");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularTqYield", b =>
                {
                    b.Property<int>("TqYieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TqYieldId");

                    b.ToTable("TubularTqYield");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularWearWall", b =>
                {
                    b.Property<int>("WearWallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WearWallId");

                    b.ToTable("TubularWearWall");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularWtPerLen", b =>
                {
                    b.Property<int>("WtPerLenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WtPerLenId");

                    b.ToTable("TubularWtPerLen");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TvdFormationBottom", b =>
                {
                    b.Property<int>("TvdFormationBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdFormationBottomId");

                    b.ToTable("StimJobTvdFormationBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TvdFormationTop", b =>
                {
                    b.Property<int>("TvdFormationTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdFormationTopId");

                    b.ToTable("StimJobTvdFormationTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TvdKickoff", b =>
                {
                    b.Property<int>("TvdKickoffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdKickoffId");

                    b.ToTable("WellboreTvdKickoff");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TvdMidPerforation", b =>
                {
                    b.Property<int>("TvdMidPerforationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdMidPerforationId");

                    b.ToTable("StimJobTvdMidPerforations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TvdOpenHoleBottom", b =>
                {
                    b.Property<int>("TvdOpenHoleBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdOpenHoleBottomId");

                    b.ToTable("StimJobTvdOpenHoleBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TvdOpenHoleTop", b =>
                {
                    b.Property<int>("TvdOpenHoleTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdOpenHoleTopId");

                    b.ToTable("StimJobTvdOpenHoleTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TvdPerforationsBottom", b =>
                {
                    b.Property<int>("TvdPerforationsBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdPerforationsBottomId");

                    b.ToTable("StimJobTvdPerforationsBottoms");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TvdPerforationsTop", b =>
                {
                    b.Property<int>("TvdPerforationsTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdPerforationsTopId");

                    b.ToTable("StimJobTvdPerforationsTops");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TvdPlanned", b =>
                {
                    b.Property<int>("TvdPlannedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdPlannedId");

                    b.ToTable("WellboreTvdPlanned");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TvdSubSeaPlanned", b =>
                {
                    b.Property<int>("TvdSubSeaPlannedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdSubSeaPlannedId");

                    b.ToTable("WellboreTvdSubSeaPlanned");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UseErrorTermSet", b =>
                {
                    b.Property<int>("UseErrorTermSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UseErrorTermSetId");

                    b.ToTable("ToolErrorModelUseErrorTermSets");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesAxis", b =>
                {
                    b.Property<int>("UsesAxisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CartesianCSId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoordinateSystemAxisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EllipsoidalCSId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UsesAxisId");

                    b.HasIndex("CartesianCSId");

                    b.HasIndex("CoordinateSystemAxisId");

                    b.HasIndex("EllipsoidalCSId");

                    b.ToTable("CoordinateReferenceSystemUsesAxis");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesCartesianCS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CartesianCSId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CartesianCSId");

                    b.ToTable("CoordinateReferenceSystemUsesCartesianCS");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesEllipsoid", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EllipsoidId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EllipsoidId");

                    b.ToTable("CoordinateReferenceSystemUsesEllipsoid");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesEllipsoidalCS", b =>
                {
                    b.Property<string>("EllipsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EllipsoidalCSId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EllipsId");

                    b.HasIndex("EllipsoidalCSId");

                    b.ToTable("CoordinateReferenceSystemUsesEllipsoidalCS");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesGeodeticDatum", b =>
                {
                    b.Property<int>("UsesGeodeticDatumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GeodeticDatumId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UsesGeodeticDatumId");

                    b.HasIndex("GeodeticDatumId");

                    b.ToTable("CoordinateReferenceSystemUsesGeodeticDatum");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesMethod", b =>
                {
                    b.Property<string>("UsesMethodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationMethodId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UsesMethodId");

                    b.HasIndex("OperationMethodId");

                    b.ToTable("CoordinateReferenceSystemUsesMethod");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesParameter", b =>
                {
                    b.Property<int>("UsesParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OperationMethodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationParameterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UsesParameterId");

                    b.HasIndex("OperationMethodId");

                    b.HasIndex("OperationParameterId");

                    b.ToTable("CoordinateReferenceSystemUsesParameter");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesPrimeMeridian", b =>
                {
                    b.Property<int>("UsesPrimeMeridianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PrimeMeridianId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UsesPrimeMeridianId");

                    b.HasIndex("PrimeMeridianId");

                    b.ToTable("CoordinateReferenceSystemUsesPrimeMeridian");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesValue", b =>
                {
                    b.Property<int>("UsesValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConversionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParameterValueValueOfParameterId")
                        .HasColumnType("int");

                    b.HasKey("UsesValueId");

                    b.HasIndex("ConversionId");

                    b.HasIndex("ParameterValueValueOfParameterId");

                    b.ToTable("CoordinateReferenceSystemUsesValue");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ValueOfParameter", b =>
                {
                    b.Property<int>("ValueOfParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xlink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ValueOfParameterId");

                    b.ToTable("CoordinateReferenceSystemValueOfParameter");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.VerticalCRS", b =>
                {
                    b.Property<int>("VerticalCRSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameCRSCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VerticalCRSId");

                    b.HasIndex("NameCRSCode");

                    b.ToTable("CoordinateReferenceSystemVerticalCRS");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Volume", b =>
                {
                    b.Property<int>("VolumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolumeId");

                    b.ToTable("StimJobVolumes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometry", b =>
                {
                    b.Property<int>("WbGeometryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommonDataWbGeometryCommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("DTimReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepthWaterMeanId")
                        .HasColumnType("int");

                    b.Property<int?>("GapAirId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomDiaDriftId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WbGeometrySectionId")
                        .HasColumnType("int");

                    b.HasKey("WbGeometryId");

                    b.HasIndex("CommonDataWbGeometryCommonDataId");

                    b.HasIndex("DepthWaterMeanId");

                    b.HasIndex("GapAirId");

                    b.HasIndex("MdBottomDiaDriftId");

                    b.HasIndex("WbGeometrySectionId");

                    b.ToTable("WbGeometrys");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometryCommonData", b =>
                {
                    b.Property<int>("WbGeometryCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WbGeometryCommonDataId");

                    b.ToTable("WbGeometryCommonData");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometryDepthWaterMean", b =>
                {
                    b.Property<int>("DepthWaterMeanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepthWaterMeanId");

                    b.ToTable("WbGeometryDepthWaterMean");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometryDiaDrift", b =>
                {
                    b.Property<int>("DiaDriftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaDriftId");

                    b.ToTable("WbGeometryDiaDrift");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometryGapAir", b =>
                {
                    b.Property<int>("GapAirId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GapAirId");

                    b.ToTable("WbGeometryGapAir");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometryIdSection", b =>
                {
                    b.Property<int>("IdSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSectionId");

                    b.ToTable("WbGeometryIdSection");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometryMdBottom", b =>
                {
                    b.Property<int>("DiaDriftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MdBottomId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaDriftId");

                    b.ToTable("WbGeometryMdBottom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometryMdTop", b =>
                {
                    b.Property<int>("MdTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdTopId");

                    b.ToTable("WbGeometryMdTop");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometryOdSection", b =>
                {
                    b.Property<int>("OdSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OdSectionId");

                    b.ToTable("WbGeometryOdSection");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometrySection", b =>
                {
                    b.Property<int>("WbGeometrySectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurveConductor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiaDriftId")
                        .HasColumnType("int");

                    b.Property<string>("FactFric")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdSectionId")
                        .HasColumnType("int");

                    b.Property<int?>("MdBottomDiaDriftId")
                        .HasColumnType("int");

                    b.Property<int?>("MdTopId")
                        .HasColumnType("int");

                    b.Property<int?>("OdSectionId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdTopId")
                        .HasColumnType("int");

                    b.Property<string>("TypeHoleCasing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WtPerLenId")
                        .HasColumnType("int");

                    b.HasKey("WbGeometrySectionId");

                    b.HasIndex("DiaDriftId");

                    b.HasIndex("IdSectionId");

                    b.HasIndex("MdBottomDiaDriftId");

                    b.HasIndex("MdTopId");

                    b.HasIndex("OdSectionId");

                    b.HasIndex("TvdBottomId");

                    b.HasIndex("TvdTopId");

                    b.HasIndex("WtPerLenId");

                    b.ToTable("WbGeometrySection");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometryTvdBottom", b =>
                {
                    b.Property<int>("TvdBottomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdBottomId");

                    b.ToTable("WbGeometryTvdBottom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometryTvdTop", b =>
                {
                    b.Property<int>("TvdTopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdTopId");

                    b.ToTable("WbGeometryTvdTop");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometryWtPerLen", b =>
                {
                    b.Property<int>("WtPerLenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WtPerLenId");

                    b.ToTable("WbGeometryWtPerLen");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Well", b =>
                {
                    b.Property<int>("WellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Block")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimPa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimSpud")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Field")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroundElevationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameLegal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumAPI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumGovt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatorDiv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PcInterestId")
                        .HasColumnType("int");

                    b.Property<string>("PurposeWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WaterDepthId")
                        .HasColumnType("int");

                    b.Property<int?>("WellLocationLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("WellheadElevationElevationId")
                        .HasColumnType("int");

                    b.HasKey("WellId");

                    b.HasIndex("CommonDataId");

                    b.HasIndex("GroundElevationId");

                    b.HasIndex("PcInterestId");

                    b.HasIndex("WaterDepthId");

                    b.HasIndex("WellLocationLocationId");

                    b.HasIndex("WellheadElevationElevationId");

                    b.ToTable("Wells");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellBore", b =>
                {
                    b.Property<int>("WellboreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommonDataWellBoreCommonDataId")
                        .HasColumnType("int");

                    b.Property<string>("DTimKickoff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DayTargetId")
                        .HasColumnType("int");

                    b.Property<int?>("MdId")
                        .HasColumnType("int");

                    b.Property<int?>("MdKickoffId")
                        .HasColumnType("int");

                    b.Property<int?>("MdPlannedId")
                        .HasColumnType("int");

                    b.Property<int?>("MdSubSeaPlannedId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumGovt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurposeWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shape")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuffixAPI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TvdId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdKickoffId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdPlannedId")
                        .HasColumnType("int");

                    b.Property<int?>("TvdSubSeaPlannedId")
                        .HasColumnType("int");

                    b.Property<string>("TypeWellbore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidWell")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WellboreId");

                    b.HasIndex("CommonDataWellBoreCommonDataId");

                    b.HasIndex("DayTargetId");

                    b.HasIndex("MdId");

                    b.HasIndex("MdKickoffId");

                    b.HasIndex("MdPlannedId");

                    b.HasIndex("MdSubSeaPlannedId");

                    b.HasIndex("TvdId");

                    b.HasIndex("TvdKickoffId");

                    b.HasIndex("TvdPlannedId");

                    b.HasIndex("TvdSubSeaPlannedId");

                    b.ToTable("WellBores");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellBoreCommonData", b =>
                {
                    b.Property<int>("WellBoreCommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DTimCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DTimLastChange")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WellBoreCommonDataId");

                    b.ToTable("WellBoreCommonData");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellCRS", b =>
                {
                    b.Property<int>("WellCRSUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GeodeticCRSId")
                        .HasColumnType("int");

                    b.Property<int?>("LocalCRSId")
                        .HasColumnType("int");

                    b.Property<int?>("MapProjectionCRSId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WellId")
                        .HasColumnType("int");

                    b.HasKey("WellCRSUid");

                    b.HasIndex("GeodeticCRSId");

                    b.HasIndex("LocalCRSId");

                    b.HasIndex("MapProjectionCRSId");

                    b.HasIndex("WellId");

                    b.ToTable("WellCRSs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellCommonData", b =>
                {
                    b.Property<int>("CommonDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DTimLastChange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DefaultDatumId")
                        .HasColumnType("int");

                    b.Property<string>("ItemState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommonDataId");

                    b.HasIndex("DefaultDatumId");

                    b.ToTable("WellCommonDatas");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellDatum", b =>
                {
                    b.Property<int>("DatumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DatumNameId")
                        .HasColumnType("int");

                    b.Property<int?>("ElevationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WellId")
                        .HasColumnType("int");

                    b.HasKey("DatumId");

                    b.HasIndex("DatumNameId");

                    b.HasIndex("ElevationId");

                    b.HasIndex("WellId");

                    b.ToTable("WellDatums");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellDatumName", b =>
                {
                    b.Property<int>("DatumNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DatumNameId");

                    b.ToTable("WellDatumNames");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellDefaultDatum", b =>
                {
                    b.Property<int>("DefaultDatumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DefaultDatumId");

                    b.ToTable("WellDefaultDatums");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellEasting", b =>
                {
                    b.Property<int>("EastingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EastingId");

                    b.ToTable("WellEastings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellElevation", b =>
                {
                    b.Property<int>("ElevationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Datum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ElevationId");

                    b.ToTable("WellElevations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellGeodeticCRS", b =>
                {
                    b.Property<int>("GeodeticCRSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GeodeticCRSId");

                    b.ToTable("WellGeodeticCRSs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellGroundElevation", b =>
                {
                    b.Property<int>("GroundElevationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroundElevationId");

                    b.ToTable("WellGroundElevations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellLatitude", b =>
                {
                    b.Property<int>("LatitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LatitudeId");

                    b.ToTable("WellLatitudes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellLocalCRS", b =>
                {
                    b.Property<int>("LocalCRSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UsesWellAsOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("XRotationCounterClockwise")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YAxisAzimuthId")
                        .HasColumnType("int");

                    b.HasKey("LocalCRSId");

                    b.HasIndex("YAxisAzimuthId");

                    b.ToTable("WellLocalCRSs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellLocalX", b =>
                {
                    b.Property<int>("LocalXId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocalXId");

                    b.ToTable("WellLocalXs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellLocalY", b =>
                {
                    b.Property<int>("LocalYId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocalYId");

                    b.ToTable("WellLocalYs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EastingId")
                        .HasColumnType("int");

                    b.Property<int?>("LatitudeId")
                        .HasColumnType("int");

                    b.Property<int?>("LocalXId")
                        .HasColumnType("int");

                    b.Property<int?>("LocalYId")
                        .HasColumnType("int");

                    b.Property<int?>("LongitudeId")
                        .HasColumnType("int");

                    b.Property<int?>("NorthingId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WellCRSUid")
                        .HasColumnType("int");

                    b.Property<int?>("WellReferencePointReferencePointId")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("EastingId");

                    b.HasIndex("LatitudeId");

                    b.HasIndex("LocalXId");

                    b.HasIndex("LocalYId");

                    b.HasIndex("LongitudeId");

                    b.HasIndex("NorthingId");

                    b.HasIndex("WellCRSUid");

                    b.HasIndex("WellReferencePointReferencePointId");

                    b.ToTable("WellLocations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellLongitude", b =>
                {
                    b.Property<int>("LongitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LongitudeId");

                    b.ToTable("WellLongitudes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellMapProjectionCRS", b =>
                {
                    b.Property<int>("MapProjectionCRSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MapProjectionCRSId");

                    b.ToTable("WellMapProjectionCRSs");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellMeasuredDepth", b =>
                {
                    b.Property<int>("MeasuredDepthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Datum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeasuredDepthId");

                    b.ToTable("WellMeasuredDepths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellNorthing", b =>
                {
                    b.Property<int>("NorthingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NorthingId");

                    b.ToTable("WellNorthings");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellPcInterest", b =>
                {
                    b.Property<int>("PcInterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PcInterestId");

                    b.ToTable("WellPcInterests");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellReferencePoint", b =>
                {
                    b.Property<int>("ReferencePointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ElevationId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuredDepthId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WellId")
                        .HasColumnType("int");

                    b.HasKey("ReferencePointId");

                    b.HasIndex("ElevationId");

                    b.HasIndex("MeasuredDepthId");

                    b.HasIndex("WellId");

                    b.ToTable("WellReferencePoints");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellSubscription", b =>
                {
                    b.Property<int>("RegisterationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerAccountIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkstationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkstationToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegisterationId");

                    b.ToTable("RigWorkstationRegister");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellWaterDepth", b =>
                {
                    b.Property<int>("WaterDepthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WaterDepthId");

                    b.ToTable("WellWaterDepths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellYAxisAzimuth", b =>
                {
                    b.Property<int>("YAxisAzimuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NorthDirection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YAxisAzimuthId");

                    b.ToTable("WellYAxisAzimuths");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellboreMd", b =>
                {
                    b.Property<int>("MdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdId");

                    b.ToTable("WellboreMd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellboreMdKickoff", b =>
                {
                    b.Property<int>("MdKickoffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdKickoffId");

                    b.ToTable("WellboreMdKickoff");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellboreMdPlanned", b =>
                {
                    b.Property<int>("MdPlannedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MdPlannedId");

                    b.ToTable("WellboreMdPlanned");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellboreProppantMass", b =>
                {
                    b.Property<int>("WellboreProppantMassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WellboreProppantMassId");

                    b.ToTable("StimJobWellboreProppantMasss");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellboreTvd", b =>
                {
                    b.Property<int>("TvdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvdId");

                    b.ToTable("WellboreTvd");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellboreVolume", b =>
                {
                    b.Property<int>("WellboreVolumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WellboreVolumeId");

                    b.ToTable("StimJobWellboreVolumes");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellheadElevation", b =>
                {
                    b.Property<int>("ElevationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ElevationId");

                    b.ToTable("WellheadElevations");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellheadVol", b =>
                {
                    b.Property<int>("StdVolN2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StdVolN2Id");

                    b.ToTable("StimJobWellheadVols");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WidMinorAxis", b =>
                {
                    b.Property<int>("WidMinorAxisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WidMinorAxisId");

                    b.ToTable("TargetWidMinorAxiss");
                });

            modelBuilder.Entity("WellAI.Advisor.API.Models.Attachment", b =>
                {
                    b.HasOne("WellAI.Advisor.API.Models.AttchmentCommonData", "commonData")
                        .WithMany()
                        .HasForeignKey("CommonDataId");

                    b.HasOne("WellAI.Advisor.API.Models.AttachmentObjectReference", "objectReference")
                        .WithMany()
                        .HasForeignKey("objectReferenceuidRef");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BaseGeographicCRS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.GeographicCRS", "GeographicCRS")
                        .WithMany()
                        .HasForeignKey("GeographicCRSId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Bharun", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.BharunActDoglegMx", "ActDoglegMx")
                        .WithMany()
                        .HasForeignKey("ActDoglegMxUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunActDogleg", "ActDogleg")
                        .WithMany()
                        .HasForeignKey("ActDoglegUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunDrillingParams", "DrillingParams")
                        .WithMany()
                        .HasForeignKey("DrillingParamsUid");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunPlanDogleg", "PlanDogleg")
                        .WithMany()
                        .HasForeignKey("PlanDoglegUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunTubular", "Tubular")
                        .WithMany()
                        .HasForeignKey("TubularUidRef");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.BharunDrillingParams", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.BharunAziBottom", "AziBottom")
                        .WithMany()
                        .HasForeignKey("AziBottomUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunAziTop", "AziTop")
                        .WithMany()
                        .HasForeignKey("AziTopUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunCTimCirc", "CTimCirc")
                        .WithMany()
                        .HasForeignKey("CTimCircUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunCTimDrillRot", "CTimDrillRot")
                        .WithMany()
                        .HasForeignKey("CTimDrillRotUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunCTimDrillSlid", "CTimDrillSlid")
                        .WithMany()
                        .HasForeignKey("CTimDrillSlidUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunCTimHold", "CTimHold")
                        .WithMany()
                        .HasForeignKey("CTimHoldUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunCTimReam", "CTimReam")
                        .WithMany()
                        .HasForeignKey("CTimReamUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunCTimSteering", "CTimSteering")
                        .WithMany()
                        .HasForeignKey("CTimSteeringUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunDistDrillRot", "DistDrillRot")
                        .WithMany()
                        .HasForeignKey("DistDrillRotUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunDistDrillSlid", "DistDrillSlid")
                        .WithMany()
                        .HasForeignKey("DistDrillSlidUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunDistHold", "DistHold")
                        .WithMany()
                        .HasForeignKey("DistHoldUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunDistReam", "DistReam")
                        .WithMany()
                        .HasForeignKey("DistReamUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunDistSteering", "DistSteering")
                        .WithMany()
                        .HasForeignKey("DistSteeringUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunETimOpBit", "ETimOpBit")
                        .WithMany()
                        .HasForeignKey("ETimOpBitUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunFlowrateBit", "FlowrateBit")
                        .WithMany()
                        .HasForeignKey("FlowrateBitUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunFlowratePump", "FlowratePump")
                        .WithMany()
                        .HasForeignKey("FlowratePumpUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunHkldDn", "HkldDn")
                        .WithMany()
                        .HasForeignKey("HkldDnUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunHkldRot", "HkldRot")
                        .WithMany()
                        .HasForeignKey("HkldRotUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunHkldUp", "HkldUp")
                        .WithMany()
                        .HasForeignKey("HkldUpUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunInclMn", "InclMn")
                        .WithMany()
                        .HasForeignKey("InclMnUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunInclMx", "InclMx")
                        .WithMany()
                        .HasForeignKey("InclMxUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunInclStart", "InclStart")
                        .WithMany()
                        .HasForeignKey("InclStartUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunInclStop", "InclStop")
                        .WithMany()
                        .HasForeignKey("InclStopUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunMdHoleStart", "MdHoleStart")
                        .WithMany()
                        .HasForeignKey("MdHoleStartUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunMdHoleStop", "MdHoleStop")
                        .WithMany()
                        .HasForeignKey("MdHoleStopUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunOverPull", "OverPull")
                        .WithMany()
                        .HasForeignKey("OverPullUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunPowBit", "PowBit")
                        .WithMany()
                        .HasForeignKey("PowBitUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunPresDropBit", "PresDropBit")
                        .WithMany()
                        .HasForeignKey("PresDropBitUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunPresPumpAv", "PresPumpAv")
                        .WithMany()
                        .HasForeignKey("PresPumpAvUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunRopAv", "RopAv")
                        .WithMany()
                        .HasForeignKey("RopAvBharunRopAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunRopMn", "RopMn")
                        .WithMany()
                        .HasForeignKey("RopMnBharunRopMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunRopMx", "RopMx")
                        .WithMany()
                        .HasForeignKey("RopMxBharunRopMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunRpmAv", "RpmAv")
                        .WithMany()
                        .HasForeignKey("RpmAvBharunRpmAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunRpmAvDh", "RpmAvDh")
                        .WithMany()
                        .HasForeignKey("RpmAvDhUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunRpmMn", "RpmMn")
                        .WithMany()
                        .HasForeignKey("RpmMnUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunRpmMx", "RpmMx")
                        .WithMany()
                        .HasForeignKey("RpmMxUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunSlackOff", "SlackOff")
                        .WithMany()
                        .HasForeignKey("SlackOffUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunTempMudDhMx", "TempMudDhMx")
                        .WithMany()
                        .HasForeignKey("TempMudDhMxUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunTqDhAv", "TqDhAv")
                        .WithMany()
                        .HasForeignKey("TqDhAvUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunTqOffBotAv", "TqOffBotAv")
                        .WithMany()
                        .HasForeignKey("TqOffBotAvUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunTqOnBotAv", "TqOnBotAv")
                        .WithMany()
                        .HasForeignKey("TqOnBotAvUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunTqOnBotMn", "TqOnBotMn")
                        .WithMany()
                        .HasForeignKey("TqOnBotMnUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunTqOnBotMx", "TqOnBotMx")
                        .WithMany()
                        .HasForeignKey("TqOnBotMxUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunTubular", "Tubular")
                        .WithMany()
                        .HasForeignKey("TubularUidRef");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunVelNozzleAv", "VelNozzleAv")
                        .WithMany()
                        .HasForeignKey("VelNozzleAvUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunWobAv", "WobAv")
                        .WithMany()
                        .HasForeignKey("WobAvBharunWobAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunWobAvDh", "WobAvDh")
                        .WithMany()
                        .HasForeignKey("WobAvDhUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunWobMn", "WobMn")
                        .WithMany()
                        .HasForeignKey("WobMnUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunWobMx", "WobMx")
                        .WithMany()
                        .HasForeignKey("WobMxUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunWtAboveJar", "WtAboveJar")
                        .WithMany()
                        .HasForeignKey("WtAboveJarUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunWtBelowJar", "WtBelowJar")
                        .WithMany()
                        .HasForeignKey("WtBelowJarUom");

                    b.HasOne("Well_AI.Advisor.API.Models.BharunWtMud", "WtMud")
                        .WithMany()
                        .HasForeignKey("WtMudUom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CartesianCS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameCodeSpace");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJob", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.CementJobCementStage", "CementStage")
                        .WithMany()
                        .HasForeignKey("CementStageId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobCementTest", "CementTest")
                        .WithMany()
                        .HasForeignKey("CementTestId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobLenPipeRecipStroke", "LenPipeRecipStroke")
                        .WithMany()
                        .HasForeignKey("LenPipeRecipStrokeId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdHole", "MdHole")
                        .WithMany()
                        .HasForeignKey("MdHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdPlugBot", "MdPlugBot")
                        .WithMany()
                        .HasForeignKey("MdPlugBotId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdPlugTop", "MdPlugTop")
                        .WithMany()
                        .HasForeignKey("MdPlugTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdShoe", "MdShoe")
                        .WithMany()
                        .HasForeignKey("MdShoeId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdSqueeze", "MdSqueeze")
                        .WithMany()
                        .HasForeignKey("MdSqueezeId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdStringSet", "MdStringSet")
                        .WithMany()
                        .HasForeignKey("MdStringSetId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdWater", "MdWater")
                        .WithMany()
                        .HasForeignKey("MdWaterId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobOverPull", "OverPull")
                        .WithMany()
                        .HasForeignKey("OverPullId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobRpmPipe", "RpmPipe")
                        .WithMany()
                        .HasForeignKey("RpmPipeId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobRpmPipeRecip", "RpmPipeRecip")
                        .WithMany()
                        .HasForeignKey("RpmPipeRecipId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobSlackOff", "SlackOff")
                        .WithMany()
                        .HasForeignKey("SlackOffId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTqInitPipeRot", "TqInitPipeRot")
                        .WithMany()
                        .HasForeignKey("TqInitPipeRotId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTqPipeAv", "TqPipeAv")
                        .WithMany()
                        .HasForeignKey("TqPipeAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTqPipeMx", "TqPipeMx")
                        .WithMany()
                        .HasForeignKey("TqPipeMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTvdShoe", "TvdShoe")
                        .WithMany()
                        .HasForeignKey("TvdShoeId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTvdStringSet", "TvdStringSet")
                        .WithMany()
                        .HasForeignKey("TvdStringSetId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobWoc", "Woc")
                        .WithMany()
                        .HasForeignKey("WocId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobCementAdditive", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.CementJobAdditive", "Additive")
                        .WithMany()
                        .HasForeignKey("AdditiveId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobConcentration", "Concentration")
                        .WithMany()
                        .HasForeignKey("ConcentrationId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobDensAdd", "DensAdd")
                        .WithMany()
                        .HasForeignKey("DensAddId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobCementPumpSchedule", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.CementJobETimPump", "ETimPump")
                        .WithMany()
                        .HasForeignKey("ETimPumpId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobETimShutdown", "ETimShutdown")
                        .WithMany()
                        .HasForeignKey("ETimShutdownId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresBack", "PresBack")
                        .WithMany()
                        .HasForeignKey("PresBackId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobRatePump", "RatePump")
                        .WithMany()
                        .HasForeignKey("RatePumpId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolPump", "VolPump")
                        .WithMany()
                        .HasForeignKey("VolPumpId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobCementStage", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.CementJobCementingFluid", "CementingFluid")
                        .WithMany()
                        .HasForeignKey("CementingFluidId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobDensDisplaceFluid", "DensDisplaceFluid")
                        .WithMany()
                        .HasForeignKey("DensDisplaceFluidId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobDiaTailPipe", "DiaTailPipe")
                        .WithMany()
                        .HasForeignKey("DiaTailPipeId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobETimMudCirculation", "ETimMudCirculation")
                        .WithMany()
                        .HasForeignKey("ETimMudCirculationId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobETimPresHeld", "ETimPresHeld")
                        .WithMany()
                        .HasForeignKey("ETimPresHeldId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobFlowrateBreakDown", "FlowrateBreakDown")
                        .WithMany()
                        .HasForeignKey("FlowrateBreakDownId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobFlowrateDisplaceAv", "FlowrateDisplaceAv")
                        .WithMany()
                        .HasForeignKey("FlowrateDisplaceAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobFlowrateDisplaceMx", "FlowrateDisplaceMx")
                        .WithMany()
                        .HasForeignKey("FlowrateDisplaceMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobFlowrateEnd", "FlowrateEnd")
                        .WithMany()
                        .HasForeignKey("FlowrateEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobFlowrateMudCirc", "FlowrateMudCirc")
                        .WithMany()
                        .HasForeignKey("FlowrateMudCircCementJobFlowrateMudCircId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobFlowratePumpEnd", "FlowratePumpEnd")
                        .WithMany()
                        .HasForeignKey("FlowratePumpEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobFlowratePumpStart", "FlowratePumpStart")
                        .WithMany()
                        .HasForeignKey("FlowratePumpStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobFlowrateSqueezeAv", "FlowrateSqueezeAv")
                        .WithMany()
                        .HasForeignKey("FlowrateSqueezeAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobFlowrateSqueezeMx", "FlowrateSqueezeMx")
                        .WithMany()
                        .HasForeignKey("FlowrateSqueezeMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobGel10Min", "Gel10Min")
                        .WithMany()
                        .HasForeignKey("Gel10MinId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobGel10Sec", "Gel10Sec")
                        .WithMany()
                        .HasForeignKey("Gel10SecId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdCircOut", "MdCircOut")
                        .WithMany()
                        .HasForeignKey("MdCircOutId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdCoilTbg", "MdCoilTbg")
                        .WithMany()
                        .HasForeignKey("MdCoilTbgId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdString", "MdString")
                        .WithMany()
                        .HasForeignKey("MdStringId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdTool", "MdTool")
                        .WithMany()
                        .HasForeignKey("MdToolId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresBackPressure", "PresBackPressure")
                        .WithMany()
                        .HasForeignKey("PresBackPressureId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresBreakDown", "PresBreakDown")
                        .WithMany()
                        .HasForeignKey("PresBreakDownId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresBump", "PresBump")
                        .WithMany()
                        .HasForeignKey("PresBumpId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresCoilTbgEnd", "PresCoilTbgEnd")
                        .WithMany()
                        .HasForeignKey("PresCoilTbgEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresCoilTbgStart", "PresCoilTbgStart")
                        .WithMany()
                        .HasForeignKey("PresCoilTbgStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresCsgEnd", "PresCsgEnd")
                        .WithMany()
                        .HasForeignKey("PresCsgEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresCsgStart", "PresCsgStart")
                        .WithMany()
                        .HasForeignKey("PresCsgStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresDisplace", "PresDisplace")
                        .WithMany()
                        .HasForeignKey("PresDisplaceId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresHeld", "PresHeld")
                        .WithMany()
                        .HasForeignKey("PresHeldId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresMudCirc", "PresMudCirc")
                        .WithMany()
                        .HasForeignKey("PresMudCircId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresPriorBump", "PresPriorBump")
                        .WithMany()
                        .HasForeignKey("PresPriorBumpId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresSqueezeAv", "PresSqueezeAv")
                        .WithMany()
                        .HasForeignKey("PresSqueezeAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresSqueezeEnd", "PresSqueezeEnd")
                        .WithMany()
                        .HasForeignKey("PresSqueezeEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresSqueeze", "PresSqueeze")
                        .WithMany()
                        .HasForeignKey("PresSqueezeId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresTbgEnd", "PresTbgEnd")
                        .WithMany()
                        .HasForeignKey("PresTbgEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresTbgStart", "PresTbgStart")
                        .WithMany()
                        .HasForeignKey("PresTbgStartPresTbgStId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPvMud", "PvMud")
                        .WithMany()
                        .HasForeignKey("PvMudId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTempBHCT", "TempBHCT")
                        .WithMany()
                        .HasForeignKey("TempBHCTId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTempBHST", "TempBHST")
                        .WithMany()
                        .HasForeignKey("TempBHSTId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVisFunnelMud", "VisFunnelMud")
                        .WithMany()
                        .HasForeignKey("VisFunnelMudId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolCircPrior", "VolCircPrior")
                        .WithMany()
                        .HasForeignKey("VolCircPriorId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolCsgIn", "VolCsgIn")
                        .WithMany()
                        .HasForeignKey("VolCsgInId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolCsgOut", "VolCsgOut")
                        .WithMany()
                        .HasForeignKey("VolCsgOutId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolDisplaceFluid", "VolDisplaceFluid")
                        .WithMany()
                        .HasForeignKey("VolDisplaceFluidId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolExcess", "VolExcess")
                        .WithMany()
                        .HasForeignKey("VolExcessId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolMudLost", "VolMudLost")
                        .WithMany()
                        .HasForeignKey("VolMudLostId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolReturns", "VolReturns")
                        .WithMany()
                        .HasForeignKey("VolReturnsId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobWtMud", "WtMud")
                        .WithMany()
                        .HasForeignKey("WtMudId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobYpMud", "YpMud")
                        .WithMany()
                        .HasForeignKey("YpMudId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobCementTest", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.CementJobCblPres", "CblPres")
                        .WithMany()
                        .HasForeignKey("CblPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobETimBeforeTest", "ETimBeforeTest")
                        .WithMany()
                        .HasForeignKey("ETimBeforeTestId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobETimCementLog", "ETimCementLog")
                        .WithMany()
                        .HasForeignKey("ETimCementLogId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobETimPitStart", "ETimPitStart")
                        .WithMany()
                        .HasForeignKey("ETimPitStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobETimTest", "ETimTest")
                        .WithMany()
                        .HasForeignKey("ETimTestId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobFormPit", "FormPit")
                        .WithMany()
                        .HasForeignKey("FormPitId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobLinerLap", "LinerLap")
                        .WithMany()
                        .HasForeignKey("LinerLapId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobLinerTop", "LinerTop")
                        .WithMany()
                        .HasForeignKey("LinerTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdCementTop", "MdCementTop")
                        .WithMany()
                        .HasForeignKey("MdCementTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdDVTool", "MdDVTool")
                        .WithMany()
                        .HasForeignKey("MdDVToolJobMdDVToolId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresTest", "PresTest")
                        .WithMany()
                        .HasForeignKey("PresTestId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTestNegativeEmw", "TestNegativeEmw")
                        .WithMany()
                        .HasForeignKey("TestNegativeEmwId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTestPositiveEmw", "TestPositiveEmw")
                        .WithMany()
                        .HasForeignKey("TestPositiveEmwId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CementJobCementingFluid", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.CementJobCementAdditive", "CementAdditive")
                        .WithMany()
                        .HasForeignKey("CementAdditiveId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobCementPumpSchedule", "CementPumpSchedule")
                        .WithMany()
                        .HasForeignKey("CementPumpScheduleId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobConsTestThickening", "ConsTestThickening")
                        .WithMany()
                        .HasForeignKey("ConsTestThickeningId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobDensAtPres", "DensAtPres")
                        .WithMany()
                        .HasForeignKey("DensAtPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobDensBaseFluid", "DensBaseFluid")
                        .WithMany()
                        .HasForeignKey("DensBaseFluidId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobDensConstGasFoam", "DensConstGasFoam")
                        .WithMany()
                        .HasForeignKey("DensConstGasFoamId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobDensConstGasMethod", "DensConstGasMethod")
                        .WithMany()
                        .HasForeignKey("DensConstGasMethodId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobDensDryBlend", "DensDryBlend")
                        .WithMany()
                        .HasForeignKey("DensDryBlendId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobDensity", "Density")
                        .WithMany()
                        .HasForeignKey("DensityId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobETimComprStren1", "ETimComprStren1")
                        .WithMany()
                        .HasForeignKey("ETimComprStren1Id");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobETimComprStren2", "ETimComprStren2")
                        .WithMany()
                        .HasForeignKey("ETimComprStren2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobETimThickening", "ETimThickening")
                        .WithMany()
                        .HasForeignKey("ETimThickeningId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobExcessPc", "ExcessPc")
                        .WithMany()
                        .HasForeignKey("ExcessPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobGel10MinReading", "Gel10MinReading")
                        .WithMany()
                        .HasForeignKey("Gel10MinReadingId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobGel10MinStrength", "Gel10MinStrength")
                        .WithMany()
                        .HasForeignKey("Gel10MinStrengthId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobGel10SecReading", "Gel10SecReading")
                        .WithMany()
                        .HasForeignKey("Gel10SecReadingId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobGel10SecStrength", "Gel10SecStrength")
                        .WithMany()
                        .HasForeignKey("Gel10SecStrengthId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobGel1MinReading", "Gel1MinReading")
                        .WithMany()
                        .HasForeignKey("Gel1MinReadingId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobGel1MinStrength", "Gel1MinStrength")
                        .WithMany()
                        .HasForeignKey("Gel1MinStrengthId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobK", "K")
                        .WithMany()
                        .HasForeignKey("KId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMassDryBlend", "MassDryBlend")
                        .WithMany()
                        .HasForeignKey("MassDryBlendId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMassSackDryBlend", "MassSackDryBlend")
                        .WithMany()
                        .HasForeignKey("MassSackDryBlendId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdFluidBottom", "MdFluidBottom")
                        .WithMany()
                        .HasForeignKey("MdFluidBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobMdFluidTop", "MdFluidTop")
                        .WithMany()
                        .HasForeignKey("MdFluidTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobN", "N")
                        .WithMany()
                        .HasForeignKey("NId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPcFreeWater", "PcFreeWater")
                        .WithMany()
                        .HasForeignKey("PcFreeWaterId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresComprStren1", "PresComprStren1")
                        .WithMany()
                        .HasForeignKey("PresComprStren1Id");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresComprStren2", "PresComprStren2")
                        .WithMany()
                        .HasForeignKey("PresComprStren2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresTestFluidLoss", "PresTestFluidLoss")
                        .WithMany()
                        .HasForeignKey("PresTestFluidLossId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobPresTestThickening", "PresTestThickening")
                        .WithMany()
                        .HasForeignKey("PresTestThickeningId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobRatioConstGasMethodAv", "RatioConstGasMethodAv")
                        .WithMany()
                        .HasForeignKey("RatioConstGasMethodAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobRatioConstGasMethodEnd", "RatioConstGasMethodEnd")
                        .WithMany()
                        .HasForeignKey("RatioConstGasMethodEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobRatioConstGasMethodStart", "RatioConstGasMethodStart")
                        .WithMany()
                        .HasForeignKey("RatioConstGasMethodStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobRatioMixWater", "RatioMixWater")
                        .WithMany()
                        .HasForeignKey("RatioMixWaterId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobSolidVolumeFraction", "SolidVolumeFraction")
                        .WithMany()
                        .HasForeignKey("SolidVolumeFractionId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTempComprStren1", "TempComprStren1")
                        .WithMany()
                        .HasForeignKey("TempComprStren1Id");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTempComprStren2", "TempComprStren2")
                        .WithMany()
                        .HasForeignKey("TempComprStren2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTempFluidLoss", "TempFluidLoss")
                        .WithMany()
                        .HasForeignKey("TempFluidLossId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTempFreeWater", "TempFreeWater")
                        .WithMany()
                        .HasForeignKey("TempFreeWaterId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTempThickening", "TempThickening")
                        .WithMany()
                        .HasForeignKey("TempThickeningId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobTimeFluidLoss", "TimeFluidLoss")
                        .WithMany()
                        .HasForeignKey("TimeFluidLossId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVis", "Vis")
                        .WithMany()
                        .HasForeignKey("VisId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolAPIFluidLoss", "VolAPIFluidLoss")
                        .WithMany()
                        .HasForeignKey("VolAPIFluidLossId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolCement", "VolCement")
                        .WithMany()
                        .HasForeignKey("VolCementId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolFluid", "VolFluid")
                        .WithMany()
                        .HasForeignKey("VolFluidId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolGasFoam", "VolGasFoam")
                        .WithMany()
                        .HasForeignKey("VolGasFoamId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolOther", "VolOther")
                        .WithMany()
                        .HasForeignKey("VolOtherId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolPumped", "VolPumped")
                        .WithMany()
                        .HasForeignKey("VolPumpedId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolReserved", "VolReserved")
                        .WithMany()
                        .HasForeignKey("VolReservedId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolTestFluidLoss", "VolTestFluidLoss")
                        .WithMany()
                        .HasForeignKey("VolTestFluidLossId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolTotSlurry", "VolTotSlurry")
                        .WithMany()
                        .HasForeignKey("VolTotSlurryId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolWater", "VolWater")
                        .WithMany()
                        .HasForeignKey("VolWaterId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobVolYield", "VolYield")
                        .WithMany()
                        .HasForeignKey("VolYieldId");

                    b.HasOne("Well_AI.Advisor.API.Models.CementJobYp", "Yp")
                        .WithMany()
                        .HasForeignKey("YpJobYpId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ChangeHistory", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ChangeLog", null)
                        .WithMany("ChangeHistory")
                        .HasForeignKey("ChangeLogUid");

                    b.HasOne("Well_AI.Advisor.API.Models.EndIndex", "EndIndex")
                        .WithMany()
                        .HasForeignKey("EndIndexUom");

                    b.HasOne("Well_AI.Advisor.API.Models.StartIndex", "StartIndex")
                        .WithMany()
                        .HasForeignKey("StartIndexUom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ChangeLog", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ChangeLogCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCore", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreDiaBit", "DiaBit")
                        .WithMany()
                        .HasForeignKey("DiaBitId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreDiaCore", "DiaCore")
                        .WithMany()
                        .HasForeignKey("DiaCoreId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreGeologyInterval", "GeologyInterval")
                        .WithMany()
                        .HasForeignKey("GeologyIntervalId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreInclHole", "InclHole")
                        .WithMany()
                        .HasForeignKey("InclHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreLenBarrel", "LenBarrel")
                        .WithMany()
                        .HasForeignKey("LenBarrelId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreLenCored", "LenCored")
                        .WithMany()
                        .HasForeignKey("LenCoredId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreLenRecovered", "LenRecovered")
                        .WithMany()
                        .HasForeignKey("LenRecoveredId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreMdCoreBottom", "MdCoreBottom")
                        .WithMany()
                        .HasForeignKey("MdCoreBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreMdCoreTop", "MdCoreTop")
                        .WithMany()
                        .HasForeignKey("MdCoreTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreRecoverPc", "RecoverPc")
                        .WithMany()
                        .HasForeignKey("RecoverPcLenRecoveredId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreChromatograph", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreAcetylene", "Acetylene")
                        .WithMany()
                        .HasForeignKey("AcetyleneId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreCo2Av", "Co2Av")
                        .WithMany()
                        .HasForeignKey("Co2AvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreCo2Mn", "Co2Mn")
                        .WithMany()
                        .HasForeignKey("Co2MnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreCo2Mx", "Co2Mx")
                        .WithMany()
                        .HasForeignKey("Co2MxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreETimChromCycle", "ETimChromCycle")
                        .WithMany()
                        .HasForeignKey("ETimChromCycleId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreEpentAv", "EpentAv")
                        .WithMany()
                        .HasForeignKey("EpentAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreEpentMn", "EpentMn")
                        .WithMany()
                        .HasForeignKey("EpentMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreEpentMx", "EpentMx")
                        .WithMany()
                        .HasForeignKey("EpentMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreEthAv", "EthAv")
                        .WithMany()
                        .HasForeignKey("EthAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreEthMn", "EthMn")
                        .WithMany()
                        .HasForeignKey("EthMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreEthMx", "EthMx")
                        .WithMany()
                        .HasForeignKey("EthMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreH2sAv", "H2sAv")
                        .WithMany()
                        .HasForeignKey("H2sAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreH2sMn", "H2sMn")
                        .WithMany()
                        .HasForeignKey("H2sMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreH2sMx", "H2sMx")
                        .WithMany()
                        .HasForeignKey("H2sMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreIbutAv", "IbutAv")
                        .WithMany()
                        .HasForeignKey("IbutAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreIbutMn", "IbutMn")
                        .WithMany()
                        .HasForeignKey("IbutMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreIbutMx", "IbutMx")
                        .WithMany()
                        .HasForeignKey("IbutMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreIhexAv", "IhexAv")
                        .WithMany()
                        .HasForeignKey("IhexAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreIhexMn", "IhexMn")
                        .WithMany()
                        .HasForeignKey("IhexMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreIhexMx", "IhexMx")
                        .WithMany()
                        .HasForeignKey("IhexMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreIpentAv", "IpentAv")
                        .WithMany()
                        .HasForeignKey("IpentAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreIpentMn", "IpentMn")
                        .WithMany()
                        .HasForeignKey("IpentMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreIpentMx", "IpentMx")
                        .WithMany()
                        .HasForeignKey("IpentMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreMethAv", "MethAv")
                        .WithMany()
                        .HasForeignKey("MethAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreMethMn", "MethMn")
                        .WithMany()
                        .HasForeignKey("MethMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreMethMx", "MethMx")
                        .WithMany()
                        .HasForeignKey("MethMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreNbutAv", "NbutAv")
                        .WithMany()
                        .HasForeignKey("NbutAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreNbutMn", "NbutMn")
                        .WithMany()
                        .HasForeignKey("NbutMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreNbutMx", "NbutMx")
                        .WithMany()
                        .HasForeignKey("NbutMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreNhexAv", "NhexAv")
                        .WithMany()
                        .HasForeignKey("NhexAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreNhexMn", "NhexMn")
                        .WithMany()
                        .HasForeignKey("NhexMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreNhexMx", "NhexMx")
                        .WithMany()
                        .HasForeignKey("NhexMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreNpentAv", "NpentAv")
                        .WithMany()
                        .HasForeignKey("NpentAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreNpentMn", "NpentMn")
                        .WithMany()
                        .HasForeignKey("NpentMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreNpentMx", "NpentMx")
                        .WithMany()
                        .HasForeignKey("NpentMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCorePropAv", "PropAv")
                        .WithMany()
                        .HasForeignKey("PropAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCorePropMn", "PropMn")
                        .WithMany()
                        .HasForeignKey("PropMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCorePropMx", "PropMx")
                        .WithMany()
                        .HasForeignKey("PropMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreWtMudIn", "WtMudIn")
                        .WithMany()
                        .HasForeignKey("WtMudInId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreWtMudOut", "WtMudOut")
                        .WithMany()
                        .HasForeignKey("WtMudOutId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreGeologyInterval", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreCalcStab", "CalcStab")
                        .WithMany()
                        .HasForeignKey("CalcStabId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreCalcite", "Calcite")
                        .WithMany()
                        .HasForeignKey("CalciteId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreCec", "Cec")
                        .WithMany()
                        .HasForeignKey("CecId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreChromatograph", "Chromatograph")
                        .WithMany()
                        .HasForeignKey("ChromatographId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreDensBulk", "DensBulk")
                        .WithMany()
                        .HasForeignKey("DensBulkId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreDensShale", "DensShale")
                        .WithMany()
                        .HasForeignKey("DensShaleId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreDolomite", "Dolomite")
                        .WithMany()
                        .HasForeignKey("DolomiteId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreEcdTdAv", "EcdTdAv")
                        .WithMany()
                        .HasForeignKey("EcdTdAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreLenPlug", "LenPlug")
                        .WithMany()
                        .HasForeignKey("LenPlugId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreLithology", "Lithology")
                        .WithMany()
                        .HasForeignKey("LithologyId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreMudGas", "MudGas")
                        .WithMany()
                        .HasForeignKey("MudGasId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreRopAv", "RopAv")
                        .WithMany()
                        .HasForeignKey("RopAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreRopMn", "RopMn")
                        .WithMany()
                        .HasForeignKey("RopMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreRopMx", "RopMx")
                        .WithMany()
                        .HasForeignKey("RopMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreRpmAv", "RpmAv")
                        .WithMany()
                        .HasForeignKey("RpmAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreShow", "Show")
                        .WithMany()
                        .HasForeignKey("ShowId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreSizeMn", "SizeMn")
                        .WithMany()
                        .HasForeignKey("SizeMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreSizeMx", "SizeMx")
                        .WithMany()
                        .HasForeignKey("SizeMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreTqAv", "TqAv")
                        .WithMany()
                        .HasForeignKey("TqAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreTvdBase", "TvdBase")
                        .WithMany()
                        .HasForeignKey("TvdBaseId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreTvdTop", "TvdTop")
                        .WithMany()
                        .HasForeignKey("TvdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreWobAv", "WobAv")
                        .WithMany()
                        .HasForeignKey("WobAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreWtMudAv", "WtMudAv")
                        .WithMany()
                        .HasForeignKey("WtMudAvId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreLithology", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreDensShale", "DensShale")
                        .WithMany()
                        .HasForeignKey("DensShaleId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreLithPc", "LithPc")
                        .WithMany()
                        .HasForeignKey("LithPcId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreMudGas", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreGasAv", "GasAv")
                        .WithMany()
                        .HasForeignKey("GasAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreGasBackgnd", "GasBackgnd")
                        .WithMany()
                        .HasForeignKey("GasBackgndId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreGasConAv", "GasConAv")
                        .WithMany()
                        .HasForeignKey("GasConAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreGasConMx", "GasConMx")
                        .WithMany()
                        .HasForeignKey("GasConMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreGasPeak", "GasPeak")
                        .WithMany()
                        .HasForeignKey("GasPeakId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreGasTrip", "GasTrip")
                        .WithMany()
                        .HasForeignKey("GasTripGasConTripId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreQualifier", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreLithology", null)
                        .WithMany("Qualifier")
                        .HasForeignKey("ConvCoreLithologyLithologyId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ConvCoreShow", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreNatFlorPc", "NatFlorPc")
                        .WithMany()
                        .HasForeignKey("NatFlorPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.ConvCoreStainPc", "StainPc")
                        .WithMany()
                        .HasForeignKey("StainPcId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Conversion", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.UsesMethod", "UsesMethod")
                        .WithMany()
                        .HasForeignKey("UsesMethodId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CoordinateReferenceSystem", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.CoordinateReferenceSystemGeodeticCRS", "GeodeticCRS")
                        .WithMany()
                        .HasForeignKey("GeodeticCRSCoRefGeodeticCRSId");

                    b.HasOne("Well_AI.Advisor.API.Models.ProjectedCRS", "ProjectedCRS")
                        .WithMany()
                        .HasForeignKey("ProjectedCRSId");

                    b.HasOne("Well_AI.Advisor.API.Models.VerticalCRS", "VerticalCRS")
                        .WithMany()
                        .HasForeignKey("VerticalCRSId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CoordinateReferenceSystemGeodeticCRS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.GmlGeodeticCRS", "GmlGeodeticCRS")
                        .WithMany()
                        .HasForeignKey("GmlGeodeticCRSId");

                    b.HasOne("Well_AI.Advisor.API.Models.NameCRS", "NameCRS")
                        .WithMany()
                        .HasForeignKey("NameCRSCode");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.CoordinateSystemAxis", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.AxisDirection", "AxisDirection")
                        .WithMany()
                        .HasForeignKey("AxisDirectionCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierCodeSpace");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DefinedByConversion", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Conversion", "Conversion")
                        .WithMany()
                        .HasForeignKey("ConversionId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReport", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportBitRecord", "BitRecord")
                        .WithMany()
                        .HasForeignKey("BitRecordId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportControlIncidentInfo", "ControlIncidentInfo")
                        .WithMany()
                        .HasForeignKey("ControlIncidentInfoId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportCoreInfo", "CoreInfo")
                        .WithMany()
                        .HasForeignKey("CoreInfoId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportEquipFailureInfo", "EquipFailureInfo")
                        .WithMany()
                        .HasForeignKey("EquipFailureInfoId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportExtendedReport", "ExtendedReport")
                        .WithMany()
                        .HasForeignKey("ExtendedReportId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportFormTestInfo", "FormTestInfo")
                        .WithMany()
                        .HasForeignKey("FormTestInfoId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportGasReadingInfo", "GasReadingInfo")
                        .WithMany()
                        .HasForeignKey("GasReadingInfoId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportLithShowInfo", "LithShowInfo")
                        .WithMany()
                        .HasForeignKey("LithShowInfoId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportPerfInfo", "PerfInfo")
                        .WithMany()
                        .HasForeignKey("PerfInfoId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportStatusInfo", "StatusInfo")
                        .WithMany()
                        .HasForeignKey("StatusInfoId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportStratInfo", "StratInfo")
                        .WithMany()
                        .HasForeignKey("StratInfoId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportSurveyStation", "SurveyStation")
                        .WithMany()
                        .HasForeignKey("SurveyStationId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportWellAlias", "WellAlias")
                        .WithMany()
                        .HasForeignKey("WellAliasId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportWellCRS", "WellCRS")
                        .WithMany()
                        .HasForeignKey("WellCRSUid");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportWellTestInfo", "WellTestInfo")
                        .WithMany()
                        .HasForeignKey("WellTestInfoId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportWellboreInfo", "WellboreInfo")
                        .WithMany()
                        .HasForeignKey("WellboreInfoId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportActivity", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReport", null)
                        .WithMany("Activity")
                        .HasForeignKey("DrillReportId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvd", "Tvd")
                        .WithMany()
                        .HasForeignKey("TvdId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportBitRecord", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDiaBit", "DiaBit")
                        .WithMany()
                        .HasForeignKey("DiaBitId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportCommonData", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDefaultDatum", "DefaultDatum")
                        .WithMany()
                        .HasForeignKey("DefaultDatumId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportControlIncidentInfo", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDiaBit", "DiaBit")
                        .WithMany()
                        .HasForeignKey("DiaBitId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDiaCsgLast", "DiaCsgLast")
                        .WithMany()
                        .HasForeignKey("DiaCsgLastId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportETimLost", "ETimLost")
                        .WithMany()
                        .HasForeignKey("ETimLostId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdBit", "MdBit")
                        .WithMany()
                        .HasForeignKey("MdBitId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdCsgLast", "MdCsgLast")
                        .WithMany()
                        .HasForeignKey("MdCsgLastId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdInflow", "MdInflow")
                        .WithMany()
                        .HasForeignKey("MdInflowId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportPorePressure", "PorePressure")
                        .WithMany()
                        .HasForeignKey("PorePressureId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportPresMaxChoke", "PresMaxChoke")
                        .WithMany()
                        .HasForeignKey("PresMaxChokeId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportPresShutInCasing", "PresShutInCasing")
                        .WithMany()
                        .HasForeignKey("PresShutInCasingId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportPresShutInDrill", "PresShutInDrill")
                        .WithMany()
                        .HasForeignKey("PresShutInDrillId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTempBottom", "TempBottom")
                        .WithMany()
                        .HasForeignKey("TempBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdInflow", "TvdInflow")
                        .WithMany()
                        .HasForeignKey("TvdInflowId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportVolMudGained", "VolMudGained")
                        .WithMany()
                        .HasForeignKey("VolMudGainedId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportWtMud", "WtMud")
                        .WithMany()
                        .HasForeignKey("WtMudUom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportCoreInfo", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportLenBarrel", "LenBarrel")
                        .WithMany()
                        .HasForeignKey("LenBarrelId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportLenRecovered", "LenRecovered")
                        .WithMany()
                        .HasForeignKey("LenRecoveredId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomDrillReportMdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportRecoverPc", "RecoverPc")
                        .WithMany()
                        .HasForeignKey("RecoverPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdBottom", "TvdBottom")
                        .WithMany()
                        .HasForeignKey("TvdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdTop", "TvdTop")
                        .WithMany()
                        .HasForeignKey("TvdTopDrillReportTvdTopId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportEquipFailureInfo", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportETimMissProduction", "ETimMissProduction")
                        .WithMany()
                        .HasForeignKey("ETimMissProductionId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportFluid", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDensity", "Density")
                        .WithMany()
                        .HasForeignKey("DensityId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReport", null)
                        .WithMany("Fluid")
                        .HasForeignKey("DrillReportId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportPresBopRating", "PresBopRating")
                        .WithMany()
                        .HasForeignKey("PresBopRatingId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportPv", "Pv")
                        .WithMany()
                        .HasForeignKey("PvId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTempVis", "TempVis")
                        .WithMany()
                        .HasForeignKey("TempVisId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvd", "Tvd")
                        .WithMany()
                        .HasForeignKey("TvdId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportFormTestInfo", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDensityHC", "DensityHC")
                        .WithMany()
                        .HasForeignKey("DensityHCId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdSample", "MdSample")
                        .WithMany()
                        .HasForeignKey("MdSampleId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportPresPore", "PresPore")
                        .WithMany()
                        .HasForeignKey("PresPoreId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvd", "Tvd")
                        .WithMany()
                        .HasForeignKey("TvdId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportVolumeSample", "VolumeSample")
                        .WithMany()
                        .HasForeignKey("VolumeSampleId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportGasReadingInfo", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportEth", "Eth")
                        .WithMany()
                        .HasForeignKey("EthId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportGasHigh", "GasHigh")
                        .WithMany()
                        .HasForeignKey("GasHighId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportGasLow", "GasLow")
                        .WithMany()
                        .HasForeignKey("GasLowId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportIbut", "Ibut")
                        .WithMany()
                        .HasForeignKey("IbutId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportIpent", "Ipent")
                        .WithMany()
                        .HasForeignKey("IpentId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomDrillReportMdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMeth", "Meth")
                        .WithMany()
                        .HasForeignKey("MethId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportNbut", "Nbut")
                        .WithMany()
                        .HasForeignKey("NbutId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportProp", "Prop")
                        .WithMany()
                        .HasForeignKey("PropId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdBottom", "TvdBottom")
                        .WithMany()
                        .HasForeignKey("TvdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdTop", "TvdTop")
                        .WithMany()
                        .HasForeignKey("TvdTopDrillReportTvdTopId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportLithShowInfo", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomDrillReportMdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdBottom", "TvdBottom")
                        .WithMany()
                        .HasForeignKey("TvdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdTop", "TvdTop")
                        .WithMany()
                        .HasForeignKey("TvdTopDrillReportTvdTopId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportLogInfo", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReport", null)
                        .WithMany("LogInfo")
                        .HasForeignKey("DrillReportId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportETimStatic", "ETimStatic")
                        .WithMany()
                        .HasForeignKey("ETimStaticId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomDrillReportMdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdTempTool", "MdTempTool")
                        .WithMany()
                        .HasForeignKey("MdTempToolId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTempBHCT", "TempBHCT")
                        .WithMany()
                        .HasForeignKey("TempBHCTId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTempBHST", "TempBHST")
                        .WithMany()
                        .HasForeignKey("TempBHSTId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdBottom", "TvdBottom")
                        .WithMany()
                        .HasForeignKey("TvdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdTempTool", "TvdTempTool")
                        .WithMany()
                        .HasForeignKey("TvdTempToolId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdTop", "TvdTop")
                        .WithMany()
                        .HasForeignKey("TvdTopDrillReportTvdTopId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPerfInfo", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomDrillReportMdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdBottom", "TvdBottom")
                        .WithMany()
                        .HasForeignKey("TvdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdTop", "TvdTop")
                        .WithMany()
                        .HasForeignKey("TvdTopDrillReportTvdTopId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportPorePressure", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReport", null)
                        .WithMany("PorePressure")
                        .HasForeignKey("DrillReportId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportEquivalentMudWeight", "EquivalentMudWeight")
                        .WithMany()
                        .HasForeignKey("EquivalentMudWeightId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvd", "Tvd")
                        .WithMany()
                        .HasForeignKey("TvdId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportRigAlias", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportWellboreInfo", null)
                        .WithMany("RigAlias")
                        .HasForeignKey("DrillReportWellboreInfoWellboreInfoId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportStatusInfo", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDiaCsgLast", "DiaCsgLast")
                        .WithMany()
                        .HasForeignKey("DiaCsgLastId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDiaHole", "DiaHole")
                        .WithMany()
                        .HasForeignKey("DiaHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDiaPilot", "DiaPilot")
                        .WithMany()
                        .HasForeignKey("DiaPilotId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDistDrill", "DistDrill")
                        .WithMany()
                        .HasForeignKey("DistDrillId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdCsgLast", "MdCsgLast")
                        .WithMany()
                        .HasForeignKey("MdCsgLastId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdDiaHoleStart", "MdDiaHoleStart")
                        .WithMany()
                        .HasForeignKey("MdDiaHoleStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdDiaPilotPlan", "MdDiaPilotPlan")
                        .WithMany()
                        .HasForeignKey("MdDiaPilotPlanId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdKickoff", "MdKickoff")
                        .WithMany()
                        .HasForeignKey("MdKickoffId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdPlugTop", "MdPlugTop")
                        .WithMany()
                        .HasForeignKey("MdPlugTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdStrengthForm", "MdStrengthForm")
                        .WithMany()
                        .HasForeignKey("MdStrengthFormId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportRopCurrent", "RopCurrent")
                        .WithMany()
                        .HasForeignKey("RopCurrentId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportStrengthForm", "StrengthForm")
                        .WithMany()
                        .HasForeignKey("StrengthFormId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvd", "Tvd")
                        .WithMany()
                        .HasForeignKey("TvdId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportStratInfo", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdTop", "TvdTop")
                        .WithMany()
                        .HasForeignKey("TvdTopDrillReportTvdTopId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportSurveyStation", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportAzi", "Azi")
                        .WithMany()
                        .HasForeignKey("AziId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportIncl", "Incl")
                        .WithMany()
                        .HasForeignKey("InclId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvd", "Tvd")
                        .WithMany()
                        .HasForeignKey("TvdId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportWellCRS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportGeodeticCRS", "GeodeticCRS")
                        .WithMany()
                        .HasForeignKey("GeodeticCRSId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportWellDatum", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReport", null)
                        .WithMany("WellDatum")
                        .HasForeignKey("DrillReportId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportElevation", "Elevation")
                        .WithMany()
                        .HasForeignKey("ElevationId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportWellTestInfo", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportCarbonDioxide", "CarbonDioxide")
                        .WithMany()
                        .HasForeignKey("CarbonDioxideId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportChloride", "Chloride")
                        .WithMany()
                        .HasForeignKey("ChlorideId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportChokeOrificeSize", "ChokeOrificeSize")
                        .WithMany()
                        .HasForeignKey("ChokeOrificeSizeId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDensityGas", "DensityGas")
                        .WithMany()
                        .HasForeignKey("DensityGasId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDensityOil", "DensityOil")
                        .WithMany()
                        .HasForeignKey("DensityOilId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportDensityWater", "DensityWater")
                        .WithMany()
                        .HasForeignKey("DensityWaterId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportFlowRateGas", "FlowRateGas")
                        .WithMany()
                        .HasForeignKey("FlowRateGasId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportFlowRateOil", "FlowRateOil")
                        .WithMany()
                        .HasForeignKey("FlowRateOilId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportFlowRateWater", "FlowRateWater")
                        .WithMany()
                        .HasForeignKey("FlowRateWaterId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportGasOilRatio", "GasOilRatio")
                        .WithMany()
                        .HasForeignKey("GasOilRatioId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportHydrogenSulfide", "HydrogenSulfide")
                        .WithMany()
                        .HasForeignKey("HydrogenSulfideId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomDrillReportMdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportPresBottom", "PresBottom")
                        .WithMany()
                        .HasForeignKey("PresBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportPresFlowing", "PresFlowing")
                        .WithMany()
                        .HasForeignKey("PresFlowingId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportPresShutIn", "PresShutIn")
                        .WithMany()
                        .HasForeignKey("PresShutInId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdBottom", "TvdBottom")
                        .WithMany()
                        .HasForeignKey("TvdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportTvdTop", "TvdTop")
                        .WithMany()
                        .HasForeignKey("TvdTopDrillReportTvdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportVolGasTotal", "VolGasTotal")
                        .WithMany()
                        .HasForeignKey("VolGasTotalId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportVolOilStored", "VolOilStored")
                        .WithMany()
                        .HasForeignKey("VolOilStoredId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportVolOilTotal", "VolOilTotal")
                        .WithMany()
                        .HasForeignKey("VolOilTotalId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportVolWaterTotal", "VolWaterTotal")
                        .WithMany()
                        .HasForeignKey("VolWaterTotalId");

                    b.HasOne("Well_AI.Advisor.API.Models.DrillReportWaterOilRatio", "WaterOilRatio")
                        .WithMany()
                        .HasForeignKey("WaterOilRatioId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.DrillReportWellboreAlias", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DrillReport", null)
                        .WithMany("WellboreAlias")
                        .HasForeignKey("DrillReportId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Ellipsoid", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.SecondDefiningParameter", "SecondDefiningParameter")
                        .WithMany()
                        .HasForeignKey("SecondDefiningParameterId");

                    b.HasOne("Well_AI.Advisor.API.Models.SemiMajorAxis", "SemiMajorAxis")
                        .WithMany()
                        .HasForeignKey("SemiMajorAxisUom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.EllipsoidalCS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameCodeSpace");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ErrorCoefficient", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ErrorTerm", null)
                        .WithMany("ErrorCoefficient")
                        .HasForeignKey("ErrorTermId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ErrorTerm", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ToolErrorTermSet", null)
                        .WithMany("ErrorTerm")
                        .HasForeignKey("ToolErrorTermSetId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ErrorTermValue", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId");

                    b.HasOne("Well_AI.Advisor.API.Models.ToolErrorModel", null)
                        .WithMany("ErrorTermValue")
                        .HasForeignKey("ToolErrorModelId");

                    b.HasOne("Well_AI.Advisor.API.Models.ToolErrorValue", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FlowPath", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.AcidVol", "AcidVol")
                        .WithMany()
                        .HasForeignKey("AcidVolId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgAcidRate", "AvgAcidRate")
                        .WithMany()
                        .HasForeignKey("AvgAcidRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgBaseFluidQuality", "AvgBaseFluidQuality")
                        .WithMany()
                        .HasForeignKey("AvgBaseFluidQualityId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgBaseFluidRate", "AvgBaseFluidRate")
                        .WithMany()
                        .HasForeignKey("AvgBaseFluidRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgCO2BaseFluidQuality", "AvgCO2BaseFluidQuality")
                        .WithMany()
                        .HasForeignKey("AvgCO2BaseFluidQualityId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgCO2LiquidRate", "AvgCO2LiquidRate")
                        .WithMany()
                        .HasForeignKey("AvgCO2LiquidRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgGelRate", "AvgGelRate")
                        .WithMany()
                        .HasForeignKey("AvgGelRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgHydraulicPower", "AvgHydraulicPower")
                        .WithMany()
                        .HasForeignKey("AvgHydraulicPowerId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgN2BaseFluidQuality", "AvgN2BaseFluidQuality")
                        .WithMany()
                        .HasForeignKey("AvgN2BaseFluidQualityId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgN2StdRate", "AvgN2StdRate")
                        .WithMany()
                        .HasForeignKey("AvgN2StdRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgOilRate", "AvgOilRate")
                        .WithMany()
                        .HasForeignKey("AvgOilRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgPmaxPacPres", "AvgPmaxPacPres")
                        .WithMany()
                        .HasForeignKey("AvgPmaxPacPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgPmaxWeaklinkPres", "AvgPmaxWeaklinkPres")
                        .WithMany()
                        .HasForeignKey("AvgPmaxWeaklinkPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgPropConc", "AvgPropConc")
                        .WithMany()
                        .HasForeignKey("AvgPropConcId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgSlurryPropConc", "AvgSlurryPropConc")
                        .WithMany()
                        .HasForeignKey("AvgSlurryPropConcId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgSlurryRate", "AvgSlurryRate")
                        .WithMany()
                        .HasForeignKey("AvgSlurryRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgTemperature", "AvgTemperature")
                        .WithMany()
                        .HasForeignKey("AvgTemperatureId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgTreatPres", "AvgTreatPres")
                        .WithMany()
                        .HasForeignKey("AvgTreatPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgWellheadRate", "AvgWellheadRate")
                        .WithMany()
                        .HasForeignKey("AvgWellheadRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.BaseFluidBypassVol", "BaseFluidBypassVol")
                        .WithMany()
                        .HasForeignKey("BaseFluidBypassVolId");

                    b.HasOne("Well_AI.Advisor.API.Models.BaseFluidVol", "BaseFluidVol")
                        .WithMany()
                        .HasForeignKey("BaseFluidVolId");

                    b.HasOne("Well_AI.Advisor.API.Models.BreakDownPres", "BreakDownPres")
                        .WithMany()
                        .HasForeignKey("BreakDownPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.FractureGradient", "FractureGradient")
                        .WithMany()
                        .HasForeignKey("FractureGradientId");

                    b.HasOne("Well_AI.Advisor.API.Models.GelVol", "GelVol")
                        .WithMany()
                        .HasForeignKey("GelVolId");

                    b.HasOne("Well_AI.Advisor.API.Models.MassCO2", "MassCO2")
                        .WithMany()
                        .HasForeignKey("MassCO2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxAcidRate", "MaxAcidRate")
                        .WithMany()
                        .HasForeignKey("MaxAcidRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxCO2LiquidRate", "MaxCO2LiquidRate")
                        .WithMany()
                        .HasForeignKey("MaxCO2LiquidRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxGelRate", "MaxGelRate")
                        .WithMany()
                        .HasForeignKey("MaxGelRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxN2StdRate", "MaxN2StdRate")
                        .WithMany()
                        .HasForeignKey("MaxN2StdRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxOilRate", "MaxOilRate")
                        .WithMany()
                        .HasForeignKey("MaxOilRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxPmaxPacPres", "MaxPmaxPacPres")
                        .WithMany()
                        .HasForeignKey("MaxPmaxPacPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxPmaxWeaklinkPres", "MaxPmaxWeaklinkPres")
                        .WithMany()
                        .HasForeignKey("MaxPmaxWeaklinkPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxPropConc", "MaxPropConc")
                        .WithMany()
                        .HasForeignKey("MaxPropConcId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxSlurryPropConc", "MaxSlurryPropConc")
                        .WithMany()
                        .HasForeignKey("MaxSlurryPropConcId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxSlurryRate", "MaxSlurryRate")
                        .WithMany()
                        .HasForeignKey("MaxSlurryRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxTreatmentPres", "MaxTreatmentPres")
                        .WithMany()
                        .HasForeignKey("MaxTreatmentPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxWellheadRate", "MaxWellheadRate")
                        .WithMany()
                        .HasForeignKey("MaxWellheadRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.OilVol", "OilVol")
                        .WithMany()
                        .HasForeignKey("OilVolId");

                    b.HasOne("Well_AI.Advisor.API.Models.PercentPad", "PercentPad")
                        .WithMany()
                        .HasForeignKey("PercentPadId");

                    b.HasOne("Well_AI.Advisor.API.Models.PropMass", "PropMass")
                        .WithMany()
                        .HasForeignKey("PropMassId");

                    b.HasOne("Well_AI.Advisor.API.Models.ShutinPres10Min", "ShutinPres10Min")
                        .WithMany()
                        .HasForeignKey("ShutinPres10MinId");

                    b.HasOne("Well_AI.Advisor.API.Models.ShutinPres15Min", "ShutinPres15Min")
                        .WithMany()
                        .HasForeignKey("ShutinPres15MinId");

                    b.HasOne("Well_AI.Advisor.API.Models.ShutinPres5Min", "ShutinPres5Min")
                        .WithMany()
                        .HasForeignKey("ShutinPres5MinId");

                    b.HasOne("Well_AI.Advisor.API.Models.SlurryVol", "SlurryVol")
                        .WithMany()
                        .HasForeignKey("SlurryVolId");

                    b.HasOne("Well_AI.Advisor.API.Models.StdVolN2", "StdVolN2")
                        .WithMany()
                        .HasForeignKey("StdVolN2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.WellheadVol", "WellheadVol")
                        .WithMany()
                        .HasForeignKey("WellheadVolStdVolN2Id");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidEfficiencyTest", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.EndPdlDuration", "EndPdlDuration")
                        .WithMany()
                        .HasForeignKey("EndPdlDurationId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidEfficiency", "FluidEfficiency")
                        .WithMany()
                        .HasForeignKey("FluidEfficiencyId");

                    b.HasOne("Well_AI.Advisor.API.Models.FractureCloseDuration", "FractureCloseDuration")
                        .WithMany()
                        .HasForeignKey("FractureCloseDurationId");

                    b.HasOne("Well_AI.Advisor.API.Models.FractureClosePres", "FractureClosePres")
                        .WithMany()
                        .HasForeignKey("FractureClosePresId");

                    b.HasOne("Well_AI.Advisor.API.Models.FractureExtensionPres", "FractureExtensionPres")
                        .WithMany()
                        .HasForeignKey("FractureExtensionPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.FractureLength", "FractureLength")
                        .WithMany()
                        .HasForeignKey("FractureLengthId");

                    b.HasOne("Well_AI.Advisor.API.Models.FractureWidth", "FractureWidth")
                        .WithMany()
                        .HasForeignKey("FractureWidthId");

                    b.HasOne("Well_AI.Advisor.API.Models.NetPres", "NetPres")
                        .WithMany()
                        .HasForeignKey("NetPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.PorePres", "PorePres")
                        .WithMany()
                        .HasForeignKey("PorePresId");

                    b.HasOne("Well_AI.Advisor.API.Models.PseudoRadialPres", "PseudoRadialPres")
                        .WithMany()
                        .HasForeignKey("PseudoRadialPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.ResidualPermeability", "ResidualPermeability")
                        .WithMany()
                        .HasForeignKey("ResidualPermeabilityId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReport", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportFluid", "Fluid")
                        .WithMany()
                        .HasForeignKey("FluidUid");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportTvd", "Tvd")
                        .WithMany()
                        .HasForeignKey("TvdId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportFluid", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportAlkalinityP1", "AlkalinityP1")
                        .WithMany()
                        .HasForeignKey("AlkalinityP1Id");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportAlkalinityP2", "AlkalinityP2")
                        .WithMany()
                        .HasForeignKey("AlkalinityP2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportBaritePc", "BaritePc")
                        .WithMany()
                        .HasForeignKey("BaritePcId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportBrinePc", "BrinePc")
                        .WithMany()
                        .HasForeignKey("BrinePcId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportCalciumChloride", "CalciumChloride")
                        .WithMany()
                        .HasForeignKey("CalciumChlorideId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportCalcium", "Calcium")
                        .WithMany()
                        .HasForeignKey("CalciumId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportChloride", "Chloride")
                        .WithMany()
                        .HasForeignKey("ChlorideId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportDensity", "Density")
                        .WithMany()
                        .HasForeignKey("DensityId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportElectStab", "ElectStab")
                        .WithMany()
                        .HasForeignKey("ElectStabId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportFilterCakeHthp", "FilterCakeHthp")
                        .WithMany()
                        .HasForeignKey("FilterCakeHthpId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportFilterCakeLtlp", "FilterCakeLtlp")
                        .WithMany()
                        .HasForeignKey("FilterCakeLtlpId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportFiltrateHthp", "FiltrateHthp")
                        .WithMany()
                        .HasForeignKey("FiltrateHthpId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportFiltrateLtlp", "FiltrateLtlp")
                        .WithMany()
                        .HasForeignKey("FiltrateLtlpId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportGel10Min", "Gel10Min")
                        .WithMany()
                        .HasForeignKey("Gel10MinId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportGel10Sec", "Gel10Sec")
                        .WithMany()
                        .HasForeignKey("Gel10SecId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportGel30Min", "Gel30Min")
                        .WithMany()
                        .HasForeignKey("Gel30MinId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportHardnessCa", "HardnessCa")
                        .WithMany()
                        .HasForeignKey("HardnessCaId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportLcm", "Lcm")
                        .WithMany()
                        .HasForeignKey("LcmId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportLime", "Lime")
                        .WithMany()
                        .HasForeignKey("LimeId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportMagnesium", "Magnesium")
                        .WithMany()
                        .HasForeignKey("MagnesiumId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportMbt", "Mbt")
                        .WithMany()
                        .HasForeignKey("MbtId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportMf", "Mf")
                        .WithMany()
                        .HasForeignKey("MfId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportOilCtg", "OilCtg")
                        .WithMany()
                        .HasForeignKey("OilCtgId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportOilPc", "OilPc")
                        .WithMany()
                        .HasForeignKey("OilPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportPmFiltrate", "PmFiltrate")
                        .WithMany()
                        .HasForeignKey("PmFiltrateId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportPm", "Pm")
                        .WithMany()
                        .HasForeignKey("PmId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportPolymer", "Polymer")
                        .WithMany()
                        .HasForeignKey("PolymerId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportPotassium", "Potassium")
                        .WithMany()
                        .HasForeignKey("PotassiumId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportPresHthp", "PresHthp")
                        .WithMany()
                        .HasForeignKey("PresHthpId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportPv", "Pv")
                        .WithMany()
                        .HasForeignKey("PvReportPvId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportSandPc", "SandPc")
                        .WithMany()
                        .HasForeignKey("SandPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportSolCorPc", "SolCorPc")
                        .WithMany()
                        .HasForeignKey("SolCorPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportSolidsCalcPc", "SolidsCalcPc")
                        .WithMany()
                        .HasForeignKey("SolidsCalcPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportSolidsHiGravPc", "SolidsHiGravPc")
                        .WithMany()
                        .HasForeignKey("SolidsHiGravPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportSolidsLowGravPc", "SolidsLowGravPc")
                        .WithMany()
                        .HasForeignKey("SolidsLowGravPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportSolidsPc", "SolidsPc")
                        .WithMany()
                        .HasForeignKey("SolidsPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportSulfide", "Sulfide")
                        .WithMany()
                        .HasForeignKey("SulfideId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportTempHthp", "TempHthp")
                        .WithMany()
                        .HasForeignKey("TempHthpId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportTempPh", "TempPh")
                        .WithMany()
                        .HasForeignKey("TempPhId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportTempVis", "TempVis")
                        .WithMany()
                        .HasForeignKey("TempVisId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportVisFunnel", "VisFunnel")
                        .WithMany()
                        .HasForeignKey("VisFunnelId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportWaterPc", "WaterPc")
                        .WithMany()
                        .HasForeignKey("WaterPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportYp", "Yp")
                        .WithMany()
                        .HasForeignKey("YpReportYpId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FluidsReportRheometer", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportFluid", null)
                        .WithMany("Rheometer")
                        .HasForeignKey("FluidsReportFluidUid");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportPresRheom", "PresRheom")
                        .WithMany()
                        .HasForeignKey("PresRheomId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidsReportTempRheom", "TempRheom")
                        .WithMany()
                        .HasForeignKey("TempRheomId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.FormationMarker", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerChronostratigraphic", "Chronostratigraphic")
                        .WithMany()
                        .HasForeignKey("ChronostratigraphicId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataFormationMarkerCommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerDipDirection", "DipDirection")
                        .WithMany()
                        .HasForeignKey("DipDirectionId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerDip", "Dip")
                        .WithMany()
                        .HasForeignKey("DipId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerLithostratigraphic", "Lithostratigraphic")
                        .WithMany()
                        .HasForeignKey("LithostratigraphicId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerMdLogSample", "MdLogSample")
                        .WithMany()
                        .HasForeignKey("MdLogSampleId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerMdPrognosed", "MdPrognosed")
                        .WithMany()
                        .HasForeignKey("MdPrognosedId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerMdTopSample", "MdTopSample")
                        .WithMany()
                        .HasForeignKey("MdTopSampleId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerThicknessApparent", "ThicknessApparent")
                        .WithMany()
                        .HasForeignKey("ThicknessApparentId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerThicknessBed", "ThicknessBed")
                        .WithMany()
                        .HasForeignKey("ThicknessBedId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerThicknessPerpen", "ThicknessPerpen")
                        .WithMany()
                        .HasForeignKey("ThicknessPerpenId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerTvdLogSample", "TvdLogSample")
                        .WithMany()
                        .HasForeignKey("TvdLogSampleId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerTvdPrognosed", "TvdPrognosed")
                        .WithMany()
                        .HasForeignKey("TvdPrognosedId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationMarkerTvdTopSample", "TvdTopSample")
                        .WithMany()
                        .HasForeignKey("TvdTopSampleId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Function", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Nomenclature", null)
                        .WithMany("Function")
                        .HasForeignKey("NomenclatureId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GeodeticDatum", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.UsesEllipsoid", "UsesEllipsoid")
                        .WithMany()
                        .HasForeignKey("UsesEllipsoidId");

                    b.HasOne("Well_AI.Advisor.API.Models.UsesPrimeMeridian", "UsesPrimeMeridian")
                        .WithMany()
                        .HasForeignKey("UsesPrimeMeridianId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GeographicCRS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.UsesEllipsoidalCS", "UsesEllipsoidalCS")
                        .WithMany()
                        .HasForeignKey("UsesEllipsoidalCSEllipsId");

                    b.HasOne("Well_AI.Advisor.API.Models.UsesGeodeticDatum", "UsesGeodeticDatum")
                        .WithMany()
                        .HasForeignKey("UsesGeodeticDatumId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.GmlGeodeticCRS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.EllipsoidalCS", "EllipsoidalCS")
                        .WithMany()
                        .HasForeignKey("EllipsoidalCSId");

                    b.HasOne("Well_AI.Advisor.API.Models.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.UsesGeodeticDatum", "UsesGeodeticDatum")
                        .WithMany()
                        .HasForeignKey("UsesGeodeticDatumId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.JobEvent", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.FlowPath", null)
                        .WithMany("JobEvent")
                        .HasForeignKey("FlowPathId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.JobInterval", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.AveragePres", "AveragePres")
                        .WithMany()
                        .HasForeignKey("AveragePresId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgBaseFluidReturnRate", "AvgBaseFluidReturnRate")
                        .WithMany()
                        .HasForeignKey("AvgBaseFluidReturnRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgBottomholeRate", "AvgBottomholeRate")
                        .WithMany()
                        .HasForeignKey("AvgBottomholeRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgConductivity", "AvgConductivity")
                        .WithMany()
                        .HasForeignKey("AvgConductivityId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgFractureWidth", "AvgFractureWidth")
                        .WithMany()
                        .HasForeignKey("AvgFractureWidthId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgPresCasing", "AvgPresCasing")
                        .WithMany()
                        .HasForeignKey("AvgPresCasingId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgPresTubing", "AvgPresTubing")
                        .WithMany()
                        .HasForeignKey("AvgPresTubingId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgProppantConcBottomhole", "AvgProppantConcBottomhole")
                        .WithMany()
                        .HasForeignKey("AvgProppantConcBottomholeId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgProppantConcSurface", "AvgProppantConcSurface")
                        .WithMany()
                        .HasForeignKey("AvgProppantConcSurfaceId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgSlurryReturnRate", "AvgSlurryReturnRate")
                        .WithMany()
                        .HasForeignKey("AvgSlurryReturnRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.BreakDownPres", "BreakDownPres")
                        .WithMany()
                        .HasForeignKey("BreakDownPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.ClosureDuration", "ClosureDuration")
                        .WithMany()
                        .HasForeignKey("ClosureDurationId");

                    b.HasOne("Well_AI.Advisor.API.Models.ClosurePres", "ClosurePres")
                        .WithMany()
                        .HasForeignKey("ClosurePresId");

                    b.HasOne("Well_AI.Advisor.API.Models.FinalFractureGradient", "FinalFractureGradient")
                        .WithMany()
                        .HasForeignKey("FinalFractureGradientId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationProppantMass", "FormationProppantMass")
                        .WithMany()
                        .HasForeignKey("FormationProppantMassId");

                    b.HasOne("Well_AI.Advisor.API.Models.FractureGradient", "FractureGradient")
                        .WithMany()
                        .HasForeignKey("FractureGradientId");

                    b.HasOne("Well_AI.Advisor.API.Models.HhpOrderedCO2", "HhpOrderedCO2")
                        .WithMany()
                        .HasForeignKey("HhpOrderedCO2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.HhpOrderedFluid", "HhpOrderedFluid")
                        .WithMany()
                        .HasForeignKey("HhpOrderedFluidId");

                    b.HasOne("Well_AI.Advisor.API.Models.HhpUsedCO2", "HhpUsedCO2")
                        .WithMany()
                        .HasForeignKey("HhpUsedCO2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.HhpUsedFluid", "HhpUsedFluid")
                        .WithMany()
                        .HasForeignKey("HhpUsedFluidId");

                    b.HasOne("Well_AI.Advisor.API.Models.InitialShutinPres", "InitialShutinPres")
                        .WithMany()
                        .HasForeignKey("InitialShutinPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxFluidRateAnnulus", "MaxFluidRateAnnulus")
                        .WithMany()
                        .HasForeignKey("MaxFluidRateAnnulusId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxFluidRateTubing", "MaxFluidRateTubing")
                        .WithMany()
                        .HasForeignKey("MaxFluidRateTubingId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxPresAnnulus", "MaxPresAnnulus")
                        .WithMany()
                        .HasForeignKey("MaxPresAnnulusId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxPresTubing", "MaxPresTubing")
                        .WithMany()
                        .HasForeignKey("MaxPresTubingId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxProppantConcBottomhole", "MaxProppantConcBottomhole")
                        .WithMany()
                        .HasForeignKey("MaxProppantConcBottomholeId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxProppantConcSurface", "MaxProppantConcSurface")
                        .WithMany()
                        .HasForeignKey("MaxProppantConcSurfaceId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdFormationBottom", "MdFormationBottom")
                        .WithMany()
                        .HasForeignKey("MdFormationBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdFormationTop", "MdFormationTop")
                        .WithMany()
                        .HasForeignKey("MdFormationTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdOpenHoleBottom", "MdOpenHoleBottom")
                        .WithMany()
                        .HasForeignKey("MdOpenHoleBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdOpenHoleTop", "MdOpenHoleTop")
                        .WithMany()
                        .HasForeignKey("MdOpenHoleTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.NetPres", "NetPres")
                        .WithMany()
                        .HasForeignKey("NetPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpenHoleDiameter", "OpenHoleDiameter")
                        .WithMany()
                        .HasForeignKey("OpenHoleDiameterId");

                    b.HasOne("Well_AI.Advisor.API.Models.PdatSession", "PdatSession")
                        .WithMany()
                        .HasForeignKey("PdatSessionId");

                    b.HasOne("Well_AI.Advisor.API.Models.PercentProppantPumped", "PercentProppantPumped")
                        .WithMany()
                        .HasForeignKey("PercentProppantPumpedId");

                    b.HasOne("Well_AI.Advisor.API.Models.PerfBallSize", "PerfBallSize")
                        .WithMany()
                        .HasForeignKey("PerfBallSizeId");

                    b.HasOne("Well_AI.Advisor.API.Models.PerforationInterval", "PerforationInterval")
                        .WithMany()
                        .HasForeignKey("PerforationIntervalId");

                    b.HasOne("Well_AI.Advisor.API.Models.PerfproppantConc", "PerfproppantConc")
                        .WithMany()
                        .HasForeignKey("PerfproppantConcId");

                    b.HasOne("Well_AI.Advisor.API.Models.ReservoirInterval", "ReservoirInterval")
                        .WithMany()
                        .HasForeignKey("ReservoirIntervalId");

                    b.HasOne("Well_AI.Advisor.API.Models.ScreenOutPres", "ScreenOutPres")
                        .WithMany()
                        .HasForeignKey("ScreenOutPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.TotalCO2Mass", "TotalCO2Mass")
                        .WithMany()
                        .HasForeignKey("TotalCO2MassId");

                    b.HasOne("Well_AI.Advisor.API.Models.TotalFrictionPresLoss", "TotalFrictionPresLoss")
                        .WithMany()
                        .HasForeignKey("TotalFrictionPresLossId");

                    b.HasOne("Well_AI.Advisor.API.Models.TotalN2StdVolume", "TotalN2StdVolume")
                        .WithMany()
                        .HasForeignKey("TotalN2StdVolumeId");

                    b.HasOne("Well_AI.Advisor.API.Models.TotalProppantMass", "TotalProppantMass")
                        .WithMany()
                        .HasForeignKey("TotalProppantMassId");

                    b.HasOne("Well_AI.Advisor.API.Models.TotalPumpTime", "TotalPumpTime")
                        .WithMany()
                        .HasForeignKey("TotalPumpTimeId");

                    b.HasOne("Well_AI.Advisor.API.Models.TotalVolume", "TotalVolume")
                        .WithMany()
                        .HasForeignKey("TotalVolumeId");

                    b.HasOne("Well_AI.Advisor.API.Models.TvdFormationBottom", "TvdFormationBottom")
                        .WithMany()
                        .HasForeignKey("TvdFormationBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.TvdFormationTop", "TvdFormationTop")
                        .WithMany()
                        .HasForeignKey("TvdFormationTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.TvdOpenHoleBottom", "TvdOpenHoleBottom")
                        .WithMany()
                        .HasForeignKey("TvdOpenHoleBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.TvdOpenHoleTop", "TvdOpenHoleTop")
                        .WithMany()
                        .HasForeignKey("TvdOpenHoleTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellboreProppantMass", "WellboreProppantMass")
                        .WithMany()
                        .HasForeignKey("WellboreProppantMassId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.JobStage", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.AcidVolume", "AcidVolume")
                        .WithMany()
                        .HasForeignKey("AcidVolumeId");

                    b.HasOne("Well_AI.Advisor.API.Models.AveragePresBottomhole", "AveragePresBottomhole")
                        .WithMany()
                        .HasForeignKey("AveragePresBottomholeId");

                    b.HasOne("Well_AI.Advisor.API.Models.AveragePresSurface", "AveragePresSurface")
                        .WithMany()
                        .HasForeignKey("AveragePresSurfaceId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgAcidRate", "AvgAcidRate")
                        .WithMany()
                        .HasForeignKey("AvgAcidRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgBaseFluidQuality", "AvgBaseFluidQuality")
                        .WithMany()
                        .HasForeignKey("AvgBaseFluidQualityId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgBaseFluidRate", "AvgBaseFluidRate")
                        .WithMany()
                        .HasForeignKey("AvgBaseFluidRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgCO2BaseFluidQuality", "AvgCO2BaseFluidQuality")
                        .WithMany()
                        .HasForeignKey("AvgCO2BaseFluidQualityId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgCO2Rate", "AvgCO2Rate")
                        .WithMany()
                        .HasForeignKey("AvgCO2RateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgGelRate", "AvgGelRate")
                        .WithMany()
                        .HasForeignKey("AvgGelRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgHydraulicPower", "AvgHydraulicPower")
                        .WithMany()
                        .HasForeignKey("AvgHydraulicPowerId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgInternalPhaseFraction", "AvgInternalPhaseFraction")
                        .WithMany()
                        .HasForeignKey("AvgInternalPhaseFractionId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgN2BaseFluidQuality", "AvgN2BaseFluidQuality")
                        .WithMany()
                        .HasForeignKey("AvgN2BaseFluidQualityId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgN2StdRate", "AvgN2StdRate")
                        .WithMany()
                        .HasForeignKey("AvgN2StdRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgOilRate", "AvgOilRate")
                        .WithMany()
                        .HasForeignKey("AvgOilRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgPropConc", "AvgPropConc")
                        .WithMany()
                        .HasForeignKey("AvgPropConcId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgProppantConcBottomhole", "AvgProppantConcBottomhole")
                        .WithMany()
                        .HasForeignKey("AvgProppantConcBottomholeId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgProppantConcSurface", "AvgProppantConcSurface")
                        .WithMany()
                        .HasForeignKey("AvgProppantConcSurfaceId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgPumpRateBottomhole", "AvgPumpRateBottomhole")
                        .WithMany()
                        .HasForeignKey("AvgPumpRateBottomholeId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgRateSurfaceCO2", "AvgRateSurfaceCO2")
                        .WithMany()
                        .HasForeignKey("AvgRateSurfaceCO2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgRateSurfaceLiquid", "AvgRateSurfaceLiquid")
                        .WithMany()
                        .HasForeignKey("AvgRateSurfaceLiquidId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgSlurryPropConc", "AvgSlurryPropConc")
                        .WithMany()
                        .HasForeignKey("AvgSlurryPropConcId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgSlurryRate", "AvgSlurryRate")
                        .WithMany()
                        .HasForeignKey("AvgSlurryRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgStdRateSurfaceN2", "AvgStdRateSurfaceN2")
                        .WithMany()
                        .HasForeignKey("AvgStdRateSurfaceN2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgTemperature", "AvgTemperature")
                        .WithMany()
                        .HasForeignKey("AvgTemperatureId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgWellheadRate", "AvgWellheadRate")
                        .WithMany()
                        .HasForeignKey("AvgWellheadRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.BaseFluidBypassVol", "BaseFluidBypassVol")
                        .WithMany()
                        .HasForeignKey("BaseFluidBypassVolId");

                    b.HasOne("Well_AI.Advisor.API.Models.BaseFluidVol", "BaseFluidVol")
                        .WithMany()
                        .HasForeignKey("BaseFluidVolId");

                    b.HasOne("Well_AI.Advisor.API.Models.EndFoamRateCO2", "EndFoamRateCO2")
                        .WithMany()
                        .HasForeignKey("EndFoamRateCO2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.EndFoamRateN2", "EndFoamRateN2")
                        .WithMany()
                        .HasForeignKey("EndFoamRateN2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.EndPresBottomhole", "EndPresBottomhole")
                        .WithMany()
                        .HasForeignKey("EndPresBottomholeId");

                    b.HasOne("Well_AI.Advisor.API.Models.EndPresSurface", "EndPresSurface")
                        .WithMany()
                        .HasForeignKey("EndPresSurfaceId");

                    b.HasOne("Well_AI.Advisor.API.Models.EndProppantConcBottomhole", "EndProppantConcBottomhole")
                        .WithMany()
                        .HasForeignKey("EndProppantConcBottomholeId");

                    b.HasOne("Well_AI.Advisor.API.Models.EndProppantConcSurface", "EndProppantConcSurface")
                        .WithMany()
                        .HasForeignKey("EndProppantConcSurfaceId");

                    b.HasOne("Well_AI.Advisor.API.Models.EndPumpRateBottomhole", "EndPumpRateBottomhole")
                        .WithMany()
                        .HasForeignKey("EndPumpRateBottomholeId");

                    b.HasOne("Well_AI.Advisor.API.Models.EndRateSurfaceCO2", "EndRateSurfaceCO2")
                        .WithMany()
                        .HasForeignKey("EndRateSurfaceCO2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.EndRateSurfaceLiquid", "EndRateSurfaceLiquid")
                        .WithMany()
                        .HasForeignKey("EndRateSurfaceLiquidId");

                    b.HasOne("Well_AI.Advisor.API.Models.EndStdRateSurfaceN2", "EndStdRateSurfaceN2")
                        .WithMany()
                        .HasForeignKey("EndStdRateSurfaceN2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.FlowPath", null)
                        .WithMany("JobStage")
                        .HasForeignKey("FlowPathId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidVolBase", "FluidVolBase")
                        .WithMany()
                        .HasForeignKey("FluidVolBaseId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidVolSlurry", "FluidVolSlurry")
                        .WithMany()
                        .HasForeignKey("FluidVolSlurryId");

                    b.HasOne("Well_AI.Advisor.API.Models.GelVolume", "GelVolume")
                        .WithMany()
                        .HasForeignKey("GelVolumeId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxAcidRate", "MaxAcidRate")
                        .WithMany()
                        .HasForeignKey("MaxAcidRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxCO2LiquidRate", "MaxCO2LiquidRate")
                        .WithMany()
                        .HasForeignKey("MaxCO2LiquidRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxGelRate", "MaxGelRate")
                        .WithMany()
                        .HasForeignKey("MaxGelRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxN2StdRate", "MaxN2StdRate")
                        .WithMany()
                        .HasForeignKey("MaxN2StdRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxOilRate", "MaxOilRate")
                        .WithMany()
                        .HasForeignKey("MaxOilRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxPmaxPacPres", "MaxPmaxPacPres")
                        .WithMany()
                        .HasForeignKey("MaxPmaxPacPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxPmaxWeaklinkPres", "MaxPmaxWeaklinkPres")
                        .WithMany()
                        .HasForeignKey("MaxPmaxWeaklinkPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxPres", "MaxPres")
                        .WithMany()
                        .HasForeignKey("MaxPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxPropConc", "MaxPropConc")
                        .WithMany()
                        .HasForeignKey("MaxPropConcId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxSlurryPropConc", "MaxSlurryPropConc")
                        .WithMany()
                        .HasForeignKey("MaxSlurryPropConcId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxSlurryRate", "MaxSlurryRate")
                        .WithMany()
                        .HasForeignKey("MaxSlurryRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxWellheadRate", "MaxWellheadRate")
                        .WithMany()
                        .HasForeignKey("MaxWellheadRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.OilVolume", "OilVolume")
                        .WithMany()
                        .HasForeignKey("OilVolumeId");

                    b.HasOne("Well_AI.Advisor.API.Models.ProppantMass", "ProppantMass")
                        .WithMany()
                        .HasForeignKey("ProppantMassId");

                    b.HasOne("Well_AI.Advisor.API.Models.ProppantMassWellHead", "ProppantMassWellHead")
                        .WithMany()
                        .HasForeignKey("ProppantMassWellHeadId");

                    b.HasOne("Well_AI.Advisor.API.Models.PumpTime", "PumpTime")
                        .WithMany()
                        .HasForeignKey("PumpTimeId");

                    b.HasOne("Well_AI.Advisor.API.Models.SlurryRateBegin", "SlurryRateBegin")
                        .WithMany()
                        .HasForeignKey("SlurryRateBeginId");

                    b.HasOne("Well_AI.Advisor.API.Models.SlurryRateEnd", "SlurryRateEnd")
                        .WithMany()
                        .HasForeignKey("SlurryRateEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.SlurryVol", "SlurryVol")
                        .WithMany()
                        .HasForeignKey("SlurryVolId");

                    b.HasOne("Well_AI.Advisor.API.Models.StageFluid", "StageFluid")
                        .WithMany()
                        .HasForeignKey("StageFluidId");

                    b.HasOne("Well_AI.Advisor.API.Models.StartFoamRateCO2", "StartFoamRateCO2")
                        .WithMany()
                        .HasForeignKey("StartFoamRateCO2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.StartFoamRateN2", "StartFoamRateN2")
                        .WithMany()
                        .HasForeignKey("StartFoamRateN2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.StartPresBottomhole", "StartPresBottomhole")
                        .WithMany()
                        .HasForeignKey("StartPresBottomholeId");

                    b.HasOne("Well_AI.Advisor.API.Models.StartPresSurface", "StartPresSurface")
                        .WithMany()
                        .HasForeignKey("StartPresSurfaceId");

                    b.HasOne("Well_AI.Advisor.API.Models.StartProppantConcBottomhole", "StartProppantConcBottomhole")
                        .WithMany()
                        .HasForeignKey("StartProppantConcBottomholeId");

                    b.HasOne("Well_AI.Advisor.API.Models.StartProppantConcSurface", "StartProppantConcSurface")
                        .WithMany()
                        .HasForeignKey("StartProppantConcSurfaceId");

                    b.HasOne("Well_AI.Advisor.API.Models.StartPumpRateBottomhole", "StartPumpRateBottomhole")
                        .WithMany()
                        .HasForeignKey("StartPumpRateBottomholeId");

                    b.HasOne("Well_AI.Advisor.API.Models.StartRateSurfaceCO2", "StartRateSurfaceCO2")
                        .WithMany()
                        .HasForeignKey("StartRateSurfaceCO2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.StartRateSurfaceLiquid", "StartRateSurfaceLiquid")
                        .WithMany()
                        .HasForeignKey("StartRateSurfaceLiquidId");

                    b.HasOne("Well_AI.Advisor.API.Models.StartStdRateSurfaceN2", "StartStdRateSurfaceN2")
                        .WithMany()
                        .HasForeignKey("StartStdRateSurfaceN2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.WellheadVol", "WellheadVol")
                        .WithMany()
                        .HasForeignKey("WellheadVolStdVolN2Id");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Log", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.LogCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataLogCommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.LogEndIndex", "EndIndex")
                        .WithMany()
                        .HasForeignKey("EndIndexLogEndIndexId");

                    b.HasOne("Well_AI.Advisor.API.Models.LogData", "LogData")
                        .WithMany()
                        .HasForeignKey("LogDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.LogStartIndex", "StartIndex")
                        .WithMany()
                        .HasForeignKey("StartIndexLogStartIndexId");

                    b.HasOne("Well_AI.Advisor.API.Models.StepIncrement", "StepIncrement")
                        .WithMany()
                        .HasForeignKey("StepIncrementId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LogCurveInfo", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Log", null)
                        .WithMany("LogCurveInfo")
                        .HasForeignKey("LogId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxIndex", "MaxIndex")
                        .WithMany()
                        .HasForeignKey("MaxIndexId");

                    b.HasOne("Well_AI.Advisor.API.Models.MinIndex", "MinIndex")
                        .WithMany()
                        .HasForeignKey("MinIndexId");

                    b.HasOne("Well_AI.Advisor.API.Models.SensorOffset", "SensorOffset")
                        .WithMany()
                        .HasForeignKey("SensorOffsetId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.LogParam", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Log", null)
                        .WithMany("LogParam")
                        .HasForeignKey("LogId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Message", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.MessageCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataMessageCommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.MessageMdBit", "MdBit")
                        .WithMany()
                        .HasForeignKey("MdBitId");

                    b.HasOne("Well_AI.Advisor.API.Models.MessageMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");

                    b.HasOne("Well_AI.Advisor.API.Models.MessageParam", "Param")
                        .WithMany()
                        .HasForeignKey("ParamIndex");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ModelParameters", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.GyroInitialization", "GyroInitialization")
                        .WithMany()
                        .HasForeignKey("GyroInitializationId");

                    b.HasOne("Well_AI.Advisor.API.Models.GyroReinitializationDistance", "GyroReinitializationDistance")
                        .WithMany()
                        .HasForeignKey("GyroReinitializationDistanceId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLog", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.MudLogCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataMudLogCommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogEndMd", "EndMd")
                        .WithMany()
                        .HasForeignKey("EndMdId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogGeologyInterval", "GeologyInterval")
                        .WithMany()
                        .HasForeignKey("GeologyIntervalId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogStartMd", "StartMd")
                        .WithMany()
                        .HasForeignKey("StartMdId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogChromatograph", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.MudLogAcetylene", "Acetylene")
                        .WithMany()
                        .HasForeignKey("AcetyleneId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogCo2Av", "Co2Av")
                        .WithMany()
                        .HasForeignKey("Co2AvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogCo2Mn", "Co2Mn")
                        .WithMany()
                        .HasForeignKey("Co2MnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogCo2Mx", "Co2Mx")
                        .WithMany()
                        .HasForeignKey("Co2MxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogETimChromCycle", "ETimChromCycle")
                        .WithMany()
                        .HasForeignKey("ETimChromCycleId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogEpentAv", "EpentAv")
                        .WithMany()
                        .HasForeignKey("EpentAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogEpentMn", "EpentMn")
                        .WithMany()
                        .HasForeignKey("EpentMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogEpentMx", "EpentMx")
                        .WithMany()
                        .HasForeignKey("EpentMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogEthAv", "EthAv")
                        .WithMany()
                        .HasForeignKey("EthAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogEthMn", "EthMn")
                        .WithMany()
                        .HasForeignKey("EthMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogEthMx", "EthMx")
                        .WithMany()
                        .HasForeignKey("EthMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogH2sAv", "H2sAv")
                        .WithMany()
                        .HasForeignKey("H2sAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogH2sMn", "H2sMn")
                        .WithMany()
                        .HasForeignKey("H2sMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogH2sMx", "H2sMx")
                        .WithMany()
                        .HasForeignKey("H2sMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogIbutAv", "IbutAv")
                        .WithMany()
                        .HasForeignKey("IbutAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogIbutMn", "IbutMn")
                        .WithMany()
                        .HasForeignKey("IbutMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogIbutMx", "IbutMx")
                        .WithMany()
                        .HasForeignKey("IbutMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogIhexAv", "IhexAv")
                        .WithMany()
                        .HasForeignKey("IhexAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogIhexMn", "IhexMn")
                        .WithMany()
                        .HasForeignKey("IhexMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogIhexMx", "IhexMx")
                        .WithMany()
                        .HasForeignKey("IhexMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogIpentAv", "IpentAv")
                        .WithMany()
                        .HasForeignKey("IpentAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogIpentMn", "IpentMn")
                        .WithMany()
                        .HasForeignKey("IpentMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogIpentMx", "IpentMx")
                        .WithMany()
                        .HasForeignKey("IpentMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogMethAv", "MethAv")
                        .WithMany()
                        .HasForeignKey("MethAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogMethMn", "MethMn")
                        .WithMany()
                        .HasForeignKey("MethMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogMethMx", "MethMx")
                        .WithMany()
                        .HasForeignKey("MethMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogNbutAv", "NbutAv")
                        .WithMany()
                        .HasForeignKey("NbutAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogNbutMn", "NbutMn")
                        .WithMany()
                        .HasForeignKey("NbutMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogNbutMx", "NbutMx")
                        .WithMany()
                        .HasForeignKey("NbutMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogNhexAv", "NhexAv")
                        .WithMany()
                        .HasForeignKey("NhexAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogNhexMn", "NhexMn")
                        .WithMany()
                        .HasForeignKey("NhexMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogNhexMx", "NhexMx")
                        .WithMany()
                        .HasForeignKey("NhexMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogNpentAv", "NpentAv")
                        .WithMany()
                        .HasForeignKey("NpentAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogNpentMn", "NpentMn")
                        .WithMany()
                        .HasForeignKey("NpentMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogNpentMx", "NpentMx")
                        .WithMany()
                        .HasForeignKey("NpentMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogPropAv", "PropAv")
                        .WithMany()
                        .HasForeignKey("PropAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogPropMn", "PropMn")
                        .WithMany()
                        .HasForeignKey("PropMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogPropMx", "PropMx")
                        .WithMany()
                        .HasForeignKey("PropMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogWtMudIn", "WtMudIn")
                        .WithMany()
                        .HasForeignKey("WtMudInId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogWtMudOut", "WtMudOut")
                        .WithMany()
                        .HasForeignKey("WtMudOutId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogChronostratigraphic", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.MudLogGeologyInterval", null)
                        .WithMany("Chronostratigraphic")
                        .HasForeignKey("MudLogGeologyIntervalGeologyIntervalId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogGeologyInterval", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.MudLogCalcStab", "CalcStab")
                        .WithMany()
                        .HasForeignKey("CalcStabId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogCalcite", "Calcite")
                        .WithMany()
                        .HasForeignKey("CalciteId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogCec", "Cec")
                        .WithMany()
                        .HasForeignKey("CecId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogChromatograph", "Chromatograph")
                        .WithMany()
                        .HasForeignKey("ChromatographId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogCommonTime", "CommonTime")
                        .WithMany()
                        .HasForeignKey("CommonTimeId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogDensBulk", "DensBulk")
                        .WithMany()
                        .HasForeignKey("DensBulkId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogDensShale", "DensShale")
                        .WithMany()
                        .HasForeignKey("DensShaleId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogDolomite", "Dolomite")
                        .WithMany()
                        .HasForeignKey("DolomiteId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogEcdTdAv", "EcdTdAv")
                        .WithMany()
                        .HasForeignKey("EcdTdAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogLenPlug", "LenPlug")
                        .WithMany()
                        .HasForeignKey("LenPlugId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogLithology", "Lithology")
                        .WithMany()
                        .HasForeignKey("LithologyId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogLithostratigraphic", "Lithostratigraphic")
                        .WithMany()
                        .HasForeignKey("LithostratigraphicId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogMudGas", "MudGas")
                        .WithMany()
                        .HasForeignKey("MudGasId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogRopAv", "RopAv")
                        .WithMany()
                        .HasForeignKey("RopAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogRopMn", "RopMn")
                        .WithMany()
                        .HasForeignKey("RopMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogRopMx", "RopMx")
                        .WithMany()
                        .HasForeignKey("RopMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogRpmAv", "RpmAv")
                        .WithMany()
                        .HasForeignKey("RpmAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogShow", "Show")
                        .WithMany()
                        .HasForeignKey("ShowId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogSizeMn", "SizeMn")
                        .WithMany()
                        .HasForeignKey("SizeMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogSizeMx", "SizeMx")
                        .WithMany()
                        .HasForeignKey("SizeMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogTqAv", "TqAv")
                        .WithMany()
                        .HasForeignKey("TqAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogTvdBase", "TvdBase")
                        .WithMany()
                        .HasForeignKey("TvdBaseId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogTvdTop", "TvdTop")
                        .WithMany()
                        .HasForeignKey("TvdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogWobAv", "WobAv")
                        .WithMany()
                        .HasForeignKey("WobAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogWtMudAv", "WtMudAv")
                        .WithMany()
                        .HasForeignKey("WtMudAvId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogLithology", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.MudLogDensShale", "DensShale")
                        .WithMany()
                        .HasForeignKey("DensShaleId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogQualifier", "Qualifier")
                        .WithMany()
                        .HasForeignKey("QualifierId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogMudGas", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.MudLogGasAv", "GasAv")
                        .WithMany()
                        .HasForeignKey("GasAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogGasBackgnd", "GasBackgnd")
                        .WithMany()
                        .HasForeignKey("GasBackgndId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogGasConAv", "GasConAv")
                        .WithMany()
                        .HasForeignKey("GasConAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogGasConMx", "GasConMx")
                        .WithMany()
                        .HasForeignKey("GasConMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogGasPeak", "GasPeak")
                        .WithMany()
                        .HasForeignKey("GasPeakId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogGasTrip", "GasTrip")
                        .WithMany()
                        .HasForeignKey("GasTripId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogParameter", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.MudLogCommonTime", "CommonTime")
                        .WithMany()
                        .HasForeignKey("CommonTimeId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogForce", "Force")
                        .WithMany()
                        .HasForeignKey("ForceId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLog", null)
                        .WithMany("Parameter")
                        .HasForeignKey("MudLogId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogQualifier", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.MudLogAbundance", "Abundance")
                        .WithMany()
                        .HasForeignKey("AbundanceId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.MudLogShow", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.MudLogNatFlorPc", "NatFlorPc")
                        .WithMany()
                        .HasForeignKey("NatFlorPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.MudLogStainPc", "StainPc")
                        .WithMany()
                        .HasForeignKey("StainPcId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Name", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Ellipsoid", null)
                        .WithMany("Name")
                        .HasForeignKey("EllipsoidId");

                    b.HasOne("Well_AI.Advisor.API.Models.GeodeticDatum", null)
                        .WithMany("Name")
                        .HasForeignKey("GeodeticDatumId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Nomenclature", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Constant", "Constant")
                        .WithMany()
                        .HasForeignKey("ConstantId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroup", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataObjectGroupCommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupMemberObject", "MemberObject")
                        .WithMany()
                        .HasForeignKey("MemberObjectId");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupParam", "Param")
                        .WithMany()
                        .HasForeignKey("ParamId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupCommonData", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupAcquisitionTimeZone", "AcquisitionTimeZone")
                        .WithMany()
                        .HasForeignKey("AcquisitionTimeZoneId");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupDefaultDatum", "DefaultDatum")
                        .WithMany()
                        .HasForeignKey("DefaultDatumId");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupExtensionNameValue", "ExtensionNameValue")
                        .WithMany()
                        .HasForeignKey("ExtensionNameValueId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupExtensionNameValue", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupValue", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ObjectGroupMemberObject", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupExtensionNameValue", "ExtensionNameValue")
                        .WithMany()
                        .HasForeignKey("ExtensionNameValueId");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupObjectReference", "ObjectReference")
                        .WithMany()
                        .HasForeignKey("ObjectReferenceId");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupParam", "Param")
                        .WithMany()
                        .HasForeignKey("ParamId");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupRangeMax", "RangeMax")
                        .WithMany()
                        .HasForeignKey("RangeMaxId");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupRangeMin", "RangeMin")
                        .WithMany()
                        .HasForeignKey("RangeMinId");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupReferenceDepth", "ReferenceDepth")
                        .WithMany()
                        .HasForeignKey("ReferenceDepthId");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupSequence1", "Sequence1")
                        .WithMany()
                        .HasForeignKey("Sequence1Id");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupSequence2", "Sequence2")
                        .WithMany()
                        .HasForeignKey("Sequence2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.ObjectGroupSequence3", "Sequence3")
                        .WithMany()
                        .HasForeignKey("Sequence3Id");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OperatingCondition", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Max", "Max")
                        .WithMany()
                        .HasForeignKey("MaxId");

                    b.HasOne("Well_AI.Advisor.API.Models.Min", "Min")
                        .WithMany()
                        .HasForeignKey("MinId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OperatingInterval", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.End", "End")
                        .WithMany()
                        .HasForeignKey("EndId");

                    b.HasOne("Well_AI.Advisor.API.Models.Speed", "Speed")
                        .WithMany()
                        .HasForeignKey("SpeedId");

                    b.HasOne("Well_AI.Advisor.API.Models.Start", "Start")
                        .WithMany()
                        .HasForeignKey("StartId");

                    b.HasOne("Well_AI.Advisor.API.Models.ToolErrorModel", null)
                        .WithMany("OperatingInterval")
                        .HasForeignKey("ToolErrorModelId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OperationMethod", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameCodeSpace");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OperationParameter", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameCodeSpace");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReport", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportActivity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityUid");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportBulk", "Bulk")
                        .WithMany()
                        .HasForeignKey("BulkId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportsCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataOpsReportsCommonDataid");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCostDay", "CostDay")
                        .WithMany()
                        .HasForeignKey("CostDayId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCostDayMud", "CostDayMud")
                        .WithMany()
                        .HasForeignKey("CostDayMudId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDiaCsgLast", "DiaCsgLast")
                        .WithMany()
                        .HasForeignKey("DiaCsgLastId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDiaHole", "DiaHole")
                        .WithMany()
                        .HasForeignKey("DiaHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDistDrill", "DistDrill")
                        .WithMany()
                        .HasForeignKey("DistDrillId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDistDrillRot", "DistDrillRot")
                        .WithMany()
                        .HasForeignKey("DistDrillRotId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDistDrillSlid", "DistDrillSlid")
                        .WithMany()
                        .HasForeignKey("DistDrillSlidId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDistHold", "DistHold")
                        .WithMany()
                        .HasForeignKey("DistHoldId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDistReam", "DistReam")
                        .WithMany()
                        .HasForeignKey("DistReamId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDistSteering", "DistSteering")
                        .WithMany()
                        .HasForeignKey("DistSteeringId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDrillingParam", "DrillingParams")
                        .WithMany()
                        .HasForeignKey("DrillingParamsUid");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportETimCirc", "ETimCirc")
                        .WithMany()
                        .HasForeignKey("ETimCircId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportETimDrill", "ETimDrill")
                        .WithMany()
                        .HasForeignKey("ETimDrillId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportETimDrillRot", "ETimDrillRot")
                        .WithMany()
                        .HasForeignKey("ETimDrillRotId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportETimDrillSlid", "ETimDrillSlid")
                        .WithMany()
                        .HasForeignKey("ETimDrillSlidId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportETimHold", "ETimHold")
                        .WithMany()
                        .HasForeignKey("ETimHoldId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportETimLoc", "ETimLoc")
                        .WithMany()
                        .HasForeignKey("ETimLocId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportETimReam", "ETimReam")
                        .WithMany()
                        .HasForeignKey("ETimReamId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportETimSpud", "ETimSpud")
                        .WithMany()
                        .HasForeignKey("ETimSpudId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportETimStart", "ETimStart")
                        .WithMany()
                        .HasForeignKey("ETimStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportETimSteering", "ETimSteering")
                        .WithMany()
                        .HasForeignKey("ETimSteeringId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportFluid", "Fluid")
                        .WithMany()
                        .HasForeignKey("FluidUid");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportHse", "Hse")
                        .WithMany()
                        .HasForeignKey("HseId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMaasp", "Maasp")
                        .WithMany()
                        .HasForeignKey("MaaspId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdCsgLast", "MdCsgLast")
                        .WithMany()
                        .HasForeignKey("MdCsgLastId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdPlanned", "MdPlanned")
                        .WithMany()
                        .HasForeignKey("MdPlannedId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdReport", "MdReport")
                        .WithMany()
                        .HasForeignKey("MdReportId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMudInventory", "MudInventory")
                        .WithMany()
                        .HasForeignKey("MudInventoryId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMudVolume", "MudVolume")
                        .WithMany()
                        .HasForeignKey("MudVolumeId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresKickTol", "PresKickTol")
                        .WithMany()
                        .HasForeignKey("PresKickTolId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresLotEmw", "PresLotEmw")
                        .WithMany()
                        .HasForeignKey("PresLotEmwId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPumpOp", "PumpOp")
                        .WithMany()
                        .HasForeignKey("PumpOpId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRig", "Rig")
                        .WithMany()
                        .HasForeignKey("RigOpsReportRigId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRigResponse", "RigResponse")
                        .WithMany()
                        .HasForeignKey("RigResponseId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRopAv", "RopAv")
                        .WithMany()
                        .HasForeignKey("RopAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRopCurrent", "RopCurrent")
                        .WithMany()
                        .HasForeignKey("RopCurrentId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportShakerOp", "ShakerOp")
                        .WithMany()
                        .HasForeignKey("ShakerOpId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportSupportCraft", "SupportCraft")
                        .WithMany()
                        .HasForeignKey("SupportCraftId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTrajectoryStation", "TrajectoryStation")
                        .WithMany()
                        .HasForeignKey("TrajectoryStationUid");

                    b.HasOne("Well_AI.Advisor.API.Models.Tubular", "Tubular")
                        .WithMany()
                        .HasForeignKey("TubularId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTvdCsgLast", "TvdCsgLast")
                        .WithMany()
                        .HasForeignKey("TvdCsgLastId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTvdLot", "TvdLot")
                        .WithMany()
                        .HasForeignKey("TvdLotId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTvdReport", "TvdReport")
                        .WithMany()
                        .HasForeignKey("TvdReportId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolKickTol", "VolKickTol")
                        .WithMany()
                        .HasForeignKey("VolKickTolId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportWeather", "Weather")
                        .WithMany()
                        .HasForeignKey("WeatherId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportActivity", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDuration", "Duration")
                        .WithMany()
                        .HasForeignKey("DurationId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdBitEnd", "MdBitEnd")
                        .WithMany()
                        .HasForeignKey("MdBitEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdBitStart", "MdBitStart")
                        .WithMany()
                        .HasForeignKey("MdBitStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdHoleEnd", "MdHoleEnd")
                        .WithMany()
                        .HasForeignKey("MdHoleEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdHoleStart", "MdHoleStart")
                        .WithMany()
                        .HasForeignKey("MdHoleStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTvdHoleEnd", "TvdHoleEnd")
                        .WithMany()
                        .HasForeignKey("TvdHoleEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTvdHoleStart", "TvdHoleStart")
                        .WithMany()
                        .HasForeignKey("TvdHoleStartId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAnchorAngle", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRigResponse", null)
                        .WithMany("AnchorAngle")
                        .HasForeignKey("OpsReportRigResponseRigResponseId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportAnchorTension", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRigResponse", null)
                        .WithMany("AnchorTension")
                        .HasForeignKey("OpsReportRigResponseRigResponseId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportBulk", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCostItem", "CostItem")
                        .WithMany()
                        .HasForeignKey("CostItemId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportItemVolPerUnit", "ItemVolPerUnit")
                        .WithMany()
                        .HasForeignKey("ItemVolPerUnitId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPricePerUnit", "PricePerUnit")
                        .WithMany()
                        .HasForeignKey("PricePerUnitId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportCorUsed", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDirSensorOffset", "DirSensorOffset")
                        .WithMany()
                        .HasForeignKey("DirSensorOffsetId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGravAxialAccelCor", "GravAxialAccelCor")
                        .WithMany()
                        .HasForeignKey("GravAxialAccelCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGravTran1AccelCor", "GravTran1AccelCor")
                        .WithMany()
                        .HasForeignKey("GravTran1AccelCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGravTran2AccelCor", "GravTran2AccelCor")
                        .WithMany()
                        .HasForeignKey("GravTran2AccelCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMagAxialDrlstrCor", "MagAxialDrlstrCor")
                        .WithMany()
                        .HasForeignKey("MagAxialDrlstrCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMagTran1DrlstrCor", "MagTran1DrlstrCor")
                        .WithMany()
                        .HasForeignKey("MagTran1DrlstrCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMagTran2DrlstrCor", "MagTran2DrlstrCor")
                        .WithMany()
                        .HasForeignKey("MagTran2DrlstrCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportSagAziCor", "SagAziCor")
                        .WithMany()
                        .HasForeignKey("SagAziCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportSagIncCor", "SagIncCor")
                        .WithMany()
                        .HasForeignKey("SagIncCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportStnGridCorUsed", "StnGridCorUsed")
                        .WithMany()
                        .HasForeignKey("StnGridCorUsedId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportStnMagDeclUsed", "StnMagDeclUsed")
                        .WithMany()
                        .HasForeignKey("StnMagDeclUsedId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDayCost", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCostAmount", "CostAmount")
                        .WithMany()
                        .HasForeignKey("CostAmountId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCostPerItem", "CostPerItem")
                        .WithMany()
                        .HasForeignKey("CostPerItemId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReport", null)
                        .WithMany("DayCost")
                        .HasForeignKey("OpsReportId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportDrillingParam", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportAziBottom", "AziBottom")
                        .WithMany()
                        .HasForeignKey("AziBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportAziTop", "AziTop")
                        .WithMany()
                        .HasForeignKey("AziTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCTimCirc", "CTimCirc")
                        .WithMany()
                        .HasForeignKey("CTimCircId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCTimDrillRot", "CTimDrillRot")
                        .WithMany()
                        .HasForeignKey("CTimDrillRotId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCTimDrillSlid", "CTimDrillSlid")
                        .WithMany()
                        .HasForeignKey("CTimDrillSlidId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCTimHold", "CTimHold")
                        .WithMany()
                        .HasForeignKey("CTimHoldId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCTimReam", "CTimReam")
                        .WithMany()
                        .HasForeignKey("CTimReamId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCTimSteering", "CTimSteering")
                        .WithMany()
                        .HasForeignKey("CTimSteeringId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDistDrillRot", "DistDrillRot")
                        .WithMany()
                        .HasForeignKey("DistDrillRotId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDistDrillSlid", "DistDrillSlid")
                        .WithMany()
                        .HasForeignKey("DistDrillSlidId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDistHold", "DistHold")
                        .WithMany()
                        .HasForeignKey("DistHoldId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDistReam", "DistReam")
                        .WithMany()
                        .HasForeignKey("DistReamId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDistSteering", "DistSteering")
                        .WithMany()
                        .HasForeignKey("DistSteeringId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportETimOpBit", "ETimOpBit")
                        .WithMany()
                        .HasForeignKey("ETimOpBitId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportFlowrateBit", "FlowrateBit")
                        .WithMany()
                        .HasForeignKey("FlowrateBitId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportFlowratePump", "FlowratePump")
                        .WithMany()
                        .HasForeignKey("FlowratePumpId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportHkldDn", "HkldDn")
                        .WithMany()
                        .HasForeignKey("HkldDnId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportHkldRot", "HkldRot")
                        .WithMany()
                        .HasForeignKey("HkldRotId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportHkldUp", "HkldUp")
                        .WithMany()
                        .HasForeignKey("HkldUpId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportInclMn", "InclMn")
                        .WithMany()
                        .HasForeignKey("InclMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportInclMx", "InclMx")
                        .WithMany()
                        .HasForeignKey("InclMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportInclStart", "InclStart")
                        .WithMany()
                        .HasForeignKey("InclStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportInclStop", "InclStop")
                        .WithMany()
                        .HasForeignKey("InclStopId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdHoleStart", "MdHoleStart")
                        .WithMany()
                        .HasForeignKey("MdHoleStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdHoleStop", "MdHoleStop")
                        .WithMany()
                        .HasForeignKey("MdHoleStopId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportOverPull", "OverPull")
                        .WithMany()
                        .HasForeignKey("OverPullId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPowBit", "PowBit")
                        .WithMany()
                        .HasForeignKey("PowBitId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresDropBit", "PresDropBit")
                        .WithMany()
                        .HasForeignKey("PresDropBitId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresPumpAv", "PresPumpAv")
                        .WithMany()
                        .HasForeignKey("PresPumpAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRopAv", "RopAv")
                        .WithMany()
                        .HasForeignKey("RopAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRopMn", "RopMn")
                        .WithMany()
                        .HasForeignKey("RopMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRopMx", "RopMx")
                        .WithMany()
                        .HasForeignKey("RopMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRpmAvDh", "RpmAvDh")
                        .WithMany()
                        .HasForeignKey("RpmAvDhId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRpmAv", "RpmAv")
                        .WithMany()
                        .HasForeignKey("RpmAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRpmMn", "RpmMn")
                        .WithMany()
                        .HasForeignKey("RpmMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRpmMx", "RpmMx")
                        .WithMany()
                        .HasForeignKey("RpmMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportSlackOff", "SlackOff")
                        .WithMany()
                        .HasForeignKey("SlackOffId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTempMudDhMx", "TempMudDhMx")
                        .WithMany()
                        .HasForeignKey("TempMudDhMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTqDhAv", "TqDhAv")
                        .WithMany()
                        .HasForeignKey("TqDhAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTqOffBotAv", "TqOffBotAv")
                        .WithMany()
                        .HasForeignKey("TqOffBotAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTqOnBotAv", "TqOnBotAv")
                        .WithMany()
                        .HasForeignKey("TqOnBotAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTqOnBotMn", "TqOnBotMn")
                        .WithMany()
                        .HasForeignKey("TqOnBotMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTqOnBotMx", "TqOnBotMx")
                        .WithMany()
                        .HasForeignKey("TqOnBotMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTubular", "Tubular")
                        .WithMany()
                        .HasForeignKey("TubularUidRef");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVelNozzleAv", "VelNozzleAv")
                        .WithMany()
                        .HasForeignKey("VelNozzleAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportWobAvDh", "WobAvDh")
                        .WithMany()
                        .HasForeignKey("WobAvDhId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportWobAv", "WobAv")
                        .WithMany()
                        .HasForeignKey("WobAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportWobMn", "WobMn")
                        .WithMany()
                        .HasForeignKey("WobMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportWobMx", "WobMx")
                        .WithMany()
                        .HasForeignKey("WobMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportWtAboveJar", "WtAboveJar")
                        .WithMany()
                        .HasForeignKey("WtAboveJarId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportWtBelowJar", "WtBelowJar")
                        .WithMany()
                        .HasForeignKey("WtBelowJarId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportWtMud", "WtMud")
                        .WithMany()
                        .HasForeignKey("WtMudUom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportFluid", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportAlkalinityP1", "AlkalinityP1")
                        .WithMany()
                        .HasForeignKey("AlkalinityP1Id");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportAlkalinityP2", "AlkalinityP2")
                        .WithMany()
                        .HasForeignKey("AlkalinityP2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportBaritePc", "BaritePc")
                        .WithMany()
                        .HasForeignKey("BaritePcId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportBrinePc", "BrinePc")
                        .WithMany()
                        .HasForeignKey("BrinePcId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCalciumChloride", "CalciumChloride")
                        .WithMany()
                        .HasForeignKey("CalciumChlorideId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCalcium", "Calcium")
                        .WithMany()
                        .HasForeignKey("CalciumMagnesiumId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportChloride", "Chloride")
                        .WithMany()
                        .HasForeignKey("ChlorideId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDensity", "Density")
                        .WithMany()
                        .HasForeignKey("DensityId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportElectStab", "ElectStab")
                        .WithMany()
                        .HasForeignKey("ElectStabId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportFilterCakeHthp", "FilterCakeHthp")
                        .WithMany()
                        .HasForeignKey("FilterCakeHthpId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportFilterCakeLtlp", "FilterCakeLtlp")
                        .WithMany()
                        .HasForeignKey("FilterCakeLtlpId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportFiltrateHthp", "FiltrateHthp")
                        .WithMany()
                        .HasForeignKey("FiltrateHthpId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportFiltrateLtlp", "FiltrateLtlp")
                        .WithMany()
                        .HasForeignKey("FiltrateLtlpId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGel10Min", "Gel10Min")
                        .WithMany()
                        .HasForeignKey("Gel10MinId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGel10Sec", "Gel10Sec")
                        .WithMany()
                        .HasForeignKey("Gel10SecId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGel30Min", "Gel30Min")
                        .WithMany()
                        .HasForeignKey("Gel30MinId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportHardnessCa", "HardnessCa")
                        .WithMany()
                        .HasForeignKey("HardnessCaId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportLcm", "Lcm")
                        .WithMany()
                        .HasForeignKey("LcmId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportLime", "Lime")
                        .WithMany()
                        .HasForeignKey("LimeId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMagnesium", "Magnesium")
                        .WithMany()
                        .HasForeignKey("MagnesiumId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMbt", "Mbt")
                        .WithMany()
                        .HasForeignKey("MbtId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMf", "Mf")
                        .WithMany()
                        .HasForeignKey("MfId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportOilCtg", "OilCtg")
                        .WithMany()
                        .HasForeignKey("OilCtgId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportOilPc", "OilPc")
                        .WithMany()
                        .HasForeignKey("OilPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPmFiltrate", "PmFiltrate")
                        .WithMany()
                        .HasForeignKey("PmFiltrateId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPm", "Pm")
                        .WithMany()
                        .HasForeignKey("PmId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPolymer", "Polymer")
                        .WithMany()
                        .HasForeignKey("PolymerId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresHthp", "PresHthp")
                        .WithMany()
                        .HasForeignKey("PresHthpId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPv", "Pv")
                        .WithMany()
                        .HasForeignKey("PvReportPvId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportSandPc", "SandPc")
                        .WithMany()
                        .HasForeignKey("SandPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportSolCorPc", "SolCorPc")
                        .WithMany()
                        .HasForeignKey("SolCorPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportSolidsCalcPc", "SolidsCalcPc")
                        .WithMany()
                        .HasForeignKey("SolidsCalcPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportSolidsHiGravPc", "SolidsHiGravPc")
                        .WithMany()
                        .HasForeignKey("SolidsHiGravPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportSolidsLowGravPc", "SolidsLowGravPc")
                        .WithMany()
                        .HasForeignKey("SolidsLowGravPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportSolidsPc", "SolidsPc")
                        .WithMany()
                        .HasForeignKey("SolidsPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportSulfide", "Sulfide")
                        .WithMany()
                        .HasForeignKey("SulfideId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTempHthp", "TempHthp")
                        .WithMany()
                        .HasForeignKey("TempHthpId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTempPh", "TempPh")
                        .WithMany()
                        .HasForeignKey("TempPhId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTempVis", "TempVis")
                        .WithMany()
                        .HasForeignKey("TempVisId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVisFunnel", "VisFunnel")
                        .WithMany()
                        .HasForeignKey("VisFunnelId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportWaterPc", "WaterPc")
                        .WithMany()
                        .HasForeignKey("WaterPcId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportYp", "Yp")
                        .WithMany()
                        .HasForeignKey("YpId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportHse", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDaysIncFree", "DaysIncFree")
                        .WithMany()
                        .HasForeignKey("DaysIncFreeId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportFluidDischarged", "FluidDischarged")
                        .WithMany()
                        .HasForeignKey("FluidDischargedId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportIncident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresAnnular", "PresAnnular")
                        .WithMany()
                        .HasForeignKey("PresAnnularId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresChokeLine", "PresChokeLine")
                        .WithMany()
                        .HasForeignKey("PresChokeLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresChokeMan", "PresChokeMan")
                        .WithMany()
                        .HasForeignKey("PresChokeManId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresDiverter", "PresDiverter")
                        .WithMany()
                        .HasForeignKey("PresDiverterId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresKellyHose", "PresKellyHose")
                        .WithMany()
                        .HasForeignKey("PresKellyHoseId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresLastCsg", "PresLastCsg")
                        .WithMany()
                        .HasForeignKey("PresLastCsgId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresRams", "PresRams")
                        .WithMany()
                        .HasForeignKey("PresRamsId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresStdPipe", "PresStdPipe")
                        .WithMany()
                        .HasForeignKey("PresStdPipeId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolCtgDischarged", "VolCtgDischarged")
                        .WithMany()
                        .HasForeignKey("VolCtgDischargedId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolOilCtgDischarge", "VolOilCtgDischarge")
                        .WithMany()
                        .HasForeignKey("VolOilCtgDischargeId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportWasteDischarged", "WasteDischarged")
                        .WithMany()
                        .HasForeignKey("WasteDischargedId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportIncident", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCostLostGross", "CostLostGross")
                        .WithMany()
                        .HasForeignKey("CostLostGrossId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportETimLostGross", "ETimLostGross")
                        .WithMany()
                        .HasForeignKey("ETimLostGrossId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportLocation", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportLatitude", "Latitude")
                        .WithMany()
                        .HasForeignKey("LatitudeId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportLongitude", "Longitude")
                        .WithMany()
                        .HasForeignKey("LongitudeId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTrajectoryStation", null)
                        .WithMany("Location")
                        .HasForeignKey("OpsReportTrajectoryStationUid");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportProjectedX", "ProjectedX")
                        .WithMany()
                        .HasForeignKey("ProjectedXId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportProjectedY", "ProjectedY")
                        .WithMany()
                        .HasForeignKey("ProjectedYId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportWellCRS", "WellCRS")
                        .WithMany()
                        .HasForeignKey("WellCRSId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMatrixCov", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportBiasE", "BiasE")
                        .WithMany()
                        .HasForeignKey("BiasEId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportBiasN", "BiasN")
                        .WithMany()
                        .HasForeignKey("BiasNId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportBiasVert", "BiasVert")
                        .WithMany()
                        .HasForeignKey("BiasVertId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVarianceEE", "VarianceEE")
                        .WithMany()
                        .HasForeignKey("VarianceEEId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVarianceEVert", "VarianceEVert")
                        .WithMany()
                        .HasForeignKey("VarianceEVertId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVarianceNE", "VarianceNE")
                        .WithMany()
                        .HasForeignKey("VarianceNEOpsReportsId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVarianceNN", "VarianceNN")
                        .WithMany()
                        .HasForeignKey("VarianceNNId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVarianceNVert", "VarianceNVert")
                        .WithMany()
                        .HasForeignKey("VarianceNVertId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVarianceVertVert", "VarianceVertVert")
                        .WithMany()
                        .HasForeignKey("VarianceVertVertId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMudInventory", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCostItem", "CostItem")
                        .WithMany()
                        .HasForeignKey("CostItemId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportItemWtPerUnit", "ItemWtPerUnit")
                        .WithMany()
                        .HasForeignKey("ItemWtPerUnitId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPricePerUnit", "PricePerUnit")
                        .WithMany()
                        .HasForeignKey("PricePerUnitId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMudLosses", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolLostAbandonHole", "VolLostAbandonHole")
                        .WithMany()
                        .HasForeignKey("VolLostAbandonHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolLostBhdCsgHole", "VolLostBhdCsgHole")
                        .WithMany()
                        .HasForeignKey("VolLostBhdCsgHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolLostCircHole", "VolLostCircHole")
                        .WithMany()
                        .HasForeignKey("VolLostCircHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolLostCmtHole", "VolLostCmtHole")
                        .WithMany()
                        .HasForeignKey("VolLostCmtHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolLostCsgHole", "VolLostCsgHole")
                        .WithMany()
                        .HasForeignKey("VolLostCsgHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolLostMudCleanerSurf", "VolLostMudCleanerSurf")
                        .WithMany()
                        .HasForeignKey("VolLostMudCleanerSurfId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolLostOtherHole", "VolLostOtherHole")
                        .WithMany()
                        .HasForeignKey("VolLostOtherHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolLostOtherSurf", "VolLostOtherSurf")
                        .WithMany()
                        .HasForeignKey("VolLostOtherSurfId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolLostPitsSurf", "VolLostPitsSurf")
                        .WithMany()
                        .HasForeignKey("VolLostPitsSurfId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolLostShakerSurf", "VolLostShakerSurf")
                        .WithMany()
                        .HasForeignKey("VolLostShakerSurfId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolLostTrippingSurf", "VolLostTrippingSurf")
                        .WithMany()
                        .HasForeignKey("VolLostTrippingSurfId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolTotMudLostHole", "VolTotMudLostHole")
                        .WithMany()
                        .HasForeignKey("VolTotMudLostHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolTotMudLostSurf", "VolTotMudLostSurf")
                        .WithMany()
                        .HasForeignKey("VolTotMudLostSurfId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportMudVolume", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMudLosses", "MudLosses")
                        .WithMany()
                        .HasForeignKey("MudLossesId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolMudBuilt", "VolMudBuilt")
                        .WithMany()
                        .HasForeignKey("VolMudBuiltId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolMudCasing", "VolMudCasing")
                        .WithMany()
                        .HasForeignKey("VolMudCasingId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolMudDumped", "VolMudDumped")
                        .WithMany()
                        .HasForeignKey("VolMudDumpedId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolMudHole", "VolMudHole")
                        .WithMany()
                        .HasForeignKey("VolMudHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolMudReceived", "VolMudReceived")
                        .WithMany()
                        .HasForeignKey("VolMudReceivedId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolMudReturned", "VolMudReturned")
                        .WithMany()
                        .HasForeignKey("VolMudReturnedId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolMudRiser", "VolMudRiser")
                        .WithMany()
                        .HasForeignKey("VolMudRiserId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolMudString", "VolMudString")
                        .WithMany()
                        .HasForeignKey("VolMudStringId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolTotMudEnd", "VolTotMudEnd")
                        .WithMany()
                        .HasForeignKey("VolTotMudEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolTotMudStart", "VolTotMudStart")
                        .WithMany()
                        .HasForeignKey("VolTotMudStartId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPersonnel", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReport", null)
                        .WithMany("Personnel")
                        .HasForeignKey("OpsReportId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTotalTime", "TotalTime")
                        .WithMany()
                        .HasForeignKey("TotalTimeId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPitVolume", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDensFluid", "DensFluid")
                        .WithMany()
                        .HasForeignKey("DensFluidId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReport", null)
                        .WithMany("PitVolume")
                        .HasForeignKey("OpsReportId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPit", "Pit")
                        .WithMany()
                        .HasForeignKey("PitId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVisFunnel", "VisFunnel")
                        .WithMany()
                        .HasForeignKey("VisFunnelId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVolPit", "VolPit")
                        .WithMany()
                        .HasForeignKey("VolPitId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportPumpOp", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportIdLiner", "IdLiner")
                        .WithMany()
                        .HasForeignKey("IdLinerId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportLenStroke", "LenStroke")
                        .WithMany()
                        .HasForeignKey("LenStrokeId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdBit", "MdBit")
                        .WithMany()
                        .HasForeignKey("MdBitId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPcEfficiency", "PcEfficiency")
                        .WithMany()
                        .HasForeignKey("PcEfficiencyId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPressure", "Pressure")
                        .WithMany()
                        .HasForeignKey("PressureId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPump", "Pump")
                        .WithMany()
                        .HasForeignKey("PumpId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPumpOutput", "PumpOutput")
                        .WithMany()
                        .HasForeignKey("PumpOutputId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRateStroke", "RateStroke")
                        .WithMany()
                        .HasForeignKey("RateStrokeId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRawData", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGravAxialRaw", "GravAxialRaw")
                        .WithMany()
                        .HasForeignKey("GravAxialRawId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGravTran1Raw", "GravTran1Raw")
                        .WithMany()
                        .HasForeignKey("GravTran1RawId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGravTran2Raw", "GravTran2Raw")
                        .WithMany()
                        .HasForeignKey("GravTran2RawId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMagAxialRaw", "MagAxialRaw")
                        .WithMany()
                        .HasForeignKey("MagAxialRawId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMagTran1Raw", "MagTran1Raw")
                        .WithMany()
                        .HasForeignKey("MagTran1RawId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMagTran2Raw", "MagTran2Raw")
                        .WithMany()
                        .HasForeignKey("MagTran2RawId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRheometer", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportFluid", null)
                        .WithMany("Rheometer")
                        .HasForeignKey("OpsReportFluidUid");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresRheom", "PresRheom")
                        .WithMany()
                        .HasForeignKey("PresRheomId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTempRheom", "TempRheom")
                        .WithMany()
                        .HasForeignKey("TempRheomId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportRigResponse", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportBallJointAngle", "BallJointAngle")
                        .WithMany()
                        .HasForeignKey("BallJointAngleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportBallJointDirection", "BallJointDirection")
                        .WithMany()
                        .HasForeignKey("BallJointDirectionId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDispRig", "DispRig")
                        .WithMany()
                        .HasForeignKey("DispRigId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGuideBaseAngle", "GuideBaseAngle")
                        .WithMany()
                        .HasForeignKey("GuideBaseAngleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportLoadLeg1", "LoadLeg1")
                        .WithMany()
                        .HasForeignKey("LoadLeg1Id");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportLoadLeg2", "LoadLeg2")
                        .WithMany()
                        .HasForeignKey("LoadLeg2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportLoadLeg3", "LoadLeg3")
                        .WithMany()
                        .HasForeignKey("LoadLeg3Id");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportLoadLeg4", "LoadLeg4")
                        .WithMany()
                        .HasForeignKey("LoadLeg4Id");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMeanDraft", "MeanDraft")
                        .WithMany()
                        .HasForeignKey("MeanDraftId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportOffsetRig", "OffsetRig")
                        .WithMany()
                        .HasForeignKey("OffsetRigId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPenetrationLeg1", "PenetrationLeg1")
                        .WithMany()
                        .HasForeignKey("PenetrationLeg1Id");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPenetrationLeg2", "PenetrationLeg2")
                        .WithMany()
                        .HasForeignKey("PenetrationLeg2Id");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPenetrationLeg3", "PenetrationLeg3")
                        .WithMany()
                        .HasForeignKey("PenetrationLeg3Id");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPenetrationLeg4", "PenetrationLeg4")
                        .WithMany()
                        .HasForeignKey("PenetrationLeg4Id");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRigHeading", "RigHeading")
                        .WithMany()
                        .HasForeignKey("RigHeadingId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRigHeave", "RigHeave")
                        .WithMany()
                        .HasForeignKey("RigHeaveId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRigPitchAngle", "RigPitchAngle")
                        .WithMany()
                        .HasForeignKey("RigPitchAngleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRigRollAngle", "RigRollAngle")
                        .WithMany()
                        .HasForeignKey("RigRollAngleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRiserAngle", "RiserAngle")
                        .WithMany()
                        .HasForeignKey("RiserAngleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRiserDirection", "RiserDirection")
                        .WithMany()
                        .HasForeignKey("RiserDirectionId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRiserTension", "RiserTension")
                        .WithMany()
                        .HasForeignKey("RiserTensionId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTotalDeckLoad", "TotalDeckLoad")
                        .WithMany()
                        .HasForeignKey("TotalDeckLoadId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVariableDeckLoad", "VariableDeckLoad")
                        .WithMany()
                        .HasForeignKey("VariableDeckLoadId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportScr", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdBit", "MdBit")
                        .WithMany()
                        .HasForeignKey("MdBitId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReport", null)
                        .WithMany("Scr")
                        .HasForeignKey("OpsReportId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPresRecorded", "PresRecorded")
                        .WithMany()
                        .HasForeignKey("PresRecordedId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPump", "Pump")
                        .WithMany()
                        .HasForeignKey("PumpId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRateStroke", "RateStroke")
                        .WithMany()
                        .HasForeignKey("RateStrokeId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportShakerOp", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportHoursRun", "HoursRun")
                        .WithMany()
                        .HasForeignKey("HoursRunId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdHole", "MdHole")
                        .WithMany()
                        .HasForeignKey("MdHoleId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPcScreenCovered", "PcScreenCovered")
                        .WithMany()
                        .HasForeignKey("PcScreenCoveredId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportShaker", "Shaker")
                        .WithMany()
                        .HasForeignKey("ShakerId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportShakerScreen", "ShakerScreen")
                        .WithMany()
                        .HasForeignKey("ShakerScreenId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportShakerScreen", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCutPoint", "CutPoint")
                        .WithMany()
                        .HasForeignKey("CutPointId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMeshX", "MeshX")
                        .WithMany()
                        .HasForeignKey("MeshXId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMeshY", "MeshY")
                        .WithMany()
                        .HasForeignKey("MeshYId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportTrajectoryStation", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportAzi", "Azi")
                        .WithMany()
                        .HasForeignKey("AziId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCorUsed", "CorUsed")
                        .WithMany()
                        .HasForeignKey("CorUsedId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDipAngleUncert", "DipAngleUncert")
                        .WithMany()
                        .HasForeignKey("DipAngleUncertId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDispEw", "DispEw")
                        .WithMany()
                        .HasForeignKey("DispEwId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDispNs", "DispNs")
                        .WithMany()
                        .HasForeignKey("DispNsId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportDls", "Dls")
                        .WithMany()
                        .HasForeignKey("DlsId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGravTotalUncert", "GravTotalUncert")
                        .WithMany()
                        .HasForeignKey("GravTotalUncertId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGtf", "Gtf")
                        .WithMany()
                        .HasForeignKey("GtfId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportIncl", "Incl")
                        .WithMany()
                        .HasForeignKey("InclId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMagTotalUncert", "MagTotalUncert")
                        .WithMany()
                        .HasForeignKey("MagTotalUncertId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMatrixCov", "MatrixCov")
                        .WithMany()
                        .HasForeignKey("MatrixCovId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMdDelta", "MdDelta")
                        .WithMany()
                        .HasForeignKey("MdDeltaId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMtf", "Mtf")
                        .WithMany()
                        .HasForeignKey("MtfId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRateBuild", "RateBuild")
                        .WithMany()
                        .HasForeignKey("RateBuildId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRateTurn", "RateTurn")
                        .WithMany()
                        .HasForeignKey("RateTurnId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportRawData", "RawData")
                        .WithMany()
                        .HasForeignKey("RawDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTvdDelta", "TvdDelta")
                        .WithMany()
                        .HasForeignKey("TvdDeltaId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTvd", "Tvd")
                        .WithMany()
                        .HasForeignKey("TvdId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportValid", "Valid")
                        .WithMany()
                        .HasForeignKey("ValidId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVertSect", "VertSect")
                        .WithMany()
                        .HasForeignKey("VertSectId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportValid", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportGravTotalFieldCalc", "GravTotalFieldCalc")
                        .WithMany()
                        .HasForeignKey("GravTotalFieldCalcId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMagDipAngleCalc", "MagDipAngleCalc")
                        .WithMany()
                        .HasForeignKey("MagDipAngleCalcId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportMagTotalFieldCalc", "MagTotalFieldCalc")
                        .WithMany()
                        .HasForeignKey("MagTotalFieldCalcId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.OpsReportWeather", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportAmtPrecip", "AmtPrecip")
                        .WithMany()
                        .HasForeignKey("AmtPrecipId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportAziCurrentSea", "AziCurrentSea")
                        .WithMany()
                        .HasForeignKey("AziCurrentSeaId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportAziWave", "AziWave")
                        .WithMany()
                        .HasForeignKey("AziWaveId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportAziWind", "AziWind")
                        .WithMany()
                        .HasForeignKey("AziWindId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportBarometricPressure", "BarometricPressure")
                        .WithMany()
                        .HasForeignKey("BarometricPressureId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCeilingCloud", "CeilingCloud")
                        .WithMany()
                        .HasForeignKey("CeilingCloudId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportCurrentSea", "CurrentSea")
                        .WithMany()
                        .HasForeignKey("CurrentSeaId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportHtWave", "HtWave")
                        .WithMany()
                        .HasForeignKey("HtWaveId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportPeriodWave", "PeriodWave")
                        .WithMany()
                        .HasForeignKey("PeriodWaveId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTempSurfaceMn", "TempSurfaceMn")
                        .WithMany()
                        .HasForeignKey("TempSurfaceMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTempSurfaceMx", "TempSurfaceMx")
                        .WithMany()
                        .HasForeignKey("TempSurfaceMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTempWindChill", "TempWindChill")
                        .WithMany()
                        .HasForeignKey("TempWindChillId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportTempsea", "Tempsea")
                        .WithMany()
                        .HasForeignKey("TempseaId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVelWind", "VelWind")
                        .WithMany()
                        .HasForeignKey("VelWindId");

                    b.HasOne("Well_AI.Advisor.API.Models.OpsReportVisibility", "Visibility")
                        .WithMany()
                        .HasForeignKey("VisibilityId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ParameterValue", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.CoordinateReferenceSystemValue", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId");

                    b.HasOne("Well_AI.Advisor.API.Models.ValueOfParameter", "ValueOfParameter")
                        .WithMany()
                        .HasForeignKey("ValueOfParameterId1");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PdatSession", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.AvgBottomholeTreatmentPres", "AvgBottomholeTreatmentPres")
                        .WithMany()
                        .HasForeignKey("AvgBottomholeTreatmentPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.AvgBottomholeTreatmentRate", "AvgBottomholeTreatmentRate")
                        .WithMany()
                        .HasForeignKey("AvgBottomholeTreatmentRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.BaseFluidVol", "BaseFluidVol")
                        .WithMany()
                        .HasForeignKey("BaseFluidVolId");

                    b.HasOne("Well_AI.Advisor.API.Models.BottomholeHydrostaticPres", "BottomholeHydrostaticPres")
                        .WithMany()
                        .HasForeignKey("BottomholeHydrostaticPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.BottomholeTemperature", "BottomholeTemperature")
                        .WithMany()
                        .HasForeignKey("BottomholeTemperatureId");

                    b.HasOne("Well_AI.Advisor.API.Models.BubblePointPres", "BubblePointPres")
                        .WithMany()
                        .HasForeignKey("BubblePointPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidCompressibility", "FluidCompressibility")
                        .WithMany()
                        .HasForeignKey("FluidCompressibilityId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidDensity", "FluidDensity")
                        .WithMany()
                        .HasForeignKey("FluidDensityId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidEfficiency", "FluidEfficiency")
                        .WithMany()
                        .HasForeignKey("FluidEfficiencyId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidEfficiencyTest", "FluidEfficiencyTest")
                        .WithMany()
                        .HasForeignKey("FluidEfficiencyTestId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidSpecificHeat", "FluidSpecificHeat")
                        .WithMany()
                        .HasForeignKey("FluidSpecificHeatId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidThermalConductivity", "FluidThermalConductivity")
                        .WithMany()
                        .HasForeignKey("FluidThermalConductivityId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidThermalExpansionCoefficient", "FluidThermalExpansionCoefficient")
                        .WithMany()
                        .HasForeignKey("FluidThermalExpansionCoefficientId");

                    b.HasOne("Well_AI.Advisor.API.Models.FoamQuality", "FoamQuality")
                        .WithMany()
                        .HasForeignKey("FoamQualityId");

                    b.HasOne("Well_AI.Advisor.API.Models.FractureClosePres", "FractureClosePres")
                        .WithMany()
                        .HasForeignKey("FractureClosePresId");

                    b.HasOne("Well_AI.Advisor.API.Models.FrictionPres", "FrictionPres")
                        .WithMany()
                        .HasForeignKey("FrictionPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.InitialShutinPres", "InitialShutinPres")
                        .WithMany()
                        .HasForeignKey("InitialShutinPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdBottomhole", "MdBottomhole")
                        .WithMany()
                        .HasForeignKey("MdBottomholeId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdMidPerforation", "MdMidPerforation")
                        .WithMany()
                        .HasForeignKey("MdMidPerforationId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdSurface", "MdSurface")
                        .WithMany()
                        .HasForeignKey("MdSurfaceId");

                    b.HasOne("Well_AI.Advisor.API.Models.PercentPad", "PercentPad")
                        .WithMany()
                        .HasForeignKey("PercentPadId");

                    b.HasOne("Well_AI.Advisor.API.Models.PorePres", "PorePres")
                        .WithMany()
                        .HasForeignKey("PorePresId");

                    b.HasOne("Well_AI.Advisor.API.Models.PumpDuration", "PumpDuration")
                        .WithMany()
                        .HasForeignKey("PumpDurationId");

                    b.HasOne("Well_AI.Advisor.API.Models.PumpFlowBackTest", "PumpFlowBackTest")
                        .WithMany()
                        .HasForeignKey("PumpFlowBackTestId");

                    b.HasOne("Well_AI.Advisor.API.Models.ReservoirTotalCompressibility", "ReservoirTotalCompressibility")
                        .WithMany()
                        .HasForeignKey("ReservoirTotalCompressibilityId");

                    b.HasOne("Well_AI.Advisor.API.Models.StepDownTest", "StepDownTest")
                        .WithMany()
                        .HasForeignKey("StepDownTestId");

                    b.HasOne("Well_AI.Advisor.API.Models.StepRateTest", "StepRateTest")
                        .WithMany()
                        .HasForeignKey("StepRateTestId");

                    b.HasOne("Well_AI.Advisor.API.Models.SurfaceFluidTemperature", "SurfaceFluidTemperature")
                        .WithMany()
                        .HasForeignKey("SurfaceFluidTemperatureId");

                    b.HasOne("Well_AI.Advisor.API.Models.SurfaceTemperature", "SurfaceTemperature")
                        .WithMany()
                        .HasForeignKey("SurfaceTemperatureId");

                    b.HasOne("Well_AI.Advisor.API.Models.TvdMidPerforation", "TvdMidPerforation")
                        .WithMany()
                        .HasForeignKey("TvdMidPerforationId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellboreVolume", "WellboreVolume")
                        .WithMany()
                        .HasForeignKey("WellboreVolumeId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PerforationInterval", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.DensityPerforation", "DensityPerforation")
                        .WithMany()
                        .HasForeignKey("DensityPerforationId");

                    b.HasOne("Well_AI.Advisor.API.Models.FrictionPres", "FrictionPres")
                        .WithMany()
                        .HasForeignKey("FrictionPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdPerforationsBottom", "MdPerforationsBottom")
                        .WithMany()
                        .HasForeignKey("MdPerforationsBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdPerforationsTop", "MdPerforationsTop")
                        .WithMany()
                        .HasForeignKey("MdPerforationsTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.PhasingPerforation", "PhasingPerforation")
                        .WithMany()
                        .HasForeignKey("PhasingPerforationId");

                    b.HasOne("Well_AI.Advisor.API.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.HasOne("Well_AI.Advisor.API.Models.TvdPerforationsBottom", "TvdPerforationsBottom")
                        .WithMany()
                        .HasForeignKey("TvdPerforationsBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.TvdPerforationsTop", "TvdPerforationsTop")
                        .WithMany()
                        .HasForeignKey("TvdPerforationsTopId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PresMeasurement", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.BottomholeRate", "BottomholeRate")
                        .WithMany()
                        .HasForeignKey("BottomholeRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.Pres", "Pres")
                        .WithMany()
                        .HasForeignKey("PresId");

                    b.HasOne("Well_AI.Advisor.API.Models.StepRateTest", null)
                        .WithMany("PresMeasurement")
                        .HasForeignKey("StepRateTestId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PrimeMeridian", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.GreenwichLongitude", "GreenwichLongitude")
                        .WithMany()
                        .HasForeignKey("GreenwichLongitudeUom");

                    b.HasOne("Well_AI.Advisor.API.Models.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameCodeSpace");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ProjectedCRS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.BaseGeographicCRS", "BaseGeographicCRS")
                        .WithMany()
                        .HasForeignKey("BaseGeographicCRSId");

                    b.HasOne("Well_AI.Advisor.API.Models.DefinedByConversion", "DefinedByConversion")
                        .WithMany()
                        .HasForeignKey("DefinedByConversionId");

                    b.HasOne("Well_AI.Advisor.API.Models.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameCodeSpace");

                    b.HasOne("Well_AI.Advisor.API.Models.UsesCartesianCS", "UsesCartesianCS")
                        .WithMany()
                        .HasForeignKey("UsesCartesianCSId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Proppant", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.StimJobWeight", "Weight")
                        .WithMany()
                        .HasForeignKey("WeightId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.PumpFlowBackTest", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.FractureCloseDuration", "FractureCloseDuration")
                        .WithMany()
                        .HasForeignKey("FractureCloseDurationId");

                    b.HasOne("Well_AI.Advisor.API.Models.FractureClosePres", "FractureClosePres")
                        .WithMany()
                        .HasForeignKey("FractureClosePresId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ReservoirInterval", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.FormationPermeability", "FormationPermeability")
                        .WithMany()
                        .HasForeignKey("FormationPermeabilityId");

                    b.HasOne("Well_AI.Advisor.API.Models.FormationPorosity", "FormationPorosity")
                        .WithMany()
                        .HasForeignKey("FormationPorosityId");

                    b.HasOne("Well_AI.Advisor.API.Models.GrossPayThickness", "GrossPayThickness")
                        .WithMany()
                        .HasForeignKey("GrossPayThicknessId");

                    b.HasOne("Well_AI.Advisor.API.Models.LithFormationPermeability", "LithFormationPermeability")
                        .WithMany()
                        .HasForeignKey("LithFormationPermeabilityId");

                    b.HasOne("Well_AI.Advisor.API.Models.LithNetPayThickness", "LithNetPayThickness")
                        .WithMany()
                        .HasForeignKey("LithNetPayThicknessId");

                    b.HasOne("Well_AI.Advisor.API.Models.LithPoissonsRatio", "LithPoissonsRatio")
                        .WithMany()
                        .HasForeignKey("LithPoissonsRatioId");

                    b.HasOne("Well_AI.Advisor.API.Models.LithPorePres", "LithPorePres")
                        .WithMany()
                        .HasForeignKey("LithPorePresId");

                    b.HasOne("Well_AI.Advisor.API.Models.LithYoungsModulus", "LithYoungsModulus")
                        .WithMany()
                        .HasForeignKey("LithYoungsModulusId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdGrossPayBottom", "MdGrossPayBottom")
                        .WithMany()
                        .HasForeignKey("MdGrossPayBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdGrossPayTop", "MdGrossPayTop")
                        .WithMany()
                        .HasForeignKey("MdGrossPayTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdLithBottom", "MdLithBottom")
                        .WithMany()
                        .HasForeignKey("MdLithBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdLithTop", "MdLithTop")
                        .WithMany()
                        .HasForeignKey("MdLithTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.NetPayFluidCompressibility", "NetPayFluidCompressibility")
                        .WithMany()
                        .HasForeignKey("NetPayFluidCompressibilityId");

                    b.HasOne("Well_AI.Advisor.API.Models.NetPayFluidViscosity", "NetPayFluidViscosity")
                        .WithMany()
                        .HasForeignKey("NetPayFluidViscosityId");

                    b.HasOne("Well_AI.Advisor.API.Models.NetPayFormationPermeability", "NetPayFormationPermeability")
                        .WithMany()
                        .HasForeignKey("NetPayFormationPermeabilityId");

                    b.HasOne("Well_AI.Advisor.API.Models.NetPayFormationPorosity", "NetPayFormationPorosity")
                        .WithMany()
                        .HasForeignKey("NetPayFormationPorosityId");

                    b.HasOne("Well_AI.Advisor.API.Models.NetPayPorePres", "NetPayPorePres")
                        .WithMany()
                        .HasForeignKey("NetPayPorePresId");

                    b.HasOne("Well_AI.Advisor.API.Models.NetPayThickness", "NetPayThickness")
                        .WithMany()
                        .HasForeignKey("NetPayThicknessId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Rig", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.RigAirGap", "AirGap")
                        .WithMany()
                        .HasForeignKey("AirGapId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigBop", "Bop")
                        .WithMany()
                        .HasForeignKey("BopId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigCapBulkCement", "CapBulkCement")
                        .WithMany()
                        .HasForeignKey("CapBulkCementId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigCapBulkMud", "CapBulkMud")
                        .WithMany()
                        .HasForeignKey("CapBulkMudId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigCapDrillWater", "CapDrillWater")
                        .WithMany()
                        .HasForeignKey("CapDrillWaterId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigCapFuel", "CapFuel")
                        .WithMany()
                        .HasForeignKey("CapFuelId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigCapLiquidMud", "CapLiquidMud")
                        .WithMany()
                        .HasForeignKey("CapLiquidMudId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigCapPotableWater", "CapPotableWater")
                        .WithMany()
                        .HasForeignKey("CapPotableWaterId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigCapWindDerrick", "CapWindDerrick")
                        .WithMany()
                        .HasForeignKey("CapWindDerrickId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigCentrifuge", "Centrifuge")
                        .WithMany()
                        .HasForeignKey("CentrifugeId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataRigCommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigDegasser", "Degasser")
                        .WithMany()
                        .HasForeignKey("DegasserId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigHeaveMx", "HeaveMx")
                        .WithMany()
                        .HasForeignKey("HeaveMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigHtDerrick", "HtDerrick")
                        .WithMany()
                        .HasForeignKey("HtDerrickId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigHydrocyclone", "Hydrocyclone")
                        .WithMany()
                        .HasForeignKey("HydrocycloneId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigMotionCompensationMn", "MotionCompensationMn")
                        .WithMany()
                        .HasForeignKey("MotionCompensationMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigMotionCompensationMx", "MotionCompensationMx")
                        .WithMany()
                        .HasForeignKey("MotionCompensationMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPit", "Pit")
                        .WithMany()
                        .HasForeignKey("PitUid");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPowerDrawWorks", "PowerDrawWorks")
                        .WithMany()
                        .HasForeignKey("PowerDrawWorksId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPump", "Pump")
                        .WithMany()
                        .HasForeignKey("PumpUid");

                    b.HasOne("Well_AI.Advisor.API.Models.RigRatingBlock", "RatingBlock")
                        .WithMany()
                        .HasForeignKey("RatingBlockId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigRatingDerrick", "RatingDerrick")
                        .WithMany()
                        .HasForeignKey("RatingDerrickId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigRatingDrawWorks", "RatingDrawWorks")
                        .WithMany()
                        .HasForeignKey("RatingDrawWorksId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigRatingDrillDepth", "RatingDrillDepth")
                        .WithMany()
                        .HasForeignKey("RatingDrillDepthId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigRatingHkld", "RatingHkld")
                        .WithMany()
                        .HasForeignKey("RatingHkldId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigRatingHook", "RatingHook")
                        .WithMany()
                        .HasForeignKey("RatingHookId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigRatingRotSystem", "RatingRotSystem")
                        .WithMany()
                        .HasForeignKey("RatingRotSystemId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigRatingSwivel", "RatingSwivel")
                        .WithMany()
                        .HasForeignKey("RatingSwivelId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigRatingTqRotSys", "RatingTqRotSys")
                        .WithMany()
                        .HasForeignKey("RatingTqRotSysId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigRatingWaterDepth", "RatingWaterDepth")
                        .WithMany()
                        .HasForeignKey("RatingWaterDepthId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigRiserAngleLimit", "RiserAngleLimit")
                        .WithMany()
                        .HasForeignKey("RiserAngleLimitId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigRotSizeOpening", "RotSizeOpening")
                        .WithMany()
                        .HasForeignKey("RotSizeOpeningId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigShaker", "Shaker")
                        .WithMany()
                        .HasForeignKey("ShakerUid");

                    b.HasOne("Well_AI.Advisor.API.Models.RigSizeDrillLine", "SizeDrillLine")
                        .WithMany()
                        .HasForeignKey("SizeDrillLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigStrokeMotionCompensation", "StrokeMotionCompensation")
                        .WithMany()
                        .HasForeignKey("StrokeMotionCompensationId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigSurfaceEquipment", "SurfaceEquipment")
                        .WithMany()
                        .HasForeignKey("SurfaceEquipmentId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigVarDeckLdMx", "VarDeckLdMx")
                        .WithMany()
                        .HasForeignKey("VarDeckLdMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigVdlStorm", "VdlStorm")
                        .WithMany()
                        .HasForeignKey("VdlStormId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigWtBlock", "WtBlock")
                        .WithMany()
                        .HasForeignKey("WtBlockId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigBop", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.RigCapAccFluid", "CapAccFluid")
                        .WithMany()
                        .HasForeignKey("CapAccFluidId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigDiaDiverter", "DiaDiverter")
                        .WithMany()
                        .HasForeignKey("DiaDiverterId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdBoosterLine", "IdBoosterLine")
                        .WithMany()
                        .HasForeignKey("IdBoosterLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdChkLine", "IdChkLine")
                        .WithMany()
                        .HasForeignKey("IdChkLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdKillLine", "IdKillLine")
                        .WithMany()
                        .HasForeignKey("IdKillLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdSurfLine", "IdSurfLine")
                        .WithMany()
                        .HasForeignKey("IdSurfLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenBoosterLine", "LenBoosterLine")
                        .WithMany()
                        .HasForeignKey("LenBoosterLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenChkLine", "LenChkLine")
                        .WithMany()
                        .HasForeignKey("LenChkLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenKillLine", "LenKillLine")
                        .WithMany()
                        .HasForeignKey("LenKillLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenSurfLine", "LenSurfLine")
                        .WithMany()
                        .HasForeignKey("LenSurfLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigOdBoosterLine", "OdBoosterLine")
                        .WithMany()
                        .HasForeignKey("OdBoosterLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigOdChkLine", "OdChkLine")
                        .WithMany()
                        .HasForeignKey("OdChkLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigOdKillLine", "OdKillLine")
                        .WithMany()
                        .HasForeignKey("OdKillLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigOdSurfLine", "OdSurfLine")
                        .WithMany()
                        .HasForeignKey("OdSurfLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPresAccOpRating", "PresAccOpRating")
                        .WithMany()
                        .HasForeignKey("PresAccOpRatingId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPresAccPreCharge", "PresAccPreCharge")
                        .WithMany()
                        .HasForeignKey("PresAccPreChargeId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPresBopRating", "PresBopRating")
                        .WithMany()
                        .HasForeignKey("PresBopRatingId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPresChokeManifold", "PresChokeManifold")
                        .WithMany()
                        .HasForeignKey("PresChokeManifoldId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPresWorkDiverter", "PresWorkDiverter")
                        .WithMany()
                        .HasForeignKey("PresWorkDiverterId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigSizeBopSys", "SizeBopSys")
                        .WithMany()
                        .HasForeignKey("SizeBopSysId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigSizeConnectionBop", "SizeConnectionBop")
                        .WithMany()
                        .HasForeignKey("SizeConnectionBopId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigVolAccPreCharge", "VolAccPreCharge")
                        .WithMany()
                        .HasForeignKey("VolAccPreChargeId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigBopComponent", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.RigDiaCloseMn", "DiaCloseMn")
                        .WithMany()
                        .HasForeignKey("DiaCloseMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigDiaCloseMx", "DiaCloseMx")
                        .WithMany()
                        .HasForeignKey("DiaCloseMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdPassThru", "IdPassThru")
                        .WithMany()
                        .HasForeignKey("IdPassThruId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPresWork", "PresWork")
                        .WithMany()
                        .HasForeignKey("PresWorkId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigBop", null)
                        .WithMany("BopComponent")
                        .HasForeignKey("RigBopBopId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigCentrifuge", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.RigCapFlow", "CapFlow")
                        .WithMany()
                        .HasForeignKey("CapFlowId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigDegasser", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.RigAreaSeparatorFlow", "AreaSeparatorFlow")
                        .WithMany()
                        .HasForeignKey("AreaSeparatorFlowId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigCapBlowdown", "CapBlowdown")
                        .WithMany()
                        .HasForeignKey("CapBlowdownId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigCapFlow", "CapFlow")
                        .WithMany()
                        .HasForeignKey("CapFlowId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigCapGasSep", "CapGasSep")
                        .WithMany()
                        .HasForeignKey("CapGasSepId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigHeight", "Height")
                        .WithMany()
                        .HasForeignKey("HeightId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigHtMudSeal", "HtMudSeal")
                        .WithMany()
                        .HasForeignKey("HtMudSealId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdInlet", "IdInlet")
                        .WithMany()
                        .HasForeignKey("IdInletId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigId", "Id")
                        .WithMany()
                        .HasForeignKey("IdUniqueId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdVentLine", "IdVentLine")
                        .WithMany()
                        .HasForeignKey("IdVentLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLen", "Len")
                        .WithMany()
                        .HasForeignKey("LenId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenVentLine", "LenVentLine")
                        .WithMany()
                        .HasForeignKey("LenVentLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPresRating", "PresRating")
                        .WithMany()
                        .HasForeignKey("PresRatingId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigTempRating", "TempRating")
                        .WithMany()
                        .HasForeignKey("TempRatingId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPit", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.RigCapMx", "CapMx")
                        .WithMany()
                        .HasForeignKey("CapMxId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigPump", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.RigDisplacement", "Displacement")
                        .WithMany()
                        .HasForeignKey("DisplacementId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigEff", "Eff")
                        .WithMany()
                        .HasForeignKey("EffId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdLiner", "IdLiner")
                        .WithMany()
                        .HasForeignKey("IdLinerId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenStroke", "LenStroke")
                        .WithMany()
                        .HasForeignKey("LenStrokeId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigOdRod", "OdRod")
                        .WithMany()
                        .HasForeignKey("OdRodId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPowHydMx", "PowHydMx")
                        .WithMany()
                        .HasForeignKey("PowHydMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPowMechMx", "PowMechMx")
                        .WithMany()
                        .HasForeignKey("PowMechMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPresDamp", "PresDamp")
                        .WithMany()
                        .HasForeignKey("PresDampId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPresMx", "PresMx")
                        .WithMany()
                        .HasForeignKey("PresMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigSpmMx", "SpmMx")
                        .WithMany()
                        .HasForeignKey("SpmMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigVolDamp", "VolDamp")
                        .WithMany()
                        .HasForeignKey("VolDampId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigShaker", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.RigCapFlow", "CapFlow")
                        .WithMany()
                        .HasForeignKey("CapFlowId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigSizeMeshMn", "SizeMeshMn")
                        .WithMany()
                        .HasForeignKey("SizeMeshMnId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.RigSurfaceEquipment", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.RigHtFlange", "HtFlange")
                        .WithMany()
                        .HasForeignKey("HtFlangeId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigHtInjStk", "HtInjStk")
                        .WithMany()
                        .HasForeignKey("HtInjStkId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigHtTopStk", "HtTopStk")
                        .WithMany()
                        .HasForeignKey("HtTopStkId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdDischargeLine", "IdDischargeLine")
                        .WithMany()
                        .HasForeignKey("IdDischargeLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdHose", "IdHose")
                        .WithMany()
                        .HasForeignKey("IdHoseId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdKelly", "IdKelly")
                        .WithMany()
                        .HasForeignKey("IdKellyId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdStandpipe", "IdStandpipe")
                        .WithMany()
                        .HasForeignKey("IdStandpipeId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdSwivel", "IdSwivel")
                        .WithMany()
                        .HasForeignKey("IdSwivelId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigIdTopStk", "IdTopStk")
                        .WithMany()
                        .HasForeignKey("IdTopStkId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenDischargeLine", "LenDischargeLine")
                        .WithMany()
                        .HasForeignKey("LenDischargeLineId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenHose", "LenHose")
                        .WithMany()
                        .HasForeignKey("LenHoseId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenKelly", "LenKelly")
                        .WithMany()
                        .HasForeignKey("LenKellyId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenReel", "LenReel")
                        .WithMany()
                        .HasForeignKey("LenReelId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenStandpipe", "LenStandpipe")
                        .WithMany()
                        .HasForeignKey("LenStandpipeId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenSwivel", "LenSwivel")
                        .WithMany()
                        .HasForeignKey("LenSwivelId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigLenUmbilical", "LenUmbilical")
                        .WithMany()
                        .HasForeignKey("LenUmbilicalId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigOdCore", "OdCore")
                        .WithMany()
                        .HasForeignKey("OdCoreId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigOdReel", "OdReel")
                        .WithMany()
                        .HasForeignKey("OdReelId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigOdUmbilical", "OdUmbilical")
                        .WithMany()
                        .HasForeignKey("OdUmbilicalId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigPresRating", "PresRating")
                        .WithMany()
                        .HasForeignKey("PresRatingId");

                    b.HasOne("Well_AI.Advisor.API.Models.RigWidReelWrap", "WidReelWrap")
                        .WithMany()
                        .HasForeignKey("WidReelWrapId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Risk", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.RiskDiaHole", "DiaHole")
                        .WithMany()
                        .HasForeignKey("DiaHoleUom");

                    b.HasOne("Well_AI.Advisor.API.Models.RiskMdHoleEnd", "MdHoleEnd")
                        .WithMany()
                        .HasForeignKey("MdHoleEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.RiskMdHoleStart", "MdHoleStart")
                        .WithMany()
                        .HasForeignKey("MdHoleStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.RiskObjectReference", "ObjectReference")
                        .WithMany()
                        .HasForeignKey("ObjectReferenceId");

                    b.HasOne("Well_AI.Advisor.API.Models.RiskTvdHoleEnd", "TvdHoleEnd")
                        .WithMany()
                        .HasForeignKey("TvdHoleEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.RiskTvdHoleStart", "TvdHoleStart")
                        .WithMany()
                        .HasForeignKey("TvdHoleStartId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SecondDefiningParameter", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.InverseFlattening", "InverseFlattening")
                        .WithMany()
                        .HasForeignKey("InverseFlatteningUom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ShutinPres", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Pres", "Pres")
                        .WithMany()
                        .HasForeignKey("PresId");

                    b.HasOne("Well_AI.Advisor.API.Models.TimeAfterShutin", "TimeAfterShutin")
                        .WithMany()
                        .HasForeignKey("TimeAfterShutinId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreLithology", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.SideWallCoreDensShale", "DensShale")
                        .WithMany()
                        .HasForeignKey("DensShaleUom");

                    b.HasOne("Well_AI.Advisor.API.Models.SideWallCoreLithPc", "LithPc")
                        .WithMany()
                        .HasForeignKey("LithPcUom");

                    b.HasOne("Well_AI.Advisor.API.Models.SideWallCoreQualifier", "Qualifier")
                        .WithMany()
                        .HasForeignKey("QualifierUid");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreQualifier", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.SideWallCoreAbundance", "Abundance")
                        .WithMany()
                        .HasForeignKey("AbundanceUom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreShow", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.SideWallCoreNatFlorPc", "NatFlorPc")
                        .WithMany()
                        .HasForeignKey("NatFlorPcUom");

                    b.HasOne("Well_AI.Advisor.API.Models.SideWallCoreStainPc", "StainPc")
                        .WithMany()
                        .HasForeignKey("StainPcUom");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SideWallCoreSwcSample", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.SideWallCoreLithology", "Lithology")
                        .WithMany()
                        .HasForeignKey("LithologyUid");

                    b.HasOne("Well_AI.Advisor.API.Models.SideWallMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdUom");

                    b.HasOne("Well_AI.Advisor.API.Models.SideWallCoreShow", "Show")
                        .WithMany()
                        .HasForeignKey("ShowSideWallCoreId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SidewallCore", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.SideWallCoreCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataSidewallCoresCommonDataid");

                    b.HasOne("Well_AI.Advisor.API.Models.SideWallCoreDiaHole", "DiaHole")
                        .WithMany()
                        .HasForeignKey("DiaHoleUom");

                    b.HasOne("Well_AI.Advisor.API.Models.DiaPlug", "DiaPlug")
                        .WithMany()
                        .HasForeignKey("DiaPlugUom");

                    b.HasOne("Well_AI.Advisor.API.Models.MdCore", "MdCore")
                        .WithMany()
                        .HasForeignKey("MdCoreUom");

                    b.HasOne("Well_AI.Advisor.API.Models.MdToolReference", "MdToolReference")
                        .WithMany()
                        .HasForeignKey("MdToolReferenceUom");

                    b.HasOne("Well_AI.Advisor.API.Models.SideWallCoreSwcSample", "SwcSample")
                        .WithMany()
                        .HasForeignKey("SwcSampleUid");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StageFluid", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.FluidVol", "FluidVol")
                        .WithMany()
                        .HasForeignKey("FluidVolId");

                    b.HasOne("Well_AI.Advisor.API.Models.Proppant", "Proppant")
                        .WithMany()
                        .HasForeignKey("ProppantId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Step", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.BottomholeRate", "BottomholeRate")
                        .WithMany()
                        .HasForeignKey("BottomholeRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.EntryFriction", "EntryFriction")
                        .WithMany()
                        .HasForeignKey("EntryFrictionId");

                    b.HasOne("Well_AI.Advisor.API.Models.NearWellboreFriction", "NearWellboreFriction")
                        .WithMany()
                        .HasForeignKey("NearWellboreFrictionId");

                    b.HasOne("Well_AI.Advisor.API.Models.PerfFriction", "PerfFriction")
                        .WithMany()
                        .HasForeignKey("PerfFrictionId");

                    b.HasOne("Well_AI.Advisor.API.Models.PipeFriction", "PipeFriction")
                        .WithMany()
                        .HasForeignKey("PipeFrictionId");

                    b.HasOne("Well_AI.Advisor.API.Models.Pres", "Pres")
                        .WithMany()
                        .HasForeignKey("PresId");

                    b.HasOne("Well_AI.Advisor.API.Models.StepDownTest", null)
                        .WithMany("Step")
                        .HasForeignKey("StepDownTestId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StepDownTest", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.BottomholeFluidDensity", "BottomholeFluidDensity")
                        .WithMany()
                        .HasForeignKey("BottomholeFluidDensityId");

                    b.HasOne("Well_AI.Advisor.API.Models.DiameterEntryHole", "DiameterEntryHole")
                        .WithMany()
                        .HasForeignKey("DiameterEntryHolePipeFrictionId");

                    b.HasOne("Well_AI.Advisor.API.Models.InitialShutinPres", "InitialShutinPres")
                        .WithMany()
                        .HasForeignKey("InitialShutinPresId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StepRateTest", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.FractureExtensionPres", "FractureExtensionPres")
                        .WithMany()
                        .HasForeignKey("FractureExtensionPresId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StimJob", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.AvgJobPres", "AvgJobPres")
                        .WithMany()
                        .HasForeignKey("AvgJobPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.BottomholeStaticTemperature", "BottomholeStaticTemperature")
                        .WithMany()
                        .HasForeignKey("BottomholeStaticTemperatureId");

                    b.HasOne("Well_AI.Advisor.API.Models.FlowBackPres", "FlowBackPres")
                        .WithMany()
                        .HasForeignKey("FlowBackPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.FlowBackRate", "FlowBackRate")
                        .WithMany()
                        .HasForeignKey("FlowBackRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.FlowBackVolume", "FlowBackVolume")
                        .WithMany()
                        .HasForeignKey("FlowBackVolumeId");

                    b.HasOne("Well_AI.Advisor.API.Models.FluidEfficiency", "FluidEfficiency")
                        .WithMany()
                        .HasForeignKey("FluidEfficiencyId");

                    b.HasOne("Well_AI.Advisor.API.Models.HhpOrdered", "HhpOrdered")
                        .WithMany()
                        .HasForeignKey("HhpOrderedId");

                    b.HasOne("Well_AI.Advisor.API.Models.HhpUsed", "HhpUsed")
                        .WithMany()
                        .HasForeignKey("HhpUsedId");

                    b.HasOne("Well_AI.Advisor.API.Models.JobInterval", "JobInterval")
                        .WithMany()
                        .HasForeignKey("JobIntervalId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxFluidRate", "MaxFluidRate")
                        .WithMany()
                        .HasForeignKey("MaxFluidRateId");

                    b.HasOne("Well_AI.Advisor.API.Models.MaxJobPres", "MaxJobPres")
                        .WithMany()
                        .HasForeignKey("MaxJobPresId");

                    b.HasOne("Well_AI.Advisor.API.Models.TotalCO2Mass", "TotalCO2Mass")
                        .WithMany()
                        .HasForeignKey("TotalCO2MassId");

                    b.HasOne("Well_AI.Advisor.API.Models.TotalJobVolume", "TotalJobVolume")
                        .WithMany()
                        .HasForeignKey("TotalJobVolumeId");

                    b.HasOne("Well_AI.Advisor.API.Models.TotalN2StdVolume", "TotalN2StdVolume")
                        .WithMany()
                        .HasForeignKey("TotalN2StdVolumeId");

                    b.HasOne("Well_AI.Advisor.API.Models.TotalProppantWt", "TotalProppantWt")
                        .WithMany()
                        .HasForeignKey("TotalProppantWtId");

                    b.HasOne("Well_AI.Advisor.API.Models.TotalPumpTime", "TotalPumpTime")
                        .WithMany()
                        .HasForeignKey("TotalPumpTimeId");

                    b.HasOne("Well_AI.Advisor.API.Models.TreatingBottomholeTemperature", "TreatingBottomholeTemperature")
                        .WithMany()
                        .HasForeignKey("TreatingBottomholeTemperatureId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StimJobAdditive", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Mass", "Mass")
                        .WithMany()
                        .HasForeignKey("MassId");

                    b.HasOne("Well_AI.Advisor.API.Models.StageFluid", null)
                        .WithMany("Additive")
                        .HasForeignKey("StageFluidId");

                    b.HasOne("Well_AI.Advisor.API.Models.Volume", "Volume")
                        .WithMany()
                        .HasForeignKey("VolumeId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.StimJobTubular", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.FlowPath", null)
                        .WithMany("Tubular")
                        .HasForeignKey("FlowPathId");

                    b.HasOne("Well_AI.Advisor.API.Models.StimJobId", "Id")
                        .WithMany()
                        .HasForeignKey("IdId");

                    b.HasOne("Well_AI.Advisor.API.Models.StimJobMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.StimJobMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.StimJobOd", "Od")
                        .WithMany()
                        .HasForeignKey("OdId");

                    b.HasOne("Well_AI.Advisor.API.Models.StimJobVolumeFactor", "VolumeFactor")
                        .WithMany()
                        .HasForeignKey("VolumeFactorId");

                    b.HasOne("Well_AI.Advisor.API.Models.StimJobWeight", "Weight")
                        .WithMany()
                        .HasForeignKey("WeightId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SurveyProgram", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.SurveyProgramCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataSurveyProgramCommonDataId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.SurveySection", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.FrequencyMx", "FrequencyMx")
                        .WithMany()
                        .HasForeignKey("FrequencyMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdEnd", "MdEnd")
                        .WithMany()
                        .HasForeignKey("MdEndId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdStart", "MdStart")
                        .WithMany()
                        .HasForeignKey("MdStartId");

                    b.HasOne("Well_AI.Advisor.API.Models.SurveyProgram", null)
                        .WithMany("SurveySection")
                        .HasForeignKey("SurveyProgramId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Target", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TargetCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataTargetCommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.TargetDip", "Dip")
                        .WithMany()
                        .HasForeignKey("DipId");

                    b.HasOne("Well_AI.Advisor.API.Models.DispEwCenter", "DispEwCenter")
                        .WithMany()
                        .HasForeignKey("DispEwCenterId");

                    b.HasOne("Well_AI.Advisor.API.Models.DispEwOffset", "DispEwOffset")
                        .WithMany()
                        .HasForeignKey("DispEwOffsetId");

                    b.HasOne("Well_AI.Advisor.API.Models.DispEwSectOrig", "DispEwSectOrig")
                        .WithMany()
                        .HasForeignKey("DispEwSectOrigId");

                    b.HasOne("Well_AI.Advisor.API.Models.DispNsCenter", "DispNsCenter")
                        .WithMany()
                        .HasForeignKey("DispNsCenterId");

                    b.HasOne("Well_AI.Advisor.API.Models.DispNsOffset", "DispNsOffset")
                        .WithMany()
                        .HasForeignKey("DispNsOffsetId");

                    b.HasOne("Well_AI.Advisor.API.Models.DispNsSectOrig", "DispNsSectOrig")
                        .WithMany()
                        .HasForeignKey("DispNsSectOrigId");

                    b.HasOne("Well_AI.Advisor.API.Models.LenMajorAxis", "LenMajorAxis")
                        .WithMany()
                        .HasForeignKey("LenMajorAxisId");

                    b.HasOne("Well_AI.Advisor.API.Models.Rotation", "Rotation")
                        .WithMany()
                        .HasForeignKey("RotationId");

                    b.HasOne("Well_AI.Advisor.API.Models.Strike", "Strike")
                        .WithMany()
                        .HasForeignKey("StrikeId");

                    b.HasOne("Well_AI.Advisor.API.Models.ThickAbove", "ThickAbove")
                        .WithMany()
                        .HasForeignKey("ThickAboveId");

                    b.HasOne("Well_AI.Advisor.API.Models.ThickBelow", "ThickBelow")
                        .WithMany()
                        .HasForeignKey("ThickBelowId");

                    b.HasOne("Well_AI.Advisor.API.Models.TargetTvd", "Tvd")
                        .WithMany()
                        .HasForeignKey("TvdId");

                    b.HasOne("Well_AI.Advisor.API.Models.WidMinorAxis", "WidMinorAxis")
                        .WithMany()
                        .HasForeignKey("WidMinorAxisId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TargetLocation", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TargetLatitude", "Latitude")
                        .WithMany()
                        .HasForeignKey("LatitudeId");

                    b.HasOne("Well_AI.Advisor.API.Models.TargetLongitude", "Longitude")
                        .WithMany()
                        .HasForeignKey("LongitudeId");

                    b.HasOne("Well_AI.Advisor.API.Models.TargetProjectedX", "ProjectedX")
                        .WithMany()
                        .HasForeignKey("ProjectedXId");

                    b.HasOne("Well_AI.Advisor.API.Models.TargetProjectedY", "ProjectedY")
                        .WithMany()
                        .HasForeignKey("ProjectedYId");

                    b.HasOne("Well_AI.Advisor.API.Models.Target", null)
                        .WithMany("Location")
                        .HasForeignKey("TargetId");

                    b.HasOne("Well_AI.Advisor.API.Models.TargetSection", null)
                        .WithMany("Location")
                        .HasForeignKey("TargetSectionId");

                    b.HasOne("Well_AI.Advisor.API.Models.TargetWellCRS", "WellCRS")
                        .WithMany()
                        .HasForeignKey("WellCRSId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TargetSection", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.AngleArc", "AngleArc")
                        .WithMany()
                        .HasForeignKey("AngleArcId");

                    b.HasOne("Well_AI.Advisor.API.Models.LenRadius", "LenRadius")
                        .WithMany()
                        .HasForeignKey("LenRadiusId");

                    b.HasOne("Well_AI.Advisor.API.Models.Target", null)
                        .WithMany("TargetSection")
                        .HasForeignKey("TargetId");

                    b.HasOne("Well_AI.Advisor.API.Models.ThickAbove", "ThickAbove")
                        .WithMany()
                        .HasForeignKey("ThickAboveId");

                    b.HasOne("Well_AI.Advisor.API.Models.ThickBelow", "ThickBelow")
                        .WithMany()
                        .HasForeignKey("ThickBelowId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ToolErrorModel", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.ToolErrorModelAuthorization", "Authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId");

                    b.HasOne("Well_AI.Advisor.API.Models.ToolErrorModelCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataToolErrorModelCommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.ModelParameters", "ModelParameters")
                        .WithMany()
                        .HasForeignKey("ModelParametersId");

                    b.HasOne("Well_AI.Advisor.API.Models.OperatingCondition", "OperatingCondition")
                        .WithMany()
                        .HasForeignKey("OperatingConditionId");

                    b.HasOne("Well_AI.Advisor.API.Models.UseErrorTermSet", "UseErrorTermSet")
                        .WithMany()
                        .HasForeignKey("UseErrorTermSetId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ToolErrorTermSet", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Authorization", "Authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId");

                    b.HasOne("Well_AI.Advisor.API.Models.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.ToolErrorTermSetParameter", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Nomenclature", null)
                        .WithMany("Parameter")
                        .HasForeignKey("NomenclatureId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TotalProppantUsage", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.JobInterval", null)
                        .WithMany("TotalProppantUsage")
                        .HasForeignKey("JobIntervalId");

                    b.HasOne("Well_AI.Advisor.API.Models.Mass", "Mass")
                        .WithMany()
                        .HasForeignKey("MassId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Trajectory", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.AziVertSect", "AziVertSect")
                        .WithMany()
                        .HasForeignKey("AziVertSectId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataTrajectoryCommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.DispEwVertSectOrig", "DispEwVertSectOrig")
                        .WithMany()
                        .HasForeignKey("DispEwVertSectOrigId");

                    b.HasOne("Well_AI.Advisor.API.Models.DispNsVertSectOrig", "DispNsVertSectOrig")
                        .WithMany()
                        .HasForeignKey("DispNsVertSectOrigId");

                    b.HasOne("Well_AI.Advisor.API.Models.GridCorUsed", "GridCorUsed")
                        .WithMany()
                        .HasForeignKey("GridCorUsedId");

                    b.HasOne("Well_AI.Advisor.API.Models.MagDeclUsed", "MagDeclUsed")
                        .WithMany()
                        .HasForeignKey("MagDeclUsedId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdMn", "MdMn")
                        .WithMany()
                        .HasForeignKey("MdMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdMx", "MdMx")
                        .WithMany()
                        .HasForeignKey("MdMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryStation", "TrajectoryStation")
                        .WithMany()
                        .HasForeignKey("TrajectoryStationId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryCorUsed", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryDirSensorOffset", "DirSensorOffset")
                        .WithMany()
                        .HasForeignKey("DirSensorOffsetId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryGravAxialAccelCor", "GravAxialAccelCor")
                        .WithMany()
                        .HasForeignKey("GravAxialAccelCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryGravTran1AccelCor", "GravTran1AccelCor")
                        .WithMany()
                        .HasForeignKey("GravTran1AccelCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryGravTran2AccelCor", "GravTran2AccelCor")
                        .WithMany()
                        .HasForeignKey("GravTran2AccelCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMagAxialDrlstrCor", "MagAxialDrlstrCor")
                        .WithMany()
                        .HasForeignKey("MagAxialDrlstrCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMagTran1DrlstrCor", "MagTran1DrlstrCor")
                        .WithMany()
                        .HasForeignKey("MagTran1DrlstrCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMagTran2DrlstrCor", "MagTran2DrlstrCor")
                        .WithMany()
                        .HasForeignKey("MagTran2DrlstrCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectorySagAziCor", "SagAziCor")
                        .WithMany()
                        .HasForeignKey("SagAziCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectorySagIncCor", "SagIncCor")
                        .WithMany()
                        .HasForeignKey("SagIncCorId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryStnGridCorUsed", "StnGridCorUsed")
                        .WithMany()
                        .HasForeignKey("StnGridCorUsedId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryStnMagDeclUsed", "StnMagDeclUsed")
                        .WithMany()
                        .HasForeignKey("StnMagDeclUsedId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryLocation", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Easting", "Easting")
                        .WithMany()
                        .HasForeignKey("EastingId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryLatitude", "Latitude")
                        .WithMany()
                        .HasForeignKey("LatitudeId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryLongitude", "Longitude")
                        .WithMany()
                        .HasForeignKey("LongitudeId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryNorthing", "Northing")
                        .WithMany()
                        .HasForeignKey("NorthingId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryStation", null)
                        .WithMany("Location")
                        .HasForeignKey("TrajectoryStationId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryWellCRS", "WellCRS")
                        .WithMany()
                        .HasForeignKey("WellCRSUidRef");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryMatrixCov", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryBiasE", "BiasE")
                        .WithMany()
                        .HasForeignKey("BiasEId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryBiasN", "BiasN")
                        .WithMany()
                        .HasForeignKey("BiasNDtId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryBiasVert", "BiasVert")
                        .WithMany()
                        .HasForeignKey("BiasVertId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryVarianceEE", "VarianceEE")
                        .WithMany()
                        .HasForeignKey("VarianceEEId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryVarianceEVert", "VarianceEVert")
                        .WithMany()
                        .HasForeignKey("VarianceEVertId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryVarianceNE", "VarianceNE")
                        .WithMany()
                        .HasForeignKey("VarianceNEId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryVarianceNN", "VarianceNN")
                        .WithMany()
                        .HasForeignKey("VarianceNNId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryVarianceNVert", "VarianceNVert")
                        .WithMany()
                        .HasForeignKey("VarianceNVertId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryVarianceVertVert", "VarianceVertVert")
                        .WithMany()
                        .HasForeignKey("VarianceVertVertId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryRawData", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryGravAxialRaw", "GravAxialRaw")
                        .WithMany()
                        .HasForeignKey("GravAxialRawId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryGravTran1Raw", "GravTran1Raw")
                        .WithMany()
                        .HasForeignKey("GravTran1RawId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryGravTran2Raw", "GravTran2Raw")
                        .WithMany()
                        .HasForeignKey("GravTran2RawId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMagAxialRaw", "MagAxialRaw")
                        .WithMany()
                        .HasForeignKey("MagAxialRawId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMagTran1Raw", "MagTran1Raw")
                        .WithMany()
                        .HasForeignKey("MagTran1RawId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMagTran2Raw", "MagTran2Raw")
                        .WithMany()
                        .HasForeignKey("MagTran2RawId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryStation", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryAzi", "Azi")
                        .WithMany()
                        .HasForeignKey("AziId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryCorUsed", "CorUsed")
                        .WithMany()
                        .HasForeignKey("CorUsedTrajectoryCorUsedId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryDipAngleUncert", "DipAngleUncert")
                        .WithMany()
                        .HasForeignKey("DipAngleUncertId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryDispEw", "DispEw")
                        .WithMany()
                        .HasForeignKey("DispEwId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryDispNs", "DispNs")
                        .WithMany()
                        .HasForeignKey("DispNsId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryDls", "Dls")
                        .WithMany()
                        .HasForeignKey("DlsId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryGravTotalUncert", "GravTotalUncert")
                        .WithMany()
                        .HasForeignKey("GravTotalUncertId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryGtf", "Gtf")
                        .WithMany()
                        .HasForeignKey("GtfId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryIncl", "Incl")
                        .WithMany()
                        .HasForeignKey("InclId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMagTotalUncert", "MagTotalUncert")
                        .WithMany()
                        .HasForeignKey("MagTotalUncertId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMatrixCov", "MatrixCov")
                        .WithMany()
                        .HasForeignKey("MatrixCovId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMdDelta", "MdDelta")
                        .WithMany()
                        .HasForeignKey("MdDeltaId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMtf", "Mtf")
                        .WithMany()
                        .HasForeignKey("MtfId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryRateBuild", "RateBuild")
                        .WithMany()
                        .HasForeignKey("RateBuildId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryRateTurn", "RateTurn")
                        .WithMany()
                        .HasForeignKey("RateTurnId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryRawData", "RawData")
                        .WithMany()
                        .HasForeignKey("RawDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryTvdDelta", "TvdDelta")
                        .WithMany()
                        .HasForeignKey("TvdDeltaId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryTvd", "Tvd")
                        .WithMany()
                        .HasForeignKey("TvdId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryValid", "Valid")
                        .WithMany()
                        .HasForeignKey("ValidId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryVertSect", "VertSect")
                        .WithMany()
                        .HasForeignKey("VertSectId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TrajectoryValid", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryGravTotalFieldCalc", "GravTotalFieldCalc")
                        .WithMany()
                        .HasForeignKey("GravTotalFieldCalcId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMagDipAngleCalc", "MagDipAngleCalc")
                        .WithMany()
                        .HasForeignKey("MagDipAngleCalcId");

                    b.HasOne("Well_AI.Advisor.API.Models.TrajectoryMagTotalFieldCalc", "MagTotalFieldCalc")
                        .WithMany()
                        .HasForeignKey("MagTotalFieldCalcId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Tubular", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TubularCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataTubularyCommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularDiaHoleAssy", "DiaHoleAssy")
                        .WithMany()
                        .HasForeignKey("DiaHoleAssyId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularBend", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TubularAngle", "Angle")
                        .WithMany()
                        .HasForeignKey("AngleId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularDistBendBot", "DistBendBot")
                        .WithMany()
                        .HasForeignKey("DistBendBotId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularBitRecord", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TubularCost", "Cost")
                        .WithMany()
                        .HasForeignKey("CostId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularDiaBit", "DiaBit")
                        .WithMany()
                        .HasForeignKey("DiaBitId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularDiaPassThru", "DiaPassThru")
                        .WithMany()
                        .HasForeignKey("DiaPassThruId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularDiaPilot", "DiaPilot")
                        .WithMany()
                        .HasForeignKey("DiaPilotId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularComponent", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TubularAreaNozzleFlow", "AreaNozzleFlow")
                        .WithMany()
                        .HasForeignKey("AreaNozzleFlowId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularAxialStiffness", "AxialStiffness")
                        .WithMany()
                        .HasForeignKey("AxialStiffnessId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularBend", "Bend")
                        .WithMany()
                        .HasForeignKey("BendId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularBendStiffness", "BendStiffness")
                        .WithMany()
                        .HasForeignKey("BendStiffnessId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularBitRecord", "BitRecord")
                        .WithMany()
                        .HasForeignKey("BitRecordBitId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularConnection", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularDisp", "Disp")
                        .WithMany()
                        .HasForeignKey("DispId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularDoglegMx", "DoglegMx")
                        .WithMany()
                        .HasForeignKey("DoglegMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularHoleOpener", "HoleOpener")
                        .WithMany()
                        .HasForeignKey("HoleOpenerId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularIdFishneck", "IdFishneck")
                        .WithMany()
                        .HasForeignKey("IdFishneckId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularId", "Id")
                        .WithMany()
                        .HasForeignKey("IdTubularIdId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularJar", "Jar")
                        .WithMany()
                        .HasForeignKey("JarId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularLenFishneck", "LenFishneck")
                        .WithMany()
                        .HasForeignKey("LenFishneckId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularLen", "Len")
                        .WithMany()
                        .HasForeignKey("LenId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularLenJointAv", "LenJointAv")
                        .WithMany()
                        .HasForeignKey("LenJointAvId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularMotor", "Motor")
                        .WithMany()
                        .HasForeignKey("MotorId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularMwdTool", "MwdTool")
                        .WithMany()
                        .HasForeignKey("MwdToolId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularNameTag", "NameTag")
                        .WithMany()
                        .HasForeignKey("NameTagId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularOdDrift", "OdDrift")
                        .WithMany()
                        .HasForeignKey("OdDriftId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularOdFishneck", "OdFishneck")
                        .WithMany()
                        .HasForeignKey("OdFishneckId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularOd", "Od")
                        .WithMany()
                        .HasForeignKey("OdId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularPresBurst", "PresBurst")
                        .WithMany()
                        .HasForeignKey("PresBurstId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularPresCollapse", "PresCollapse")
                        .WithMany()
                        .HasForeignKey("PresCollapseId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularStabilizer", "Stabilizer")
                        .WithMany()
                        .HasForeignKey("StabilizerId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularStressFatig", "StressFatig")
                        .WithMany()
                        .HasForeignKey("StressFatigId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularTensYield", "TensYield")
                        .WithMany()
                        .HasForeignKey("TensYieldId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularThickWall", "ThickWall")
                        .WithMany()
                        .HasForeignKey("ThickWallId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularTorsionalStiffness", "TorsionalStiffness")
                        .WithMany()
                        .HasForeignKey("TorsionalStiffnessId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularTqYield", "TqYield")
                        .WithMany()
                        .HasForeignKey("TqYieldId");

                    b.HasOne("Well_AI.Advisor.API.Models.Tubular", null)
                        .WithMany("TubularComponent")
                        .HasForeignKey("TubularId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularWearWall", "WearWall")
                        .WithMany()
                        .HasForeignKey("WearWallId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularWtPerLen", "WtPerLen")
                        .WithMany()
                        .HasForeignKey("WtPerLenId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularConnection", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TubularCriticalCrossSection", "CriticalCrossSection")
                        .WithMany()
                        .HasForeignKey("CriticalCrossSectionId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularId", "Id")
                        .WithMany()
                        .HasForeignKey("IdTubularIdId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularLen", "Len")
                        .WithMany()
                        .HasForeignKey("LenId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularOd", "Od")
                        .WithMany()
                        .HasForeignKey("OdId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularPresLeak", "PresLeak")
                        .WithMany()
                        .HasForeignKey("PresLeakId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularSizeThread", "SizeThread")
                        .WithMany()
                        .HasForeignKey("SizeThreadId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularTensYield", "TensYield")
                        .WithMany()
                        .HasForeignKey("TensYieldId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularTqMakeup", "TqMakeup")
                        .WithMany()
                        .HasForeignKey("TqMakeupId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularTqYield", "TqYield")
                        .WithMany()
                        .HasForeignKey("TqYieldId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularHoleOpener", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TubularDiaHoleOpener", "DiaHoleOpener")
                        .WithMany()
                        .HasForeignKey("DiaHoleOpenerId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularJar", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TubularForDownSet", "ForDownSet")
                        .WithMany()
                        .HasForeignKey("ForDownSetId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularForDownTrip", "ForDownTrip")
                        .WithMany()
                        .HasForeignKey("ForDownTripId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularForPmpOpen", "ForPmpOpen")
                        .WithMany()
                        .HasForeignKey("ForPmpOpenId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularForSealFric", "ForSealFric")
                        .WithMany()
                        .HasForeignKey("ForSealFricId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularForUpSet", "ForUpSet")
                        .WithMany()
                        .HasForeignKey("ForUpSetId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularForUpTrip", "ForUpTrip")
                        .WithMany()
                        .HasForeignKey("ForUpTripId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularMotor", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TubularBendSettingsMn", "BendSettingsMn")
                        .WithMany()
                        .HasForeignKey("BendSettingsMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularBendSettingsMx", "BendSettingsMx")
                        .WithMany()
                        .HasForeignKey("BendSettingsMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularClearanceBearBox", "ClearanceBearBox")
                        .WithMany()
                        .HasForeignKey("ClearanceBearBoxId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularDiaNozzle", "DiaNozzle")
                        .WithMany()
                        .HasForeignKey("DiaNozzleId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularDiaRotorNozzle", "DiaRotorNozzle")
                        .WithMany()
                        .HasForeignKey("DiaRotorNozzleId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularFlowrateMn", "FlowrateMn")
                        .WithMany()
                        .HasForeignKey("FlowrateMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularFlowrateMx", "FlowrateMx")
                        .WithMany()
                        .HasForeignKey("FlowrateMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularOffsetTool", "OffsetTool")
                        .WithMany()
                        .HasForeignKey("OffsetToolId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularTempOpMx", "TempOpMx")
                        .WithMany()
                        .HasForeignKey("TempOpMxId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularMwdTool", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TubularFlowrateMn", "FlowrateMn")
                        .WithMany()
                        .HasForeignKey("FlowrateMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularFlowrateMx", "FlowrateMx")
                        .WithMany()
                        .HasForeignKey("FlowrateMxId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularIdEquv", "IdEquv")
                        .WithMany()
                        .HasForeignKey("IdEquvId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularTempMx", "TempMx")
                        .WithMany()
                        .HasForeignKey("TempMxId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularNozzle", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TubularDiaNozzle", "DiaNozzle")
                        .WithMany()
                        .HasForeignKey("DiaNozzleId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularLen", "Len")
                        .WithMany()
                        .HasForeignKey("LenId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularComponent", null)
                        .WithMany("Nozzle")
                        .HasForeignKey("TubularComponentId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularSensor", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TubularOffsetBot", "OffsetBot")
                        .WithMany()
                        .HasForeignKey("OffsetBotId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularMwdTool", null)
                        .WithMany("Sensor")
                        .HasForeignKey("TubularMwdToolMwdToolId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.TubularStabilizer", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.TubularDistBladeBot", "DistBladeBot")
                        .WithMany()
                        .HasForeignKey("DistBladeBotId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularLenBlade", "LenBlade")
                        .WithMany()
                        .HasForeignKey("LenBladeId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularOdBladeMn", "OdBladeMn")
                        .WithMany()
                        .HasForeignKey("OdBladeMnId");

                    b.HasOne("Well_AI.Advisor.API.Models.TubularOdBladeMx", "OdBladeMx")
                        .WithMany()
                        .HasForeignKey("OdBladeMxId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesAxis", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.CartesianCS", null)
                        .WithMany("UsesAxis")
                        .HasForeignKey("CartesianCSId");

                    b.HasOne("Well_AI.Advisor.API.Models.CoordinateSystemAxis", "CoordinateSystemAxis")
                        .WithMany()
                        .HasForeignKey("CoordinateSystemAxisId");

                    b.HasOne("Well_AI.Advisor.API.Models.EllipsoidalCS", null)
                        .WithMany("UsesAxis")
                        .HasForeignKey("EllipsoidalCSId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesCartesianCS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.CartesianCS", "CartesianCS")
                        .WithMany()
                        .HasForeignKey("CartesianCSId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesEllipsoid", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Ellipsoid", "Ellipsoid")
                        .WithMany()
                        .HasForeignKey("EllipsoidId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesEllipsoidalCS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.EllipsoidalCS", "EllipsoidalCS")
                        .WithMany()
                        .HasForeignKey("EllipsoidalCSId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesGeodeticDatum", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.GeodeticDatum", "GeodeticDatum")
                        .WithMany()
                        .HasForeignKey("GeodeticDatumId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesMethod", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OperationMethod", "OperationMethod")
                        .WithMany()
                        .HasForeignKey("OperationMethodId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesParameter", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.OperationMethod", null)
                        .WithMany("UsesParameter")
                        .HasForeignKey("OperationMethodId");

                    b.HasOne("Well_AI.Advisor.API.Models.OperationParameter", "OperationParameter")
                        .WithMany()
                        .HasForeignKey("OperationParameterId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesPrimeMeridian", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.PrimeMeridian", "PrimeMeridian")
                        .WithMany()
                        .HasForeignKey("PrimeMeridianId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.UsesValue", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.Conversion", null)
                        .WithMany("UsesValue")
                        .HasForeignKey("ConversionId");

                    b.HasOne("Well_AI.Advisor.API.Models.ParameterValue", "ParameterValue")
                        .WithMany()
                        .HasForeignKey("ParameterValueValueOfParameterId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.VerticalCRS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.NameCRS", "NameCRS")
                        .WithMany()
                        .HasForeignKey("NameCRSCode");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometry", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometryCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataWbGeometryCommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometryDepthWaterMean", "DepthWaterMean")
                        .WithMany()
                        .HasForeignKey("DepthWaterMeanId");

                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometryGapAir", "GapAir")
                        .WithMany()
                        .HasForeignKey("GapAirId");

                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometryMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomDiaDriftId");

                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometrySection", "WbGeometrySection")
                        .WithMany()
                        .HasForeignKey("WbGeometrySectionId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WbGeometrySection", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometryDiaDrift", "DiaDrift")
                        .WithMany()
                        .HasForeignKey("DiaDriftId");

                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometryIdSection", "IdSection")
                        .WithMany()
                        .HasForeignKey("IdSectionId");

                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometryMdBottom", "MdBottom")
                        .WithMany()
                        .HasForeignKey("MdBottomDiaDriftId");

                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometryMdTop", "MdTop")
                        .WithMany()
                        .HasForeignKey("MdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometryOdSection", "OdSection")
                        .WithMany()
                        .HasForeignKey("OdSectionId");

                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometryTvdBottom", "TvdBottom")
                        .WithMany()
                        .HasForeignKey("TvdBottomId");

                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometryTvdTop", "TvdTop")
                        .WithMany()
                        .HasForeignKey("TvdTopId");

                    b.HasOne("Well_AI.Advisor.API.Models.WbGeometryWtPerLen", "WtPerLen")
                        .WithMany()
                        .HasForeignKey("WtPerLenId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.Well", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.WellCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellGroundElevation", "GroundElevation")
                        .WithMany()
                        .HasForeignKey("GroundElevationId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellPcInterest", "PcInterest")
                        .WithMany()
                        .HasForeignKey("PcInterestId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellWaterDepth", "WaterDepth")
                        .WithMany()
                        .HasForeignKey("WaterDepthId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellLocation", "WellLocation")
                        .WithMany()
                        .HasForeignKey("WellLocationLocationId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellheadElevation", "WellheadElevation")
                        .WithMany()
                        .HasForeignKey("WellheadElevationElevationId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellBore", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.WellBoreCommonData", "CommonData")
                        .WithMany()
                        .HasForeignKey("CommonDataWellBoreCommonDataId");

                    b.HasOne("Well_AI.Advisor.API.Models.DayTarget", "DayTarget")
                        .WithMany()
                        .HasForeignKey("DayTargetId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellboreMd", "Md")
                        .WithMany()
                        .HasForeignKey("MdId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellboreMdKickoff", "MdKickoff")
                        .WithMany()
                        .HasForeignKey("MdKickoffId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellboreMdPlanned", "MdPlanned")
                        .WithMany()
                        .HasForeignKey("MdPlannedId");

                    b.HasOne("Well_AI.Advisor.API.Models.MdSubSeaPlanned", "MdSubSeaPlanned")
                        .WithMany()
                        .HasForeignKey("MdSubSeaPlannedId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellboreTvd", "Tvd")
                        .WithMany()
                        .HasForeignKey("TvdId");

                    b.HasOne("Well_AI.Advisor.API.Models.TvdKickoff", "TvdKickoff")
                        .WithMany()
                        .HasForeignKey("TvdKickoffId");

                    b.HasOne("Well_AI.Advisor.API.Models.TvdPlanned", "TvdPlanned")
                        .WithMany()
                        .HasForeignKey("TvdPlannedId");

                    b.HasOne("Well_AI.Advisor.API.Models.TvdSubSeaPlanned", "TvdSubSeaPlanned")
                        .WithMany()
                        .HasForeignKey("TvdSubSeaPlannedId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellCRS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.WellGeodeticCRS", "GeodeticCRS")
                        .WithMany()
                        .HasForeignKey("GeodeticCRSId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellLocalCRS", "LocalCRS")
                        .WithMany()
                        .HasForeignKey("LocalCRSId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellMapProjectionCRS", "MapProjectionCRS")
                        .WithMany()
                        .HasForeignKey("MapProjectionCRSId");

                    b.HasOne("Well_AI.Advisor.API.Models.Well", null)
                        .WithMany("WellCRS")
                        .HasForeignKey("WellId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellCommonData", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.WellDefaultDatum", "DefaultDatum")
                        .WithMany()
                        .HasForeignKey("DefaultDatumId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellDatum", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.WellDatumName", "DatumName")
                        .WithMany()
                        .HasForeignKey("DatumNameId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellElevation", "Elevation")
                        .WithMany()
                        .HasForeignKey("ElevationId");

                    b.HasOne("Well_AI.Advisor.API.Models.Well", null)
                        .WithMany("WellDatum")
                        .HasForeignKey("WellId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellLocalCRS", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.WellYAxisAzimuth", "YAxisAzimuth")
                        .WithMany()
                        .HasForeignKey("YAxisAzimuthId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellLocation", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.WellEasting", "Easting")
                        .WithMany()
                        .HasForeignKey("EastingId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellLatitude", "Latitude")
                        .WithMany()
                        .HasForeignKey("LatitudeId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellLocalX", "LocalX")
                        .WithMany()
                        .HasForeignKey("LocalXId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellLocalY", "LocalY")
                        .WithMany()
                        .HasForeignKey("LocalYId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellLongitude", "Longitude")
                        .WithMany()
                        .HasForeignKey("LongitudeId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellNorthing", "Northing")
                        .WithMany()
                        .HasForeignKey("NorthingId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellCRS", "WellCRS")
                        .WithMany()
                        .HasForeignKey("WellCRSUid");

                    b.HasOne("Well_AI.Advisor.API.Models.WellReferencePoint", null)
                        .WithMany("Location")
                        .HasForeignKey("WellReferencePointReferencePointId");
                });

            modelBuilder.Entity("Well_AI.Advisor.API.Models.WellReferencePoint", b =>
                {
                    b.HasOne("Well_AI.Advisor.API.Models.WellElevation", "Elevation")
                        .WithMany()
                        .HasForeignKey("ElevationId");

                    b.HasOne("Well_AI.Advisor.API.Models.WellMeasuredDepth", "MeasuredDepth")
                        .WithMany()
                        .HasForeignKey("MeasuredDepthId");

                    b.HasOne("Well_AI.Advisor.API.Models.Well", null)
                        .WithMany("ReferencePoint")
                        .HasForeignKey("WellId");
                });
#pragma warning restore 612, 618
        }
    }
}
