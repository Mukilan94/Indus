@{
    ViewData["Title"] = "Dashboard";
    var operators = ViewBag.Operators;
    string AccountType = HttpContextAccessor.HttpContext.Session.GetString("AccountType");
    string SubscriptionType = HttpContextAccessor.HttpContext.Session.GetString("subscriptiontype");

}
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@model WellAI.Advisor.Model.ServiceCompany.Models.ServiceDashboardModel

<section class="content-header">
</section>
<script>
    function displayLoading(target, bool) {
        var element = $(target);
        kendo.ui.progress(element, bool);
    }
    function chartdepthDataBound(e) {

        displayLoading("#chartdepth", false);
    }
    function charttimeDataBound(e) {
        displayLoading("#charttime", false);
    }
    function onChartRead(e) {

        displayLoading("#chartdepth", true);

        var ddlOperValue = $("#filteroperlayout").val();

        return {
            operId: ddlOperValue
        };
    }

    function onTimeChartRead(e) {

        displayLoading("#charttime", true);

        var ddlOperValue = $("#filteroperlayout").val();

        return {
            operId: ddlOperValue
        };
    }
    function onSeriesClick(e) {
        var wellid = e.dataItem.WellId;
        sessionStorage.setItem("WellIdValue", wellid);
        window.location = '/InDepthRigDataSrv?wellId=' + e.dataItem.WellId + "&optId=" + e.dataItem.OperatorTenantId;
    }
     function stagingLabelsVisual(e) {
        var axisCaption = "";
        if (e.value == 1) {
            axisCaption = "1 : Mob";
        }
        else if (e.value == 2) {
            axisCaption = "2 : Surface";
        }
        else if (e.value == 3) {
            axisCaption = "3 : 1st intermediate";
        }
        else if (e.value == 4) {
            axisCaption = "4 : 2nd intermediate";
        }
        else if (e.value == 5) {
            axisCaption = "5 : Production";
        }
        else if (e.value == 6) {
            axisCaption = "6 : Demob";
        }
        else if (e.value == 7) {
            axisCaption = "7 : Miscellaneous";
        }
        return new kendo.drawing.Text(axisCaption, e.rect.origin);
    }
</script>
<!-- Main content -->
<section class="content" style="padding-left:0px !important;">
    <div class="container-fluid dashboard">
        <!-- Small boxes (Stat box) -->
        <div class="row toptitle">
            <h4 class="dashboard-toptitle">At a Glance</h4>
            <span class="dashboard-topdescription">Click on any of key metrics to open the related screen</span>
        </div>
        <div class="row topblocks" style="margin-left:-3px !important">
            <div class="blockstyle" id="rigscount">
                <!-- small box -->
                <div class="small-box box-shad">
                    <div class="inner">
                        <span class="dashboard-total">Total rigs</span>
                    </div>
                </div>
                <span id="Rigs" class="dashboard-totalval">@Model.Rigs</span>
            </div>

            <!-- ./col -->
            <!-- ./col -->
            <div class="blockstyle" onclick="OpenBidsCount()">
                <!-- small box -->
                <div class="small-box box-shad">
                    <div class="inner">
                        <span class="dashboard-total">Open Bids </span>
                    </div>
                </div>
                <span id="OpenBidsVal" class="dashboard-totalval">@Model.OpenBidsVal</span>
            </div>
            <!-- ./col -->
            <div class="blockstyle" onclick="AwardedBids()">
                <!-- small box -->
                <div class="small-box box-shad">
                    <div class="inner">
                        <span class="dashboard-total">
                            Awarded Bids
                        </span>
                    </div>
                </div>
                <span id="AwardedBids" class="dashboard-totalval">@Model.AwardedBids</span>
            </div>

            <div class="blockstyle" onclick="UpcomingAppoinment()">
                <!-- small box -->
                <div class="small-box box-shad">
                    <div class="inner">
                        <span class="dashboard-total">Upcoming Appointments</span>
                    </div>
                </div>
                <span id="UpcomingAppoinment" class="dashboard-totalval">@Model.UpcomingAppoinment</span>
            </div>
            <!-- ./col -->
        </div>
        <!-- /.row -->
        <!-- Main row -->
        <div class="row">
            <!-- Left col -->
            <section class="col-lg-6 connectedSortable">
                <!-- Custom tabs (Charts with tabs)-->
                <div class="card">
                    <div class="card-header">
                        <div class="chart-header">
                            <h3 class="card-title">ACTIVE RIGS</h3>
                            <h4 class="dashboard-toptitle">Staging Chart</h4>
                            <span class="dashboard-topdescription">Click on a Rig's data to view it's activity.</span>
                        </div>
                        <div class="operatorfilter">

                        </div>
                    </div><!-- /.card-header -->
                    <div class="card-body">
                        <div class="demo-section k-content wide">
                            @(Html.Kendo().Chart<WellAI.Advisor.Model.ServiceCompany.Models.ServiceRig>()
                                .Name("chartdepth")
                                .Title("")
                                .HtmlAttributes(new { style = "min-height:450px" })
                                .Legend(legend => legend.Visible(false))
                                .ChartArea(chartArea => chartArea
                                    .Background("transparent")
                                )
                                .Series(series => {
                                    series.Column(model => model.Value).ColorField("Color").Highlight(x=>x.Visible(false))
                                    .Overlay(o => o.Gradient(ChartSeriesGradient.None));
                                })
                                .CategoryAxis(axis => axis
                                    .Name("series-axis")
                                    .Line(line => line.Visible(false))
                                )

                                .CategoryAxis(axis => axis
                                    .Name("label-axis")
                                    .Labels(labels => labels.Rotation(-90))
                                    .Categories(model => model.Category)
                                )
                                .ValueAxis(axis => axis
                                    .Numeric()
                                    .Min(0).Max(7)
                                    .Reverse(true)
                                    .Labels(labels => labels
                                            .Visual("stagingLabelsVisual")
                                           )
                                    )
                                .DataSource(datasource => datasource
                                         .Read(read => read.Action("GetDepthChartAction", "ServiceDashboard").Data("onChartRead")))
                                .Tooltip(tooltip => tooltip
                                    .Visible(true)
                                    .Template("#= dataItem.WellName#")
                                )
                               .Events(e =>
                               {
                                   e.DataBound("chartdepthDataBound");
                                   e.SeriesClick("onSeriesClick");
                               })

                            )
                        </div>
                    </div><!-- /.card-body -->
                </div>

                <!-- /.card -->
            </section>
            <!-- /.Left col -->
            <!-- right col (We are only adding the ID to make the widgets sortable)-->
            <section class="col-lg-6 connectedSortable">

                <!-- Map card -->
                <div class="card bg-gradient-primary">
                    <div class="card-header border-0">
                        <div class="chart-header">
                            <h3 class="card-title">ACTIVE RIGS</h3>
                            <h4 class="dashboard-toptitle">Time Chart</h4>
                            <span class="dashboard-topdescription">Click on a Rig's data to view it's activity.</span>
                        </div>
                        <div class="operatorfilter">

                        </div>
                    </div>
                    <div class="card-body">
                        <div class="demo-section k-content wide">
                            @(Html.Kendo().Chart<WellAI.Advisor.Model.ServiceCompany.Models.ServiceRig>()
                            .Name("charttime")
                            .Title("")
                            .HtmlAttributes(new { style = "min-height:450px" })
                            .Legend(legend => legend
                                .Visible(false)
                            )
                            .ChartArea(chartArea => chartArea
                                .Background("transparent")
                            )
                            .Series(series => {
                                series.Bar(model => model.Value2).ColorField("Color").Highlight(x=>x.Visible(false))
                                .Overlay(o => o.Gradient(ChartSeriesGradient.None));
                            })

                            .CategoryAxis(axis => axis
                                    .Name("label-axis")
                                     .Labels(labels => labels.Rotation(0))
                                    .Categories(model => model.Category)
                                      .MajorGridLines(lines => lines.Visible(false))
                                )
                            .ValueAxis(axis => axis
                                .Date()
                                .Min(0).Max(31).MajorUnit(2)
                                .Line(line => line.Visible(false))
                                .MajorGridLines(lines => lines.Visible(true))
                            )
                            .DataSource(datasource => datasource
                                         .Read(read => read.Action("GetTimeChartAction", "ServiceDashboard").Data("onTimeChartRead")))
                            .Tooltip(tooltip => tooltip
                            .Visible(true)
                            .Template("#= dataItem.WellName#")
                            )
                            .Events(e =>
                            {
                                e.DataBound("charttimeDataBound");
                                e.SeriesClick("onSeriesClick");
                            })
                        )
                        </div>
                    </div><!-- /.card-body -->

                </div>
            </section>
            <!-- right col -->
        </div>
        <!-- /.row (main row) -->
    </div><!-- /.container-fluid -->
</section>
<style>
    .blockstyle {
        height: 75px;
        width: auto;
        min-width: 130px;
        display: inline-block;
        margin: 10px 5px 0 5px;
        background-color: #fff;
        border: 4px solid #007AFC;
        border-radius: 10px;
        position: relative;
        justify-content: space-between;
    }

    .box-shad {
        box-shadow: none;
    }

    .card {
        background-color: #151d32 !important;
        color: white;
    }

    .dashboard-total {
        color: #000;
        font-size: 14px;
    }

    .dashboard-totalval {
        color: #007bff;
        position: absolute;
        bottom: 0px;
        right: 10px;
        text-align: right;
        text-decoration: underline;
        font-weight: 500;
        cursor: pointer;
        font-size: 20px !important;
        font-family: Roboto;
    }

    .topblocks {
        margin-left: -5px;
    }

    .toptitle {
        margin-left: 0px;
        color: #fff;
    }

    .dashboard-toptitle {
        font-family: Roboto;
        margin-bottom: 0px;
        font-weight: bold;
        font-size: 22px;
    }

    .card-title {
        font-family: Roboto;
        font-weight: normal;
        font-size: 14px;
        letter-spacing: 2px;
        text-decoration: underline;
        text-underline-position: under !important;
    }

    text {
        font-family: Roboto !important;
        font-weight: 600 !important;
    }

    .dashboard-topdescription {
        color: #f1f2f8;
        font-weight: 300;
        letter-spacing: .75px;
        font-size: 10pX;
        width: 100%;
    }

    .demo-section {
        border: 4px solid #007AFC;
        border-radius: 5px;
    }

    .card-body {
        padding: 0;
    }

    .card-header {
        padding-left: 0px;
        position: relative;
        height: 100px;
    }

    .chart-header {
        display: inline-block;
        width: 62%;
        position: absolute;
    }

    .operatorfilter {
        display: inline-block;
        position: absolute;
        right: 0;
    }

        .operatorfilter .k-dropdown {
            display: block;
        }

            .operatorfilter .k-dropdown .k-dropdown-wrap .k-input {
                background-color: #fff;
                color: #000;
            }

    @@media (max-width: 570px) {
        .card-header {
            height: auto !important;
        }

        .chart-header, .operatorfilter {
            position: inherit !important;
            display: block !important;
            width: auto !important;
        }
    }
</style>
<script type="text/javascript">

   

    function UpcomingAppoinment() {
           @{TempData["UpcomingApts"] = "Upcoming"; }
        sessionStorage.setItem("UpcomingActivity","Upcoming");
        window.location.href ="/ActivityViewSRV"
    }
    function AwardedBids() {
        sessionStorage.setItem("AwardedBids", "Completed");
       @*@{TempData["AwardedBids"] = "Completed"; }*@
        window.location.href ="/ProjectAuctionsSRV"
    }
    function OpenBidsCount() {
        sessionStorage.setItem("OpenBidsCount", "Active");

        window.location.href ="/ProjectAuctionsSRV"
    }
</script>
<script type="text/javascript" language="javascript">

    $(function () {
        $("#rigscount").click(function () {
            window.location = "/welldataSRV";
        });
    });

    $(document).ready(function () {

         if (@AccountType == "1") {
            $('.k-breadcrumb-link').attr('href', '/ServiceDashboard/index');
        }

        setInterval(CountsRefresh, 60000);
    });

    function CountsRefresh() {
        $.ajax({
            url: '/ServiceDashboard/Counts',
            type: 'GET',
            success: function (ResponseData) {
                if (ResponseData != undefined) {
                    document.getElementById('Rigs').innerHTML = ResponseData.Rigs;
                    document.getElementById('AwardedBids').innerHTML = ResponseData.AwardedBids;
                    document.getElementById('OpenBidsVal').innerHTML = ResponseData.OpenBidsVal;
                    document.getElementById('UpcomingAppoinment').innerHTML = ResponseData.UpcomingAppoinment;
                }
            }
        });

    }

    
</script>
<script type="text/javascript">
    $(document).ready(function () {
        var interval = 60000;
        setInterval(function () {
            $('#charttime').data('kendoGrid').dataSource.read();
            $('#charttime').data('kendoGrid').refresh();
        }, interval);
    });
</script>