@{
    ViewData["Title"] = "Providers";
    var pendingFilter = (string)ViewData["pendingFilter"];
    var insuranceFilter = (string)ViewData["insuranceFilter"];
    var fieldPermission = (bool)ViewData["fieldPermission"];
}
@model WellAI.Advisor.Model.OperatingCompany.Models.ProviderDirectoryModel

<section class="content-header">
    <script>
        function RenameWindow(e) {
            if (e.model.isNew()) {
                e.container.data("kendoWindow").title("New service company");
            }
        }
        function showdelete(e) {
            e.preventDefault();
            alert('Are you sure to remove service company from this list?')
        }
        function customDelete(e) {
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var CompanyId = dataItem.CompanyId;
            kendo.confirm("Are you sure you want to delete this?")
                .done(function () {
                    $.ajax({
                        url: "ProviderDirectory/ProviderDirectory_Destroy?ProviderId=" + dataItem.ProviderId + "&companyId=" + CompanyId,
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            if (data.IsDepthPermission == true)
                            {
                                $('#DepthRigValidation').html("Depth Permission set on Operator Rigs");
                                var wnd = $("#DepthRigValidation").data("kendoWindow");
                                wnd.center().open();
                            }
                            var grid = $("#providers").data("kendoGrid");
                            grid.dataSource.read();
                        }
                    });

                })
                .fail(function () {
                    return false;
                });
        }

        function companyChange(e) {
            var ddlcompany = $("#ddlCompany").val();
            $("#CompanyId").data("kendoMaskedTextBox").value(ddlcompany);
            $("#CompanyId").data("kendoMaskedTextBox").trigger("change");
        }
        function approvalChange(e) {
            var ddlapproval = $("#ddlApproval").val();
            $("#ApprovalId").data("kendoMaskedTextBox").value(ddlapproval);
            $("#ApprovalId").data("kendoMaskedTextBox").trigger("change");
        }
        function statusChange(e) {
            var ddlstatus = $("#ddlStatus").val();
            $("#StatusId").data("kendoMaskedTextBox").value(ddlstatus);
            $("#StatusId").data("kendoMaskedTextBox").trigger("change");
        }
        function pecChange(e) {
            var ddlpec = $("#ddlPEC").val();
            $("#PeModelStatusId").data("kendoMaskedTextBox").value(ddlpec);
            $("#PecStatusId").data("kendoMaskedTextBox").trigger("change");
        }
        function InsuranceChange(e) {
            var InsuranceId = $("#Insurance").val();
            $("#InsuranceId").data("kendoMaskedTextBox").value(InsuranceId);
            $("#InsuranceId").data("kendoMaskedTextBox").trigger("change");
        }
        function msaChange(e) {
            var ddlmsa = $("#ddlMSA").val();
            $("#MSADocumentId").data("kendoMaskedTextBox").value(ddlmsa);
            $("#MSADocumentId").data("kendoMaskedTextBox").trigger("change");
        }
        function preferredChange(e) {
            if (e.checked) {
                $("#Preferred").data("kendoMaskedTextBox").value("true");
                $("#Preferred").data("kendoMaskedTextBox").trigger("change");
                $(".prefswitch .k-switch-label-on").show();
                $(".prefswitch .k-switch-label-off").hide();
            }
            else {
                $("#Preferred").data("kendoMaskedTextBox").value("false");
                $("#Preferred").data("kendoMaskedTextBox").trigger("change");
                $(".prefswitch .k-switch-label-on").hide();
                $(".prefswitch .k-switch-label-off").show();
            }
        }
        function secondaryChange(e) {
            if (e.checked) {
                $("#Secondary").data("kendoMaskedTextBox").value("true");
                $("#Secondary").data("kendoMaskedTextBox").trigger("change");
                $(".secswitch .k-switch-label-on").show();
                $(".secswitch .k-switch-label-off").hide();
            }
            else {
                $("#Secondary").data("kendoMaskedTextBox").value("false");
                $("#Secondary").data("kendoMaskedTextBox").trigger("change");
                $(".secswitch .k-switch-label-on").hide();
                $(".secswitch .k-switch-label-off").show();
            }
        }
        function onRequestEnd(e) {
            if (e.type == "update" || e.type == "create") {
                $("#provdirbtn").click();
            }
        }
        function setVisible(dataItem) {
            var permission = '@ViewData["fieldPermission"]';
            console.log('permission s' + permission);
            if (permission == 'False' || permission == 'false') {
                return true;
            }
            else {
                return false;
            }
        }
        $(document).ready(function () {
            $("a[data-form-method='post']").click(function (event) {
                event.preventDefault();
                var element = $(this);
                var action = element.attr("href");
                element.closest("form").each(function () {
                    var form = $(this);
                    form.attr("action", action);
                    form.submit();
                });
            });
        });
        function showLocation(city, zip, address1, address2, state) {
            $.ajax({
                url: "https://nominatim.openstreetmap.org/search?city=" + city + "&state=" + state + "&street=" + address1 + " "
                    + address2 + "&postalcode=" + zip + "&format=geocodejson",
                type: 'GET',
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    var locationLat = "";
                    var locationLng = "";
                    for (var i = 0; i < data.features.length; i++) {
                        var feature = data.features[i];
                        var label = feature.properties.geocoding.label;
                        if (label.indexOf(city) > 0 && label.indexOf(zip) > 0) {
                            var coordinates = feature.geometry.coordinates;
                            var locationLat = coordinates[1];
                            var locationLng = coordinates[0];
                            break;
                        }
                    }
                    var map = $("#locationmap").data("kendoMap");
                    var centerLat = 30.268107;
                    var centerLng = -97.744821;
                    if (locationLat != "" && locationLng != "") {
                        centerLat = locationLat;
                        centerLng = locationLng - 20;
                    }
                    var centerLocation = new kendo.dataviz.map.Location(centerLat, centerLng);
                    map.center(centerLocation);
                    if (locationLat != "" && locationLng != "") {
                        var markerLocation = new kendo.dataviz.map.Location(locationLat, locationLng);
                        if (map.markers.items.length == 0) {
                            map.markers.add({ location: markerLocation })
                        }
                    }
                    var wnd = $("#MapLocation").data("kendoWindow");
                    wnd.center().open();
                }
            });
        }
        function additionalInfo(e) {
            var that = $(this);
            return {
                companyId: "1"
            }
        }
        function onDataBound(e) {        
             var grid = this;
            grid.table.find("tr").each(function () {
                var dataItem = grid.dataItem(this);
                sessionStorage.setItem("ProviderId", dataItem.ProviderId);
                var type = dataItem.Discontinued ? 'success' : 'error';
                var text = dataItem.Discontinued ? 'available' : 'not available';
                $(this).find('script').each(function () {
                    eval($(this).html());
                });
                $(this).find(".badgeTemplate").kendoBadge({
                    type: type,
                    value: text,
                });
                kendo.bind($(this), dataItem);
            });

            counter = 1;
            var columns = e.sender.columns;
            var columnIndex = this.wrapper.find(".k-grid-header [data-field=" + "PreferredStatus" + "]").index();
            var InsurencecolumnIndex = this.wrapper.find(".k-grid-header [data-field=" + "InsuranceExpire" + "]").index();
            var rows = e.sender.tbody.children();
            for (var j = 0; j < rows.length; j++) {
                var row = $(rows[j]);
                var dataItem = e.sender.dataItem(row);
                var ExpireDate = dataItem.get("InsuranceExpire");
                //var diffDays = "";
                if (ExpireDate != null) {
                    var ExpirationDate = ExpireDate;
                    var CurrentDate = new Date();

                    var diffDays = parseInt((ExpirationDate - CurrentDate) / (1000 * 60 * 60 * 24), 10);                 
                    if (diffDays <= 7) {
                        var cell = row.children().eq(InsurencecolumnIndex);
                        cell.addClass("RowHighlight");
                      }
                }

                var units = dataItem.get("PreferredStatus");
                var cell = row.children().eq(columnIndex);
                cell.addClass(templateFunction(units));
            }

            grid.element.off('dblclick');           
        }

        function templateFunction(units) {
            switch (units) {
                case "Preferred":
                    return "Preferred";
                case "Authorized":
                    return "Authorized";
                case "pending Review":
                    return "pending";
            }
        }

        function ProviderRecord() {
            var GridObject = $("#providers").data("kendoGrid");
            var Url = "/ProviderDirectory/ProviderDirectory_Filter?pendingFilter=false&insureExpireFilter=false";
            GridObject.dataSource.transport.options.read.url = Url;
            GridObject.dataSource.read();
        }
        function ProviderApproval() {
            var GridObject = $("#providers").data("kendoGrid");
            var Url = "/ProviderDirectory/ProviderDirectory_Filter?pendingFilter=true&insureExpireFilter=false";
            GridObject.dataSource.transport.options.read.url = Url;
            GridObject.dataSource.read();
        }
        function InsuranceExpire() {
            var GridObject = $("#providers").data("kendoGrid");
            var Url = "/ProviderDirectory/ProviderDirectory_Filter?pendingFilter=false&insureExpireFilter=true";
            GridObject.dataSource.transport.options.read.url = Url;
            GridObject.dataSource.read();
        }
        function ProviderComplaice() {
            var GridObject = $("#providers").data("kendoGrid");
            var Url = "/ProviderDirectory/ProviderDirectory_Filter?pendingFilter=true&insureExpireFilter=true";
            GridObject.dataSource.transport.options.read.url = Url;
            GridObject.dataSource.read();
        }
        $(document).ready(function () {
            RefreshGrid();
            $("#providers").data("kendoGrid").bind("edit", function (e) {
                e.container.find(".k-grid-cancel").click(function (e) {
                    alert("");
                    $('#providers').data('kendoGrid').dataSource.read().then(function () {
                        $('#providers').data('kendoGrid').refresh();
                    });
                });
            });            
        });
        function RefreshGrid() {
            var IntTime = 300000;
            setInterval(function () {
                $("#providers").data("kendoGrid").dataSource.read();
            },IntTime);
        }
    </script>
</section>
<!-- Main content -->
@using (Html.BeginForm("Update", "ProviderDirectory", FormMethod.Post, new { penging = pendingFilter, expire = insuranceFilter }))
{
    <section class="content col-sm-12" style="height:100% !important;">
        <input type="submit" id="provdirbtn" hidden="hidden" />
        <div class="providers-wrap">
            <div class="providers-top">
                <div class="providers-counts">
                    <div class="rowtitle">
                        <div class="providertitle">Provider Directory</div>
                        <div class="providerdescription">Click on any of key metrics to open the related screen</div>
                    </div>
                    <div class="rowcounts">
                        <div class="blockstyle" onclick="ProviderRecord()">
                            <div class="inner">
                                <span class="providers-total">Provider Records</span>
                                <a href='@Url.Action("Update", "ProviderDirectory", new { pending = "0", expire = "0" })' data-form-method="post" class='linkstyle'><span id="Records" class="providers-totalval">@Model.Records</span></a>
                            </div>
                        </div>
                        <!-- ./col -->
                        <div class="blockstyle" onclick="ProviderApproval()">
                            <div class="inner">
                                <span class="providers-total">Providers Pending Approval</span>
                                <a href='@Url.Action("Update", "ProviderDirectory", new { pending = "1", expire = "0" })' data-form-method="post" class='linkstyle'><span id="Pending" class="providers-totalval">@Model.Pending</span></a>
                            </div>
                        </div>
                        <!-- ./col -->
                        <div class="blockstyle" onclick="InsuranceExpire()">
                            <div class="inner">
                                <span class="providers-total">Insurance Expiring Next 90 Days</span>
                                <a href='@Url.Action("Update", "ProviderDirectory", new { pending = "0", expire = "1" })' data-form-method="post" class='linkstyle'><span id="InsExpiring90days" class="providers-totalval">@Model.InsExpiring90days</span></a>
                            </div>
                        </div>
                        <!--col-->
                        <div class="blockstyle" onclick="ProviderComplaice()">
                            <div class="inner">
                                <span class="providers-total">Provider Compliance Alerts</span>
                                <a href='@Url.Action("Update", "ProviderDirectory", new { pending = "1", expire = "1" })' data-form-method="post" class='linkstyle'><span id="ComplienceAlert" class="providers-totalval">@Model.ComplienceAlert</span></a>
                            </div>
                        </div>
                    </div>
                </div>
                @*<div class="providers-right">
                        <div class="row">
                            @if (@Model.PreferredProvider != null)
                            {
                                <div class="providers-pref">
                                    <div class="provider1-img"></div>
                                    <div class="provider-title">
                                        <span>@Model.PreferredProvider.Name</span>
                                        <span class="provider-satus">Preferred Provider</span>
                                        <i class="fa fa-phone" style="color:#3639A4" onclick="showCallWindow(@Model.PreferredProvider.Phone)"></i>
                                        <a onclick="showLocation('@Model.PreferredProvider.City', '@Model.PreferredProvider.Zip', '@Model.PreferredProvider.Address1', '@Model.PreferredProvider.Address2', '@Model.PreferredProvider.State');">
                                            <i class="fa fa-map-marker" style="color:#FF6344"></i>
                                        </a>
                                        <a href="@Model.PreferredProvider.Website" target="_blank"><i class="fa fa-globe" style="color:#2BDDCD"></i></a>
                                    </div>
                                </div>
                            }
                            @if (@Model.SecondaryProvider != null)
                            {
                                <div class="providers-sec">
                                    <div class="provider2-img"></div>
                                    <div class="provider-title">
                                        <span>@Model.SecondaryProvider.Name</span>
                                        <span class="provider-satus">Secondary Provider</span>
                                        <i class="fa fa-phone" style="color:#3639A4" onclick="showCallWindow(@Model.SecondaryProvider.Phone)"></i>
                                        <a onclick="showLocation('@Model.SecondaryProvider.City', '@Model.SecondaryProvider.Zip', '@Model.SecondaryProvider.Address1', '@Model.SecondaryProvider.Address2', '@Model.SecondaryProvider.State');">
                                            <i class="fa fa-map-marker" style="color:#FF6344"></i>
                                        </a>
                                        <a href="@Model.SecondaryProvider.Website" target="_blank"><i class="fa fa-globe" style="color:#2BDDCD"></i></a>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>*@
                <div class="providers-bottom">
                    @(Html.Kendo().Grid<WellAI.Advisor.Model.OperatingCompany.Models.ProviderProfile>()
.Name("providers")
.HtmlAttributes(new { @class = "ra-section" })
.Columns(columns =>
{
    columns.Bound(p => p.ProviderId);
    columns.Bound(p => p.PreferredStatus).Title("Provider Status").Width(180);
    columns.Bound(p => p.Name).Width(200).ClientTemplate("<a href='" + @Url.Action("ProviderProfile", "ProviderDirectory", new { id = "#=ProviderId#" }) + "' class='linkstyle'>#=Name#</a>");
    columns.Bound(p => p.Rating).Width(130).Title("Rating").ClientTemplate(Html.Kendo().Rating()
                .Name("rating_#=ProviderId#")
                .Min(1)
                .Max(5)
                .Label(false)
                .Readonly(true)
                .HtmlAttributes(new {data_bind = "value:Rating" ,@class="Rating"})
                .ToClientTemplate().Value
            );
    columns.Bound(p => p.PecStatus).ClientTemplate("<span class=#=PecStatus=='Good' ? 'greenpecstatus' : PecStatus=='Average' ? 'yellowpecstatus' : 'redpecstatus' #><i class='fa fa-circle'></i></span>").Hidden(true);
    columns.Bound(p => p.MSADocument).ClientTemplate("<a href='" + @Url.Action("DownloadForServiceCompany", "ProviderDirectory", new { fileId = "#=MSADocumentId#" }) + "' class='linkstyle'>#=MSADocument#</a>");
    columns.Bound(p => p.InsuranceDocument).ClientTemplate("<a href='" + @Url.Action("InsurenceDownload", "ProviderDirectory", new { tenId = "#=CompanyId#", fileId = "#=InsuranceId#" }) + "' class='linkstyle'> #if (InsuranceDocument == null) {# #=''# #} else {# #=InsuranceDocument# #}# </a>");
    columns.Bound(p => p.InsuranceExpire).Width(120).Title("Insurance Expire").Format("{0: MM/dd/yyyy}");
    columns.Bound(p => p.Website).Width(200).ClientTemplate("<a href='#=Website#' target='_blank' class='linkstyle'>#=Website#</a>");   
    columns.Command(command =>
    {
        command.Custom("Delete").Text("<i class='fa fa-trash' style='font-size:20px;'></i>").Click("customDelete")/*.Visible("setVisible")*/;
    }).Title("Action").Width(80);
})
.Pageable(p =>
            p.Info(true)
             .Numeric(false)
             .PreviousNext(false)
        )
         .Scrollable(scrollable => scrollable.Virtual(true))
.Sortable(s => s.Enabled(true))
.ToolBar(toolbar =>
{
    toolbar.ClientTemplateId("AddVendorTemplate");
})
.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("EditProvider").Window(w => w.Title("Edit Provider").Width(500)))
.DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .ServerOperation(true)
            .Model(model => model.Id(p => p.ProviderId))
            .Events(events =>
            {
                events.RequestEnd("onRequestEnd");
            })
            .Read(read => read.Action("ProviderDirectory_Read", "ProviderDirectory", new { pending = "true", expire = "true" }))
            .Create(update => update.Action("ProviderDirectory_Create", "ProviderDirectory"))
            .Update(update => update.Action("ProviderDirectory_Update", "ProviderDirectory"))
            .Events(events => events.Error("error"))
            ).BindTo(Model.Providers)
            .Events(e => { e.DataBound("onDataBound");
                e.Save("OnGridSave");
            })
                    )
                </div>
            </div>
        </div>
    </section>
}
@(Html.Kendo().Window().Name("MapLocation")
    .Title("Provider Location")
    .Content(@<text>
            @(Html.Kendo().Map()
              .Name("locationmap")
              .Zoom(5)
              .Layers(layers =>
              {
                  layers.Add()
                      .Type(MapLayerType.Tile)
                      .UrlTemplate("http://#= subdomain #.tile.openstreetmap.org/#= zoom #/#= x #/#= y #.png")
                      .Subdomains("a", "b", "c")
                      .Attribution("&copy; <a href='http://osm.org/copyright'>OpenStreetMap contributors</a>");
              })
            )
    </text>
)
.Visible(false)
.Actions(actions => actions.Close())
.Modal(true)
.Draggable(true).Width(1000)
)
@(Html.Kendo().Window().Name("AddProvider")
    .Title("Add Provider")
    .Content(@<text>
        <div  class="buttons">
            @Html.Kendo().Button().Name("Primary").Content("Submit").HtmlAttributes(new { @class = "k-button k-primary", type = "submit", onclick = "saveProvider();" })
            @Html.Kendo().Button().Name("Primary").Content("Cancel").HtmlAttributes(new { @class = "k-button k-button-icontext k-grid-cancel", type = "submit", onclick = "closeProvider();" })
        </div>
@(Html.Kendo().Grid<WellAI.Advisor.Model.OperatingCompany.Models.CorporateProfile>()
        .Name("vendors")
        .HtmlAttributes(new { @class = "ra-section" })
        .Columns(columns =>
        {
            columns.Select().Width(50);
            columns.Bound(p => p.ID).Hidden();
            columns.Bound(p => p.UserId).Hidden();
            columns.Bound(p => p.TenantId).Hidden();
            columns.Bound(p => p.Name);
            columns.Bound(p => p.Website);
            columns.Bound(p => p.City);
            columns.Bound(p => p.State);
        })
        .Pageable(p =>p.Info(true)
                         .Numeric(false)
                         .PreviousNext(false)
                    )
         .Scrollable(scrollable => scrollable.Virtual(true))
        .PersistSelection()
        .Sortable()
        .ToolBar(toolbar =>
        {
            toolbar.Search();
        })
        .Events(ev => ev.Change("onChange"))
        .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(10)
                .Batch(false)
                .Model(model => model.Id(p => p.ID))
                .Read(read => read.Action("Providers_Read", "ProviderDirectory"))
        )
    )
<style>
    .k-pager-numbers-wrap{
        margin-bottom:4px;
    }
</style>
    </text>
    )
    .Visible(false)
    .Actions(actions => actions
        .Close()
    )
    .Modal(true)
    .Draggable(true).Width(1000)
)
@(Html.Kendo().Window().Name("Call")
    .Title("Calling...")
    .Visible(false)
    .Content(@<text><div id="wndCall">Calling....</div></text>)
    .Events(ev => ev.Close("onCallWindowClose"))
.Modal(true)
.Draggable(true)
.Width(300)
)
@(Html.Kendo().Window().Name("DepthRigValidation")
    .Title("Alert : Unable to Delete the Operator")
    .Visible(false)
    .Modal(true)
	 .Content(@<text>
                <div id="WindowContent"></div>
    </text>)
    .Actions(actions => actions
        .Close()
    )
    .Width(500)
    .Draggable(true)
)
<script id="AddVendorTemplate" type="text/x-kendo-template">
    <div class="refreshBtnContainer">
        <a href="\\#" class="providerbutton" title="Add Provider">+ Add Provider</a>
    </div>
</script>
<script type="text/javascript">
    function OnGridSave(e) {
        setTimeout(function () {
            $('#providers').data('kendoGrid').dataSource.read().then(function () {
                $('#providers').data('kendoGrid').refresh();
            });
        }, 1600);
    }
    function error(args) {
        if (args.errors) {
            var grid = $('#providers').data("kendoGrid");
            grid.one("dataBinding", function (e) {
                e.preventDefault();
                $.each(args.errors, function (propertyName) {
                    var messages = this.errors[0];
                    $('.errors').text(messages);
                    $('.errors').addClass("alert alert-danger");
                });
            });
        }
    }
    $(function () {
        $('#vendors').data('kendoGrid').dataSource.read().then(function () {
            $('#vendors').data('kendoGrid').clearSelection();
        });
        setInterval(CountsRefresh, 60000);
    });
    function CountsRefresh() {
        $.ajax({
            url: '/ProviderDirectory/Counts',
            type: 'GET',
            success: function (ResponseData) {
                document.getElementById('Records').innerHTML = ResponseData.Records;
                document.getElementById('Pending').innerHTML = ResponseData.Pending;
                document.getElementById('InsExpiring90days').innerHTML = ResponseData.InsExpiring90days;
                document.getElementById('ComplienceAlert').innerHTML = ResponseData.ComplienceAlert;
            }
        });
        setInterval(CountsRefresh, 60000);
    }
     function returnFalse() {
            return false;
        }
    var selectedVendor = [];
    var ContactList = [];
    $(function () {
        var grid = $("#providers");
        grid.find(".k-grid-toolbar").on("click", ".providerbutton", function (e) {
            openProviderDirectory();
        });
        function openProviderDirectory() {
            var wnd = $("#AddProvider").data("kendoWindow");
            wnd.center().open();
            $('#vendors').data('kendoGrid').dataSource.read().then(function () {
                $('#vendors').data('kendoGrid').clearSelection();
            });
        }
    });
    function saveProvider()
    {
        var posturl = '@Url.Action("SaveProvider", "ProviderDirectory")';
        var obj = JSON.stringify(selectedVendor);
        var i = 0;
        console.log(obj);
        if (selectedVendor.length > 0) {
            for (i = 0; i <= selectedVendor.length - 1; i++) {
                $.ajax({
                    url: posturl,
                    type: 'POST',
                    data: JSON.stringify(selectedVendor[i]),
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        if (data) {
                            var grid = $("#providers").data("kendoGrid");
                            grid.dataSource.read();
                        }
                    }
                });
            }
        $.ajax({
            url: "/Communication/SaveClientContact?clients=" + ContactList,
            type: 'POST',
            data: JSON.stringify(ContactList),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                if (data) {
                    var grid = $("#users").data("kendoGrid");
                    grid.dataSource.read();
                    $('#clientContacts').html('');
                    $('#clientContacts').html(data);
                    selectedClientContact = [];
                    closeClientContact();
                }
            }
        });
            closeProvider();
        }
        else {
            //Phase II Changes - Alert
            provideralert("Please Select Provider", "Alert");
            return false;
        }
        window.location.reload();
    }

    //Phase II Changes - Alert
    function provideralert(content, alerttitle) {
        $("<div></div>").kendoAlert({
            title: alerttitle,
            content: content
        }).data("kendoAlert").open();
    }

    function closeProvider() {
        var wnd = $("#AddProvider").data("kendoWindow");
        $('#vendors').data('kendoGrid').dataSource.read().then(function () {
            $('#vendors').data('kendoGrid').clear();
        });
        wnd.close();
    }
   function onChange(e) {
        var selectedRows = this.select();
         selectedVendor = [];
        for (var i = 0; i < selectedRows.length; i++) {
            var dataItem = this.dataItem(selectedRows[i]);
            var vendor =
            {
                CompanyId: dataItem.ID,
                TenantId: dataItem.TenantId,
                Secondary: false,
            };
            selectedVendor.push(vendor);
        }
       ContactList = [];
        for (var i = 0; i < selectedVendor.length; i++) {
            var TenantID = selectedVendor[i].TenantId;
            $.ajax({
                url: "/Communication/Contacts_Read?Tenantid=" + TenantID,
                type: "Get",
                dataType: "Json",
                async: false,
                success: function (response) {
                    if (response != null) {
                        var ContList = response.Data;
                        for (var i = 0; i < ContList.length; i++) {
                            var UserId = ContList[i].UserId;
                            var TenantId = ContList[i].TenantId;
                            var ContactId = ContList[i].ContactId;
                            var Contacts = {
                                UserId: UserId,
                                TenantId: TenantId,
                                ContactId: ContactId
                            };
                            ContactList.push(Contacts);
                        }
                    }
                }
            });
        }
    }
    function showCallWindow(phone) {
        console.log("Calling : " + phone);
        $("#wndCall").empty();
        $("#wndCall").text("Calling....");
        var wnd = $("#Call").data("kendoWindow");
        wnd.content();
        wnd.center().open();
        $('#wndCall').load('/Communication/ManageCall/', { phone: phone }, function (response, status, xhr) {
            if (status == "error") {
                try {
                    var msge = $.parseJSON(response);
                } catch (e) {
                }
            }
        });
    }
</script>
<style>
    .RowHighlight {
        background-color: #ff6344 !important;
        color:white !important;
    }
    .k-datepicker .k-picker-wrap .k-select,
    .k-timepicker .k-picker-wrap .k-select {
        padding: 0.375rem 1.375rem !important;
        border-width: 0 0 0 1px;
    }
    .Authorized {
        background-color: #77BD27;
        border-color: white !important;
        border-width: 2px !important;
        color: white;
        font-weight: bold !important;
        text-transform: uppercase !important;
    }
    .pending {
        background-color: #F4AF00;
        border-color: white !important;
        border-width: 2px !important;
        color: white;
        font-weight: bold !important;
        text-transform: uppercase !important;
    }
    .Preferred {
        background-color: #007BFF;
        border-color: white !important;
        border-width: 2px !important;
        color: white;
        font-weight: bold !important;
        text-transform: uppercase !important;
    }
    
    .btn-primary {
        background-color: #007bff;
        border-color: #367fa9;
        border-radius: 10px !important;
        font-weight: bold !important;
    }
    .k-window {
        border-radius: 5px !important;
    }
    .k-grid-header .k-header > .k-link {
        text-transform: uppercase;
        font-weight: 900 !important;
        font-size: 12px !important;
    }
    .k-grid-Delete .k-grid-Delete:hover {
        background-color: #fff !important;
    }
    .k-grid-Delete{
        border-radius: 10px !important;
    }
    .buttons {
        padding-bottom:20px;
    }
    .k-pager-numbers {
        padding-top:17px;
    }
    .providers-counts {
        color: #ffffff;
        width: 60%;
        display: inline-block;
        margin-bottom: 50px;
    }
    .providers-counts .rowcounts{
        height:100px;
        margin-left:-20px;
    }
    .providers-counts{
        float:left;
    }
    .providers-right{
        color:#ffffff;
        width:28%;
        display:inline-block;
        float:right;
        margin-right:20px;
        margin-top:10px;
    }
    .providers-bottom{
        float:left;
        width:100%;
    }
    .providers-pref{
        margin-bottom:10px;
    }
    .k-rating-container .k-rating-item {
        padding: 4px 0;
    }
        .k-rating-container .k-rating-item .k-icon {
            font-size: 16px;
        }
    .providers-pref, .providers-sec {
        background-color: #fff;
        color: #000;
        border: 4px solid #007BFF !important;
        border-radius: 10px;
        height: 100px;
        width: 330px;
    }
    .providers-sec{
        margin-bottom:25px;
    }
    .inner {
        padding-top:10px;
    }
    .providers-counts .blockstyle {
        height: 75px;
        background-color: #fff;
        color: #000;
        border: 4px solid #007AFC;
        border-radius: 10px;
        position: relative;
        padding-left: 5px;
        padding-right: 5px;
        margin-left: 20px;
        float: left;
        width: auto;
        justify-content: space-between;
    }
    .linkstyle{
        text-decoration:underline !important;
    }
    .greenpecstatus{
        color:limegreen;
        margin-left:30%;
    }
    .k-grid-content {
        height: auto !important;
    }
    .redpecstatus{
        color:red;
        margin-left:30%;
    }
    .yellowpecstatus{
        color:orange;
        margin-left:30%;
    }
    .rowtitle{
        display:inline-block;
        margin-bottom:10px;
        margin-left:5px;
    }
    .providertitle {
        font-family: Roboto;
        margin-bottom: 0px;
        font-weight: bold;
        font-size: 22px;
    }
    .providerdescription {
        color: #f1f2f8;
        font-weight: 300;
        letter-spacing: .75px;
        font-size: 10pX;
        width: 100%;
    }
    .providers-total {
        color: #000;
        font-size: 14px;
    }
    .providers-totalval {
        color: #007bff;
        position: absolute;
        bottom: 0px;
        right: 10px;
        text-align: right;
        text-decoration: underline;
        font-weight: 500;
        cursor: pointer;
        font-size: 20px !important;
    }
    .provider1-img {
        background-image: url( @Url.Content("/img/prov1.jpg") );
        background-size:cover;
        width: 59px;
        height: 59px;
        display: inline-block;
        float: left;
        margin-left: 15px;
        margin-top: 15px;
    }
    .provider2-img {
        background-image: url( @Url.Content("/img/prov2.jpg") );
        background-size:cover;
        width: 59px;
        height: 59px;
        display: inline-block;
        float: left;
        margin-left: 15px;
        margin-top: 15px;
    }
    .provider-title{
        float:left;
        list-style:none;
        margin-top:10px;
        margin-left:10px;
    }
    .provider-title span{
        display:block;
        font-weight:bold;
    }
    .provider-title i{
        width:20px;
    }
    .provider-satus{
        font-weight:600;
        font-size:14px;
    }
    .k-grid .k-grid-add:hover {
        color: #fff !important;
    }
    .k-grid-Delete, .k-grid-Delete:hover, .k-grid-edit, .k-grid-edit:hover {
        background-color: transparent !important;
    }
    .k-grid-Delete:focus, .k-grid-edit:focus{
        box-shadow:none !important;
    }
    .k-window-titlebar {
        background-color: #007BFF;
        color: white;
    }
    .k-datepicker .k-picker-wrap .k-select {
        border: 0px;
        background-color: #fff;
        color: #000;
    }
    #InsuranceStart .k-textbox .k-icon, #InsuranceExpire .k-textbox .k-icon {
        color: #000;
    }
    .k-i-calendar {
        margin-left: -10px !important;
    }
    .k-datepicker {
        padding: 0;
    }
    .k-switch{
        width:5em !important;
    }
    .fa-map-marker{
        cursor:pointer;
    }
</style>
