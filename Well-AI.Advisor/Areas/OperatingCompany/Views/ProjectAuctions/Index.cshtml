@{
    ViewData["Title"] = "Bids";
    DateTime LastMonthLastDate = DateTime.Today.AddDays(0 - DateTime.Today.Day);
    DateTime LastMonthFirstDate = LastMonthLastDate.AddDays(1 - LastMonthLastDate.Day);
    ViewData["LastMonthFirstDate"] = LastMonthFirstDate.Date;
    ViewData["LastMonthLastDate"] = LastMonthLastDate.Date;
    ViewData["ThisMonthFirstDate"] = LastMonthLastDate.Date.AddDays(1);
    ViewData["ThisMonthLastDate"] = DateTime.Now.Date;
}
@model WellAI.Advisor.Model.OperatingCompany.Models.AuctionBidsModel

<section class="content-header">
    <style>
        .k-window {
            border-radius: 5px !important;
        }
        .k-grid-header .k-header > .k-link {
            text-transform: uppercase;
            font-weight: 900 !important;
            font-size: 12px !important;
        }
        .k-dropdown .k-dropdown-wrap .k-input {
            background-color: #fff !important;
            color: #000 !important;
        }
        .k-grid .k-grid-add:hover {
            color: #fff !important;
        }
        .k-grid-content {
            height: auto !important;
        }
        .k-link k-state-selected {
            padding-top: 17px !important;
        }
       .k-pager-numbers {
            padding-top: 17px !important;
        }
        .k-window-content #sidebar .k-edit-label {
            margin-left: -50px;
        }
        .k-window-content .k-edit-form-container {
            width: inherit;
        }
        .k-grid-Details, .k-grid-Details:hover, .k-grid-Delete, .k-grid-Delete:hover {
            background-color: #fff;
        }
        .k-window-titlebar {
            background-color: #007BFF;
            color: white;
        }
    </style>
    <style>
        .auction-wrapper {
            color: #fff;
        }
        .auctiontop {
            margin-bottom: 10px;
            display: flex;
        }
        .topblock, .topblock1, .topblock2 {
            display: inline-block;
            width: 33%;
            margin-bottom:20px;
            background-color: #fff;
            color: #000;
            text-align: center;
            border-radius: 10px;
            border: 4px solid #007BFF;
        }
        .topblock1 {
            border: 4px solid #77BD27;
            margin-left:2px;
        }
        .topblock2 {
            border: 4px solid #F4AF00;
            margin-left: 32px;
        }
        .topblock {
            border: 4px solid #007BFF;
            margin-left: 32px;
        }
        .lastmonthtitle {
            margin-bottom: 5px;
            font-weight: bold;
        }
        .topblocktitle1 {
            margin-bottom: 20px;
            background-color: #007BFF;
            color: white;
            text-transform: uppercase;
            font-weight: bold;
        }
        .topblocktitle2 {
            margin-bottom: 20px;
            background-color: #77BD27;
            color: white;
            text-transform: uppercase;
            font-weight: bold;
      }
        .topblocktitle3 {
            margin-bottom: 20px;
            background-color: #F4AF00;
            color: white;
            text-transform: uppercase;
            font-weight: bold;
        }
        .startedcount, .startedvalue {
            display: inline-block;
        }
        .startedcount {
            margin-left: 5px !important;
        }
        .startedvalue {
            margin-right: 5px !important;
        }
            .startedcount > span, .startedvalue > span {
                display: block;
                text-transform: uppercase;
            }
        .topblock-top {
            margin-top: 20px;
        }
        .topblock-bottom {
            border-top: 1px solid grey;
        }
        .activelastmonthdate {
            margin-top: 50px;
        }
        .bgClosed {
            background-color: #00B855 !important;
        }
        .bgOpen {
            background-color: #3288B7 !important;
        }
        .bgEvaluate {
            background-color: #B87033 !important;
        }
        .allprojectbids {
            display: inline-block;
            color: #fff;
            margin-right: 10px;
        }
        .Upcoming {
            background-color: #007BFF;
            border-color: white !important;
            border-width: 2px !important;
            color: white;
            font-weight: bold !important;
            text-transform: uppercase !important;
        }
        .Active {
            background-color: #77BD27;
            border-color: white !important;
            border-width: 2px !important;
            color: white;
            font-weight: bold !important;
            text-transform:uppercase !important;
        }
        .closed {
            background-color: #F4AF00;
            border-color: white !important;
            border-width: 2px !important;
            color: white;
            font-weight: bold !important;
            text-transform: uppercase !important;
        }
        .k-icon .k-i-filter-clear {
            color: #007bff !important;
        }
        .bids-search {
            margin-left: 25%;
            margin-bottom: 10px;
        }
           .bids-search .labelchart {
                display: inline-block;
            }
        .k-filtercell {
            border: 1px solid #007BFF;
        }
        .cntSize {
            font-size: 2.5rem;
        }
        .k-i-filter-clear {
            color: #007bff !important;
        }
    </style>
    <script>
        function onDataBound() {
            var grid = this;
            grid.tbody.find('tr').each(function () {
                var dataItem = grid.dataItem(this);
                $(this).addClass('bg' + dataItem.BidStatusName);
            })
        }
        function onBidsGridRead(e) {
        }
    </script>
</section>
<!-- Main content -->
<section class="content" style="min-width:100% !important;">
    <div class="auction-wrapper">
        <div class="auctiontop">
           <div class="topblock1" onclick="ActiveCounts()">
                <div class="topblockborder">
                    <div class="topblocktitle2">Active</div>
                    <div class="startedcount pull-left"> <span id="ActiveBidsCount" class="cntSize">@Model.ActiveBidsCount</span></div>
                    <div class="startedvalue pull-right"><span id="ActiveBidsValue" class="cntSize">@Model.ActiveBidsValue.ToString("c")</span></div>
                </div>
            </div>
            <div class="topblock2" onclick="CompletedCounts()">
                <div class="topblockborder">
                    <div class="topblocktitle3">Completed</div>
                    <div>
                        <div class="startedcount pull-left"> <span id="AwardedBidsThisMonthCount" class="cntSize">@Model.AwardedBidsThisMonthCount</span></div>
                        <div class="startedvalue pull-right"><span id="AwardedBidsThisMonthValue" class="cntSize"> @Model.AwardedBidsThisMonthValue.ToString("c")</span></div>
                    </div>
                </div>
            </div>
            <div class="topblock" onclick="UpcomingCounts()">
                <div class="topblockborder">
                    <div class="topblocktitle1">Upcoming</div>
                    <div>
                        <div class="startedcount pull-left"> <span id="ProjectsStartedThisMonthCount" class="cntSize">@Model.ProjectsStartedThisMonthCount</span></div>
                        <div class="startedvalue pull-right"> <span id="ProjectsStartedThisMonthValue" class="cntSize">@Model.ProjectsStartedThisMonthValue.ToString("c")</span></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="auction-bottom">
            @(Html.Kendo().Grid<WellAI.Advisor.Model.OperatingCompany.Models.AuctionProposalViewModel>
    ()
    .Name("auctions")
    .HtmlAttributes(new { @class = "ra-section" })
    .Columns(columns =>
    {
    columns.Bound(p => p.ProposalId).ClientTemplate("<a href='" + @Url.Action("AddUpdateAuctionsProposalDetail", "ProjectAuctions", new { id = "#=ProposalId#" }) + "' class='linkstyle'>#=AuctionNumber#</a>").Title("Id").Width(100).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains).ShowOperators(false))).Hidden(true);
    columns.Bound(p => p.AuctionBidStatusName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains).ShowOperators(false))).Width(100);
    columns.Bound(p => p.Bids).Title("BIDS").Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false))).Width(60);
    columns.Bound(p => p.JobId).Title("SERVICE").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains).ShowOperators(false))).Width(250).Hidden(false);
    columns.Bound(p => p.MaxBidsValue).Title("HIGHESTBID").Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false))).Width(60);
    columns.Bound(p => p.MinBidsValue).Title("LOWESTBID").Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false))).Width(60);
    columns.Bound(p => p.Depth).Title("Depth").Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false))).Width(70).Hidden(false);
    columns.Bound(p => p.ProjectDuration).Title("HOURS").Format("{0:0.0} Hours").Width(80).Filterable(false);
    columns.Bound(p => p.RigName).Title("RIG").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains).ShowOperators(false))).Width(120);
    columns.Bound(p=> p.WellName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains).ShowOperators(false))).Width(200);
    columns.Bound(p => p.AuctionEnd).Format("{0:MM/dd/yyyy}").Width(100).Filterable(ftb => ftb.Cell(cell => cell.Operator("gte").ShowOperators(false))).Hidden(true);
    columns.Bound(p => p.ProjectStart).Format("{0:MM/dd/yyyy}").Width(80).Title("DATE").Filterable(ftb => ftb.Cell(cell => cell.Operator("eq").ShowOperators(false))).Width(100);
    columns.Bound(p => p.ModifyDate).Format("{0:MM/dd/yyyy}").Width(100).Title("DATE").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte").ShowOperators(false))).Hidden(true);
    })
    .Sortable(s => s.Enabled(true))
    .ToolBar(toolbar => toolbar.Create().Text("Add Proposal Request"))
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AddAuction").Window(w => w.Title("Add Proposal Request").Width(1000)))
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .Selectable()
    .Pageable(p =>
    p.Info(true)
    .Numeric(false)
    .PreviousNext(false)
    )
    .Scrollable(scrollable => scrollable.Virtual(true))
    .DataSource(dataSource => dataSource.Ajax()
    .Model(model => model.Id(p => p.ProposalId))
    .Create(update => update.Action("AddUpdateAuctionsProposal", "ProjectAuctions"))
    .Read(read => read.Action("GetBidsDataGridAction", "ProjectAuctions").Data("onBidsGridRead"))
    .PageSize(10)
    .Sort(sort => {
    sort.Add("AuctionBidStatusOrder").Ascending();
    sort.Add("ModifyDate").Descending();
    })
    )
    .Events(e =>
    {
    e.DataBound("onDataBound");
    e.Save("OnSaveGrid");
    e.Change("Grid_OnRowSelect");
    })
    )
</div>
    </div>
</section>
@(Html.Kendo().Window().Name("Creates")
    .Title("Add Proposal Request")
    .Visible(false)
    .Modal(true)
    .Actions(actions => actions
        .Close()
    )
    .Draggable(true)
    .Width(1000)
)
<script>
    $(document).ready(function () {
        setInterval(CountsRefresh, 60000);
        RefreshGrid();

        //var startDate = $("#startDate").data("kendoDateTimePicker");
        ////startDate.min(new Date(2021, 11, 18, 11, 0, 0));
        //var stDate = new Date();
        //startDate.value(stDate);
        
       

    });
 
    function StartChange() {
        var ProjectstartDate = $("#ProjectStartDate").data("kendoDateTimePicker").value();
        var ProjectEndDate = $("#AuctionEnd").data("kendoDateTimePicker");
        ProjectEndDate.value(ProjectstartDate);
        ProjectEndDate.min(ProjectstartDate);
    }

    function OnFilter(e) {
        if (e.field === "ProjectStartDate")
        {
            if (e.filter)
            {
                var FilterValue = formatDate(new Date(e.filter.filters[0].value));
                var grid = $("#auctions").data("kendoGrid");
                var dataSource = grid.dataSource;
               //$.each(dataSource._data, function (index, value) {
                    dataSource.filter(
                        {
                            logic: "and",
                            filters: [
                                { field: "ProjectStartDate", operator: "eq", value: e.filter.filters[0].value }
                            ]
                        });
                //});

            } else {
                grid.dataSource.filters([]);
            }
        }
    }  

    function CountsRefresh() {
        $.ajax({
            url: '/ProjectAuctions/Counts',
            type: 'GET',
            success: function (ResponseData) {
                document.getElementById('ActiveBidsCount').innerHTML = ResponseData.ActiveBidsCount;
                document.getElementById('ActiveBidsValue').innerHTML = ResponseData.ActiveBidsValue == 0 ? "$" + 0.00 : "$" + ResponseData.ActiveBidsValue;
                document.getElementById('AwardedBidsThisMonthCount').innerHTML = ResponseData.AwardedBidsThisMonthCount;
                document.getElementById('AwardedBidsThisMonthValue').innerHTML = ResponseData.AwardedBidsThisMonthValue == 0 ? "$" +  0.00 : "$" + ResponseData.AwardedBidsThisMonthValue;
                document.getElementById('ProjectsStartedThisMonthCount').innerHTML = ResponseData.ProjectsStartedThisMonthCount;
                document.getElementById('ProjectsStartedThisMonthValue').innerHTML = ResponseData.ProjectsStartedThisMonthValue == 0 ? "$" + 0.00 : "$" + ResponseData.ProjectsStartedThisMonthValue;
            }
        });
    }
    function RefreshGrid() {
        var IntTime = 300000;
        setInterval(function () {
            $("#auctions").data("kendoGrid").dataSource.read();
        }, IntTime);
    }

    function GetServiceTenantNames() {
        return {
            ServiceCategoryId: $("#ServiceCategoryId").val()
        };
    }
    //row click event
    var selectedRow = null;
    function Grid_OnRowSelect(e) {
        var row = this.select();
        if (row.length > 0) {
            selectedRow = e.sender.select();
            var item = e.sender.dataItem(selectedRow);
            var id = item.ProposalId;
            window.location = '/ProjectAuctions/AddUpdateAuctionsProposalDetail?id=' + id;
        }
    }
    function funFilterStatusList(values) {
        if (!!values) {
            var grid = $("#auctions").data("kendoGrid");
            var dataSource = grid.dataSource;
            dataSource.filter(
                {
                    logic: "and",
                    filters: [
                        { field: "AuctionBidStatusName", operator: "eq", value: values }
                    ]
                });
        }
    }
    function RigCheckChange(e) {
        var RigCookies = getCookie("wellfilterlayout");
        if (RigCookies != "00000000-0000-0000-0000-000000000000") {
            var DropdownLIst = $("#RigId").data("kendoDropDownList");
            DropdownLIst.select(0);
            DropdownLIst.trigger("change");
        }
    }
    function UpcomingCounts() {
        funFilterStatusList("Upcoming");
    }
    function ActiveCounts() {
        funFilterStatusList("Active");
    }
    function CompletedCounts() {
        funFilterStatusList("Completed");
    }
    function OnSaveGrid(e) {
        setTimeout(function () {
            $('#auctions').data('kendoGrid').dataSource.read().then(function () {
                $('#auctions').data('kendoGrid').refresh();
            });
        },1500);
        window.location.reload();
    }
   $(function () {
        var grid = $("#auctions").data("kendoGrid");
        var dataSource = grid.dataSource;
        if (sessionStorage.getItem("AwardedBids") === 'Completed') {
            dataSource.filter(
                {
                    logic: "and",
                    filters: [
                        { field: "AuctionBidStatusName", operator: "eq", value: "Completed" }
                    ]
                });
        } else if (sessionStorage.getItem("OpenBids") === 'Active') {
            dataSource.filter(
                {
                    logic: "and",
                    filters: [
                        { field: "AuctionBidStatusName", operator: "eq", value: "Active" }
                    ]
                });
        }
        else {
            dataSource.filter({});
        }
        sessionStorage.clear();
    });
    var counter = 1;
    function templateFunction(units) {
        switch (units) {
            case "Active":
                return "Active";
            case "Upcoming":
                return "Upcoming";
            case "Completed":
                return "closed";
        }
    }
    function onDataBound(e) {
        counter = 1;
        var columns = e.sender.columns;
        var columnIndex = this.wrapper.find(".k-grid-header [data-field=" + "AuctionBidStatusName" + "]").index();
        var rows = e.sender.tbody.children();
        for (var j = 0; j < rows.length; j++) {
            var row = $(rows[j]);
            var dataItem = e.sender.dataItem(row);
            var units = dataItem.get("AuctionBidStatusName");
            var cell = row.children().eq(columnIndex);
            cell.addClass(templateFunction(units));
        }
    }
    function renderNumber(data) {
        return counter++;
    }
    function onChange(e) {
        var orders = $("#AuctionBidStatusId").data("kendoDropDownList");
        $("#AuctionBidStatusName").val(orders._oldText);
    }
    function onWellName(e) {
        var dataItem = this.dataItem(e.item.index());
        $("#ServiceCategoryName").val(dataItem.ParentName).trigger("change");
    }
    function onRigName(e) {
        var dataItem = this.dataItem(e.item.index());
        $("#ServiceCategoryName").val(dataItem.ParentName).trigger("change");
    }
    function filterTaskByWell() {
        return {
            wellId: $("#WellId").val()
        };
    }
    function FilterByRig() {
        return {
            RigId: $("#RigId").val()
        };
    }
    function FilterServices() {
        return {
            ServiceCategoryId: $("#ServiceCategoryId").val(), wellId: $("#WellId").val()
        };
    }

    function firstDateChange() {
        //alert('Cjange event calls');
        var startDate = this.value();
        var start = $("#ProjectStartDate").data("kendoDateTimePicker");
        //var endDate = end;
        if (startDate) {
            //alert('Cjange event calls 1 ');
            startDate = new Date(startDate);
            startDate.setDate(startDate.getDate());
            start.value(new Date(startDate));
            start.min(startDate);

            var end = $("#AuctionEnd").data("kendoDateTimePicker");
            var endCalcDate = new Date(startDate);//kendo.date.addHours(new Date(startDate), 1);
            end.value(endCalcDate);
            end.min(endCalcDate);
        }
    }

    function startChange() {
        var end = $("#AuctionEnd").data("kendoDateTimePicker");
        var projectStartDate = $("#ProjectStartDate").data("kendoDateTimePicker");
        var startDate = this.value();
        var endDate = end;
        if (startDate) {
            startDate = new Date(startDate);
            //startDate.setDate(startDate.getDate());
            end.value(new Date(startDate));
            end.min(startDate);
            //projectStartDate.value(new Date(startDate));
            //projectStartDate.min(startDate);
        } else if (endDate) {
            //start.max(new Date(endDate));
        } else {
            endDate = new Date();
            //start.max(endDate);
            end.min(endDate);
        }
    }
    function endChange() {
        var start = $("#AuctionStart").data("kendoDatePicker");
        var projectStartDate = $("#ProjectStartDate").data("kendoDatePicker");
        var endDate = this.value();
        var startDate = start;
        if (endDate) {
            endDate = new Date(endDate);
            endDate.setDate(endDate.getDate());
            start.max(endDate);
        } else if (startDate) {
            end.min(new Date(startDate));
        } else {
            endDate = new Date();
            start.max(endDate);
            end.min(endDate);
        }
        //alert('endChange calls');
        //projectStartDate.value(new Date(endDate));
        //projectStartDate.min(endDate);
    }
    function onChengeckb() {
        if ($("#IsPrivate").is(':checked')) {
            $('#srvTenantDivId').show();
            $("#SRVTenantId").prop('required', 'true');
        } else {
            $('#srvTenantDivId').hide();
            $("#SRVTenantId").removeAttr('required');
        }
    }
</script>