@model WellAI.Advisor.Model.OperatingCompany.Models.ActiveDrillPlanModel
@{
    ViewData["Title0"] = "Drill Plan";
    ViewData["Title"] = "Drilling Operations Time Forecast";
    var StageList = (List<WellAI.Advisor.DLL.Entity.Stage>)ViewBag.Stage;
}
<script src="~/js/OperatingCompany/ActiveDrillPlan.js"></script>
<section class="content">
    <div class="row">
        <div class="col-md-12">
            <div class="blockstyle" id="Drillplan">
                <div class="small-box box-shad">
                    <div class="inner">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="k-edit-label">
                                    @Html.LabelFor(model => model.DrillingPlanId, "Drilling Plan")
                                </div>
                                <div class="k-edit-field">
                                    @(Html.Kendo().DropDownListFor(m => m.DrillingPlanId)
                                     .DataValueField("DrillPlanId")
                                     .DataTextField("DrillPlanName")
                                     //.OptionLabel("Select DrillPlan .....")
                                     .BindTo((System.Collections.IEnumerable)ViewBag.Drillingplanlist)
                                     .Events(e => e.Change("OnDrillPlanChange").DataBound("OnDrillplanDataBound").Select("OnPlanSelect"))
                                     .HtmlAttributes(new {style = "width:100%" })
                                    )
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="k-edit-label">
                                    @Html.LabelFor(model => model.PlanStartDate, "Plan Start Date")
                                </div>
                                <div class="k-edit-field">
                                    @(Html.Kendo().DateTimePickerFor(m => m.PlanStartDate)
                                      .Format("MM/dd/yyyy HH:mm")
                                      .TimeFormat("HH:mm")
                                      .HtmlAttributes(new { style = "width: 100%", id = "PlanStartDate" })
                                      )
                                </div>
                            </div>
                            <div class="col-2">
                                <div class="Labelfield" style="width:35% !important;">
                                    @Html.LabelFor(model => model.Predictable, "Predict")
                                </div>
                                <div class="Textfield" style="width:43% !important;">
                                    @(Html.Kendo().SwitchFor(m => m.Predictable).Events(e => e.Change("OnPredictionChange")))
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="blockstyle" id="TaskChart">
                <div class="small-box box-shad">
                    <div class="inner">
                        <div class="row">
                            <div class="col-md-12">
                                <h5 id="WellName" class="text-center"></h5>
                                <button id="btnclose" onclick="CloseChart()" class="btn btn-primary pull-right">Close</button>
                            </div>
                            <div class="col-md-6">
                                <div id="TaskComparisonChart"></div>
                            </div>
                            <div class="col-md-6">
                                <div id="StageComparisonChart"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
        </div>
        <div class="col-md-4">
            <div id="appendto" class="demo-section-1 k-content"></div>
            <span id="toastNotification"></span>
        </div>
        <div class="col-md-4">
        </div>
    </div>
    <div class="row" id="Tab">
        <div class="col-md-12 demo-section k-content" style="padding:0px !important;">
            @(Html.Kendo().TabStrip()
                     .Name("DrillPlanTabStrip")
                     .Animation(animation =>
                     animation.Open(effect =>
                     effect.Fade(FadeDirection.In)))
                     .SelectedIndex(0)
                     .Events(events => events
                     .Select("onDrillPlanTabStripSelect"))
            .Items(tabstrip =>
            {

            tabstrip.Add();

            }))
        </div>
    </div>

</section>
<style>
    .demo-section-1 {
        text-align: center;
        line-height: 4em;
    }

        .demo-section-1 .k-button {
            width: 250px;
        }
</style>

<div style="display:none" id="callEventScheduler">
    <section class="content col-12">
        @(Html.Kendo().Scheduler<WellAI.Advisor.Model.OperatingCompany.Models.ActivityViewModel>()
    .Name("scheduler")
    .Date(DateTime.Now)
    .Height(700)
    .Events(e =>
    {
       // e.Edit("scheduler_add");
    })
    .MinorTickCount(1)
    .Views(views =>
    {
        views.DayView();
        views.WeekView();
        views.MonthView(month =>
        {
            month.Selected(true);
            month.EventsPerDay(4);
            month.AdaptiveSlotHeight(true);
            month.EventSpacing(5);
            month.EventHeight(60);
        });
        views.AgendaView();
    })
    .DataSource(dataSource => dataSource
    .Model(m =>
    {
        m.Id(f => f.ProjectId);
        m.Field(f=>f.Title).DefaultValue("No title");
        m.Field(f=>f.ProjectStatus).DefaultValue(1);
        m.Field(f=>f.ProjectStatusName);
        m.Field(f=>f.Description).DefaultValue("No Description");
        m.Field(f=>f.Start);
        m.Field(f=>f.End);
        m.Field(f=>f.RecurrenceID);
        m.Field(f=>f.RecurrenceRule);
        m.Field(f=>f.RecurrenceException);
        m.Field(f=>f.IsAllDay);
        m.Field(f=>f.StartTimezone);
        m.Field(f=>f.EndTimezone);
    })
    .Create("Create", "ActivityView")
    )
    )
        @(Html.Kendo().Window().Name("Call")
        .Title("Calling...")
        .Visible(false)
        .Content(@<text><div id="wndCall">Calling....</div></text>)
       .Events(ev => ev.Close("onCallWindowClose"))
    .Modal(true)
    .Draggable(true)
    .Width(300)
    )
    </section>
</div>

<script id="templateddl" type="text/kendo-tmpl">
     @(Html.Kendo().DropDownList()
        .Name("Employee")
        .DataValueField("EmployeeId")
        .DataTextField("EmployeeName")
        .BindTo((System.Collections.IEnumerable)ViewData["employeeList"])
        .ToClientTemplate()
)
</script>

@(Html.Kendo().Window().Name("newRequestsWindow")
    .Title("Add Proposal Request")
    .Visible(false)
    .Modal(true)
    .Content(@<text><div id="wndContent">Loading...</div></text>)
    .Actions(actions => actions
        .Close()
    )
    .Draggable(true)
    .Width(1200)
)


<script id="vendortemplateddl" type="text/kendo-tmpl">
    @(Html.Kendo().DropDownList()
        .Name("myDropDown")
        .DataValueField("VendorId")
        .DataTextField("VendorName")
        .BindTo((System.Collections.IEnumerable)ViewData["vendores"])
       .ToClientTemplate()
    )
</script>

<style type="text/css">
    /* .k-button-icontext {
        background-color: #007bff;
    }*/
    #newtaks:hover {
        color: white !important;
    }

    .k-tabstrip-items .k-item {
        color: unset !important;
    }

    .inner > label {
        color: #000;
        display: block;
        text-align: left;
    }

    .inner {
        color: #000;
        font-size: 14px;
    }

    .blockstyle {
        border-radius: 5px;
        min-height: 60px !important;
        height: auto;
        width: 100%;
        min-width: 130px;
        display: inline-block;
        margin: 10px 0px 0 0px;
        background-color: #fff;
        border: 4px solid #007AFC;
        position: relative;
        justify-content: space-between;
    }

    .k-grid-content {
        height: 320px !important;
    }

    .k-dropdown .k-dropdown-wrap, .k-dropdowntree .k-dropdown-wrap {
        border-color: #011627;
        color: black !important;
        background-color: white !important;
        transition: color 0.2s ease, background-color 0.2s ease, border-color 0.2s ease, box-shadow 0.2s ease;
    }

    #divStage {
        margin: 7px;
    }

    #stage {
        width: 150px;
        /* margin: 18px;
            height: 50% !important;*/
    }

    .k-grid-edit, .k-grid-delete {
        background-color: white !important;
    }

    .k-tabstrip {
        border-radius: 5px;
        border-width: 5px !important;
        border-style: solid !important;
        border-color: #007BFF !important;
        color: white !important;
        background-color: #011627 !important;
        display: -ms-flexbox;
        display: flex;
        -ms-flex-direction: column;
        flex-direction: column;
    }

    .k-tabstrip-items .k-item.k-state-active, .k-tabstrip-items .k-item.k-state-selected {
        background-color: #007BFF !important;
        color: white;
    }

    .k-tabstrip-items {
        color: white !important;
    }

    #Tab, #Drillplan {
        padding-left: 15px;
        padding-right: 15px;
        margin-top: 10px;
    }

    #PlanList .k-grid-content {
        height: 400px !important;
    }

    #PlanList {
        margin: 10px !important;
        width: 100% !important;
    }

    #PlanList1 .k-grid-content {
        height: 200px !important;
    }

    #PlanList1 {
        margin: 10px !important;
        width: 100% !important;
    }

    .content {
        padding-left: 15px;
        padding-right: 15px;
    }

    .k-grid thead, .k-grid tbody, .k-grid tfoot {
        text-align: left;
        border-color: #007BFF !important;
        border-style: solid;
    }

    .group-header-column {
        text-align: center;
    }

    #AddButton, #btnSave, #btnSaveplan, #RealTimeReport {
        width: auto;
        margin-left: 10px;
    }

    #divsave {
    }

    .k-switch-off .k-switch-container {
        background-color: silver !important;
    }

    .Labelfield {
        padding: calc(0.5rem - 1px) 0;
        width: 46%;
        line-height: 1.5;
        text-align: left;
        float: left;
        clear: both;
    }

    .Textfield {
        margin: 0 0 1rem 0;
        width: 50%;
        float: right;
        clear: right;
    }

    .Labelfield1 {
        width: 15%;
        line-height: 1.5;
        text-align: left;
        float: left;
        clear: both;
    }

    .Textfield1 {
        margin: 0 0 1rem 0;
        width: 50%;
        float: right;
        clear: right;
    }

    .label1 {
        width: 7%;
        line-height: 1.5;
        text-align: left;
        float: left;
        clear: both;
        padding: calc(0.5rem - 1px) 0;
    }

    .text1 {
        margin: 0 0px 1rem 0;
        width: 91%;
        float: right;
        clear: right;
    }

    #wellname {
        min-width: 200px;
        width: auto;
    }

    .k-multiselect, .k-dropdowntree {
        min-width: 100%;
        width: auto !important;
        height: auto;
        max-height: 80px;
        overflow-y: scroll;
    }

    .k-textbox {
        width: 100%;
    }

    .k-i-filter-clear {
        color: #007bff !important;
    }

    .k-window {
        border-radius: 5px !important;
    }

    .k-window-titlebar {
        background-color: #007BFF;
        color: white;
    }

    .k-grid-header .k-header > .k-link {
        text-transform: uppercase;
        font-weight: 900 !important;
        font-size: 12px !important;
    }

    .k-grid-Details, .k-grid-Details:hover, .k-grid-Delete, .k-grid-Delete:hover {
        background-color: #fff;
    }

    .k-grid-edit, .k-grid-Delete, .k-grid-Details {
        border-radius: 10px;
    }

    .k-link k-state-selected {
        padding-top: 17px !important;
    }

    .k-pager-numbers {
        padding-top: 17px !important;
    }

    .k-grid .k-grid-add:hover {
        color: #fff !important;
    }

    .k-window-content #sidebar .k-edit-label {
        margin-left: -50px;
    }

    /*.k-grid-content {
        height: auto !important;
    }*/

    .k-window-content .k-edit-form-container {
        width: inherit;
    }

    .blockstyle {
        border-radius: 5px;
        min-height: 116px;
        height: auto;
        width: 100%;
        min-width: 130px;
        display: inline-block;
        margin: 10px 0px 0 0px;
        background-color: #fff;
        border: 4px solid #007AFC;
        position: relative;
        justify-content: space-between;
    }

    .toptitle {
        color: #fff;
    }

    .inner > label {
        color: #000;
        display: block;
        text-align: left;
    }

    .inner {
        color: #000;
        font-size: 14px;
    }

    .small-box {
        box-shadow: none;
    }

    .k-switch {
        width: 50px !important;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #367fa9;
        border-radius: 5px !important;
        font-weight: bold !important;
        min-width: 117px;
        width: auto !important;
        margin-left: 10px !important;
    }

    #DrillingPlanList {
        margin-top: 15px;
    }

    .k-grid-edit {
        background-color: white !important;
    }

    #topblocks {
        padding-right: 0px;
    }

    #atglanceinput {
        padding-top: 9px !important;
    }

    .k-grid-header .k-header {
        position: relative;
        vertical-align: bottom;
        cursor: default;
        text-align: center !important;
    }

    .k-tabstrip-top > .k-tabstrip-items .k-item.k-state-hover,
    .k-tabstrip-top > .k-tabstrip-items .k-item.k-state-active {
        border-color: white !important;
        border-width: 1px !important;
    }

    .k-content {
        background-color: unset;
    }

    .k-grid-down, .k-grid-up {
        background-color: white;
    }

        .k-grid-down:hover {
            background-color: white;
        }

        .k-grid-up:hover {
            background-color: white;
        }

    #plantitle {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    }

    #tabstrip-1 {
        overflow-x: hidden;
    }

    .ActiveStagebtn, .ActiveStagebtn:hover {
        background-color: #42ab27;
        border-color: #42ab27 !important;
    }

    .CloseTab {
        margin-left: 10px;
    }

    #TaskComparisonChart, #StageComparisonChart {
        margin-left: 20px !important;
    }
</style>
<script type="text/javascript">
    var IsPlanDetailsChanged = false;
    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip();
    });

    $(document).ready(function () {
        //debugger;
        //remove tab
        if (sessionStorage.getItem("DrillPlanId") != null) {
            //var tabStrip = $("#DrictivenTabStrip").kendoTabStrip().data("kendoTabStrip");
            //    tabStrip.remove(tabStrip.tabGroup.children());
            var DrillPlanId = sessionStorage.getItem("DrillPlanId");
            $("#DrillingPlanId").data("kendoDropDownList").value(DrillPlanId);
            //$("#DrillingPlanId").data("kendoDropDownList").trigger("change")
        }

        var tabsTrip = $("#DrillPlanTabStrip").data("kendoTabStrip");
        var Stagebtn = document.getElementsByClassName("Stagebtn");
        var tabsTrip = $("#DrillPlanTabStrip").data("kendoTabStrip");
        var Stagebtn = document.getElementsByClassName("Stagebtn");
        $(document).on('click', '.Stagebtn', function () {
            //debugger;
            let IsActive = false;
            let stageValue = [];
            var Stage = document.getElementsByClassName("ActiveStagebtn");
            var id = $(this).attr('id');
            var className = $(this).attr('class');
            var stageBtnText = $(this).attr('innerText');
            var stageId = id.split(";")[0];
            var wellId = id.split(";")[1];

            var ClassList = className.split(" ");
            ClassList.forEach(function (val) {
                if (val == "ActiveStagebtn") {
                    IsActive = true;
                }
            });


             if (stageId == "ShowAllTasks") {
                   for (var i = 0; Stagebtn.length > i; i++) {
                        if (Stagebtn[i].innerHTML !== "Show All Tasks") {
                            Stagebtn[i].className = Stagebtn[i].className.replace(" ActiveStagebtn", "");
                        }
                        if (Stagebtn[i].innerHTML == "Show All Tasks") {
                            Stagebtn[i].className += " ActiveStagebtn";
                        }
                    }
                 $(this).addClass('ActiveStagebtn');
                 for (var i = 0; Stage.length > i; i++) {
                     stageValue.push(Stage[i].innerHTML);
                 }
                 StageFilter(stageValue, wellId);
                 return;
            }

            if (IsActive == true)
            {
                if (stageId !== "ShowAllTasks") {
                    $(this).removeClass('ActiveStagebtn');
                }


            } else {
                $(this).addClass('ActiveStagebtn');
            }

            for (var i = 0; Stage.length > i; i++) {
                stageValue.push(Stage[i].innerHTML);
            }

            if (Stage.length > 1) {
                for (var i = 0; Stagebtn.length > i; i++) {
                    if (Stagebtn[i].innerHTML == "Show All Tasks") {
                        Stagebtn[i].className = Stagebtn[i].className.replace(" ActiveStagebtn", "");
                    }
                }
            } else if (Stage.length  == 0){
                for (var i = 0; Stagebtn.length > i; i++) {
                    if (Stagebtn[i].innerHTML == "Show All Tasks") {
                        Stagebtn[i].className += " ActiveStagebtn";
                    }
                }
            }

            StageFilter(stageValue, wellId);




            //    for (var i = 1; Stagebtn.length > ; i++) {
            //        if (Stagebtn[i].id == id) {
            //            var current = document.getElementsByClassName("ActiveStagebtn");
            //            if (current.length > 0) {
            //                current[0].className = current[0].className.replace(" ActiveStagebtn", "");
            //            }
            //            var curbtn = document.getElementById(id);
            //            curbtn.className += " ActiveStagebtn";
            //            break;
            //        }
            //    }
        });


        var tabsTrip = $("#DrillPlanTabStrip").data("kendoTabStrip");
        tabsTrip.tabGroup.on("click", "[data-type='remove']", function (e) {
            var item = $(e.target).closest(".k-item");
            tabsTrip.remove(item.index());
            var items = tabsTrip.items();
            tabsTrip.select(items.length - 1);
        });

        sessionStorage.clear();
    });



    function scheduler_add(e) {
        $('.k-window-title').text("Schedule Task");
    }

    function showCallWindow(phone) {
        console.log("Calling : " + phone);
        $("#wndCall").empty();
        $("#wndCall").text("Calling....");
        var wnd = $("#Call").data("kendoWindow");
        wnd.content();
        wnd.center().open();
        $('#wndCall').load('/Communication/ManageCall/', { phone: phone }, function (response, status, xhr) {
            if (status == "error") {
                try {
                    var msge = $.parseJSON(response);
                } catch (e) {
                }
            }
        });
    }
    function OnPredictionChange(e) {
        const Prediction = this.value();
        const PlanId = $("#DrillingPlanId").val();

        $.ajax({
            url: "/ActiveDrillPlan/PlanPrediction?PlanId=" + PlanId + "&Prediction=" + Prediction,
            type: "POST",
            dataType: "json",
            contentType: "application/json; chartset=uft-8",
            async: false,
            success: function (response) {

            }
        });
    }

    function OnPlanSelect(e) {
        var tabstrip = $("#DrillPlanTabStrip").data("kendoTabStrip");
        var items = tabstrip.items();
        var i = 0;
        for (i; items.length >= i; i++) {
            tabstrip.remove(tabstrip.tabGroup.children());
        }
    }

    function OnTabSelect() {
        document.getElementById("TaskChart").style.display = "none";
    }

    function OnDrillPlanChange(e) {
        var DrillPlanId = this.dataItem().DrillPlanId;
        document.getElementById("TaskChart").style.display = "none";

   Filter = [];
    $.ajax({
        url: "/ActiveDrillPlan/GetDrillPlanWells?DrillPlanId=" + DrillPlanId,
        type: "GET",
        dataType: "json",
        contentType: "application/json; chartset=uft-8",
        async: false,
        success: function(response) {
            if (response.wellList) {
                //var tabStrip = $("#DrillPlanTabStrip").kendoTabStrip().data("kendoTabStrip");
                //tabStrip.remove(tabStrip.tabGroup.children());
                const wells = [];
                wells.push(response.wellList);
                if (wells.length > 0) {
                    wells[0].forEach(function (well) {
                        var tabstrip = $("#DrillPlanTabStrip").data("kendoTabStrip");
                        tabstrip.append({
                            text: well.wellName + " " + "<button data-type='remove' class='k-button k-button-icon CloseTab'><span class='k-icon k-i-close'></span></button>",
                            encoded: false,
                            animation: { open: { effects: "fadeIn" } },
                            contentUrl: "@Url.Content("/ActiveDrillPlan/DrillPlanTabContent")" + "?wellId=" + well.wellId + "&drillPlanId=" + DrillPlanId
                        });


                        var items = tabstrip.items();
                        for (var i = 0; items.length > i; i++) {
                            if (items[i].innerText === "") {
                                tabstrip.remove(i);
                            }
                            tabstrip.select(items.length - 1);
                        }
                        //$("#Tab").show();
                    });
                } else {
                    $("#Tab").hide();
                }
            }

            if (response.PlanData) {
                var PlanStartDate = $("#PlanStartDate").data("kendoDateTimePicker")
                PlanStartDate.value(response.PlanData.PlanStartDate);
                //$("#PlanStartDate").data("kendoDateTimePicker").value(PlanData.PlanStartDate);
               //$("#Predictable").val(response.PlanData.Predictable);
                $("#Predictable").data("kendoSwitch").value(response.PlanData.Predictable);
                //$("#Predictable").data("kendoSwitch").trigger("change");
            }
        },
        error: function (err) {

        }
    });
   }

    function ImportChanges(drillPlanWellId, tenantId, wellId) {
        kendo.confirm("Do you want to import the changes from Tasks Master ?")
            .done(function () {
                var drillingPlanId = $("#DrillingPlanId").val();
                ImportTasksAndOverWriteChanges(drillPlanWellId, drillingPlanId, tenantId, wellId);
            })
            .fail(function () {
                return false;
            });
    }

    function ImportTasksAndOverWriteChanges(drillPlanWellId, drillingPlanId, tenantId, wellId) {
        kendo.ui.progress($("#progessbardiv"), true); //Here progess bar will intiate
        $.ajax({
            url: "/ActiveDrillPlan/ImportTaskChanges?wellId=" + drillPlanWellId + "&drillPlanId=" + drillingPlanId,
            type: "POST",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response.result.toString() == "1") {
                    planalert("Changes importing done", "Information");
                    $('#PlanList_' + wellId).data('kendoGrid').dataSource.read().then(function () {
                        $('#PlanList_' + wellId).data('kendoGrid').refresh();
                    });
                    setTimeout(function () {
                        var drillingPlanId = $("#DrillingPlanId").val();
                        SaveActiveDrillPlanDetails(wellId, tenantId, false);
                    }, 6000);
                    kendo.ui.progress($("#progessbardiv"), false);
                }
                else if (response.result == 0) {
                    planalert("No changes to import", "Information");
                }
            },
            error: function (xhr, status, error) {
                planalert(xhr.responseText, "Error");
            },
            complete: function () {
                kendo.ui.progress($("#progessbardiv"), false); //close the progress bar
            }
        });
    }
    function SaveActiveDrillPlanDetails(wellId, tenantId, stageUpdate) {
        $("form").submit(function (e) {
            e.preventDefault();
        });

        $.when(ClearFilter(wellId)).done(function (x) {
            IsPlanDetailsChanged = false;
            kendo.ui.progress($("#progessbardiv"), true); //Here progess bar will intiate
            var planJSON = "";
            var PlanId = $("#DrillingPlanId").val();

            //url: "/ActiveDrillPlan/SaveAndUpadeteActiveDrilPlanTasks",
            //url: "/ActiveDrillPlan/RecalculatePlan",
            $.when(planJSON = DrillPlanDetails(wellId, tenantId, stageUpdate)).done(function (x) {
                //planalert(planJSON, "planJSON");
                var staticNotification = $("#toastNotification").kendoNotification({
                    appendTo: "#appendto"
                }).data("kendoNotification");

                staticNotification.show("Save and Recalculation is processing", "info");
                var container = $(staticNotification.options.appendTo);
                container.scrollTop(container[0].scrollHeight);

                //kendo.confirm("Save and Recalculation is processing")
                    //.done(function () {
                        $.ajax({
                            url: "/ActiveDrillPlan/RecalculatePlan",
                            type: "POST",
                            data: planJSON,
                            dataType: "json",
                            contentType: "application/json; charset=utf-8",
                            success: function (response) {
                                console.log("response :" + response);
                                if (response.resultMessage === "Success") {

                                    //planalert("Save and Recalculation done", "Information");

                                    var staticNotification = $("#toastNotification").kendoNotification({
                                        appendTo: "#appendto"
                                    }).data("kendoNotification");

                                    staticNotification.show("Save and Recalculation done", "info");
                                    var container = $(staticNotification.options.appendTo);
                                    container.scrollTop(container[0].scrollHeight);

                                    GetRepeatChangingTasks(PlanId, wellId);
                                    setTimeout(function () {
                                        $('#PlanList_' + wellId).data('kendoGrid').dataSource.read().then(function () {
                                            $('#PlanList_' + wellId).data('kendoGrid').refresh();
                                        });
                                    }, 6000);
                                }
                            },
                            error: function (xhr, status, error) {
                                //var err = eval("(" + xhr.responseText + ")");
                                //planalert(xhr.responseText, "Error");
                            },
                            complete: function () {
                                kendo.ui.progress($("#progessbardiv"), false); //close the progress bar
                            }
                        });
                    //})
            });
        });
    }

    function SaveDrillPlanStage(wellId, tenantId, stageUpdate) {
        $("form").submit(function (e) {
            e.preventDefault();
        });
        IsPlanDetailsChanged = false;
        kendo.ui.progress($("#progessbardiv"), true); //Here progess bar will intiate
        var planJSON = "";
        var PlanId = $("#DrillingPlanId").val();

        //url: "/ActiveDrillPlan/SaveAndUpadeteActiveDrilPlanTasks",
        //url: "/ActiveDrillPlan/RecalculatePlan",
        $.when(planJSON = DrillPlanDetails(wellId, tenantId, stageUpdate)).done(function (x) {
                    $.ajax({
                        url: "/ActiveDrillPlan/SaveAndUpadeteActiveDrilPlanTasks",
                        type: "POST",
                        data: planJSON,
                        dataType: "json",
                        async: false,
                        contentType: "application/json; charset=utf-8",
                        success: function (response) {
                            console.log("response :" + response);
                            if (response.resultMessage === "Success") {
                                //planalert("Save and Recalculation done", "Information");
                                //GetRepeatChangingTasks(PlanId, wellId);
                                setTimeout(function () {
                                    $('#PlanList_' + wellId).data('kendoGrid').dataSource.read().then(function () {
                                        $('#PlanList_' + wellId).data('kendoGrid').refresh();
                                    });
                                }, 2000);
                            }
                        },
                        error: function (xhr, status, error) {
                            //var err = eval("(" + xhr.responseText + ")");
                            planalert(xhr.responseText, "Error");
                        },
                        complete: function () {
                            kendo.ui.progress($("#progessbardiv"), false); //close the progress bar
                        }
                    });
            });
    }

    function GetRepeatChangingTasks(PlanId, wellId) {
        if (PlanId != null && PlanId !== "") {
            $.ajax({
                url: "/ActiveDrillPlan/GetRepeatChangingTasks?PlanId=" + PlanId,
                type: "GET",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                async: false,
                success: function (data) {
                    console.log(data);
                    if (data.length > 0) {
                        var Tasks = JSON.stringify(data);
                        kendo.confirm(data.length + " Tasks are edited. Do you want to update edits to CheckList Master ?", "Information")
                            .done(function () {
                                $.ajax({
                                    url: "/ActiveDrillPlan/AddMasterToList",
                                    type: "POST",
                                    data: Tasks,
                                    dataType: "json",
                                    contentType: "application/json; charset=utf-8",
                                    async: false,
                                    success: function (data) {
                                        $('#PlanList_' + wellId).data('kendoGrid').dataSource.read().then(function () {
                                            $('#PlanList_' + wellId).data('kendoGrid').refresh();
                                        });
                                    }
                                });
                            });
                    }
                }
            });
        }
    }


    // Alert
    function planalert(content, alerttitle) {
        $("<div></div>").kendoAlert({
            title: alerttitle,
            id: "planalert",
            content: content,
            innerWidth: "200px"
        }).data("kendoAlert").open();
    }

    function GetDate(DateValue) {
        var os = DateValue.getTimezoneOffset();
        newDate = new Date(DateValue.getTime() - os * 60 * 1000);
        return newDate.toJSON();
    }

    function DrillPlanDetails(wellId, tenantId, stageUpdate) {
        var WellId = wellId;
        var DrillingPlanId = $("#DrillingPlanId").val();
        var planStartDate = $("#PlanStartDate").data("kendoDateTimePicker").value();
        var rigRealese = $("#RigRelease_" + wellId).data("kendoDateTimePicker").value();
        var LastBOPTest = $("#LastBOPTest_" + wellId).data("kendoDatePicker").value();
        var PlannedTD = $("#PlannedTD_" + wellId).val();
        var SPUDWell = $("#SPUDWell_" + wellId).data("kendoDateTimePicker").value();
        var NextBOPTest = $("#NextBOPTest_" + wellId).data("kendoDatePicker").value();
        var RigId = $("#RigId").val();
        var grid = $('#PlanList_' + wellId).data('kendoGrid');
        var tasks = grid.dataSource._data;

        var Details = {
            DrillingPlanId: DrillingPlanId,
            PlanStartDate: planStartDate,
            RigRealese: rigRealese != null ? GetDate(rigRealese) : null,
            SpudWell: SPUDWell != null ? GetDate(SPUDWell) : null,
            LastBopTest: LastBOPTest != null ? GetDate(LastBOPTest) : null,
            NextBopTest: NextBOPTest != null ? GetDate(NextBOPTest) : null,
            PlannedTD: PlannedTD,
            RigId: RigId,
            WellId: WellId,
            drillPlanTasks: TasksList(tasks),
            DeleteTasks: DeleteTasks(wellId),
            TenantId: tenantId,
            isStageUpdate: stageUpdate == true ? true : false
        };

        var DetailsJson = JSON.stringify(Details);

        //console.log('DetailsJson' + DetailsJson);
        return DetailsJson;
    }

    function TasksList(tasks) {

        var TasksList = [];

        var TaskIndex = 0;
        tasks.forEach(function (value) {
            TaskIndex += 1

            var Task = {
                TaskId: value.TaskId,
                TaskName: value.TaskName,
                IsBiddable: value.IsBiddable,
                OperationHours: value.OperationHours,
                EmployeeId: value.EmployeeId,
                Vendor: value.Vendor,
                PlanFinishedDate: value.PlanFinishedDate == null ? null: GetDate(value.PlanFinishedDate),
                ActualPlanStart: value.ActualPlanStart == null ? null : GetDate(value.ActualPlanStart),
                ActualPlanFinishedDate: value.ActualPlanFinishedDate == null ? null : GetDate(value.ActualPlanFinishedDate),
                commands: value.commands,
                Serviceoperator: value.Vendor,
                ServiceCategoryId: value.ServiceCategoryId,
                Depth: value.Depth,
                Description: value.Description,
                IsSpecialServices: value.IsSpecialServices,
                SeletedDependency: value.SeletedDependency,
                ServiceDuration: value.ServiceDuration,
                StageType: value.StageType,
                LeadTime: value.LeadTime,
                Day: value.Day,
                IsActive: value.IsActive,
                ServiceDurationDays: value.ServiceDurationDays,
                ServiceDurationHours: value.ServiceDurationHours,
                ServiceDurationMinutes: value.ServiceDurationMinutes,
                PlanStart: value.PlanStart == null ? null : GetDate(value.PlanStart),
                IsPlanTask: value.IsPlanTask,
                ScheduleTime: value.ScheduleTime == null ? "00:00" : value.ScheduleTime,
                Dependency: value.Dependency,
                TaskOrder: TaskIndex,
                existingTaskOrder: value.TaskOrder,
                IsPreSpud: value.IsPreSpud,
                IsBenchMark: value.IsBenchMark,
                ExportToMaster: value.ExportToMaster
            }

            TasksList.push(Task);
        });

        console.log('TasksList :' + TasksList);
        return TasksList;
    }


    function DeleteTasks(wellId) {
        const tasks = [];
        deletedTasks.forEach(function (value) {
            if (value.wellId == wellId) {
                tasks.push(value.taskId);
            }
        });

        return tasks;
    }

    let deletedTasks = [];

    function customDelete(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        console.log('dataItem.TaskId' + dataItem.TaskId);
        var wellId = sessionStorage.getItem("wellId");
        kendo.confirm("Are you sure you want to delete this item?")
            .done(function () {
                IsPlanUpdate = true;
                $.ajax({
                    url: "/ActiveDrillPlan/TaksValidation?taskId=" + dataItem.TaskId,
                    type: "GET",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    async: false,
                    success: function (data) {
                        //if (data.isTasksExisted > 0) {
                        //    planalert("This Task " + "<b>" + dataItem.TaskName + "</b>" + " is being used in Bids. ", "Information");
                        //} else {
                            IsPlanDetailsChanged = true;
                            deletedTasks.push({ taskId: dataItem.TaskId, wellId: wellId });
                            var dataSource = $("#PlanList_" + wellId).data("kendoGrid").dataSource;
                            dataSource.remove(dataItem);
                            setTimeout(function () {
                                dataSource.sync();
                                //$("#PlanList_" + wellId).data('kendoGrid').dataSource.read().then(function () {
                                //    $("#PlanList_" + wellId).data('kendoGrid').refresh();
                                //});
                            },5000);
                        //}
                    }
                });
            })
            .fail(function () {
                return false;
            });
    }

    function OnDrillplanDataBound(e) {
        //var DrillingPlanId = $("#DrillingPlanId").data("kendoDropDownList").value();
        setTimeout(function () {
            $("#DrillingPlanId").data("kendoDropDownList").trigger("change");
        },1000);
    }


    var isLoadedStage = [];
    var Filter = [];
    var IsPlanUpdate = false;
    var previousHighlightedRow;
    function PlanEditCancel(e) {
        var wellId = sessionStorage.getItem("wellId");
        $("#PlanList_" + wellId).data("kendoGrid").refresh();
        //grid.refresh();
        //$("#GridName").data("kendoGrid").refresh();
    }
    function RowIndexChange() {
        console.log('CurrentRowIndex change');
    }

    function OnPlanGridChange(e) {
        //alert('row click');
        //debugger;
        var currentRowIndex=0;
        var grid = this;
        var wellId = sessionStorage.getItem("wellId");
        var grid = $("#PlanList_" + wellId).data("kendoGrid");

        //var grid = $("#Grid").data("kendoGrid");
        //var row = this.select().closest("tr");
        //var rowIdx = $("tr", grid.tbody).index(row);
        //var colIdx = this.select().index();
        //ex = $(this).closest("tr").index();
        //alert('currentRowIndex' + currentRowIndex);
        $("#CurrentRowIndex").val(this.select().index());
        //$("#CurrentRowIndex").trigger("RowIndexChange");
        //Cookies.set('DrillPlanCurrentRowIndex', this.select().index());

        //grid.tbody.find("tr[role='row']").each(function () {
        //    var model = grid.dataItem(this);
        //});

    }
    function PlanDataBound(e) {
        //console.log("Cancel log");
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var model = grid.dataItem(this);
        });



        //$(grid.tbody).on("click", "td", function (e) {
        //    var row = $(this).closest("tr");
        //    var rowIdx = $("tr", grid.tbody).index(row);
        //    var colIdx = $("td", row).index(this);
        //    //alert(rowIdx + '-' + colIdx);
        //});

        //const grid = $("#grid").data("kendoGrid");
        //$(grid.tbody).on("click", "tr", function (e) {
            
        //    //const rowData = grid.dataItem(this);
        //    //const URL = startInfo.ApplicationRoot + "SomeDetailPage?SomeId=" + rowData.get("SomeId");
        //    //window.open(URL, '_blank');
        //    //currentSelection = grid.select();
        //    //selectedRows = [];
           
        //    //currentSelection.each(function () {
        //    //    var currentRowIndex = $(this).closest("tr").index();
        //    //    //if (selectedRows.indexOf(currentRowIndex) == -1) {
        //    //        //selectedRows.push(currentRowIndex);
        //    //    //}
        //    //})
        //});

        grid.element.off('dblclick');
        grid.element.on('dblclick', 'tbody tr[data-uid]', function (e) {
            var model = grid.dataItem(this);
            grid.editRow($(e.target).closest('tr'));
        });

        grid.tbody.find('>tr').each(function () {
            var dataItem = grid.dataItem(this);

            if (dataItem.ActualPlanFinishedDate !== null && dataItem.ActualPlanFinishedDate != undefined) {
                $(this).css('background', '#B3F5B3');
            }
            if (dataItem.IsRowModified == true) {
                $(this).css('background', '#FFC04C');
            }
        })

        var wellId = e.sender._cellId.split("_")[1];
        var data = grid.dataSource.data();
        var Stages = [];
        var unique = [];

        if (Filter.length > 0) {
            var status = 0;

            Filter.forEach(function (value) {
                if (value.wellid == wellId && value.IsFilter == true) {
                    status = 1;
                }
            });

            if (status !== 1) {
                Filter.push({ wellid: wellId, IsFilter: true });
                for (let i = 0; i < data.length; i++) {
                    if (!unique[data[i].StageTypeName]) {
                        Stages.push({ StageTypeName: data[i].StageTypeName, StageType: data[i].StageType });
                        unique[data[i].StageTypeName] = 1;
                    }
                }

                Stages.sort(function (a, b) {
                    var nameA = a.StageTypeName;
                    var nameB = b.StageTypeName;
                    if (nameA < nameB) {
                        return -1;
                    }
                    if (nameA > nameB) {
                        return 1;
                    }
                    return 0;
                });

                Stages.sort().forEach(function (value) {
                    if (value.StageType != null && value.StageTypeName != null) {
                        console.log('value.StageType' + value.StageType);
                        $('#divStage_' + wellId).append("<button id='" + value.StageTypeName + ";" + wellId + "'  class='btn btn-primary Stagebtn'>" + value.StageTypeName + "</button>");
                    }
                });
            }
            else if (IsPlanUpdate == true) {
                $('#divStage_' + wellId).empty();
                for (let i = 0; i < data.length; i++) {
                    if (!unique[data[i].StageTypeName]) {
                        Stages.push({ StageTypeName: data[i].StageTypeName, StageType: data[i].StageType });
                        unique[data[i].StageTypeName] = 1;
                    }
                }
                Stages.sort(function (a, b) {
                    var nameA = a.StageTypeName;
                    var nameB = b.StageTypeName;
                    if (nameA < nameB) {
                        return -1;
                    }
                    if (nameA > nameB) {
                        return 1;
                    }
                    return 0;
                });
                Stages.forEach(function (value) {
                    if (value.StageType != null && value.StageTypeName != null) {
                        console.log('value.StageType' + value.StageType);
                        $('#divStage_' + wellId).append("<button id='" + value.StageTypeName + ";" + wellId + "'  class='btn btn-primary Stagebtn'>" + value.StageTypeName + "</button>");
                    }
                });
                IsPlanUpdate = false;
            }
        }
        else {
            Filter.push({ wellid: wellId, IsFilter: true });

            for (let i = 0; i < data.length; i++) {
                if (!unique[data[i].StageTypeName]) {
                    Stages.push({ StageTypeName: data[i].StageTypeName, StageType: data[i].StageType });
                    unique[data[i].StageTypeName] = 1;
                }
            }

            Stages.sort(function (a, b) {
                var nameA = a.StageTypeName;
                var nameB = b.StageTypeName;
                if (nameA < nameB) {
                    return -1;
                }
                if (nameA > nameB) {
                    return 1;
                }
                return 0;
            });

            Stages.forEach(function (value) {
                if (value.StageType != null && value.StageTypeName != null) {
                    //var id = value.StageTypeName + ";" + wellId;
                    //for (var i = 0; Stagebtn.length > 0; i++) {
                    //    if (Stagebtn[i].id !== id) {
                    $('#divStage_' + wellId).append("<button id='" + value.StageTypeName + ";" + wellId + "'  class='btn btn-primary Stagebtn'>" + value.StageTypeName + "</button>");
                    //    }
                    //}
                }
            });
        }


        $('.k-grid-content tbody').off('mouseup');
        $('.k-grid-content tbody').on('mouseup', 'tr', function () {
            if (previousHighlightedRow != undefined) {
                previousHighlightedRow.removeClass("highlightTR");
            }
            $(this).addClass("highlightTR");
            previousHighlightedRow = $(this);
        });

    }
    var curIndx = 0;


    function ClearFilter(wellId) {
        setTimeout(function () {
            var grid = $("#PlanList_" + wellId).data("kendoGrid");
            var dataSource = grid.dataSource;
            dataSource.filter({});

            var tenantid = sessionStorage.getItem("tenantId");
            var isStageFilterEnabled = false;
            var Stagebtn = document.getElementsByClassName("ActiveStagebtn");
            for (var i = 0; Stagebtn.length > i; i++) {
                if (Stagebtn[i].innerHTML !== "Show All Tasks") {
                    Stagebtn[i].className = Stagebtn[i].className.replace(" ActiveStagebtn", "");
                    isStageFilterEnabled = true;
                }
                if (Stagebtn[i].innerHTML == "Show All Tasks") {
                    Stagebtn[i].className += " ActiveStagebtn";
                }
            }
            if (isStageFilterEnabled) {
                SaveDrillPlanStage(wellId, tenantid, true);
            }
        }, 6000);
    }
    function StageFilter(values, wellId) {
        var tenantid = sessionStorage.getItem("tenantId");
        SaveDrillPlanStage(wellId, tenantid, true);
        Filter.push({ wellid: wellId, IsFilter: true });
        var grid = $("#PlanList_" + wellId).data("kendoGrid");
        var dataSource = grid.dataSource;
        //if (value !== "ShowAllTasks") {
        //    dataSource.filter(
        //        {
        //            logic: "and",
        //            filters: [
        //                { field: "StageTypeName", operator: "eq", value: value }
        //            ]
        //        });
        //} else {
        //    dataSource.filter({});
        //}

        var filter = { logic: "or", filters: [] };
        //var values = this.value();
        $.each(values, function (i, val) {
            if (val !== "Show All Tasks") {
                filter.filters.push({
                    field: "StageTypeName", operator: "eq", value: val
                });
            }
            else
            {
                dataSource.filter({});
            }
        });

        dataSource.filter(filter);
    }

    function LoadTasksByStage(stageId, wellId) {
        Filter.push({ wellid: wellId, IsFilter: true });
        var DrillingPlanId = $("#DrillingPlanId").val();
        var GridObject = $("#PlanList_" + wellId).data("kendoGrid");
        var Url = "/ActiveDrillPlan/DrillingPlanDetail_Read?wellId=" + wellId + "&drillPlanId=" + DrillingPlanId + "&StageId=" + stageId;
        GridObject.dataSource.transport.options.read.url = Url;
        GridObject.dataSource.read();
    }

    function OnPlanSaveChanges(e) {        
        console.log('wellId ' + sessionStorage.getItem("wellId"))

        //alert('Well');
        var wellId = sessionStorage.getItem("wellId");
        var grid = $("#PlanList_" + wellId).data("kendoGrid");


        var dataRows = grid.items();
       
        var rowIndex = 0;
        var tr = null;

       
       /* console.log(grid.select().length)*/

        if (grid.select().length > 1) {
            rowIndex = dataRows.index(grid.select());
            console.log(rowIndex)

            tr = grid.select().closest("tr");

            //console.log(tr)

            //console.log(tr.className)
           /* var taskData = grid.dataSource.data();*/

            //var nextTaskItem = taskData[rowIndex + 1];

            
            var previousTaskItem = grid.dataItem("tbody tr:eq(" + parseInt(rowIndex == 0 ? 0 : rowIndex - 1) + ")");
            var nextTaskItem = grid.dataItem("tbody tr:eq(" + parseInt(rowIndex + 1) + ")");

            console.log(nextTaskItem);

            //console.log('e.model.ActualPlanStart ' + e.model.ActualPlanStart);       
            //Validation for Next item's ActualPlanStart with Current item's ActualPlanFinishedDate
            //if next item's ActualPlanStart is empty fill the Current item's ActualPlanFinishedDate
            //if next item's ActualPlanStart is not empty thorow an alert and fill or skip the update of ActualPlanFinishedDate
            //var nextPlanDateEmpty = true;

            if (previousTaskItem.PlanStart != undefined) {
                    //console.log('Next Task ActualStart not set');
                e.model.PlanStart = previousTaskItem.PlanStart;
            }

            if (e.model.ActualPlanFinishedDate != undefined) {
                if (nextTaskItem.ActualPlanStart == undefined || nextTaskItem.ActualPlanStart == 'null') {
                    //var dataItem = grid.dataSource.get(rowIndex + 1);
                    //dataItem.ActualPlanStart = e.model.ActualPlanStart;
                    console.log('Next Task ActualStart set start');
                    //nextTaskItem.ActualStart = e.model.ActualPlanFinishedDate; //grid.dataItem("tbody tr:eq(5)")
                    nextTaskItem.set("ActualPlanStart", e.model.ActualPlanFinishedDate);
                    nextTaskItem.set("IsRowModified", true);
                    console.log('Next Task ActualStart set completed');
                } else {
                    console.log('Next Task ActualStart availalbe');
                    kendo.confirm("Actual Start Date for Next Task '" + nextTaskItem.TaskName + "' is already Set! Do you want to overwrite ?")
                        .done(function () {
                            //nextTaskItem.set("ActualPlanStart", e.model.ActualPlanFinishedDate);
                            nextTaskItem.set("IsRowModified", true);
                        })
                        .fail(function () {
                            console.log('Next Task ActualStart not set');
                        });
                }
            } else {
                if (nextTaskItem.ActualPlanStart == undefined || nextTaskItem.ActualPlanStart == 'null') {
                    //var dataItem = grid.dataSource.get(rowIndex + 1);
                    //dataItem.ActualPlanStart = e.model.ActualPlanStart;
                    //console.log('Next Task ActualStart set start');
                    //nextTaskItem.ActualStart = e.model.ActualPlanFinishedDate; //grid.dataItem("tbody tr:eq(5)")
                    //nextTaskItem.set("ActualPlanStart", null);
                    //nextTaskItem.set("IsRowModified", true);
                    //console.log('Next Task ActualStart set completed');
                } else {
                    console.log('Next Task ActualStart availalbe');
                    kendo.confirm("Actual Start Date for Next Task '" + nextTaskItem.TaskName + "' is already Set! Do you want to overwrite ?")
                        .done(function () {
                            nextTaskItem.set("ActualPlanStart", null);
                            nextTaskItem.set("IsRowModified", true);
                        })
                        .fail(function () {
                            console.log('Next Task ActualStart not set');
                        });
                }
                                
            }           
        }
        else {

        }
        

        

        IsPlanUpdate = true;
        IsPlanDetailsChanged = true;
        const Hours = CalculateDays(e.model.ServiceDurationDays == "" ? "00" : e.model.ServiceDurationDays, e.model.ServiceDurationHours == "" ? "00" : e.model.ServiceDurationHours, e.model.ServiceDurationMinutes == "" ? "00" : e.model.ServiceDurationMinutes);
        $("#OperationDays").data("kendoMaskedTextBox").value(Math.round(Hours / 24, 2));
        $("#OperationDays").data("kendoMaskedTextBox").trigger("change");

        $("#OperationHours").data("kendoMaskedTextBox").value(Hours);
        $("#OperationHours").data("kendoMaskedTextBox").trigger("change");

        $("#StageTypeName").data("kendoMaskedTextBox").value($("#StageType").data("kendoMultiColumnComboBox").text());
        $("#StageTypeName").data("kendoMaskedTextBox").trigger("change");

        $("#AccumulatedDays").data("kendoMaskedTextBox").value(Math.round(Hours / 24, 2));
        $("#AccumulatedDays").data("kendoMaskedTextBox").trigger("change");

        $("#CategoryName").data("kendoMaskedTextBox").value(e.model.CategoryName);
        $("#CategoryName").data("kendoMaskedTextBox").trigger("change");

        //call moveup function to set the row position
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataItem = grid.dataSource.at(parseInt(grid.dataSource.total()) - 1);

        

        //var currentIndex = $("#CurrentRowIndex").val();
        if (e.model.isNew() && grid.select().length > 1) {
            if (rowIndex != (grid.dataSource.total()) - 1) {
                moveByRows(grid, dataItem, parseInt(grid.dataSource.total()) - rowIndex);
            } else {
                //planalert("Ple")
            }
        }
        
        
        //if (currentIndex != undefined) {
        //    for (i = 0; i <= (parseInt(grid.dataSource.total()) - currentIndex); i++) {
        //        //moveRow(grid, dataItem, -1);
        //    }            
        //}               
    }


    //function CalculateDays(days, hours, minutes) {
    //    var calDays = days != 00 ? days * 24 : 00;
    //    var calMinutes = minutes != 00 ? ((minutes / 100) * 60) / 100 : 00;
    //    var result = (parseInt(calDays) + parseInt(hours) + parseFloat(calMinutes));
    //    return result;
    //}
    function CalculateDays(days, hours, minutes) {
        var calDays = days != 00 ? days * 24 : 00;
        var calMinutes = (minutes / 100.00);
        var result = parseFloat(calDays) + parseFloat(hours) + parseFloat(calMinutes);
        return result;
    }

    function getDisplayHours(data) {
        var colValue = data;
        if (colValue != "" && colValue !== 0) {
            var hoursArray = colValue.toString().split(".");
            var result = hoursArray[0].toString() + ".";
            var minutes = "";
            if (hoursArray.length == 1) {
                minutes = "00";
            } else {
                minutes = hoursArray[1].toString();
                if (minutes == "3" || minutes == "0") {
                    minutes = minutes.toString() + "0";
                }
            }

            minutes = minutes.toString() == "15" ? "25" : minutes == "30" ? "50" : minutes == "45" ? "75" : "00";
            return hoursArray[0].toString() + "." + minutes.toString();
        }

        return "00.00";
    }
    //Handle IsPlanDetailsChanged
    function OnRigReleaseDateChange() {
        IsPlanDetailsChanged = true;
    }
    function OnLastBopTestDateChange(e) {
        var LastBop = this.value();
        IsPlanDetailsChanged = true;
        if (LastBop != null && LastBop != "") {
            $.ajax({
                url: "/ActiveDrillPlan/GetNextBopValue?wellId=" + sessionStorage.getItem("wellId"),
                type: "GET",
                dataType: "json",
                contentType: "application/json; chartset=uft-8",
                async: false,
                success: function (data) {
                    var dateNextBOP = $("#NextBOPTest_" + sessionStorage.getItem("wellId")).data("kendoDatePicker");
                    if (data.templateDetails != undefined || data.templateDetails != null) {
                        if (data.templateDetails.BopFrequency != undefined || data.templateDetails.BopFrequency != null) {
                            var date = new Date(LastBop);
                            var days = parseInt(data.templateDetails.BopFrequency);
                            date.setDate(date.getDate() + days);
                            dateNextBOP.value(date);
                        }
                    }
                }
            });
        }
        else {
            var dateNextBOP = $("#NextBOPTest_" + sessionStorage.getItem("wellId")).data("kendoDatePicker");
            dateNextBOP.value(null);
        }
    }
    // Alert
    function planalert(content, alerttitle) {
        $("<div></div>").kendoAlert({
            title: alerttitle,
            id: "planalert",
            content: content,
            innerWidth: "200px"
        }).data("kendoAlert").open();
    }

    function onPlannedTDTextChange() {
        IsPlanDetailsChanged = true;
    }
    function OnSPUDWellDateChange() {
        IsPlanDetailsChanged = true;
    }
    function OnNextBOPTestDateChange() {
        IsPlanDetailsChanged = true;
    }

    function onDrillPlanTabStripSelect(e) {

        if (IsPlanDetailsChanged == true) {

            e.preventDefault();
            kendo.confirm("Unsaved Changes! Do you want to save the changes ?")
                .done(function () {
                    $(".btnSave").click();
                    IsPlanDetailsChanged = false;
                })
                .fail(function () {
                    kendo.alert("You can select another Well now", "Information");
                    IsPlanDetailsChanged = false;
                });
        }
    }

</script>


