@model WellAI.Advisor.Model.OperatingCompany.Models.ProjectViewModel
@{
    ViewData["Title0"] = "Services";
    ViewData["Title"] = "Project Details";
    var TechnicineName = (List<WellAI.Advisor.Model.Identity.WellIdentityUser>)ViewData["TechName"];
}
<style>
    .k-grid-header .k-header > .k-link {
        text-transform: uppercase;
        font-weight: 900 !important;
        font-size: 12px !important;
    }
    #PdfFile {
        width: auto !important;
    }

    .k-pager-wrap.k-pager-lg .k-pager-numbers li:not(.k-current-page), .k-pager-wrap.k-pager-md .k-pager-numbers li:not(.k-current-page), .k-pager-wrap.k-pager-sm .k-pager-numbers li:not(.k-current-page) {
        display: block !important;
    }

    .k-pager-wrap.k-pager-lg .k-pager-nav + .k-pager-numbers-wrap, .k-pager-wrap.k-pager-md .k-pager-nav + .k-pager-numbers-wrap, .k-pager-wrap.k-pager-sm .k-pager-nav + .k-pager-numbers-wrap {
        width: unset !important;
        height: calc(1*(2px + 0.75rem + 1.5em));
        box-sizing: border-box;
        border-color: inherit;
        margin: 0 0.375rem;
    }

    .k-editor {
        border-color: black !important;
    }

    .k-grid-content {
        height: auto !important;
    }

    .k-pager-wrap.k-pager-lg .k-pager-numbers .k-link,
    .k-pager-wrap.k-pager-lg .k-pager-numbers .k-state-selected, .k-pager-wrap.k-pager-md .k-pager-numbers .k-link,
    .k-pager-wrap.k-pager-md .k-pager-numbers .k-state-selected, .k-pager-wrap.k-pager-sm .k-pager-numbers .k-link,
    .k-pager-wrap.k-pager-sm .k-pager-numbers .k-state-selected {
        margin: 0;
        border-width: 0;
        width: unset !important;
        height: unset !important;
    }

    .k-pager-numbers {
        display: contents !important;
    }

    div.k-loading-mask {
        z-index: 3; /* must be larger than the z-index:2 of #container */
    }

    .k-link k-state-selected {
        padding-top: 20px !important;
    }

    .content {
        margin: 10px;
        border: 4px solid #007bff;
        border-radius: 10px;
        background-color: white !important;
        color: black !important;
        padding-top: 0px;
    }

    .row {
    }

    .k-edit-form-container {
        width: 100%;
        min-width: 100%;
        border-color: inherit;
        position: relative;
    }

    .k-dateinput, .k-datepicker, .k-datetimepicker, .k-timepicker {
        width: 16.4em;
    }

    .k-dropdown, .k-dropdowntree {
        width: 14.4em;
    }

        .k-dropdown .k-dropdown-wrap .k-input {
            background-color: #fff !important;
            color: #000 !important;
        }

    .k-grid-Download, .k-grid-Download:hover {
        background-color: white;
        color: black;
    }

    .k-button:hover {
        border-color: #ffff;
        color: black;
        background-color: #ffff;
    }

    .k-upload-button:hover {
        border-color: #ffff;
        color: black;
        background-color: #ffff;
    }

    .k-upload .k-dropzone {
        border-color: #ffff !important;
        color: black !important;
        background-color: #ffff !important;
    }

    .k-button.k-upload-button {
        background-color: white;
        border-color: white;
        color: black;
    }

    a.k-button.k-button-icontext.k-grid-Delete, .k-grid-Details, .k-grid-Tracker:hover, .k-grid-NoteDetails:hover {
        background-color: white;
        color: black;
    }

    a.k-button.k-button-icontext.k-grid-Delete, .k-grid-Details, .k-grid-Tracker, .k-grid-NoteDetails {
        background-color: white;
        color: black;
    }

    .hideButtom {
        display: none !important;
    }

    .k-window-titlebar {
        background-color: #007BFF;
        color: white;
        padding-top: 5px;
        margin-top: 0px;
        height: 35px;
    }

    .k-pager-numbers {
        margin-bottom: 0px;
    }

    .empty-grid::before {
        padding: 1em;
        line-height: 3em;
        content: "No records found";
        color: #fff;
    }

    .k-grid-content {
        height: auto !important;
    }

    .linkstyle:hover {
        text-decoration: underline !important;
    }
</style>
<section class="content-header">
    <script>
        $(document).ready(function () {
            var initWellId = "@Model.WellId";
            var ddlWells = $("#filterwellslayout").data("kendoDropDownList");
            ddlWells.value(initWellId);
            ddlWells.enable(false);
        });
        function startChange() {
            var start = $("#AuctionStart").data("kendoDateTimePicker");
            var end = $("#AuctionEnd").data("kendoDateTimePicker");
            var startDate = start.value();
            var endDate = end.value();
            if (startDate) {
                startDate = new Date(startDate);
                startDate.setDate(startDate.getDate());
                end.min(startDate);
            } else if (endDate) {
                start.max(new Date(endDate));
            } else {
                endDate = new Date();
                start.max(endDate);
                end.min(endDate);
            }
        }
        function endChange() {
            var start = $("#AuctionStart").data("kendoDateTimePicker");
            var end = $("#AuctionEnd").data("kendoDateTimePicker");
            var endDate = end.value();
            var startDate = start.value();
            if (endDate) {
                endDate = new Date(endDate);
                endDate.setDate(endDate.getDate());
                start.max(endDate);
            } else if (startDate) {
                end.min(new Date(startDate));
            } else {
                endDate = new Date();
                start.max(endDate);
                end.min(endDate);
            }
        }
        function onChange(e) {
            var orders = $("#AuctionBidStatusId").data("kendoDropDownList");
            $("#AuctionBidStatusName").val(orders._oldText);
        }
    </script>
    <section class="content">
        @using (Html.BeginForm("UpdateUpcommingProjectDetails", "UpcomingProjects", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.HiddenFor(model => model.ProposalId)
            <input type="hidden" id="hdnTitle" value="@Model.RigName - @Model.WellName:@Model.Job" />
            <div class="row k-window-titlebar">
                <h5 class="col-md-12" style=" text-align: left"> @Model.RigName- @Model.WellName : @Model.Job</h5>
            </div>
            <hr />
            <div class="row">
                <div class="col-sm-9">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.Job)
                                </div>
                                <div class="col-sm-8">
                                    @Html.DisplayFor(model => model.Job)
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.DateAwared,"Date Awarded")
                                </div>
                                <div class="col-sm-8">
                                    @Html.DisplayFor(model => model.DateAwared)
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.OperatorCompanyName)
                                </div>
                                <div class="col-sm-8">
                                    @Html.DisplayFor(model => model.OperatorCompanyName)
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.WellName)
                                    @Html.HiddenFor(model => model.WellId)
                                </div>
                                <div class="col-sm-8">
                                    @Html.DisplayFor(model => model.WellName)
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.OperatorUserName)
                                </div>
                                <div class="col-sm-8">
                                    @Html.DisplayFor(model => model.OperatorUserName)
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.OperatorMobile)
                                </div>
                                <div class="col-sm-8">
                                    @Html.DisplayFor(m => m.OperatorMobile)
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-sm-2">
                            @Html.LabelFor(model => model.ProjectStatus)
                        </div>
                        <div class="col-sm-5">
                            @Html.HiddenFor(x => x.ProjectId)
                            @Html.HiddenFor(x => x.WellName)
                            @Html.HiddenFor(x => x.Job)
                            @Html.HiddenFor(x => x.RigName)
                            @{
                                if (Model.ProjectStatus == 0 /*|| Model.ProjectStatus == 1 */|| Model.ProjectStatus == 3)
                                {
                                    <input type="submit" class="btn btn-success btn-sm" name="btnSubmit" value="Start" />
                                }
                                if (Model.ProjectStatus != 2 && Model.ProjectStatus != 0)
                                {
                                    <input type="submit" class="btn btn-primary btn-sm" name="btnSubmit" value="Close" />
                                }
                                if (Model.ProjectStatus != 0 && Model.ProjectStatus != 2 && Model.ProjectStatus != 3)
                                {
                                    <input type="submit" class="btn btn-warning btn-sm" name="btnSubmit" value="Suspend" />
                                }
                                if (Model.ProjectStatus == 2)
                                {
                                    <label>Closed</label>
                                }
                            }
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.ExpectedStartDate)
                                </div>
                                <div class="col-sm-8">
                                    @Html.DisplayFor(model => model.ExpectedStartDate)
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.ExpectedEndDate)
                                </div>
                                <div class="col-sm-8">
                                    @Html.DisplayFor(model => model.ExpectedEndDate)
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.ActualStartDate)
                                </div>
                                <div class="col-sm-8">
                                    @Html.DisplayFor(model => model.ActualStartDate)
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.ActualEndDate)
                                </div>
                                <div class="col-sm-8">
                                    @Html.DisplayFor(model => model.ActualEndDate)
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    @*<div class="col-12" style="display:none;">
                        <div class="refreshBtnContainer" style="text-align:right;display:none;">
                            <button type="button" class="k-button" onclick="openCheckList();">Open CheckList</button>
                        </div>
                    </div>*@
                    @*<hr />*@
                    <div class="row" style="margin-left:0px;margin-right:0px;">
                        <div @*class="form-group"*@>
                            @(Html.Kendo().EditorFor(model => model.Description)
                                   .Encoded(false)
                                   .Resizable(resizable => resizable.Content(false).Toolbar(true))
                                   .HtmlAttributes(new { style = "min-height:250px", required = "required", id = "descripteditor" })
                                   .Tools(tools => tools.Clear().Bold()
                                   .Italic().Underline().FontName()
                                   .SubScript().SuperScript().InsertImage()))
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="row">
                        <div class="col-sm-12">
                            <details>
                                <summary>Drill Programs</summary>
                                <p>
                                    @(Html.Kendo().Grid<WellAI.Advisor.Model.OperatingCompany.Models.UploadsGridFileModel>()
                                            .Name("drillprog")
                                            .HtmlAttributes(new { @class = "ra-section" })
                                            .Columns(columns =>
                                            {
                                                columns.Bound(p => p.FileName).Width(60).Title("Program").ClientTemplate("<a href='" + @Url.Action("Download", "Upload", new { fileId = "#=FileId#" }) + "' class='linkstyle'>#=FileName#</a>");
                                                columns.Bound(p => p.Date).Format("{0: MM/dd/yyyy}").Width(40);
                                            })
                                             .Pageable(p =>
                                                p.Info(true)
                                                 .Numeric(false)
                                                 .PreviousNext(false)
                                            )
                                             .Scrollable(scrollable => scrollable.Virtual(true))
                                            .Sortable(false)
                                            .NoRecords(x => x.Template("<div class='empty-grid'></div>"))
                                            .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .Model(model => model.Id(p => p.FileId))
                                                    .Read(read => read.Action("UploadedFiles_Read", "UpcomingProjects", new { wellId = Model.WellId, category = "Drill Programs" }))
                                            )
                                    )
                                </p>
                            </details>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <details>
                                <summary>Mud Programs</summary>
                                <p>
                                    @(Html.Kendo().Grid<WellAI.Advisor.Model.OperatingCompany.Models.UploadsGridFileModel>()
                                            .Name("mudprog")
                                            .HtmlAttributes(new { @class = "ra-section" })
                                            .Columns(columns =>
                                            {
                                                columns.Bound(p => p.FileName).Width(60).Title("Program").ClientTemplate("<a href='" + @Url.Action("Download", "Upload", new { fileId = "#=FileId#" }) + "' class='linkstyle'>#=FileName#</a>");
                                                columns.Bound(p => p.Date).Format("{0: MM/dd/yyyy}").Width(40);
                                            })
                                             .Pageable(p =>
                                                p.Info(true)
                                                 .Numeric(false)
                                                 .PreviousNext(false)
                                            )
                                             .Scrollable(scrollable => scrollable.Virtual(true))
                                            .Sortable(false)
                                            .NoRecords(x => x.Template("<div class='empty-grid'></div>"))
                                            .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .Model(model => model.Id(p => p.FileId))
                                                    .Read(read => read.Action("UploadedFiles_Read", "UpcomingProjects", new { wellId = Model.WellId, category = "Mud Programs" }))
                                            )
                                    )
                                </p>
                            </details>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <details>
                                <summary>Cement Programs</summary>
                                <p>
                                    @(Html.Kendo().Grid<WellAI.Advisor.Model.OperatingCompany.Models.UploadsGridFileModel>()
                                            .Name("cemprog")
                                            .HtmlAttributes(new { @class = "ra-section" })
                                            .Columns(columns =>
                                            {
                                                columns.Bound(p => p.FileName).Width(60).Title("Program").ClientTemplate("<a href='" + @Url.Action("Download", "Upload", new { fileId = "#=FileId#" }) + "' class='linkstyle'>#=FileName#</a>");
                                                columns.Bound(p => p.Date).Format("{0: MM/dd/yyyy}").Width(40);
                                            })
                                             .Pageable(p =>
                                                p.Info(true)
                                                 .Numeric(false)
                                                 .PreviousNext(false)
                                             )
                                             .Scrollable(scrollable => scrollable.Virtual(true))
                                            .Sortable(false)
                                            .NoRecords(x => x.Template("<div class='empty-grid'></div>"))
                                            .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .Model(model => model.Id(p => p.FileId))
                                                    .Read(read => read.Action("UploadedFiles_Read", "UpcomingProjects", new { wellId = Model.WellId, category = "Cement Programs" }))
                                            )
                                    )
                                </p>
                            </details>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <details>
                                <summary>Drill Permits</summary>
                                <p>
                                    @(Html.Kendo().Grid<WellAI.Advisor.Model.OperatingCompany.Models.UploadsGridFileModel>()
                                            .Name("drillperm")
                                            .HtmlAttributes(new { @class = "ra-section" })
                                            .Columns(columns =>
                                            {
                                                columns.Bound(p => p.FileName).Title("Permit").Width(60).ClientTemplate("<a href='" + @Url.Action("Download", "Upload", new { fileId = "#=FileId#" }) + "' class='linkstyle'>#=FileName#</a>");
                                                columns.Bound(p => p.Date).Format("{0: MM/dd/yyyy}").Width(40);
                                            })
                                             .Pageable(p =>
                                                p.Info(true)
                                                 .Numeric(false)
                                                 .PreviousNext(false)
                                            )
                                             .Scrollable(scrollable => scrollable.Virtual(true))
                                            .Sortable(false)
                                            .NoRecords(x => x.Template("<div class='empty-grid'></div>"))
                                            .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .Model(model => model.Id(p => p.FileId))
                                                    .Read(read => read.Action("UploadedFiles_Read", "UpcomingProjects", new { wellId = Model.WellId, category = "Drill Permits" }))
                                            )
                                    )
                                </p>
                            </details>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            @(Html.Kendo().Grid<WellAI.Advisor.Model.ServiceCompany.Models.AuctionProposalAttachmentViewModel>()
                                .Name("auctionsFile")
                                .HtmlAttributes(new { @class = "ra-section" })
                                .Columns(columns =>
                                {
                                    columns.Bound(p => p.FileName).Filterable(false).Width(70);
                                    columns.Bound(p => p.AttachmentId).Title("Action").ClientTemplate("#if (FileName.split('.').reverse()[0] == 'pdf' ){#" +
                                       "#if (TableName != 'AU') { #" +
                                        "<a href='" + @Url.Action("Download", "UpcomingProjects", new { AttachmentId = "#=AttachmentId#" }) + "' class='linkstyle'><i class='fa fa-download' style='font-size:20px;padding:3px;'></i></a>" +
                                        "#}else{#" +
                                        "<a href='" + @Url.Action("Download", "ProjectAuctions", new { AttachmentId = "#=AttachmentId#" }) + "' class='linkstyle'><i class='fa fa-download' style='font-size:20px;padding:3px;'></i></a>" +
                                        "#}#" +
                                        "<a href='javaScript:void(0)' onclick='ViewPdfInPdfViewer(\"#=AttachmentId#\",\"#=FileName#\")' class='linkstyle'><i class='fa fa-file-pdf-o' style='font-size:20px;font-weight:bold;'></i></ a>" +
                                        "#}else{#" +
                                        "#if (TableName != 'AU') { #" +
                                        "<a href='" + @Url.Action("Download", "UpcomingProjects", new { AttachmentId = "#=AttachmentId#" }) + "' class='linkstyle'><i class='fa fa-download' style='font-size:20px;padding:3px;'></i></a>" +
                                        "#}else{#" +
                                        "<a href='" + @Url.Action("Download", "ProjectAuctions", new { AttachmentId = "#=AttachmentId#" }) + "' class='linkstyle'><i class='fa fa-download' style='font-size:20px;padding:3px;'></i></a>" +
                                        "#}#" +
                                         "#} #"
                                        ).Width(30);                                   
                                })
                                 .Pageable(p =>
                                                p.Info(true)
                                                 .Numeric(false)
                                                 .PreviousNext(false)
                                            )
                                .Scrollable(scrollable => scrollable.Virtual(true))
                                .ToolBar(toolbar => toolbar.Create().Text("Attach Documents"))
                                .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AttachDocuments").Window(w => w.Title("Edit User Details").Width(700)))
                                .DataSource(dataSource => dataSource.Ajax()
                                        .Model(model => model.Id(p => p.AttachmentId))
                                        .Read(read => read.Action("GetProjectProposalAttachments", "UpcomingProjects", new { proposalId=Model.ProposalId, projectId=Model.ProjectId}))
                                        .Create(update => update.Action("AddMoreAttachment_Create", "UpcomingProjects"))
                                        .PageSize(5)
                                ).Events(e =>
                                {
                                    e.Edit("RenameWindowAttachment");
                                    e.DataBound("DataBoundAttach");
                                }))
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-sm-6 auction-bottom">
                    @(Html.Kendo().Grid<WellAI.Advisor.Model.ServiceCompany.Models.TechnicianViewModel>()
                .Name("technician")
                .HtmlAttributes(new { @class = "ra-section" })
                .Columns(columns =>
                {
                    columns.Bound(p => p.TechName).Filterable(false).Title("Name");
                    columns.Bound(p => p.Id).Filterable(false).Title("#").Hidden(true);
                    columns.Bound(p => p.ProjectId).Filterable(false).Title("ProjectId").Hidden(true);
                    columns.Bound(p => p.TechMobile).Filterable(false).Hidden(true);
                    columns.Bound(p => p.TechUserId).Filterable(false).Hidden(true);
                    columns.Bound(p => p.TechAssignEndDate).Filterable(false).Hidden(true);
                    columns.Bound(p => p.Notes).Filterable(false).Hidden(true);
                    columns.Bound(p => p.TechWorkingStatus).Filterable(false).Title("Status");
                    columns.Bound(p => p.TechAssignStartDate).Filterable(false).Title("Assign Date").Format("{0:MM/dd/yyyy HH:mm}");
                    columns.Command(command =>
                    {
                        command.Custom("Details").Click("showDetails");
                        command.Custom("Tracker").Click("showTracker");
                    }).Title("Action");
                })
                 .Pageable(p =>
                        p.Info(true)
                         .Numeric(false)
                         .PreviousNext(false)
                    )
                 .Scrollable(scrollable => scrollable.Virtual(true))
                .Scrollable(s => s.Enabled(false))
                .DataSource(dataSource => dataSource.Ajax()
                        .Model(model => model.Id(p => p.Id))
                        .Read(read => read.Action("GetAssignedTechnicianByProjectId", "UpcomingProjects").Data("onBidsGridRead"))
                        .PageSize(5)
                ).Events(e =>
        {
            e.Edit("RenameWindow");
            e.DataBound("DataBound");
        }))
                </div>
                <div class="col-sm-6 auction-bottom">
                    @(Html.Kendo().Grid<WellAI.Advisor.Model.OperatingCompany.Models.ProjectNote>()
                            .Name("notes")
                            .HtmlAttributes(new { @class = "ra-section" })
                            .Columns(columns =>
                            {
                                columns.Bound(p => p.Title).Hidden(true);
                                columns.Bound(p => p.Author).Width(50);
                                columns.Bound(p => p.Created).Format("{0: MM/dd/yyyy}").Width(30);
                                columns.Command(command =>
                                {
                                    command.Custom("NoteDetails").Text("Details").Click("showNoteDetails");
                                }).Title("Action").Width(20);
                            })
                            .ToolBar(toolbar => toolbar.Create().Text("Add new Note"))
                             .Pageable(p =>
                                p.Info(true)
                                 .Numeric(false)
                                 .PreviousNext(false)
                                )
                             .Scrollable(scrollable => scrollable.Virtual(true))
                            .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AddNote").Window(w => w.Title("Add new Note").Width(500)))
                            .DataSource(dataSource => dataSource.Ajax()
                                    .Model(model => model.Id(p => p.ID))
                                    .Create(update => update.Action("ProjectNotes_Create", "UpcomingProjects").Data("onBidsGridRead"))
                                    .Read(read => read.Action("ProjectNotes_Read", "UpcomingProjects").Data("onBidsGridRead"))
                                    .PageSize(5)
                            ).Events(e =>
                    {
                        e.DataBound("NoteDataBound");
                    }))
                </div>
            </div>
            <hr />
        }
    </section>
</section>
@(Html.Kendo().Window().Name("Details")
    .Title("Technician Details")
    .Visible(false)
    .Modal(true)
    .Draggable(true)
    .Width(500)
)
@(Html.Kendo().Window().Name("NoteDetails")
    .Title("Note Details")
    .Visible(false)
    .Modal(true)
    .Draggable(true)
    .Width(400)
)
@(Html.Kendo().Window().Name("PdfFileViewer")
    .Title("Document")
    .Visible(false)
    .Modal(true)
	 .Content(@<text>
                <div id="PdfFile"> </div> </text>)
    .Actions(actions => actions
        .Close()
    )
    .Height(850)
    .Width(1400)
    .Draggable(true)
)

<script type="text/javascript">
    function openCheckList() {
        var url = '@Url.Action("EnsureAndGetWellCheckList", "CheckList", new { id = Model.WellId })';
        window.location.href = url;
    }
</script>
<script type="text/x-kendo-template" id="templateUser">
    <div id="details-container">
        <p>Technician Name  : #= TechName !=null ? TechName : '' #</p>
        <p>Mobile     : #= TechMobile !=null ? TechMobile : '' #</p>
        <p>Assign Date      : #= TechAssignStartDate !=null ? kendo.toString(TechAssignStartDate, 'MM/dd/yyyy') : '' #</p>
        <p>End Date      : #= TechAssignEndDate !=null ? kendo.toString(TechAssignEndDate, 'MM/dd/yyyy') : '' #</p>
        <p>Notes: #= Notes != null ? Notes : '' #</p>
    </div>
</script>
<script type="text/x-kendo-template" id="templateNote">
    <style>
        .created{
            text-align:right;
        }
    </style>
    <div id="notedetails-container">
        <div class="row">
            <div class="col-sm-12">#= Body #</div>
        </div>
    </div>
    <footer>
        <div class="row">
            <div class="col-sm-6">Author : #= Author #</div><div class="col-sm-6 created">#= Created !=null ? kendo.toString(Created, 'MM/dd/yyyy') : '' #</div>
        </div>
    </footer>
</script>
<script>
    var detailsTemplate = kendo.template($("#templateUser").html());
    var detailsNoteTemplate = kendo.template($("#templateNote").html());
    var dataItem = '';
    $(document).ready(function () {
            $('#technician').data('kendoGrid').dataSource.read().then(function () {
                $('#technician').data('kendoGrid').refresh();
            });
        if (@Model.ProjectStatus== 2) {
            $('[class="k-header k-grid-toolbar"]').addClass("hideButtom").css("pointer-events", "none");
            $('[class="k-button k-button-icontext k-grid-Delete"]').addClass("hideButtom").css("pointer-events", "none");
        }
        var editor = $("#descripteditor").data("kendoEditor");
        editorBody = $(editor.body);
        editorBody.removeAttr("contenteditable").find("a").on("click.readonly", false);
    });
    function showTracker(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var tId = dataItem.Id;
        var projectId = $("#ProjectId").val();
        window.location.href = "/TechnicianTracker/Project?id=" + projectId + "&tId=" + tId;
    }

    function ViewPdfInPdfViewer(MsaId,FileName) {
        var wnd = $("#PdfFileViewer").data("kendoWindow");
        wnd.title(FileName);
        wnd.center().open();
        var TenId = "";
        $("#PdfFile").empty();
        $("#PdfFile").kendoPDFViewer({
            dplProcessing: {
                read: {
                    url: "/UpcomingProjects/GetPdfFile?fileId=" + MsaId + "&TenId=" + TenId,
                },
            },
            toolbar: {
                items: [
                    "pager", "spacer"
                ]
            }
        });
    }


    function showDetails(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var wnd = $("#Details").data("kendoWindow");
        wnd.content(detailsTemplate(dataItem));
        wnd.center().open();
    }
    function showNoteDetails(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var wnd = $("#NoteDetails").data("kendoWindow");
        var winTitle = dataItem.Title + " Details";
        wnd.content(detailsNoteTemplate(dataItem));
        wnd.title(winTitle).center().open();
    }
    function DataBoundAttach(e) {
        $(".k-grid-Download").empty().append("<i class='fa fa-download'></i>");
    }
    function displayLoading(target, bool) {
        var element = $(target);
        kendo.ui.progress(element, bool);
    }
    function onCancel(e) {
    }
    function DataBound(e) {
        if (@Model.ProjectStatus!== 2) {
            $(".k-grid-Delete").empty().append("<i class='fa fa-times'></i>");
        } else {
            $(".k-grid-Delete").remove();
        }
        $(".k-grid-Details").empty().append("<i class='fa fa-address-card'></i>");
        $(".k-grid-Tracker").empty().append("<i class='fa fa-map-marker'></i>");
    }
    function NoteDataBound(e) {
        $(".k-grid-NoteDetails").empty().append("<i class='fa fa-address-card'></i>");
    }
    function templateFunction(item) {
        if (item.TechWorkingStatus == 1) {
            return "<span class='text-warning'>" + item.TechWorkingStatus + "</span>";
        } else {
            return "<span class='text-success'>" + item.TechWorkingStatus + "</span>";
        }
    }
    function RenameWindow(e) {
        counterTech = 1;
            if (e.model.isNew()) {
                e.container.data("kendoWindow").title("Add Technician");
            $('[class="setProjectId"]').val('@Model.ProjectId').trigger("change");
            }
    }
    function RenameWindowAttachment(e) {
        if (e.model.isNew()) {
            e.container.data("kendoWindow").title("Upload Attachment");
            e.container.find('.k-edit-buttons').empty();
                e.container.find('.k-edit-buttons').addClass("hideButtom").css("pointer-events", "none");
                $('[class="setProjectId"]').val('@Model.ProjectId').trigger("change");
                $('#ProposalId').val('@Model.ProposalId').trigger("change");
                $('#ProjectCode').val('@Model.ProjectCode').trigger("change");
            }
        }
    function onBidsGridRead(e) {
        return {
            projectId: '@Model.ProjectId'
        };
    }
    function downloadFile(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var id = dataItem.AttachmentId;
        var table = dataItem.TableName;
        if (table === 'AU') {
            window.location = '/ProjectAuctions/Download?AttachmentId=' + id;
        }
        else {
            window.location = '/UpcomingProjects/Download?AttachmentId=' + id;
        }
    }
    function onbtnCancelClick() {
        $(this).closest("#Details").data("Details").close();
    }
    function onClick() {
    }
    function uploadprojectFile() {
        var form = $("#data");
        var formData = new FormData(form[0]);
        displayLoading('[class="k-widget k-window"]', true);
        $.ajax({
            url: "/UpcomingProjects/AddMoreAttachment_Create",
            type: 'POST',
            data: formData,
            success: function (data) {
                    var grid = $("#auctionsFile").data("kendoGrid");
                    grid.dataSource.read();
                    displayLoading('[class="k-widget k-window"]', false);
            },
            error: function () {
                displayLoading('[class="k-widget k-window"]', false);
            },
            cache: false,
            contentType: false,
            processData: false
        });
        var fileNotSelected = false;
        var validator = $("#data").kendoValidator({
            rules: {
                upload: function (input) {
                    if (input[0].type == "file") {
                        fileNotSelected = true;
                        var len = input.closest(".k-upload").find(".k-file").length;
                        return len > 0;
                    }
                    return true;
                }
            }
        }).data("kendoValidator");
       $("#files").removeAttr("disabled");
        if (!validator.validate()) {
            if (fileNotSelected) {
                alert('please select a file');
                fileNotSelected = false;
                return false;
            }
        }
    }
</script>
