@{
    ViewData["Title"] = "Dispatch";

}

@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

<head>
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
    <script src="~/js/OperatingCompany/dispatchroute.js"></script>
</head>
<section class="content-header">
    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #Dispatch {
            height: 100%;
        }

        #outerWrapper {
            overflow: hidden;
        }

        .k-numerictextbox {
            width: 17.4em;
        }

        .map_box_container {
            /* position: relative;*/
            height: 100% !important;
            width: 100% !important;
        }

        #map {
            /* position: absolute;*/
            /*top: -35px;*/
            top: 0px;
            bottom: 0;
            width: 100%;
            /*transition: all 0.3s;*/
            display: inline-block;
            overflow: hidden;
            height: fit-content;
        }

        .mapboxgl-canvas {
            /* top: 50px;*/
        }

        .button {
            color: #fff;
            background-color: #555;
            padding: 1em;
            margin: 1em;
            position: absolute;
            right: 1em;
            top: 1em;
            border-radius: 0.5em;
            border-bottom: 2px #222 solid;
            cursor: pointer;
        }

        #resizeMap {
            top: 5em;
        }

        .mapboxgl-ctrl-top-right {
            /* top: 50px;*/
        }

        /* .map_box_container {
            position: absolute;
            height: 100% !important;
            width: 100% !important;
        }*/

        .marker {
            background-image: url('/img/mapbox-icon.png');
            background-size: cover;
            width: 20px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
        }
        .markerstart {
            background-image: url('/img/mapicon-start.png');
            background-size: cover;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
        }
        .mapboxgl-popup {
            max-width: 200px;
        }

        .mapboxgl-popup-content {
            text-align: center;
            font-family: 'Open Sans', sans-serif;
            color: black;
        }

        .mapboxgl-map {
            position: relative;
            border: 4px solid #007BFF;
            border-radius: 10px;
            width: 100%;
        }

        .k-dropdown .k-dropdown-wrap, .k-dropdowntree .k-dropdown-wrap {
            background-color: white !important;
            color: black !important;
        }

        .k-edit-label {
            margin-left: 15px !important;
            margin-top: 5px !important;
        }

        .operatorfilter {
            display: inline-block;
            position: absolute;
            right: 0;
        }

            .operatorfilter .k-dropdown {
                display: block;
            }

                .operatorfilter .k-dropdown .k-dropdown-wrap .k-input {
                    background-color: #fff;
                    color: #000;
                }

        .k-dropdown {
            border: 2px solid blue !important;
        }

        @@media (max-width: 570px) {
            .card-header {
                height: auto !important;
            }

            .chart-header, .operatorfilter {
                position: inherit !important;
                display: block !important;
                width: auto !important;
            }
        }

        .k-grid-header .k-header > .k-link {
            text-transform: uppercase;
            font-weight: 900 !important;
            font-size: 12px !important;
        }

        .k-edit-buttons {
            border-style: none;
        }

        .k-grid .k-grid-add:hover {
            color: #fff !important;
        }

        .k-link k-state-selected {
            padding-top: 17px !important;
        }

        .k-pager-numbers {
            padding-top: 17px !important;
        }

        .k-grid .k-grid-add, .k-grid .k-grid-add:hover {
            color: #000 !important;
            background-color: #fff !important;
            border: 0;
        }

        .k-window-content #sidebar .k-edit-label {
            margin-left: -50px;
        }

        .k-window-content .k-edit-form-container {
            width: inherit;
        }

        .k-grid-Details, .k-grid-Details:hover, .k-grid-Delete, .k-grid-Delete:hover {
            background-color: #fff;
        }

        .k-grid-edit, .k-grid-Delete, .k-grid-Details {
            border: 1px solid #007BFF;
            border-radius: 10px;
        }

        .k-window-titlebar {
            background-color: #007BFF;
            color: white;
        }

        .customEdit {
            margin-left: 10px;
        }

        #Dispatch {
            height: 100%;
        }

        html {
            overflow: hidden;
        }

        .rightpart {
            /* display: inline-block;*/
            min-height: 100% !important;
            margin-left: 5px;
            top: 0px;
        }

        .k-grid-header .k-header > .k-link {
            text-transform: uppercase;
            font-weight: 900 !important;
            font-size: 12px !important;
        }

        .k-pager-wrap.k-pager-lg .k-pager-numbers li:not(.k-current-page), .k-pager-wrap.k-pager-md .k-pager-numbers li:not(.k-current-page), .k-pager-wrap.k-pager-sm .k-pager-numbers li:not(.k-current-page) {
            display: block !important;
        }

        .k-pager-wrap.k-pager-lg .k-pager-nav + .k-pager-numbers-wrap, .k-pager-wrap.k-pager-md .k-pager-nav + .k-pager-numbers-wrap, .k-pager-wrap.k-pager-sm .k-pager-nav + .k-pager-numbers-wrap {
            width: unset !important;
            height: calc(1*(2px + 0.75rem + 1.5em));
            box-sizing: border-box;
            border-color: inherit;
            margin: 0 0.375rem;
        }

        .k-pager-wrap.k-pager-lg .k-pager-numbers .k-link,
        .k-pager-wrap.k-pager-lg .k-pager-numbers .k-state-selected, .k-pager-wrap.k-pager-md .k-pager-numbers .k-link,
        .k-pager-wrap.k-pager-md .k-pager-numbers .k-state-selected, .k-pager-wrap.k-pager-sm .k-pager-numbers .k-link,
        .k-pager-wrap.k-pager-sm .k-pager-numbers .k-state-selected {
            margin: 0;
            border-width: 0;
            width: unset !important;
            height: unset !important;
        }

        .k-pager-numbers {
            display: contents !important;
        }

        div.k-loading-mask {
            z-index: 3;
        }

        .chathisttitle {
            color: #ffffff;
        }

        .leftpart {
            width: 38%;
            display: inline-block;
            vertical-align: top;
        }

        .rightpart {
            width: 61%;
            display: inline-block;
        }

        .content {
        }

        .k-pager-numbers {
            padding-top: 11px;
        }

        .km-widget {
            border: 4px solid #007BFF;
            border-radius: 10px;
        }

        .k-pos-left {
            right: 0;
            left: unset;
        }

        .k-pos-top {
            top: unset;
            bottom: 10px;
        }

        .k-window div.k-window-content {
            overflow: hidden;
        }
        .truckcolor {
            color: indianred;
        }
    </style>
</section>
<section class="content">
    <div class="leftpart">
        <div style="padding-bottom:10px">
            <div class="col-md-6" style="padding-left:0px !important;display: inline-block;">
                <button class="btn btn-primary" id="btnUsersLocation" onclick="LoadUserRoutes()"><i class='fa fa-map-marker'></i>  Users Location </button>
            </div>
            
            <input type="hidden" id="hdnCurrentUser" />
            <input type="hidden" id="hdnDispatchNotes" />
            <input type="hidden" id="hdnDispatchId" />
        </div>
        <div>
            @(Html.Kendo().Grid<WellAI.Advisor.Model.ServiceCompany.Models.DispatchRoutesModel>()
            .Name("Dispatch")
            .HtmlAttributes(new { @class = "ra-section" })
            .Columns(columns =>
            {
                columns.Bound(p => p.username).Title("User").Hidden().ClientGroupHeaderTemplate("<label class='customMap' for='user'>User : #= value # </label>");
                columns.Bound(p => p.rigname).Title("Rig").ClientTemplate("#= rigname # #= wellname # #= locationname #").Title("Location");
                columns.Bound(p => p.dispatchid).Hidden(true);
                columns.Bound(p => p.dispatchnotes).Hidden(true);
                columns.Bound(p => p.userid).Hidden(true);
                columns.Bound(p => p.customer).Title("Customer").Hidden(true);
            })
            .Pageable(p =>
                        p.Info(true)
                         .Numeric(false)
                         .PreviousNext(false)
                    )
            .Scrollable(scrollable => scrollable.Virtual(true))
            .Sortable()
            .Filterable()
            .Reorderable(r => r.Columns(true))
            .Resizable(r => r.Columns(true))
            .DataSource(dataSource => dataSource
                    .Ajax()
                    .Read(read => read.Action("GetDispatchList", "Dispatch"))
                    .PageSize(20)
                    .Model(model => model.Id(p => p.dispatchid))
            .Group(x =>
            {
                x.Add(y => y.username);
            }).Sort(x => { x.Add("userName").Ascending(); x.Add("routeOrder").Ascending(); })
            ).Events(e =>
            {
                e.DataBound("onDataBound");
            })
            )
        </div>

    </div>
    <div class="rightpart">
        <div class="col-md-4 float-right ml-0 mapicons" style="z-index: 99; position: relative; top: 4rem;right:30px">
            <button class="btn float-right" id="btnTruck" onclick="LoadAllUserPaths()"><i class="fa fa-truck fa-2x"></i></button>
            <button class="btn float-right" id="btnLocation" onclick="LoadUserLocation()"><i class="fa fa-map-marker fa-2x"></i></button>
        </div>
        <div id="menu">
            <input id="satellite-v9" type="radio" name="rtoggle" value="satellite">
            <!-- See a list of Mapbox-hosted public styles at -->
            <!-- https://docs.mapbox.com/api/maps/styles/#mapbox-styles -->
            <label for="satellite-v9">Satellite</label>
            <input id="streets-v11" type="radio" name="rtoggle" value="streets" checked="checked">
            <label for="streets-v11">Streets</label>
        </div>
        <div id='map'></div>        
    </div>
    @*<div id="dialog"></div>*@

</section>

<script>

    function userInfo() {
        return {
            user: $("#hdnCurrentUser").val()
        }
    }
    var gridElement = $("#Dispatch");



    //function resize() {
    //    var gridElement = $("#Dispatch"),
    //        dataArea = gridElement.find(".k-grid-content"),
    //        gridHeight = gridElement.innerHeight(),
    //        otherElements = gridElement.children().not(".k-grid-content"),
    //        otherElementsHeight = 0;
    //    //$("#Dispatch").height(parseInt($(window).height()) - 200);
    //    //dataArea.height(parseInt($(window).height()) - 300)
    //    $("#Dispatch").height(parseInt($(window).height()) - 185);
    //    dataArea.height(parseInt($(window).height()) - 280);

    //}


    //function resizeWrapper() {
    //    //$("#outerWrapper").height("700 px");
    //}

    //$(window).resize(function () {
    //    //resizeWrapper();

    //    resizeGrid();

    //});

    $(document).ready(function () {
        $(window).resize(function () {
            resizeGrid();
        });
        //resizeWrapper();
        resizeGrid();
    });

    window.addEventListener('resize', function (event) {
        var newWidth = window.innerWidth;
        var newHeight = window.innerHeight;
    });

</script>

<script>
    //public - pk.eyJ1Ijoia2FydGhpa3RoYW5nYXZlbCIsImEiOiJjbDFkZHk5MjYwZ21lM2NwMm9tcTVueGMyIn0.jufh1E3v_JpXizuN7Rfudg
    //Well AI - pk.eyJ1Ijoid2VsbC1haSIsImEiOiJjbDFxZ25yMnIwN3c3M2JzNml1dWdpMmR0In0.l-lDzOnU03tFScjiMkRObg
    mapboxgl.accessToken = 'pk.eyJ1Ijoid2VsbC1haSIsImEiOiJjbDFxZ25yMnIwN3c3M2JzNml1dWdpMmR0In0.l-lDzOnU03tFScjiMkRObg';
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',//'mapbox://styles/karthikthangavel/cl1dlz8mi001m15tdhtkx558w',
        center: [-102.36896137371849, 31.846556737999546],
        zoom: 8
    });

    $.when(map.on('load', () => {
        debugger;
            map.addSource('route', {
                'type': 'geojson',
                'data': {
                    'type': 'Feature',
                    'properties': {},
                    'geometry': {
                        'type': 'LineString',
                        'coordinates': [
                        ]
                    }
                }
            });
        if (map.getLayer('route')) {
            map.addLayer({
                'id': 'route',
                'type': 'line',
                'source': 'route',
                'layout': {
                    'line-join': 'round',
                    'line-cap': 'round'
                },
                'paint': {
                    'line-color': '#888',
                    'line-width': 8
                }
            });
        }
        map.addControl(new mapboxgl.NavigationControl());
        map.resize();
    })
    ).then(function (data, textStatus, jqXHR) {
        //  LoadAllUserDestinations();
        //LoadUserRoutes();
        //$.when(loadroutes()).done(function (x) {
        //    $(".mapboxgl-map").height(parseInt($("#Dispatch").height()));
        //    $("#map").height(parseInt($("#Dispatch").height()));
        //});
    });
    map.on('idle', function () {
        map.resize()
    })

    function loadroutes() {
        var dataArea = gridElement.find(".k-grid-content");
        LoadUserRoutes();
        $("#Dispatch").height(parseInt($(window).height()) - 185);
        dataArea.height(parseInt($(window).height()) - 280);
    }

    const layerList = document.getElementById('menu');
    const inputs = layerList.getElementsByTagName('input');

    for (const input of inputs) {
        input.onclick = (layer) => {
            const layerId = layer.target.id;
            map.setStyle('mapbox://styles/mapbox/' + layerId);
        };
    }
</script>

