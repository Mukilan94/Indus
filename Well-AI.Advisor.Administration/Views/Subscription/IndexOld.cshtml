@{
    ViewData["Title"] = "Subscription";
}
<section class="content-header">
    <style>
        .k-edit-buttons {
            border-style: none;
        }

        .k-grid-AssignTask, .k-grid-AssignTask:hover {
            background-color: #ffff
        }

        .k-grid .k-grid-add:hover {
            color: #fff !important;
        }

        .k-window-content #sidebar .k-edit-label {
            margin-left: -50px;
        }

        .k-window-content .k-edit-form-container {
            width: inherit;
        }

        .k-grid-Details, .k-grid-Details:hover, .k-grid-Delete, .k-grid-Delete:hover {
            background-color: #fff;
        }

        .k-window-titlebar {
            background-color: #007BFF;
            color: white;
        }

        .k-widget.k-window {
        }

        span.k-dropdown-wrap.k-state-default, .k-dropdown, .k-dropdown:hover {
            color: #000000 !important;
            background-color: #ffff !important;
            width: 100%;
        }

        .row {
            padding-top: 3px;
        }
    </style>
</section>
<section class="content">
    <div class="row">
        <div class="col-md-6"><strong>Subscription</strong></div>
    </div>
    <div class="auction-bottom">
        @(Html.Kendo().Grid<WellAI.Advisor.Model.Administration.SubscriptionViewModel>()
            .Name("SubscriptionGrid")
            .Columns(columns =>
            {
                columns.Bound(p => p.Name);
                columns.Bound(p => p.Price);
                columns.Bound(p => p.Description);
                columns.Bound(p => p.Id).Hidden();
                columns.Command(command =>
                {
                     command.Edit();
                }).Title("Action");
            })
            .ToolBar(toolbar => toolbar.Create().Text("Add"))
            .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("EditSubscription").Window(w => w.Title("Edit Subscription").Width(500)))
            .Pageable()
            .Sortable()
            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("Subscription_Read", "Subscription"))
                .Model(model => model.Id(p => p.Id))
                .Create(update => update.Action("Subscription_Create", "Subscription"))
                .Update(update => update.Action("Subscription_Update", "Subscription"))
                .Events(events => events.Error("error"))
            ).Events(e =>
                {
                    e.Edit("gridEdit");
                    e.DataBound("DataBound");
                }))
    </div>
</section>

<script>
    function gridEdit(e) {
        if (e.model.isNew()) {
            e.container.data("kendoWindow").title("Add Subscription");
            $('.k-grid-update').text("Save"); $("#IsActive").prop('checked', true).trigger("change");

        }
    }

    function DataBound(e) {
        var grid = this;

        grid.tbody.find("tr[role='row']").each(function () {
            var model = grid.dataItem(this);
        });
    }
    function error(args) {
        if (args.errors) {
            var grid = $("#SubscriptionGrid").data("kendoGrid");
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var messages = this.errors[0];
                    $('.errors').text(messages);
                    $('.errors').addClass("alert alert-danger");
                });
            });
        }
    }



</script>

